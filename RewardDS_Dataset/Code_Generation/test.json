{"seq_id": 41261210007, "instruction": "Write a python function to find the index of a target value in a sorted list of integers. If the target is not found in the list, return the index where it would be if it were inserted in order.", "output": "Here is the code to solve this problem: \n```python\ndef search_insert(nums, target):\n    if len(nums) == 0:\n        return 0\n    left = 0 \n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n```", "code": "def search_insert(nums, target):\n    if len(nums) == 0:\n        return 0\n    left = 0 \n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left", "entry_point": "search_insert", "testcase": ["assert search_insert([1,3,5,6], 5) == 2", "assert search_insert([1,3,5,6], 7) == 4", "assert search_insert([1,3,5,6], 2) == 1", "assert search_insert([1,3,5,6], 0) == 0"]}
{"seq_id": 16176146765, "instruction": "Write a python function to check whether a given number is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors. The smallest perfect number is 6, which is the sum of 1, 2, and 3.", "output": "Here is the code to solve this problem: \n```python\ndef check_perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n```", "code": "def check_perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return \"Yes\"\n    else:\n        return \"No\"", "entry_point": "check_perfect_number", "testcase": ["assert check_perfect_number(28) == \"Yes\"", "assert check_perfect_number(496) == \"Yes\"", "assert check_perfect_number(6) == \"Yes\"", "assert check_perfect_number(33) == \"No\"", "assert check_perfect_number(12) == \"No\""]}
{"seq_id": 69904315062, "instruction": "Write a python function to convert a list of strings representing numbers into an integer.", "output": "Here is the code to solve this problem: \n```python\ndef convert_strings_to_int(s):\n    nums = {\n        'zero':'0',\n        'one':'1',\n        'two':'2',\n        'three':'3',\n        'four':'4',\n        'five':'5',\n        'six':'6',\n        'seven':'7',\n        'eight':'8',\n        'nine':'9'\n    }\n    \n    ints = list(map(str, range(0,10)))\n    res = ''\n    word = ''\n    for char in s.split():\n        if char in nums:\n            res += nums[char]\n    \n    return int(res)\n```", "code": "def convert_strings_to_int(s):\n    nums = {\n        'zero':'0',\n        'one':'1',\n        'two':'2',\n        'three':'3',\n        'four':'4',\n        'five':'5',\n        'six':'6',\n        'seven':'7',\n        'eight':'8',\n        'nine':'9'\n    }\n    \n    ints = list(map(str, range(0,10)))\n    res = ''\n    word = ''\n    for char in s.split():\n        if char in nums:\n            res += nums[char]\n    \n    return int(res)", "entry_point": "convert_strings_to_int", "testcase": ["assert convert_strings_to_int(\"one three two\") == 132", "assert convert_strings_to_int(\"four six five\") == 465", "assert convert_strings_to_int(\"nine eight seven\") == 987"]}
{"seq_id": 8935666269, "instruction": "Write a python function to find the smallest difference in number of islands in a power grid after cutting a single connection.\n\nWe have a power grid represented by n towers and wires connecting them. The towers are numbered from 1 to n. Some of the towers may be connected through wires. Our goal is to cut one wire and determine the smallest possible difference between the number of towers in the larger and smaller subgrid.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef smallest_island_difference(n, wires):\n    min_value = n\n    for wire in wires:\n        A = deque()\n        B = deque()\n        visited = [0] * (n+1)\n        visited[wire[0]] = 1\n        visited[wire[1]] = 2\n        A.append(wire[0])\n        B.append(wire[1])\n        while A:\n            a = A.popleft()\n            for k in wires:\n                if k != wire:\n                    if (a in k):\n                        for l in k:\n                            if l != a and visited[l] == 0:\n                                visited[l] = 1\n                                A.append(l)\n        while B:\n            b = B.popleft()\n            for k in wires:\n                if k != wire:\n                    if (b in k):\n                        for l in k:\n                            if l != b and visited[l] == 0:\n                                visited[l] = 2\n                                B.append(l)\n        if abs(visited.count(1)-visited.count(2)) < min_value:\n            min_value = abs(visited.count(1)-visited.count(2))\n            if min_value == 0:\n                break\n    return min_value\n```", "code": "from collections import deque\n\ndef smallest_island_difference(n, wires):\n    min_value = n\n    for wire in wires:\n        A = deque()\n        B = deque()\n        visited = [0] * (n+1)\n        visited[wire[0]] = 1\n        visited[wire[1]] = 2\n        A.append(wire[0])\n        B.append(wire[1])\n        while A:\n            a = A.popleft()\n            for k in wires:\n                if k != wire:\n                    if (a in k):\n                        for l in k:\n                            if l != a and visited[l] == 0:\n                                visited[l] = 1\n                                A.append(l)\n        while B:\n            b = B.popleft()\n            for k in wires:\n                if k != wire:\n                    if (b in k):\n                        for l in k:\n                            if l != b and visited[l] == 0:\n                                visited[l] = 2\n                                B.append(l)\n        if abs(visited.count(1)-visited.count(2)) < min_value:\n            min_value = abs(visited.count(1)-visited.count(2))\n            if min_value == 0:\n                break\n    return min_value", "entry_point": "smallest_island_difference", "testcase": ["assert smallest_island_difference(7, [[1,2],[2,7],[3,7],[3,4],[4,5],[6,7]])==1", "assert smallest_island_difference(4, [[1,2],[2,3],[3,4]])==0", "assert smallest_island_difference(9, [[1,2],[2,3],[3,4],[4,5],[4,6],[6,7],[7,8],[7,9]])==1"]}
{"seq_id": 11622368774, "instruction": "Write a function to find the first non-repeating character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef find_first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n```", "code": "def find_first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None", "entry_point": "find_first_non_repeating_char", "testcase": ["assert find_first_non_repeating_char(\"aabbccddeeffg\") == 'g'", "assert find_first_non_repeating_char(\"hello\") == 'h'", "assert find_first_non_repeating_char(\"aabbccddeeffgg\") == None"]}
{"seq_id": 36903365135, "instruction": "Write a python function that takes a binary string and returns the number of steps required to reduce it to one.", "output": "Here is the code to solve this problem: \n```python\ndef numSteps(s: str) -> int:\n    ans = 0\n    s = [i for i in reversed(s)]\n    i = 0\n    while i < len(s):\n        if i == len(s) - 1 and s[i] == '1':\n            return ans\n\n        if s[i] == '0':\n            ans += 1\n            i += 1\n        else:\n            ans += 1\n            j = i\n            while j < len(s) and s[j] == '1':\n                ans += 1\n                j += 1\n            if j < len(s):\n                s[j] = '1'\n            i = j\n\n    return ans\n```", "code": "def numSteps(s: str) -> int:\n    ans = 0\n    s = [i for i in reversed(s)]\n    i = 0\n    while i < len(s):\n        if i == len(s) - 1 and s[i] == '1':\n            return ans\n\n        if s[i] == '0':\n            ans += 1\n            i += 1\n        else:\n            ans += 1\n            j = i\n            while j < len(s) and s[j] == '1':\n                ans += 1\n                j += 1\n            if j < len(s):\n                s[j] = '1'\n            i = j\n\n    return ans", "entry_point": "numSteps", "testcase": ["assert numSteps(\"1\") == 0", "assert numSteps(\"10\") == 1", "assert numSteps(\"1101\") == 6"]}
{"seq_id": 32976969445, "instruction": "Write a function to count the number of pairs in a list that add up to a given sum.", "output": "Here is the code to solve this problem: \n```python\ndef count_pairs_with_sum(arr, target):\n    count = 0\n    freq = {}\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in freq:\n            count += freq[complement]\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    return count\n```", "code": "def count_pairs_with_sum(arr, target):\n    count = 0\n    freq = {}\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in freq:\n            count += freq[complement]\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    return count", "entry_point": "count_pairs_with_sum", "testcase": ["assert count_pairs_with_sum([1, 1, 1, 1], 2) == 6", "assert count_pairs_with_sum([1, 5, 7, -1, 5], 6) == 3", "assert count_pairs_with_sum([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 11) == 9"]}
{"seq_id": 73928530812, "instruction": "Write a Python function to check if a given string can be formed by the concatenation of two given strings in any order. The function should return True if the string can be formed, otherwise return False.", "output": "Here is the code to solve this problem: \n```python\ndef is_concat_possible(str1, str2, concat_str):\n    if str1 + str2 == concat_str or str2 + str1 == concat_str:\n        return True\n    else:\n        return False\n```", "code": "def is_concat_possible(str1, str2, concat_str):\n    if str1 + str2 == concat_str or str2 + str1 == concat_str:\n        return True\n    else:\n        return False", "entry_point": "is_concat_possible", "testcase": ["assert is_concat_possible(\"hello\", \"world\", \"helloplanetworld\") == False", "assert is_concat_possible(\"123\", \"abc\", \"123abc\") == True", "assert is_concat_possible(\"a\", \"b\", \"ba\") == True", "assert is_concat_possible(\"hello\", \"world\", \"helloworld\") == True", "assert is_concat_possible(\"hello\", \"world\", \"worldhello\") == True", "assert is_concat_possible(\"hello\", \"world\", \"planetworld\") == False", "assert is_concat_possible(\"hello\", \"world\", \"helloplanet\") == False", "assert is_concat_possible(\"xyz\", \"abc\", \"abcxyz\") == True"]}
{"seq_id": 70744620009, "instruction": "Write a function that takes in a string of parentheses and returns True if the parentheses are balanced and False if they are not. A string of parentheses is considered balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested.", "output": "Here is the code to solve this problem: \n```python\ndef is_balanced_parentheses(s):\n    stack = []\n    opening = [\"(\", \"[\", \"{\"]\n    closing = [\")\", \"]\", \"}\"]\n    length = len(s)\n    if length % 2 == 1:\n        return False\n    for i in range(length):\n        if s[i] in opening:\n            stack.append(s[i])\n        elif s[i] in closing:\n            if not stack:\n                return False\n            elif s[i] == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif s[i] == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            elif s[i] == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n```", "code": "def is_balanced_parentheses(s):\n    stack = []\n    opening = [\"(\", \"[\", \"{\"]\n    closing = [\")\", \"]\", \"}\"]\n    length = len(s)\n    if length % 2 == 1:\n        return False\n    for i in range(length):\n        if s[i] in opening:\n            stack.append(s[i])\n        elif s[i] in closing:\n            if not stack:\n                return False\n            elif s[i] == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif s[i] == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            elif s[i] == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            else:\n                return False\n    return not stack", "entry_point": "is_balanced_parentheses", "testcase": ["assert is_balanced_parentheses(\"()\") == True", "assert is_balanced_parentheses(\"([]{})\") == True", "assert is_balanced_parentheses(\"[([]])\") == False", "assert is_balanced_parentheses(\"([)]\") == False"]}
{"seq_id": 40618158650, "instruction": "Write a function to calculate the h-index for a given list of citations. The h-index is defined as the maximum value h such that the given author has published h papers that have each been cited at least h times.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_h_index(citations):\n    citations.sort()\n    h_index = 0\n    for i in range(len(citations)):\n        if citations[i] >= len(citations) - i:\n            h_index = len(citations) - i\n            break\n    return h_index\n```", "code": "def calculate_h_index(citations):\n    citations.sort()\n    h_index = 0\n    for i in range(len(citations)):\n        if citations[i] >= len(citations) - i:\n            h_index = len(citations) - i\n            break\n    return h_index", "entry_point": "calculate_h_index", "testcase": ["assert calculate_h_index([1, 3, 1]) == 1", "assert calculate_h_index([3, 0, 6, 1, 5]) == 3", "assert calculate_h_index([0, 1, 3, 5, 6]) == 3"]}
{"seq_id": 2599281070, "instruction": "Write a function to find the maximum number of overlapping intervals on any single point.", "output": "Here is the code to solve this problem: \n```python\ndef max_overlapping_intervals(intervals):\n    points = []\n    for start, end in intervals:\n        points.append((start, 1))\n        points.append((end, -1))\n    points.sort()\n    max_overlap, current_overlap = 0, 0\n    for _, delta in points:\n        current_overlap += delta\n        max_overlap = max(max_overlap, current_overlap)\n    return max_overlap\n```", "code": "def max_overlapping_intervals(intervals):\n    points = []\n    for start, end in intervals:\n        points.append((start, 1))\n        points.append((end, -1))\n    points.sort()\n    max_overlap, current_overlap = 0, 0\n    for _, delta in points:\n        current_overlap += delta\n        max_overlap = max(max_overlap, current_overlap)\n    return max_overlap", "entry_point": "max_overlapping_intervals", "testcase": ["assert max_overlapping_intervals([(1, 2), (2, 3), (3, 4), (1, 3)])==2", "assert max_overlapping_intervals([(1, 3), (2, 4), (2, 4), (3, 6)])==3", "assert max_overlapping_intervals([(1, 2), (7, 10), (3, 4)])==1"]}
{"seq_id": 586719490, "instruction": "Write a python function to find the Lowest Common Multiple (LCM) of two given numbers.", "output": "Here is the code to solve this problem: \n```python\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef find_LCM(num1, num2):\n    return num1 * num2 // gcd(num1, num2)\n```", "code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef find_LCM(num1, num2):\n    return num1 * num2 // gcd(num1, num2)", "entry_point": "find_LCM", "testcase": ["assert find_LCM(21, 6) == 42", "assert find_LCM(4, 6) == 12", "assert find_LCM(8, 12) == 24"]}
{"seq_id": 18203533758, "instruction": "Write a python function to find the number of ways to traverse a 2D grid from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef grid_traversal(m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n    return dp[m-1][n-1]\n```", "code": "def grid_traversal(m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n    return dp[m-1][n-1]", "entry_point": "grid_traversal", "testcase": ["assert grid_traversal(3, 2) == 3", "assert grid_traversal(2, 2) == 2", "assert grid_traversal(3, 3) == 6"]}
{"seq_id": 36094875741, "instruction": "Write a function to find the maximum score you can get by moving from the first element to the last element of an array. You can jump up to k steps at a time and the score is calculated by summing up the values of the elements you land on. However, you cannot land on the same element twice.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef max_score(nums, k):\n    n = len(nums)\n    window = deque([])\n    dp = [float('-inf')] * n\n    dp[0] = nums[0]\n    window.append(dp[0])\n    for p in range(1, n):\n        dp[p] = max(window) + nums[p]\n        if len(window) == k:\n            window.popleft()\n        window.append(dp[p])\n    \n    return dp[n-1]\n\n# Test cases\nassert max_score([1, 10, -1, 5, 1], 3) == 17\nassert max_score([1, -1, -2, 4, -7, 3], 2) == 7\nassert max_score([10, -5, -2, 4, 0, 3], 3) == 17\n```", "code": "from collections import deque\n\ndef max_score(nums, k):\n    n = len(nums)\n    window = deque([])\n    dp = [float('-inf')] * n\n    dp[0] = nums[0]\n    window.append(dp[0])\n    for p in range(1, n):\n        dp[p] = max(window) + nums[p]\n        if len(window) == k:\n            window.popleft()\n        window.append(dp[p])\n    \n    return dp[n-1]\n\n# Test cases\nassert max_score([1, 10, -1, 5, 1], 3) == 17\nassert max_score([1, -1, -2, 4, -7, 3], 2) == 7\nassert max_score([10, -5, -2, 4, 0, 3], 3) == 17", "entry_point": "max_score", "testcase": ["assert max_score([1, 10, -1, 5, 1], 3) == 17", "assert max_score([1, -1, -2, 4, -7, 3], 2) == 7", "assert max_score([10, -5, -2, 4, 0, 3], 3) == 17"]}
{"seq_id": 24073877767, "instruction": "Write a function to check if the given string is a valid URL.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n```", "code": "import re\n\ndef valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None", "entry_point": "valid_url", "testcase": ["assert valid_url(\"https://www.google.com\") == True", "assert valid_url(\"https://google\") == False", "assert valid_url(\"www.google.com\") == False", "assert valid_url(\"http://www.google.com\") == True"]}
{"seq_id": 22468262204, "instruction": "Write a function to find the largest sum of consecutive integers in an array.", "output": "Here is the code to solve this problem: \n```python\ndef largest_sum_consecutive_integers(nums):\n    if not nums:\n        return 0\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def largest_sum_consecutive_integers(nums):\n    if not nums:\n        return 0\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "largest_sum_consecutive_integers", "testcase": ["assert largest_sum_consecutive_integers([1,-2,3,10,-4,7,2,-5]) == 18", "assert largest_sum_consecutive_integers([-1,-2,-3,-4]) == -1", "assert largest_sum_consecutive_integers([1,2,3,4,5]) == 15"]}
{"seq_id": 8169698890, "instruction": "Write a python function to find the number of trailing zeros in the binary representation of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef count_Trailing_Zeros(n): \n    count = 0\n    while (n > 0 and n % 2 == 0): \n        count += 1\n        n = n // 2\n    return count\n```", "code": "def count_Trailing_Zeros(n): \n    count = 0\n    while (n > 0 and n % 2 == 0): \n        count += 1\n        n = n // 2\n    return count", "entry_point": "count_Trailing_Zeros", "testcase": ["assert count_Trailing_Zeros(32) == 5", "assert count_Trailing_Zeros(8) == 3", "assert count_Trailing_Zeros(18) == 1"]}
{"seq_id": 17870670921, "instruction": "Write a function `find_largest_palindrome` that takes a string as input and returns the largest palindrome substring found in the string. If there are multiple palindromes of the same length, return the first one encountered.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_palindrome(s: str) -> str:\n    if len(s) == 0:\n        return \"\"\n    max_length = 1\n    start = 0\n    for i in range(len(s)):\n        if i - max_length >= 1 and s[i - max_length - 1: i + 1] == s[i - max_length - 1: i + 1][::-1]:\n            start = i - max_length - 1\n            max_length += 2\n            continue\n        if i - max_length >= 0 and s[i - max_length: i + 1] == s[i - max_length: i + 1][::-1]:\n            start = i - max_length\n            max_length += 1\n    return s[start: start + max_length]\n```", "code": "def find_largest_palindrome(s: str) -> str:\n    if len(s) == 0:\n        return \"\"\n    max_length = 1\n    start = 0\n    for i in range(len(s)):\n        if i - max_length >= 1 and s[i - max_length - 1: i + 1] == s[i - max_length - 1: i + 1][::-1]:\n            start = i - max_length - 1\n            max_length += 2\n            continue\n        if i - max_length >= 0 and s[i - max_length: i + 1] == s[i - max_length: i + 1][::-1]:\n            start = i - max_length\n            max_length += 1\n    return s[start: start + max_length]", "entry_point": "find_largest_palindrome", "testcase": ["assert find_largest_palindrome(\"cbbd\") == \"bb\"", "assert find_largest_palindrome(\"babad\") == \"bab\"", "assert find_largest_palindrome(\"a\") == \"a\"", "assert find_largest_palindrome(\"ac\") == \"a\""]}
{"seq_id": 35516003769, "instruction": "Write a function to find the longest subsequence of equal elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef max_equal_subsequence(lst):\n    if not lst:\n        return []\n    max_subsequence = []\n    current_subsequence = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_subsequence.append(lst[i])\n        else:\n            if len(current_subsequence) > len(max_subsequence):\n                max_subsequence = current_subsequence\n            current_subsequence = [lst[i]]\n    if len(current_subsequence) > len(max_subsequence):\n        max_subsequence = current_subsequence\n    return max_subsequence\n```", "code": "def max_equal_subsequence(lst):\n    if not lst:\n        return []\n    max_subsequence = []\n    current_subsequence = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_subsequence.append(lst[i])\n        else:\n            if len(current_subsequence) > len(max_subsequence):\n                max_subsequence = current_subsequence\n            current_subsequence = [lst[i]]\n    if len(current_subsequence) > len(max_subsequence):\n        max_subsequence = current_subsequence\n    return max_subsequence", "entry_point": "max_equal_subsequence", "testcase": ["assert max_equal_subsequence(['a','a','a','b','c','c','c','c'])==['c','c','c','c']", "assert max_equal_subsequence([3,3,3,3,2,2,1])==[3,3,3,3]", "assert max_equal_subsequence([1,1,2,2,2,3,3])==[2,2,2]"]}
{"seq_id": 9267166349, "instruction": "Write a function to generate all possible permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef permutations(string):\n    if len(string) <= 1:\n        return set([string])\n\n    # Get all permutations of length N-1\n    perms = permutations(string[1:])\n    char = string[0]\n    result = set()\n\n    # Iterate over each permutation and insert the first character at every position\n    for perm in perms:\n        for i in range(len(perm) + 1):\n            result.add(perm[:i] + char + perm[i:])\n    return result\n```", "code": "def permutations(string):\n    if len(string) <= 1:\n        return set([string])\n\n    # Get all permutations of length N-1\n    perms = permutations(string[1:])\n    char = string[0]\n    result = set()\n\n    # Iterate over each permutation and insert the first character at every position\n    for perm in perms:\n        for i in range(len(perm) + 1):\n            result.add(perm[:i] + char + perm[i:])\n    return result", "entry_point": "permutations", "testcase": ["assert permutations(\"ab\") == {'ab', 'ba'}", "assert permutations(\"abc\") == {'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}", "assert permutations(\"a\") == {'a'}"]}
{"seq_id": 71910619629, "instruction": "Write a function that finds the most common word in a given sentence and returns it. The function should ignore punctuation and be case-insensitive. If there is a tie for the most common word, the function should return the first one in the sentence.", "output": "Here is the code to solve this problem: \n```python\nimport re\nfrom collections import Counter\n\ndef most_common_word(sentence):\n    # Remove punctuation and convert to lowercase\n    cleaned_sentence = re.sub(r'[^\\w\\s]', '', sentence).lower()\n    # Split the sentence into words\n    words = cleaned_sentence.split()\n    # Count the frequency of each word\n    word_counts = Counter(words)\n    # Find the most common word\n    most_common = word_counts.most_common(1)[0][0]\n    return most_common\n```", "code": "import re\nfrom collections import Counter\n\ndef most_common_word(sentence):\n    # Remove punctuation and convert to lowercase\n    cleaned_sentence = re.sub(r'[^\\w\\s]', '', sentence).lower()\n    # Split the sentence into words\n    words = cleaned_sentence.split()\n    # Count the frequency of each word\n    word_counts = Counter(words)\n    # Find the most common word\n    most_common = word_counts.most_common(1)[0][0]\n    return most_common", "entry_point": "most_common_word", "testcase": ["assert most_common_word(\"To be or not to be, that is the question.\") == \"to\"", "assert most_common_word(\"Hello world, hello everyone!\") == \"hello\"", "assert most_common_word(\"This is a test. This is only a test.\") == \"this\""]}
{"seq_id": 12638508679, "instruction": "Write a function that checks if a given binary tree is a mirror of itself (symmetric around its center).", "output": "Here is the code to solve this problem: \n```python\nfrom typing import Optional\nfrom collections import deque\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_symmetric(root: Optional[TreeNode]) -> bool:\n    if not root:\n        return True\n\n    def check(left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        return left.val == right.val and check(left.left, right.right) and check(left.right, right.left)\n\n    return check(root.left, root.right)\n\ndef construct(arr):\n    if not arr:\n        return None\n    root = TreeNode(arr.pop(0))\n    queue = deque([root])\n    while arr:\n        node = queue.popleft()\n        if arr:\n            val = arr.pop(0)\n            left = TreeNode(val) if val is not None else None\n            node.left = left\n            if left:\n                queue.append(left)\n        if arr:\n            val = arr.pop(0)\n            right = TreeNode(val) if val is not None else None\n            node.right = right\n            if right:\n                queue.append(right)\n    return root\n\nassert is_symmetric(construct([1,2,2,3,4,4,3]))==True\nassert is_symmetric(construct([1,2,2,None,3,None,3]))==False\nassert is_symmetric(construct([1]))==True\n```", "code": "from typing import Optional\nfrom collections import deque\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_symmetric(root: Optional[TreeNode]) -> bool:\n    if not root:\n        return True\n\n    def check(left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        return left.val == right.val and check(left.left, right.right) and check(left.right, right.left)\n\n    return check(root.left, root.right)\n\ndef construct(arr):\n    if not arr:\n        return None\n    root = TreeNode(arr.pop(0))\n    queue = deque([root])\n    while arr:\n        node = queue.popleft()\n        if arr:\n            val = arr.pop(0)\n            left = TreeNode(val) if val is not None else None\n            node.left = left\n            if left:\n                queue.append(left)\n        if arr:\n            val = arr.pop(0)\n            right = TreeNode(val) if val is not None else None\n            node.right = right\n            if right:\n                queue.append(right)\n    return root\n\nassert is_symmetric(construct([1,2,2,3,4,4,3]))==True\nassert is_symmetric(construct([1,2,2,None,3,None,3]))==False\nassert is_symmetric(construct([1]))==True", "entry_point": "is_symmetric", "testcase": ["assert is_symmetric(construct([1,2,2,3,4,4,3]))==True", "assert is_symmetric(construct([1,2,2,None,3,None,3]))==False", "assert is_symmetric(construct([1]))==True"]}
{"seq_id": 7569256786, "instruction": "Write a Python function to find the shortest path from a source node to a destination node in a weighted graph, given that the path can have at most k stops.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\nimport heapq\n\ndef findCheapestPath(n, flights, src, dst, k):\n    graph = defaultdict(set)\n    for s, d, weight in flights:\n        graph[s].add((d, weight))\n    \n    heap = [[0, src, 0, set()]]\n    heapq.heapify(heap)\n    memo = set()\n    while heap:\n        cost, node, stops, visited = heapq.heappop(heap)\n        if node == dst:\n            return cost\n        if node not in graph:\n            continue\n        if stops > k:\n            continue\n        if node in visited or (node, stops) in memo:\n            continue\n        memo.add((node, stops))\n        visited.add(node)\n        for ney, weight in graph[node]:\n            heapq.heappush(heap, [cost + weight, ney, stops + 1, visited.union({node})])\n    return -1\n```", "code": "from collections import defaultdict\nimport heapq\n\ndef findCheapestPath(n, flights, src, dst, k):\n    graph = defaultdict(set)\n    for s, d, weight in flights:\n        graph[s].add((d, weight))\n    \n    heap = [[0, src, 0, set()]]\n    heapq.heapify(heap)\n    memo = set()\n    while heap:\n        cost, node, stops, visited = heapq.heappop(heap)\n        if node == dst:\n            return cost\n        if node not in graph:\n            continue\n        if stops > k:\n            continue\n        if node in visited or (node, stops) in memo:\n            continue\n        memo.add((node, stops))\n        visited.add(node)\n        for ney, weight in graph[node]:\n            heapq.heappush(heap, [cost + weight, ney, stops + 1, visited.union({node})])\n    return -1", "entry_point": "findCheapestPath", "testcase": ["assert findCheapestPath(3, [[0, 1, 100], [1, 2, 100], [0, 2, 500]], 0, 2, 0) == 500", "assert findCheapestPath(4, [[0, 1, 100], [1, 2, 100], [2, 0, 100], [1, 3, 600], [2, 3, 200]], 0, 3, 1) == 700", "assert findCheapestPath(3, [[0, 1, 100], [1, 2, 100], [0, 2, 500]], 0, 2, 1) == 200"]}
{"seq_id": 15681879130, "instruction": "Write a python function to determine if a given string is a valid identifier in Python. A valid identifier must start with a letter (a-z or A-Z) or an underscore (_), followed by any number of letters, digits (0-9), or underscores. Additionally, the identifier should not be a reserved keyword in Python.", "output": "Here is the code to solve this problem: \n```python\nimport keyword\n\ndef is_valid_identifier(s):\n    if keyword.iskeyword(s):\n        return False\n    if not s:\n        return False\n    if s[0].isdigit():\n        return False\n    for char in s:\n        if not (char.isalnum() or char == '_'):\n            return False\n    return True\n```", "code": "import keyword\n\ndef is_valid_identifier(s):\n    if keyword.iskeyword(s):\n        return False\n    if not s:\n        return False\n    if s[0].isdigit():\n        return False\n    for char in s:\n        if not (char.isalnum() or char == '_'):\n            return False\n    return True", "entry_point": "is_valid_identifier", "testcase": ["assert is_valid_identifier(\"myVar\")==True", "assert is_valid_identifier(\"2ndVar\")==False", "assert is_valid_identifier(\"for\")==False", "assert is_valid_identifier(\"if123\")==True", "assert is_valid_identifier(\"_myVar123\")==True", "assert is_valid_identifier(\"123\")==False"]}
{"seq_id": 12187667443, "instruction": "Write a python function to find the two largest values in a list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef find_two_largest(list_num):\n    list_num.sort()\n    return [list_num[-2], list_num[-1]]\n```", "code": "def find_two_largest(list_num):\n    list_num.sort()\n    return [list_num[-2], list_num[-1]]", "entry_point": "find_two_largest", "testcase": ["assert find_two_largest([1,2,3,4,5])==([4,5])", "assert find_two_largest([5,1,2,4,3])==([4,5])", "assert find_two_largest([10,20,30,40,50])==([40,50])"]}
{"seq_id": 70265911067, "instruction": "Write a python function that takes a list of numbers and returns the count of even numbers and odd numbers in the list.", "output": "Here is the code to solve this problem: \n```python\ndef count_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n```", "code": "def count_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "entry_point": "count_even_odd", "testcase": ["assert count_even_odd([1, 2, 3, 4, 5]) == (2, 3)", "assert count_even_odd([10, 20, 30, 40, 50]) == (5, 0)", "assert count_even_odd([11, 22, 33, 44, 55, 66]) == (3, 3)"]}
{"seq_id": 20789335131, "instruction": "Write a python function to reverse the digits of a given integer.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_integer(x):\n    reversed_x = 0\n    while x != 0:\n        digit = x % 10\n        x = (x - digit) // 10\n        if reversed_x > (2**31-1) // 10 or (reversed_x == (2**31-1) // 10 and digit > 7):\n            return 0\n        if reversed_x < (-2**31) // 10 or (reversed_x == (-2**31) // 10 and digit < -8):\n            return 0\n        reversed_x = reversed_x * 10 + digit\n    return reversed_x\n```", "code": "def reverse_integer(x):\n    reversed_x = 0\n    while x != 0:\n        digit = x % 10\n        x = (x - digit) // 10\n        if reversed_x > (2**31-1) // 10 or (reversed_x == (2**31-1) // 10 and digit > 7):\n            return 0\n        if reversed_x < (-2**31) // 10 or (reversed_x == (-2**31) // 10 and digit < -8):\n            return 0\n        reversed_x = reversed_x * 10 + digit\n    return reversed_x", "entry_point": "reverse_integer", "testcase": ["assert reverse_integer(123) == 321", "assert reverse_integer(1534236469) == 0", "assert reverse_integer(120) == 21"]}
{"seq_id": 33481878639, "instruction": "Write a function to find the length of the longest palindromic subsequence in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longestPalindromicSubsequence(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n```", "code": "def longestPalindromicSubsequence(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]", "entry_point": "longestPalindromicSubsequence", "testcase": ["assert longestPalindromicSubsequence(\"cbbd\") == 2", "assert longestPalindromicSubsequence(\"bbbab\") == 4", "assert longestPalindromicSubsequence(\"abcdcba\") == 7"]}
{"seq_id": 23628013372, "instruction": "Write a function to find the number of times a given number occurs in a sorted array.", "output": "Here is the code to solve this problem: \n```python\ndef find_occurrences(A, x):\n    left = find_first_occurrence(A, x)\n    if left == -1:\n        return 0\n    right = find_last_occurrence(A, x)\n    return right - left + 1\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\ndef find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n```", "code": "def find_occurrences(A, x):\n    left = find_first_occurrence(A, x)\n    if left == -1:\n        return 0\n    right = find_last_occurrence(A, x)\n    return right - left + 1\n\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\ndef find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "entry_point": "find_occurrences", "testcase": ["assert find_occurrences([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 2", "assert find_occurrences([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3", "assert find_occurrences([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 6) == 2"]}
{"seq_id": 2485426011, "instruction": "Write a function to find the largest number that can be formed from the digits of a given number, where the digits are in non-decreasing order.", "output": "Here is the code to solve this problem: \n```python\ndef largest_non_decreasing_number(N: int) -> int:\n    res = list(str(N))\n    length = len(res)\n\n    for i in range(length - 1, 0, -1):\n        if res[i] < res[i - 1]:\n            res[i - 1] = str(int(res[i - 1]) - 1)\n            res[i:] = ['9'] * (length - i)\n    return int(''.join(res))\n```", "code": "def largest_non_decreasing_number(N: int) -> int:\n    res = list(str(N))\n    length = len(res)\n\n    for i in range(length - 1, 0, -1):\n        if res[i] < res[i - 1]:\n            res[i - 1] = str(int(res[i - 1]) - 1)\n            res[i:] = ['9'] * (length - i)\n    return int(''.join(res))", "entry_point": "largest_non_decreasing_number", "testcase": ["assert largest_non_decreasing_number(332) == 299", "assert largest_non_decreasing_number(1234) == 1234", "assert largest_non_decreasing_number(10) == 9"]}
{"seq_id": 8152672172, "instruction": "Write a function to find the intersection of two given lists.", "output": "Here is the code to solve this problem: \n```python\ndef intersection_lists(list1, list2):\n    result = [value for value in list1 if value in list2]\n    return result\n```", "code": "def intersection_lists(list1, list2):\n    result = [value for value in list1 if value in list2]\n    return result", "entry_point": "intersection_lists", "testcase": ["assert intersection_lists([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[2, 4, 6, 8]", "assert intersection_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[1, 3, 5, 7]", "assert intersection_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[5, 7]"]}
{"seq_id": 36993508089, "instruction": "Write a python function to find the length of the longest bitonic subsequence in a given array. A subsequence is bitonic if it is first increasing and then decreasing.", "output": "Here is the code to solve this problem: \n```python\ndef longest_bitonic_subsequence(arr):\n    n = len(arr)\n    inc = [1]*n\n    dec = [1]*n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + 1:\n                inc[i] = inc[j] + 1\n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + 1:\n                dec[i] = dec[j] + 1\n\n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, inc[i] + dec[i] - 1)\n    \n    return max_length\n```", "code": "def longest_bitonic_subsequence(arr):\n    n = len(arr)\n    inc = [1]*n\n    dec = [1]*n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + 1:\n                inc[i] = inc[j] + 1\n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + 1:\n                dec[i] = dec[j] + 1\n\n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, inc[i] + dec[i] - 1)\n    \n    return max_length", "entry_point": "longest_bitonic_subsequence", "testcase": ["assert longest_bitonic_subsequence([12, 11, 40, 5, 3, 1]) == 5", "assert longest_bitonic_subsequence([1, 11, 2, 10, 4, 5, 2, 1]) == 6", "assert longest_bitonic_subsequence([80, 60, 30, 40, 20, 10]) == 5"]}
{"seq_id": 24280094956, "instruction": "Write a python function to find the number of unique permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\nfrom math import factorial\n\ndef string_permutation(s):\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in s:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Calculate the total number of permutations of the string\n    total_permutation = factorial(len(s))\n\n    # Calculate the number of repeated characters\n    repeated_permutation = 1\n    for freq in freq_dict.values():\n        repeated_permutation *= factorial(freq)\n\n    # Calculate the number of unique permutations\n    unique_permutation = total_permutation // repeated_permutation\n\n    return unique_permutation\n```", "code": "from math import factorial\n\ndef string_permutation(s):\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in s:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Calculate the total number of permutations of the string\n    total_permutation = factorial(len(s))\n\n    # Calculate the number of repeated characters\n    repeated_permutation = 1\n    for freq in freq_dict.values():\n        repeated_permutation *= factorial(freq)\n\n    # Calculate the number of unique permutations\n    unique_permutation = total_permutation // repeated_permutation\n\n    return unique_permutation", "entry_point": "string_permutation", "testcase": ["assert string_permutation(\"aaa\") == 1", "assert string_permutation(\"abc\") == 6", "assert string_permutation(\"aab\") == 3"]}
{"seq_id": 21547708402, "instruction": "Write a function to determine if a given sequence of numbers can be obtained by popping elements from a stack in the order they appear.", "output": "Here is the code to solve this problem: \n```python\ndef validate_stack_sequence(pushed, popped):\n    stack = []\n    while len(pushed):\n        if not len(stack):\n            stack.append(pushed.pop(0))\n            continue\n\n        if popped[0] == stack[-1]:\n            stack.pop()\n            popped.pop(0)\n        else:\n            stack.append(pushed.pop(0))\n\n    while len(popped):\n        if not len(stack) or stack[-1] != popped[0]:\n            return False\n        stack.pop()\n        popped.pop(0)\n    return True\n```", "code": "def validate_stack_sequence(pushed, popped):\n    stack = []\n    while len(pushed):\n        if not len(stack):\n            stack.append(pushed.pop(0))\n            continue\n\n        if popped[0] == stack[-1]:\n            stack.pop()\n            popped.pop(0)\n        else:\n            stack.append(pushed.pop(0))\n\n    while len(popped):\n        if not len(stack) or stack[-1] != popped[0]:\n            return False\n        stack.pop()\n        popped.pop(0)\n    return True", "entry_point": "validate_stack_sequence", "testcase": ["assert validate_stack_sequence([1, 2, 3, 4, 5], [2, 3, 4, 1, 5])==True", "assert validate_stack_sequence([1, 2, 3, 4, 5], [3, 2, 4, 5, 1])==True", "assert validate_stack_sequence([1, 2, 3, 4, 5], [4, 3, 5, 1, 2])==False"]}
{"seq_id": 33782686660, "instruction": "Write a python function to find the smallest set of vertices from which all nodes in the graph are reachable. The graph is given in the form of directed edges.", "output": "Here is the code to solve this problem: \n```python\ndef findSmallestSetOfVertices(n, edges):\n    not_src = set()\n        \n    for s,t in edges:\n        not_src.add(t)\n    result=[]\n    for v in range(n):\n        if v not in not_src:\n            result.append(v)\n    return result\n```", "code": "def findSmallestSetOfVertices(n, edges):\n    not_src = set()\n        \n    for s,t in edges:\n        not_src.add(t)\n    result=[]\n    for v in range(n):\n        if v not in not_src:\n            result.append(v)\n    return result", "entry_point": "findSmallestSetOfVertices", "testcase": ["assert findSmallestSetOfVertices(6,[[0,1],[0,2],[2,5],[3,4],[4,2]]) == [0,3]", "assert findSmallestSetOfVertices(5,[[0,1],[2,1],[3,1],[1,4],[2,4]]) == [0,2,3]", "assert findSmallestSetOfVertices(7,[[0,1],[0,2],[0,5],[1,3],[1,4],[2,4],[3,5],[3,6]]) == [0]"]}
{"seq_id": 36547954360, "instruction": "Write a python function to find the largest subarray with equal number of 0's and 1's.", "output": "Here is the code to solve this problem: \n```python\ndef largest_subarray(arr):\n    count = 0\n    max_length = 0\n    sum_dict = {0: -1}\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count -= 1\n        if count in sum_dict:\n            max_length = max(max_length, i - sum_dict[count])\n        else:\n            sum_dict[count] = i\n    return max_length\n```", "code": "def largest_subarray(arr):\n    count = 0\n    max_length = 0\n    sum_dict = {0: -1}\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count -= 1\n        if count in sum_dict:\n            max_length = max(max_length, i - sum_dict[count])\n        else:\n            sum_dict[count] = i\n    return max_length", "entry_point": "largest_subarray", "testcase": ["assert largest_subarray([1, 1, 1, 1]) == 0", "assert largest_subarray([0, 0, 1, 0, 1, 1, 0, 1]) == 8", "assert largest_subarray([0, 1, 0, 1, 0, 1, 1]) == 6"]}
{"seq_id": 32630501994, "instruction": "Write a python function to find the third largest number in a given list of numbers. The function should return the third largest number or -1 if there are less than three distinct numbers in the list.", "output": "Here is the code to solve this problem: \n```python\ndef third_largest(lst):\n    unique_list = list(set(lst))\n    if len(unique_list) < 3:\n        return -1\n    else:\n        unique_list.sort()\n        return unique_list[-3]\n```", "code": "def third_largest(lst):\n    unique_list = list(set(lst))\n    if len(unique_list) < 3:\n        return -1\n    else:\n        unique_list.sort()\n        return unique_list[-3]", "entry_point": "third_largest", "testcase": ["assert third_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 8", "assert third_largest([1, 2, 3, 4, 5]) == 3", "assert third_largest([10, 10, 10]) == -1", "assert third_largest([10]) == -1"]}
{"seq_id": 17044381384, "instruction": "Write a function to find the lowest integers from a given list of numbers using heap queue algorithm.", "output": "Here is the code to solve this problem: \n```python\nimport heapq as hq\n\ndef heap_queue_lowest(nums,n):\n  lowest_nums = hq.nsmallest(n, nums)\n  return lowest_nums\n```", "code": "import heapq as hq\n\ndef heap_queue_lowest(nums,n):\n  lowest_nums = hq.nsmallest(n, nums)\n  return lowest_nums", "entry_point": "heap_queue_lowest", "testcase": ["assert heap_queue_lowest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[14, 22, 22] ", "assert heap_queue_lowest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]", "assert heap_queue_lowest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[14, 22] "]}
{"seq_id": 37938609178, "instruction": "Write a python function to find the smallest positive integer value that cannot be represented as the sum of any subset of a given array of positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef findSmallestMissing(arr):\n    arr.sort()\n    smallest_missing = 1\n    for i in arr:\n        if i <= smallest_missing:\n            smallest_missing += i\n    return smallest_missing\n```", "code": "def findSmallestMissing(arr):\n    arr.sort()\n    smallest_missing = 1\n    for i in arr:\n        if i <= smallest_missing:\n            smallest_missing += i\n    return smallest_missing", "entry_point": "findSmallestMissing", "testcase": ["assert findSmallestMissing([1, 2, 3]) == 7", "assert findSmallestMissing([1, 1, 1, 1]) == 5", "assert findSmallestMissing([1, 3, 6, 10]) == 2"]}
{"seq_id": 2880917277, "instruction": "Write a function to find the nth fibonacci number using matrix exponentiation.", "output": "Here is the code to solve this problem: \n```python\ndef multiply(F, M): \n  x = F[0][0] * M[0][0] + F[0][1] * M[1][0] \n  y = F[0][0] * M[0][1] + F[0][1] * M[1][1] \n  z = F[1][0] * M[0][0] + F[1][1] * M[1][0] \n  w = F[1][0] * M[0][1] + F[1][1] * M[1][1] \n  F[0][0] = x \n  F[0][1] = y \n  F[1][0] = z \n  F[1][1] = w \n  \ndef power(F, n): \n  M = [[1, 1], [1, 0]] \n  for _ in range(2, n+1): \n    multiply(F, M) \n    \ndef fibonacci_matrix(n): \n  F = [[1, 1], [1, 0]] \n  if n == 0: \n    return 0\n  power(F, n - 1) \n  return F[0][0]\n```", "code": "def multiply(F, M): \n  x = F[0][0] * M[0][0] + F[0][1] * M[1][0] \n  y = F[0][0] * M[0][1] + F[0][1] * M[1][1] \n  z = F[1][0] * M[0][0] + F[1][1] * M[1][0] \n  w = F[1][0] * M[0][1] + F[1][1] * M[1][1] \n  F[0][0] = x \n  F[0][1] = y \n  F[1][0] = z \n  F[1][1] = w \n  \ndef power(F, n): \n  M = [[1, 1], [1, 0]] \n  for _ in range(2, n+1): \n    multiply(F, M) \n    \ndef fibonacci_matrix(n): \n  F = [[1, 1], [1, 0]] \n  if n == 0: \n    return 0\n  power(F, n - 1) \n  return F[0][0]", "entry_point": "fibonacci_matrix", "testcase": ["assert fibonacci_matrix(2) == 1", "assert fibonacci_matrix(4) == 3", "assert fibonacci_matrix(5) == 5", "assert fibonacci_matrix(10) == 55"]}
{"seq_id": 6775244735, "instruction": "Write a python function that merges k sorted linked lists into one sorted linked list. Each linked list is represented as a list of nodes, where each node is a list of two elements: the value and the next node. The next node is represented as an index in the list of nodes. The last node of each linked list points to -1.", "output": "Here is the code to solve this problem: \n```python\ndef merge_k_sorted_lists(*lists):\n    nodes = []\n    for lst in lists:\n        for node in lst:\n            nodes.append(node)\n    nodes.sort(key=lambda x: x[0])\n    merged_list = []\n    for node in nodes:\n        merged_list.append(node[0])\n    return merged_list\n```", "code": "def merge_k_sorted_lists(*lists):\n    nodes = []\n    for lst in lists:\n        for node in lst:\n            nodes.append(node)\n    nodes.sort(key=lambda x: x[0])\n    merged_list = []\n    for node in nodes:\n        merged_list.append(node[0])\n    return merged_list", "entry_point": "merge_k_sorted_lists", "testcase": ["assert merge_k_sorted_lists([[1,1],[4,2],[5,-1]],[[1,3],[3,-1]],[[2,2],[9,-1]]) == [1,1,2,3,4,5,9]", "assert merge_k_sorted_lists([[1,-1]],[[2,-1]],[[3,-1]]) == [1,2,3]", "assert merge_k_sorted_lists([[1,1],[2,-1]],[[1,1],[1,-1]]) == [1,1,1,2]"]}
{"seq_id": 38612993223, "instruction": "Write a function to check if a given list of integers contains a duplicate.", "output": "Here is the code to solve this problem: \n```python\ndef contains_duplicate(nums):\n    _map = {}\n    \n    for num in nums:\n        if num in _map:\n            return True\n        else:\n            _map[num] = 1\n\n    return False\n```", "code": "def contains_duplicate(nums):\n    _map = {}\n    \n    for num in nums:\n        if num in _map:\n            return True\n        else:\n            _map[num] = 1\n\n    return False", "entry_point": "contains_duplicate", "testcase": ["assert contains_duplicate([1, 2, 3, 4, 5]) == False", "assert contains_duplicate([1, 2, 3, 4, 5, 1]) == True", "assert contains_duplicate([10, 20, 30, 40, 50, 10]) == True", "assert contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False"]}
{"seq_id": 7900719541, "instruction": "Write a function to find the number of unique paths in a grid from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef grid_paths(m, n):\n    # Initialize a 2D array to store the number of paths to each cell\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # The first row and first column will always have 1 path, because you can only move right or down\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n\n    # For each cell, the number of paths is the sum of the number of paths to the top and left cells\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m-1][n-1]\n```", "code": "def grid_paths(m, n):\n    # Initialize a 2D array to store the number of paths to each cell\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # The first row and first column will always have 1 path, because you can only move right or down\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n\n    # For each cell, the number of paths is the sum of the number of paths to the top and left cells\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m-1][n-1]", "entry_point": "grid_paths", "testcase": ["assert grid_paths(2,2)==2", "assert grid_paths(3,4)==10", "assert grid_paths(3,3)==6"]}
{"seq_id": 43113792548, "instruction": "Write a python function to check if a given binary tree is a binary search tree (BST).", "output": "Here is the code to solve this problem: \n```python\nclass Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_BST(root):\n    stack = []\n    prev = None\n\n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        if prev and root.val <= prev.val:\n            return False\n        prev = root\n        root = root.right\n\n    return True\n```", "code": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_BST(root):\n    stack = []\n    prev = None\n\n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        if prev and root.val <= prev.val:\n            return False\n        prev = root\n        root = root.right\n\n    return True", "entry_point": "is_BST", "testcase": ["assert is_BST(Node(2, Node(1), Node(3))) == True", "assert is_BST(Node(2, Node(3), Node(1))) == False", "assert is_BST(Node(10, Node(5, Node(3), Node(7)), Node(15))) == True"]}
{"seq_id": 29133129674, "instruction": "Write a Python function that builds a staircase of a given height using asterisks ('*').", "output": "Here is the code to solve this problem: \n```python\ndef build_staircase(height):\n    staircase = []\n    for i in range(1, height + 1):\n        staircase.append('*' * i)\n    return staircase\n```", "code": "def build_staircase(height):\n    staircase = []\n    for i in range(1, height + 1):\n        staircase.append('*' * i)\n    return staircase", "entry_point": "build_staircase", "testcase": ["assert build_staircase(1) == ['*']", "assert build_staircase(5) == ['*', '**', '***', '****', '*****']", "assert build_staircase(3) == ['*', '**', '***']"]}
{"seq_id": 70726640761, "instruction": "Write a function to find the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring_without_repeating_characters(s):\n    max_length = 0\n    start = 0\n    max_substring = \"\"\n    used_chars = {}\n\n    for i in range(len(s)):\n        if s[i] in used_chars and start <= used_chars[s[i]]:\n            start = used_chars[s[i]] + 1\n        else:\n            if i - start + 1 > max_length:\n                max_length = i - start + 1\n                max_substring = s[start:i+1]\n\n        used_chars[s[i]] = i\n\n    return max_substring\n```", "code": "def longest_substring_without_repeating_characters(s):\n    max_length = 0\n    start = 0\n    max_substring = \"\"\n    used_chars = {}\n\n    for i in range(len(s)):\n        if s[i] in used_chars and start <= used_chars[s[i]]:\n            start = used_chars[s[i]] + 1\n        else:\n            if i - start + 1 > max_length:\n                max_length = i - start + 1\n                max_substring = s[start:i+1]\n\n        used_chars[s[i]] = i\n\n    return max_substring", "entry_point": "longest_substring_without_repeating_characters", "testcase": ["assert longest_substring_without_repeating_characters(\"pwwkew\") == \"wke\"", "assert longest_substring_without_repeating_characters(\"bbbbb\") == \"b\"", "assert longest_substring_without_repeating_characters(\"abcabcbb\") == \"abc\""]}
{"seq_id": 27239444777, "instruction": "Write a function to find the largest palindrome made from the product of two 3-digit numbers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_palindrome_product(n):\n    if n == 1:\n        return 9\n    start = 10 ** (n-1)\n    end = 10 ** n - 1\n    max_palindrome = 0\n    for i in range(end, start-1, -1):\n        for j in range(i, start-1, -1):\n            product = i * j\n            if str(product) == str(product)[::-1] and product > max_palindrome:\n                max_palindrome = product\n    return max_palindrome\n```", "code": "def largest_palindrome_product(n):\n    if n == 1:\n        return 9\n    start = 10 ** (n-1)\n    end = 10 ** n - 1\n    max_palindrome = 0\n    for i in range(end, start-1, -1):\n        for j in range(i, start-1, -1):\n            product = i * j\n            if str(product) == str(product)[::-1] and product > max_palindrome:\n                max_palindrome = product\n    return max_palindrome", "entry_point": "largest_palindrome_product", "testcase": ["assert largest_palindrome_product(1) == 9", "assert largest_palindrome_product(2) == 9009", "assert largest_palindrome_product(3) == 906609"]}
{"seq_id": 25745518466, "instruction": "Write a python function to find all unique strings in a given list of strings.", "output": "Here is the code to solve this problem: \n```python\ndef unique_strings(list):\n  unique_list = []\n  for item in list:\n    if list.count(item) == 1:\n      unique_list.append(item)\n  return unique_list\n```", "code": "def unique_strings(list):\n  unique_list = []\n  for item in list:\n    if list.count(item) == 1:\n      unique_list.append(item)\n  return unique_list", "entry_point": "unique_strings", "testcase": ["assert unique_strings([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"grape\"]) == [\"orange\", \"grape\"]", "assert unique_strings([\"cat\", \"dog\", \"parrot\"]) == [\"cat\", \"dog\", \"parrot\"]", "assert unique_strings([\"hello\", \"hello\", \"hello\"]) == []"]}
{"seq_id": 20278177447, "instruction": "Write a function to find all starting indices of substrings in a given string that is a concatenation of each word in a list exactly once and without any intervening characters.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_substring_indices(s, words):\n    if not words or not s:\n        return []\n    word_count = Counter(words)\n    word_length = len(words[0])\n    total_length = word_length * len(words)\n    result = []\n\n    for i in range(len(s) - total_length + 1):\n        seen_words = s[i:i+total_length]\n        if all(seen_words[j:j+word_length] in word_count for j in range(0, total_length, word_length)):\n            current_count = Counter(seen_words[j:j+word_length] for j in range(0, total_length, word_length))\n            if current_count == word_count:\n                result.append(i)\n    return result\n```", "code": "from collections import Counter\n\ndef find_substring_indices(s, words):\n    if not words or not s:\n        return []\n    word_count = Counter(words)\n    word_length = len(words[0])\n    total_length = word_length * len(words)\n    result = []\n\n    for i in range(len(s) - total_length + 1):\n        seen_words = s[i:i+total_length]\n        if all(seen_words[j:j+word_length] in word_count for j in range(0, total_length, word_length)):\n            current_count = Counter(seen_words[j:j+word_length] for j in range(0, total_length, word_length))\n            if current_count == word_count:\n                result.append(i)\n    return result", "entry_point": "find_substring_indices", "testcase": ["assert find_substring_indices(\"barfoothefoobarman\", [\"foo\", \"bar\"]) == [0,9]", "assert find_substring_indices(\"wordgoodgoodgoodbestword\", [\"word\",\"good\",\"best\",\"word\"]) == []", "assert find_substring_indices(\"barfoofoobarthefoobarman\", [\"bar\",\"foo\",\"the\"]) == [6,9,12]"]}
{"seq_id": 39730369422, "instruction": "Write a python function to remove all occurrences of a given value in a list and return the new length of the list.", "output": "Here is the code to solve this problem: \n```python\ndef remove_elements(nums, val):\n    i=0\n    while(i<len(nums)):\n        if (val==nums[i]):\n            nums.remove(nums[i])\n        else:\n            i+=1\n    return len(nums)\n```", "code": "def remove_elements(nums, val):\n    i=0\n    while(i<len(nums)):\n        if (val==nums[i]):\n            nums.remove(nums[i])\n        else:\n            i+=1\n    return len(nums)", "entry_point": "remove_elements", "testcase": ["assert remove_elements([1,1,1,1,1], 1) == 0", "assert remove_elements([1,2,3,4,5], 6) == 5", "assert remove_elements([0,1,2,2,3,0,4,2], 2) == 5"]}
{"seq_id": 69901940795, "instruction": "Write a python function to find the smallest positive integer that is missing from the list.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_positive(A):\n    target = 1\n    A = myfunc(list(set(A)))\n\n    for i in A:\n        if target != i:\n            break\n        target += 1\n\n    return target\n\ndef myfunc(mylist1):\n    return sorted([x for x in mylist1 if x > 0])\n```", "code": "def smallest_positive(A):\n    target = 1\n    A = myfunc(list(set(A)))\n\n    for i in A:\n        if target != i:\n            break\n        target += 1\n\n    return target\n\ndef myfunc(mylist1):\n    return sorted([x for x in mylist1 if x > 0])", "entry_point": "smallest_positive", "testcase": ["assert smallest_positive([1,3,6,4,1,2]) == 5", "assert smallest_positive([-1,-3]) == 1", "assert smallest_positive([1,2,3]) == 4"]}
{"seq_id": 27046837642, "instruction": "Write a function to compute the longest common subsequence (LCS) of two strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_subsequence(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n```", "code": "def longest_common_subsequence(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]", "entry_point": "longest_common_subsequence", "testcase": ["assert longest_common_subsequence(\"ABCXYZ\", \"XYZABC\") == 3", "assert longest_common_subsequence(\"ABCBDAB\", \"BDCAB\") == 4", "assert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\") == 4"]}
{"seq_id": 30315524734, "instruction": "Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef max_Subarray_Sum(arr):\n    max_so_far = arr[0]\n    current_max = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], current_max + arr[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far\n```", "code": "def max_Subarray_Sum(arr):\n    max_so_far = arr[0]\n    current_max = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], current_max + arr[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far", "entry_point": "max_Subarray_Sum", "testcase": ["assert max_Subarray_Sum([-2,1,-3,4,-1,2,1,-5,4]) == 6", "assert max_Subarray_Sum([-1,-2,-3,-4]) == -1", "assert max_Subarray_Sum([1]) == 1"]}
{"seq_id": 5827693720, "instruction": "Write a python function to find the power of a complex number.", "output": "Here is the code to solve this problem: \n```python\ndef complex_power(x, y):\n    return x**y\n```", "code": "def complex_power(x, y):\n    return x**y", "entry_point": "complex_power", "testcase": ["assert complex_power(2, 3) == (8+0j)", "assert complex_power(1+1j, 2) == (0+2j)", "assert complex_power(1+1j, 3) == (-2+2j)"]}
{"seq_id": 10100846762, "instruction": "Write a function to find the length of the longest zigzag subsequence in a given array.\nA zigzag sequence is defined as a sequence where the elements are either strictly increasing or strictly decreasing, but not constant.", "output": "Here is the code to solve this problem: \n```python\ndef zigzag_length(arr):\n    up = 1\n    down = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            up = down + 1\n        elif arr[i] < arr[i - 1]:\n            down = up + 1\n    return max(up, down)\n```", "code": "def zigzag_length(arr):\n    up = 1\n    down = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            up = down + 1\n        elif arr[i] < arr[i - 1]:\n            down = up + 1\n    return max(up, down)", "entry_point": "zigzag_length", "testcase": ["assert zigzag_length([1, 7, 4, 9, 2, 5]) == 6", "assert zigzag_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2", "assert zigzag_length([1, 17, 5, 10, 13, 15, 10, 5, 16, 8]) == 7"]}
{"seq_id": 36888881751, "instruction": "Write a function to find all unique quadruplets in the array which gives the sum of the target.", "output": "Here is the code to solve this problem: \n```python\ndef fourSum(nums, target):\n    nums.sort()\n    result = []\n    n = len(nums)\n    for i in range(n):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, n):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            l, r = j+1, n-1\n            while l < r:\n                total = nums[i] + nums[j] + nums[l] + nums[r]\n                if total == target:\n                    result.append([nums[i], nums[j], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif total < target:\n                    l += 1\n                else:\n                    r -= 1\n    return result\n```", "code": "def fourSum(nums, target):\n    nums.sort()\n    result = []\n    n = len(nums)\n    for i in range(n):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, n):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            l, r = j+1, n-1\n            while l < r:\n                total = nums[i] + nums[j] + nums[l] + nums[r]\n                if total == target:\n                    result.append([nums[i], nums[j], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif total < target:\n                    l += 1\n                else:\n                    r -= 1\n    return result", "entry_point": "fourSum", "testcase": ["assert fourSum([-3, -2, -1, 0, 0, 1, 2, 3], 0) == [[-3, -2, 2, 3], [-3, -1, 1, 3], [-3, 0, 0, 3], [-3, 0, 1, 2], [-2, -1, 0, 3], [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]", "assert fourSum([1, 0, -1, 0, -2, 2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]", "assert fourSum([2, 2, 2, 2, 2], 8) == [[2, 2, 2, 2]]"]}
{"seq_id": 36333296431, "instruction": "Write a function to check if a string is a valid number. A valid number can be a decimal, an integer, or a scientific notation. It can have leading and trailing spaces, and may have a plus or minus sign before the number. The number may contain at most one decimal point and at most one exponent part, which starts with 'e' or 'E'.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_number(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # remove leading and trailing spaces\n    s = s.strip()\n    \n    # check for empty string\n    if not s:\n        return False\n    \n    # check for plus or minus sign\n    if s[0] in ['+', '-']:\n        s = s[1:]\n    \n    # check for decimal point\n    dot_count = s.count('.')\n    if dot_count > 1:\n        return False\n    \n    # check for scientific notation\n    e_count = s.count('e') + s.count('E')\n    if e_count > 1:\n        return False\n    if 'e' in s or 'E' in s:\n        parts = s.split('e') if 'e' in s else s.split('E')\n        if len(parts) != 2:\n            return False\n        base, exponent = parts\n        if not base or not exponent:\n            return False\n        if base[-1] == '.':\n            return False\n        if not base[-1].isdigit() and base[-1] != '.':\n            return False\n        if not exponent[0].isdigit() and exponent[0] != '+' and exponent[0] != '-':\n            return False\n        if not exponent[-1].isdigit():\n            return False\n        base = base.replace('.', '')\n        if not base.isdigit():\n            return False\n        return True\n    \n    # check for valid decimal or integer\n    if dot_count == 0:\n        return s.isdigit()\n    else:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        left, right = parts\n        if not left and not right:\n            return False\n        if not left.isdigit() and left:\n            return False\n        if not right.isdigit():\n            return False\n        return True\n```", "code": "def is_valid_number(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # remove leading and trailing spaces\n    s = s.strip()\n    \n    # check for empty string\n    if not s:\n        return False\n    \n    # check for plus or minus sign\n    if s[0] in ['+', '-']:\n        s = s[1:]\n    \n    # check for decimal point\n    dot_count = s.count('.')\n    if dot_count > 1:\n        return False\n    \n    # check for scientific notation\n    e_count = s.count('e') + s.count('E')\n    if e_count > 1:\n        return False\n    if 'e' in s or 'E' in s:\n        parts = s.split('e') if 'e' in s else s.split('E')\n        if len(parts) != 2:\n            return False\n        base, exponent = parts\n        if not base or not exponent:\n            return False\n        if base[-1] == '.':\n            return False\n        if not base[-1].isdigit() and base[-1] != '.':\n            return False\n        if not exponent[0].isdigit() and exponent[0] != '+' and exponent[0] != '-':\n            return False\n        if not exponent[-1].isdigit():\n            return False\n        base = base.replace('.', '')\n        if not base.isdigit():\n            return False\n        return True\n    \n    # check for valid decimal or integer\n    if dot_count == 0:\n        return s.isdigit()\n    else:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        left, right = parts\n        if not left and not right:\n            return False\n        if not left.isdigit() and left:\n            return False\n        if not right.isdigit():\n            return False\n        return True", "entry_point": "is_valid_number", "testcase": ["assert is_valid_number('.34') == True", "assert is_valid_number('abc') == False", "assert is_valid_number(' 0.1 ') == True", "assert is_valid_number('1') == True", "assert is_valid_number(' 1e') == False", "assert is_valid_number('e3') == False", "assert is_valid_number('.e2') == False", "assert is_valid_number('1 a') == False", "assert is_valid_number('2e10') == True", "assert is_valid_number('+-5') == False", "assert is_valid_number('12 e3') == False", "assert is_valid_number('-90e3   ') == True"]}
{"seq_id": 31556774116, "instruction": "Write a function that takes a string and a list of banned substrings, then returns the most frequent word that is not in the banned list. Words are separated by non-alphabetic characters.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\nimport re\n\ndef most_frequent_word(paragraph, banned):\n\twords = [word for word in re.sub(r\"[^\\w]\", ' ', paragraph)\n\t\t\t.lower().split()\n\t\t\t\tif word not in banned]\n\n\tcounts = Counter(words)\n\treturn counts.most_common(1)[0][0]\n```", "code": "from collections import Counter\nimport re\n\ndef most_frequent_word(paragraph, banned):\n\twords = [word for word in re.sub(r\"[^\\w]\", ' ', paragraph)\n\t\t\t.lower().split()\n\t\t\t\tif word not in banned]\n\n\tcounts = Counter(words)\n\treturn counts.most_common(1)[0][0]", "entry_point": "most_frequent_word", "testcase": ["assert most_frequent_word(\"This is a test. is is is\", [\"is\"])==\"this\"", "assert most_frequent_word(\"Bob hit a ball, the hit BALL flew far after it was hit.\", [\"hit\"])==\"ball\"", "assert most_frequent_word(\"A quick brown fox quick quick\", [\"a\", \"fox\"])==\"quick\""]}
{"seq_id": 7211329656, "instruction": "Write a function to find the sum of all prime numbers below a given number.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_primes_below(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    for num in range(2, n):\n        if is_prime(num):\n            sum_primes += num\n    return sum_primes\n```", "code": "def sum_of_primes_below(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    for num in range(2, n):\n        if is_prime(num):\n            sum_primes += num\n    return sum_primes", "entry_point": "sum_of_primes_below", "testcase": ["assert sum_of_primes_below(10) == 17", "assert sum_of_primes_below(2) == 0", "assert sum_of_primes_below(20) == 77"]}
{"seq_id": 11847067804, "instruction": "Write a python function to find the largest prime number less than a given number n.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_largest_prime(n):\n    for i in range(n-1, 1, -1):\n        if is_prime(i):\n            return i\n```", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_largest_prime(n):\n    for i in range(n-1, 1, -1):\n        if is_prime(i):\n            return i", "entry_point": "find_largest_prime", "testcase": ["assert find_largest_prime(10) == 7", "assert find_largest_prime(20) == 19", "assert find_largest_prime(50) == 47"]}
{"seq_id": 6121615332, "instruction": "Write a Python function to find the minimum number of friends required to repair all weak points in a wall. The wall is represented as a circular array of weak points, and a list of available friends' repair distances. Each friend can repair a single section of the wall up to their maximum repair distance. The goal is to minimize the number of friends needed to repair the entire wall.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\nINF = int(1e9)\n\ndef repair_wall(n, weak, dist):\n    answer = INF\n    length = len(weak)\n\n    for i in range(length):\n        weak.append(weak[i] + n)\n\n    for i in range(length):\n        for arr in permutations(dist, len(dist)):\n            count = 0\n            max_pos = weak[i] + arr[count]\n            flag = True\n            for j in range(i, i + length):\n                if max_pos < weak[j]:\n                    count += 1\n                    if count >= len(dist):\n                        flag = False\n                        break\n                    max_pos = weak[j] + arr[count]\n            if flag:\n                answer = min(answer, count + 1)\n\n    return answer if answer != INF else -1\n```", "code": "from itertools import permutations\n\nINF = int(1e9)\n\ndef repair_wall(n, weak, dist):\n    answer = INF\n    length = len(weak)\n\n    for i in range(length):\n        weak.append(weak[i] + n)\n\n    for i in range(length):\n        for arr in permutations(dist, len(dist)):\n            count = 0\n            max_pos = weak[i] + arr[count]\n            flag = True\n            for j in range(i, i + length):\n                if max_pos < weak[j]:\n                    count += 1\n                    if count >= len(dist):\n                        flag = False\n                        break\n                    max_pos = weak[j] + arr[count]\n            if flag:\n                answer = min(answer, count + 1)\n\n    return answer if answer != INF else -1", "entry_point": "repair_wall", "testcase": ["assert repair_wall(10, [0, 3, 7], [1, 1, 2, 1, 1]) == 3", "assert repair_wall(20, [0, 10], [5, 10]) == 1", "assert repair_wall(12, [1, 5, 6], [1, 2, 3, 4]) == 2"]}
{"seq_id": 21290610107, "instruction": "Write a function to find the minimum number of jumps to reach the end of an array from a given starting position.", "output": "Here is the code to solve this problem: \n```python\ndef jump_to_end(arr, start):\n    if start >= len(arr) - 1:\n        return 0\n    max_reach = min(start + arr[start], len(arr) - 1)\n    min_jumps = float('inf')\n    for next_step in range(start + 1, max_reach + 1):\n        jumps = jump_to_end(arr, next_step)\n        if jumps != float('inf'):\n            min_jumps = min(min_jumps, jumps + 1)\n    return min_jumps\n```", "code": "def jump_to_end(arr, start):\n    if start >= len(arr) - 1:\n        return 0\n    max_reach = min(start + arr[start], len(arr) - 1)\n    min_jumps = float('inf')\n    for next_step in range(start + 1, max_reach + 1):\n        jumps = jump_to_end(arr, next_step)\n        if jumps != float('inf'):\n            min_jumps = min(min_jumps, jumps + 1)\n    return min_jumps", "entry_point": "jump_to_end", "testcase": ["assert jump_to_end([1,1,1,1,1], 0) == 4", "assert jump_to_end([2,3,1,1,4], 0) == 2", "assert jump_to_end([10,9,8,7,6,5,4,3,2,1,0], 0) == 1"]}
{"seq_id": 74067233526, "instruction": "Write a python function that finds the longest subsequence of equal numbers in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef longest_equal_subsequence(arr):\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return max_length\n```", "code": "def longest_equal_subsequence(arr):\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return max_length", "entry_point": "longest_equal_subsequence", "testcase": ["assert longest_equal_subsequence([5, 5, 3, 4, 4, 4, 4, 5, 5]) == 4", "assert longest_equal_subsequence([1, 2, 3, 4, 5]) == 1", "assert longest_equal_subsequence([1, 1, 1, 1, 1]) == 5"]}
{"seq_id": 43381728368, "instruction": "Write a python function to find the number of distinct palindromic substrings in the given string.", "output": "Here is the code to solve this problem: \n```python\ndef num_Palindromic_Substrings(strr):\n    n = len(strr)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    count = 0\n    for i in range(n):\n        dp[i][i] = True\n        count += 1\n    for i in range(n-1):\n        if strr[i] == strr[i+1]:\n            dp[i][i+1] = True\n            count += 1\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if strr[i] == strr[j] and dp[i+1][j-1]:\n                dp[i][j] = True\n                count += 1\n    return count\n```", "code": "def num_Palindromic_Substrings(strr):\n    n = len(strr)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    count = 0\n    for i in range(n):\n        dp[i][i] = True\n        count += 1\n    for i in range(n-1):\n        if strr[i] == strr[i+1]:\n            dp[i][i+1] = True\n            count += 1\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if strr[i] == strr[j] and dp[i+1][j-1]:\n                dp[i][j] = True\n                count += 1\n    return count", "entry_point": "num_Palindromic_Substrings", "testcase": ["assert num_Palindromic_Substrings(\"aaa\") == 6", "assert num_Palindromic_Substrings(\"racecar\") == 10", "assert num_Palindromic_Substrings(\"abc\") == 3"]}
{"seq_id": 31474674828, "instruction": "Write a function to find the largest continuous sum in a list.", "output": "Here is the code to solve this problem: \n```python\ndef largest_cont_sum(arr):\n    if len(arr)==0:\n        return 0\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(current_sum, max_sum)\n    return max_sum\n```", "code": "def largest_cont_sum(arr):\n    if len(arr)==0:\n        return 0\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(current_sum, max_sum)\n    return max_sum", "entry_point": "largest_cont_sum", "testcase": ["assert largest_cont_sum([1, 2, -1, 3, 4, 10, 10, -10, -1])==29", "assert largest_cont_sum([1, 2, -1, 3, 4, -1])==9", "assert largest_cont_sum([-1, 1])==1"]}
{"seq_id": 38413874182, "instruction": "Write a function to find the number of ways to make change for a given amount using a set of coin denominations.", "output": "Here is the code to solve this problem: \n```python\ndef change_making(target, coins):\n    ways = [0] * (target + 1)\n    ways[0] = 1\n    for coin in coins:\n        for i in range(coin, target + 1):\n            ways[i] += ways[i - coin]\n    return ways[target]\n```", "code": "def change_making(target, coins):\n    ways = [0] * (target + 1)\n    ways[0] = 1\n    for coin in coins:\n        for i in range(coin, target + 1):\n            ways[i] += ways[i - coin]\n    return ways[target]", "entry_point": "change_making", "testcase": ["assert change_making(4, [1, 2, 3]) == 4", "assert change_making(10, [2, 5, 3, 6]) == 5", "assert change_making(11, [1, 5, 10]) == 4"]}
{"seq_id": 33942708740, "instruction": "Write a function that takes a list of integers and returns a list containing two elements. The first element is the integer that appears more than once in the list, and the second element is the integer that is missing from the list (1 to n).", "output": "Here is the code to solve this problem: \n```python\ndef find_error_nums(nums):\n    a=max(nums)\n    k=[]\n    c=[0]*(a+1)\n    for i in nums:\n        c[i]+=1\n    b=c.index(max(c))\n    k.append(b)\n    for i in range(1,len(nums)+1):\n        if(i not in nums):\n            k.append(i)\n            break\n    return k\n```", "code": "def find_error_nums(nums):\n    a=max(nums)\n    k=[]\n    c=[0]*(a+1)\n    for i in nums:\n        c[i]+=1\n    b=c.index(max(c))\n    k.append(b)\n    for i in range(1,len(nums)+1):\n        if(i not in nums):\n            k.append(i)\n            break\n    return k", "entry_point": "find_error_nums", "testcase": ["assert find_error_nums([1,1]) == [1, 2]", "assert find_error_nums([1,2,2,4]) == [2, 3]", "assert find_error_nums([3,2,2]) == [2, 1]"]}
{"seq_id": 1843350514, "instruction": "Write a python function to calculate the number of possible combinations of making a certain amount of money with given coin denominations.", "output": "Here is the code to solve this problem: \n```python\ndef count_combinations(amount, coins):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] += dp[x - coin]\n    return dp[amount]\n```", "code": "def count_combinations(amount, coins):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] += dp[x - coin]\n    return dp[amount]", "entry_point": "count_combinations", "testcase": ["assert count_combinations(4, [1, 2, 3]) == 4", "assert count_combinations(11, [1, 5, 10]) == 4", "assert count_combinations(10, [2, 5, 3, 6]) == 5"]}
{"seq_id": 71550741476, "instruction": "Write a python function that finds the largest number in a list using the Shell sort algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef shell_sort(arr):\n  size = len(arr)\n  div = 2\n  gap = size // div\n  while gap > 0:\n    for i in range(gap, size):\n      anchor = arr[i]\n      j = i\n      while j >= gap and arr[j - gap] > anchor:\n        arr[j] = arr[j-gap]\n        j -= gap\n      arr[j] = anchor\n    div *= 2\n    gap = gap // div\n\ndef find_largest_shell_sort(arr):\n  shell_sort(arr)\n  return arr[-1]\n\nif __name__ == '__main__':\n  print(find_largest_shell_sort([21,38, 29, 17, 4, 25, 11, 32, 9]))\n  print(find_largest_shell_sort([2, 1, 5, 7, 2, 0, 5, 1, 2, 9, 5, 8, 3]))\n  print(find_largest_shell_sort([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]))\n```", "code": "def shell_sort(arr):\n  size = len(arr)\n  div = 2\n  gap = size // div\n  while gap > 0:\n    for i in range(gap, size):\n      anchor = arr[i]\n      j = i\n      while j >= gap and arr[j - gap] > anchor:\n        arr[j] = arr[j-gap]\n        j -= gap\n      arr[j] = anchor\n    div *= 2\n    gap = gap // div\n\ndef find_largest_shell_sort(arr):\n  shell_sort(arr)\n  return arr[-1]\n\nif __name__ == '__main__':\n  print(find_largest_shell_sort([21,38, 29, 17, 4, 25, 11, 32, 9]))\n  print(find_largest_shell_sort([2, 1, 5, 7, 2, 0, 5, 1, 2, 9, 5, 8, 3]))\n  print(find_largest_shell_sort([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]))", "entry_point": "find_largest_shell_sort", "testcase": ["assert find_largest_shell_sort([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1000", "assert find_largest_shell_sort([2, 1, 5, 7, 2, 0, 5, 1, 2, 9, 5, 8, 3]) == 9", "assert find_largest_shell_sort([21,38, 29, 17, 4, 25, 11, 32, 9]) == 38"]}
{"seq_id": 180168631, "instruction": "Write a python function to determine if a number is a happy number. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.", "output": "Here is the code to solve this problem: \n```python\ndef is_Happy_Number(n):\n    d_sqr = {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n    res = {}\n    sumnum = n\n    while res.get(sumnum, 0) != 2:\n        sumnum = sum(d_sqr[int(d)] for d in str(sumnum))\n        if sumnum == 1:\n            return True\n        res[sumnum] = res.setdefault(sumnum, 0) + 1\n    return False\n```", "code": "def is_Happy_Number(n):\n    d_sqr = {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n    res = {}\n    sumnum = n\n    while res.get(sumnum, 0) != 2:\n        sumnum = sum(d_sqr[int(d)] for d in str(sumnum))\n        if sumnum == 1:\n            return True\n        res[sumnum] = res.setdefault(sumnum, 0) + 1\n    return False", "entry_point": "is_Happy_Number", "testcase": ["assert is_Happy_Number(7) == True", "assert is_Happy_Number(2) == False", "assert is_Happy_Number(19) == True"]}
{"seq_id": 16923883817, "instruction": "Write a python function to find the sum of the first n natural numbers using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_n_natural_numbers(n):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_of_n_natural_numbers(n-1)\n```", "code": "def sum_of_n_natural_numbers(n):\n    if n == 1:\n        return 1\n    else:\n        return n + sum_of_n_natural_numbers(n-1)", "entry_point": "sum_of_n_natural_numbers", "testcase": ["assert sum_of_n_natural_numbers(1) == 1", "assert sum_of_n_natural_numbers(10) == 55", "assert sum_of_n_natural_numbers(5) == 15"]}
{"seq_id": 70474708509, "instruction": "Write a python function to find the number of rotations required to get the same string. A rotation is defined as moving the first character of the string to the end.", "output": "Here is the code to solve this problem: \n```python\ndef count_rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    return n\n```", "code": "def count_rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    return n", "entry_point": "count_rotations", "testcase": ["assert count_rotations(\"hello\") == 5", "assert count_rotations(\"abab\") == 2", "assert count_rotations(\"abcde\") == 5"]}
{"seq_id": 3108218277, "instruction": "Write a python function to find nth Catalan number.\nCatalan numbers are a sequence of natural numbers that have many applications in combinatorial mathematics, including the counting of certain lattice paths, the number of expressions containing n pairs of parentheses which are correctly matched, the number of ways to completely parenthesize n+1 factors, the number of non-isomorphic full binary trees with n+1 leaves, and many others.", "output": "Here is the code to solve this problem: \n```python\ndef nth_catalan_num(n):\n    if n <= 1:\n        return 1\n    catalan = [0 for _ in range(n+1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]\n```", "code": "def nth_catalan_num(n):\n    if n <= 1:\n        return 1\n    catalan = [0 for _ in range(n+1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]", "entry_point": "nth_catalan_num", "testcase": ["assert nth_catalan_num(3) == 5", "assert nth_catalan_num(5) == 42", "assert nth_catalan_num(6) == 132"]}
{"seq_id": 19267048497, "instruction": "Write a python function to find the missing number in a given list of numbers ranging from 0 to n.", "output": "Here is the code to solve this problem: \n```python\ndef find_Missing(nums): \n    n = len(nums) \n    total = n * (n + 1) // 2\n    sum_nums = sum(nums) \n    return total - sum_nums\n```", "code": "def find_Missing(nums): \n    n = len(nums) \n    total = n * (n + 1) // 2\n    sum_nums = sum(nums) \n    return total - sum_nums", "entry_point": "find_Missing", "testcase": ["assert find_Missing([0, 1]) == 2", "assert find_Missing([9,6,4,2,3,5,7,0,1]) == 8", "assert find_Missing([3, 0, 1]) == 2"]}
{"seq_id": 40731457849, "instruction": "Write a function that converts temperatures from Fahrenheit to Celsius. The function should accept a list of temperatures in Fahrenheit and return a list of temperatures in Celsius. The formula for conversion is (Fahrenheit - 32) * 5/9.", "output": "Here is the code to solve this problem: \n```python\ndef convert_fahrenheit_to_celsius(fahrenheit_list):\n    celsius_list = []\n    for fahrenheit in fahrenheit_list:\n        celsius = (fahrenheit - 32) * 5 / 9\n        celsius_list.append(celsius)\n    return celsius_list\n```", "code": "def convert_fahrenheit_to_celsius(fahrenheit_list):\n    celsius_list = []\n    for fahrenheit in fahrenheit_list:\n        celsius = (fahrenheit - 32) * 5 / 9\n        celsius_list.append(celsius)\n    return celsius_list", "entry_point": "convert_fahrenheit_to_celsius", "testcase": ["assert convert_fahrenheit_to_celsius([50, 86, 77]) == [10, 30, 25]", "assert convert_fahrenheit_to_celsius([32, 212, 68]) == [0, 100, 20]", "assert convert_fahrenheit_to_celsius([100, 122, 98]) == [37.77777777777778, 50, 36.666666666666664]"]}
{"seq_id": 42506696966, "instruction": "Write a function to find the largest rectangle containing only 1's in a binary matrix and return its area.", "output": "Here is the code to solve this problem: \n```python\ndef largestRectangle(matrix):\n    if not matrix: return 0\n    m, n = len(matrix), len(matrix[0])\n    heights = [0] * (n + 1)\n    max_area = 0\n\n    for i in range(m):\n        for j in range(n):\n            heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0\n\n        stack = [-1]\n        for j in range(n + 1):\n            while heights[j] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = j - 1 - stack[-1]\n                max_area = max(max_area, h * w)\n            stack.append(j)\n\n    return max_area\n```", "code": "def largestRectangle(matrix):\n    if not matrix: return 0\n    m, n = len(matrix), len(matrix[0])\n    heights = [0] * (n + 1)\n    max_area = 0\n\n    for i in range(m):\n        for j in range(n):\n            heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0\n\n        stack = [-1]\n        for j in range(n + 1):\n            while heights[j] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = j - 1 - stack[-1]\n                max_area = max(max_area, h * w)\n            stack.append(j)\n\n    return max_area", "entry_point": "largestRectangle", "testcase": ["assert largestRectangle([[1,1],[1,1]]) == 4", "assert largestRectangle([[0,0],[0,0]]) == 0", "assert largestRectangle([[1,0,1],[0,1,1],[1,1,1]]) == 4"]}
{"seq_id": 14705576840, "instruction": "Write a function to find the two largest elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef find_two_largest(lst):\n    lst.sort()\n    return (lst[-1], lst[-2])\n```", "code": "def find_two_largest(lst):\n    lst.sort()\n    return (lst[-1], lst[-2])", "entry_point": "find_two_largest", "testcase": ["assert find_two_largest([10, 20, 4, 45, 99, 6, 80]) == (99, 80)", "assert find_two_largest([1, 2, 3, 4, 5]) == (5, 4)", "assert find_two_largest([100, 200, 300, 400, 500]) == (500, 400)"]}
{"seq_id": 19330438978, "instruction": "Write a Python function that takes three parameters: `nums`, a list of integers; `k`, an integer; and `t`, an integer. The function should return `True` if there are two distinct indices `i` and `j` in the list such that `abs(nums[i] - nums[j]) <= t` and `abs(i - j) <= k`.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef findNearDuplicates(nums, k, t):\n    if t < 0: return False\n    n = len(nums)\n    buckets = defaultdict(list)\n    bucket_size = t + 1\n    for i in range(n):\n        bucket_num = nums[i] // bucket_size\n        if bucket_num in buckets:\n            return True\n        if bucket_num - 1 in buckets and abs(nums[i] - buckets[bucket_num - 1]) <= t:\n            return True\n        if bucket_num + 1 in buckets and abs(nums[i] - buckets[bucket_num + 1]) <= t:\n            return True\n        buckets[bucket_num] = nums[i]\n        if i >= k:\n            del buckets[nums[i-k] // bucket_size]\n    return False\n```", "code": "from collections import defaultdict\n\ndef findNearDuplicates(nums, k, t):\n    if t < 0: return False\n    n = len(nums)\n    buckets = defaultdict(list)\n    bucket_size = t + 1\n    for i in range(n):\n        bucket_num = nums[i] // bucket_size\n        if bucket_num in buckets:\n            return True\n        if bucket_num - 1 in buckets and abs(nums[i] - buckets[bucket_num - 1]) <= t:\n            return True\n        if bucket_num + 1 in buckets and abs(nums[i] - buckets[bucket_num + 1]) <= t:\n            return True\n        buckets[bucket_num] = nums[i]\n        if i >= k:\n            del buckets[nums[i-k] // bucket_size]\n    return False", "entry_point": "findNearDuplicates", "testcase": ["assert findNearDuplicates([1,5,9,1,5,9], 2, 3) == False", "assert findNearDuplicates([1,0,1,1], 1, 2) == True", "assert findNearDuplicates([1,2,3,1], 3, 0) == True"]}
{"seq_id": 72134359073, "instruction": "Write a python function to find the number of subarrays with a given sum.", "output": "Here is the code to solve this problem: \n```python\ndef find_subarray_with_sum(arr, target_sum):\n    current_sum = 0\n    count = 0\n    sum_dict = {0: 1}\n    \n    for i in range(len(arr)):\n        current_sum += arr[i]\n        \n        if (current_sum - target_sum) in sum_dict:\n            count += sum_dict[current_sum - target_sum]\n            \n        if current_sum in sum_dict:\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n    \n    return count\n```", "code": "def find_subarray_with_sum(arr, target_sum):\n    current_sum = 0\n    count = 0\n    sum_dict = {0: 1}\n    \n    for i in range(len(arr)):\n        current_sum += arr[i]\n        \n        if (current_sum - target_sum) in sum_dict:\n            count += sum_dict[current_sum - target_sum]\n            \n        if current_sum in sum_dict:\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n    \n    return count", "entry_point": "find_subarray_with_sum", "testcase": ["assert find_subarray_with_sum([1, 1, 1], 2) == 2", "assert find_subarray_with_sum([1, 2, 3], 3) == 2", "assert find_subarray_with_sum([10, 2, -2, -20, 10], -10) == 3"]}
{"seq_id": 71759504435, "instruction": "Write a function to find the maximum difference between two prime numbers in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef max_prime_diff(list1):\n    primes = [num for num in list1 if is_prime(num)]\n    max_diff = 0\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            max_diff = max(max_diff, abs(primes[i] - primes[j]))\n    return max_diff\n```", "code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef max_prime_diff(list1):\n    primes = [num for num in list1 if is_prime(num)]\n    max_diff = 0\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            max_diff = max(max_diff, abs(primes[i] - primes[j]))\n    return max_diff", "entry_point": "max_prime_diff", "testcase": ["assert max_prime_diff([2, 3, 5, 7, 11, 17, 19, 23, 29, 31])==29", "assert max_prime_diff([2, 3, 5, 10, 20, 23, 29])==27", "assert max_prime_diff([2, 3, 5, 7, 11, 13, 17, 19])==17"]}
{"seq_id": 43649589625, "instruction": "Write a function to calculate the total cost of an item given its price and the sales tax rate.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_total_cost(price, tax_rate):\n    total_cost = price + (price * tax_rate)\n    return total_cost\n```", "code": "def calculate_total_cost(price, tax_rate):\n    total_cost = price + (price * tax_rate)\n    return total_cost", "entry_point": "calculate_total_cost", "testcase": ["assert calculate_total_cost(200, 0.08) == 216.0", "assert calculate_total_cost(100, 0.07) == 107.0", "assert calculate_total_cost(50, 0.1) == 55.0"]}
{"seq_id": 72050615606, "instruction": "Write a function to find the length of longest common subsequence in two strings.", "output": "Here is the code to solve this problem: \n```python\ndef lcs( X , Y ): \n    m = len(X) \n    n = len(Y) \n  \n    L = [[None]*(n + 1) for i in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    return L[m][n]\n```", "code": "def lcs( X , Y ): \n    m = len(X) \n    n = len(Y) \n  \n    L = [[None]*(n + 1) for i in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    return L[m][n]", "entry_point": "lcs", "testcase": ["assert lcs('AGGTAB', 'GXTXAYB') == 4", "assert lcs('ABC', 'DEF') == 0", "assert lcs('ABCBDAB', 'BDCAB') == 4"]}
{"seq_id": 14676242039, "instruction": "Write a python function to check if a given string is a valid identifier in python.\n\nA valid identifier:\n- must start with a letter (a-z or A-Z) or an underscore (_)\n- can have letters, numbers, or underscores (_)\n- cannot be a keyword in Python", "output": "Here is the code to solve this problem: \n```python\nimport keyword\n\ndef check_valid_identifier(s):\n    if keyword.iskeyword(s):\n        return False\n    if not s[0].isalpha() and s[0] != '_':\n        return False\n    for char in s[1:]:\n        if not char.isalnum() and char != '_':\n            return False\n    return True\n```", "code": "import keyword\n\ndef check_valid_identifier(s):\n    if keyword.iskeyword(s):\n        return False\n    if not s[0].isalpha() and s[0] != '_':\n        return False\n    for char in s[1:]:\n        if not char.isalnum() and char != '_':\n            return False\n    return True", "entry_point": "check_valid_identifier", "testcase": ["assert check_valid_identifier('2ndVar') == False", "assert check_valid_identifier('myVar') == True", "assert check_valid_identifier('class') == False", "assert check_valid_identifier('my Var') == False", "assert check_valid_identifier('_varName') == True"]}
{"seq_id": 44688525695, "instruction": "Write a python function to check if a string is a permutation of a palindrome.", "output": "Here is the code to solve this problem: \n```python\ndef is_permutation_of_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    odd_count = 0\n    for count in d.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n```", "code": "def is_permutation_of_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    odd_count = 0\n    for count in d.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1", "entry_point": "is_permutation_of_palindrome", "testcase": ["assert is_permutation_of_palindrome(\"Not a Palindrome\") == False", "assert is_permutation_of_palindrome(\"A man a plan a canal Panama\") == True", "assert is_permutation_of_palindrome(\"Tact Coa\") == True"]}
{"seq_id": 13958249814, "instruction": "Write a python function to check if a given string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.", "output": "Here is the code to solve this problem: \n```python\ndef check_palindrome(s):\n    return s == s[::-1]\n```", "code": "def check_palindrome(s):\n    return s == s[::-1]", "entry_point": "check_palindrome", "testcase": ["assert check_palindrome(\"radar\") == True", "assert check_palindrome(\"12345\") == False", "assert check_palindrome(\"python\") == False", "assert check_palindrome(\"madam\") == True", "assert check_palindrome(\"12321\") == True"]}
{"seq_id": 10168427241, "instruction": "Write a python function that counts the number of unique words in a given sentence.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique_words(sentence):\n    words = sentence.split()\n    unique_words = set(words)\n    return len(unique_words)\n```", "code": "def count_unique_words(sentence):\n    words = sentence.split()\n    unique_words = set(words)\n    return len(unique_words)", "entry_point": "count_unique_words", "testcase": ["assert count_unique_words(\"Hello world\") == 2", "assert count_unique_words(\"I am learning to code\") == 5", "assert count_unique_words(\"This is a test sentence\") == 5"]}
{"seq_id": 2279518876, "instruction": "Write a function that returns True if there are two distinct indices i and j in the array such that nums[i] - nums[j] <= t and the absolute difference between i and j is <= k.", "output": "Here is the code to solve this problem: \n```python\nimport bisect\n\ndef containsNearbyAlmostDuplicate(nums, k, t):\n    if t < 0: return False\n    n = len(nums)\n    buckets = {}\n    bucket_size = t + 1\n    for i in range(n):\n        bucket_num = nums[i] // bucket_size\n        if bucket_num in buckets:\n            return True\n        if bucket_num - 1 in buckets and abs(nums[i] - buckets[bucket_num - 1]) < bucket_size:\n            return True\n        if bucket_num + 1 in buckets and abs(nums[i] - buckets[bucket_num + 1]) < bucket_size:\n            return True\n        buckets[bucket_num] = nums[i]\n        if i >= k:\n            del buckets[nums[i-k] // bucket_size]\n    return False\n\n# Test cases\nprint(containsNearbyAlmostDuplicate([1,2,3,1], 3, 0)) # True\nprint(containsNearbyAlmostDuplicate([1,0,1,1], 1, 2)) # True\nprint(containsNearbyAlmostDuplicate([1,5,9,1,5,9], 2, 3)) # False\n```", "code": "import bisect\n\ndef containsNearbyAlmostDuplicate(nums, k, t):\n    if t < 0: return False\n    n = len(nums)\n    buckets = {}\n    bucket_size = t + 1\n    for i in range(n):\n        bucket_num = nums[i] // bucket_size\n        if bucket_num in buckets:\n            return True\n        if bucket_num - 1 in buckets and abs(nums[i] - buckets[bucket_num - 1]) < bucket_size:\n            return True\n        if bucket_num + 1 in buckets and abs(nums[i] - buckets[bucket_num + 1]) < bucket_size:\n            return True\n        buckets[bucket_num] = nums[i]\n        if i >= k:\n            del buckets[nums[i-k] // bucket_size]\n    return False\n\n# Test cases\nprint(containsNearbyAlmostDuplicate([1,2,3,1], 3, 0)) # True\nprint(containsNearbyAlmostDuplicate([1,0,1,1], 1, 2)) # True\nprint(containsNearbyAlmostDuplicate([1,5,9,1,5,9], 2, 3)) # False", "entry_point": "containsNearbyAlmostDuplicate", "testcase": ["assert containsNearbyAlmostDuplicate([1,5,9,1,5,9], 2, 3) == False", "assert containsNearbyAlmostDuplicate([1,2,3,1], 3, 0) == True", "assert containsNearbyAlmostDuplicate([1,0,1,1], 1, 2) == True"]}
{"seq_id": 30496105869, "instruction": "Write a Python function that swaps the values of two variables without using a temporary variable.", "output": "Here is the code to solve this problem: \n```python\ndef swap_values(a, b):\n    a, b = b, a\n    return a, b\n```", "code": "def swap_values(a, b):\n    a, b = b, a\n    return a, b", "entry_point": "swap_values", "testcase": ["assert swap_values([1, 2, 3], [4, 5, 6]) == ([4, 5, 6], [1, 2, 3])", "assert swap_values('hello', 'world') == ('world', 'hello')", "assert swap_values(5, 10) == (10, 5)"]}
{"seq_id": 37946821551, "instruction": "Write a function to perform mathematical multiplication operation across the given tuples.", "output": "Here is the code to solve this problem: \n```python\ndef multiply_elements(test_tup1, test_tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n```", "code": "def multiply_elements(test_tup1, test_tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)", "entry_point": "multiply_elements", "testcase": ["assert multiply_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (50, 8, 18, 27)", "assert multiply_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (72, 18, 32, 64)", "assert multiply_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (100, 98, 216, 162)"]}
{"seq_id": 21381323264, "instruction": "Write a function that calculates the Euclidean distance between two points in a 2D plane.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef calculate_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n```", "code": "import math\n\ndef calculate_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)", "entry_point": "calculate_distance", "testcase": ["assert calculate_distance((0, 0), (3, 4)) == 5.0", "assert calculate_distance((1, 2), (4, 6)) == 5.0", "assert calculate_distance((-1, -1), (-4, -5)) == 5.0"]}
{"seq_id": 23070856696, "instruction": "Write a function to calculate the frequency of each word in a given string of words.", "output": "Here is the code to solve this problem: \n```python\ndef word_frequency(words):\n    words = words.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    return freq\n```", "code": "def word_frequency(words):\n    words = words.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    return freq", "entry_point": "word_frequency", "testcase": ["assert word_frequency(\"The quick brown fox jumps over the lazy dog\") == {'The': 1, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'the': 1, 'lazy': 1, 'dog': 1}", "assert word_frequency(\"Hello world hello again\") == {'Hello': 1, 'world': 1, 'hello': 1, 'again': 1}", "assert word_frequency(\"I like apples I like oranges\") == {'I': 2, 'like': 2, 'apples': 1, 'oranges': 1}"]}
{"seq_id": 41010797095, "instruction": "Write a python function to find the longest common subsequence between two strings.\n\nThe longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences). It differs from problems of finding common substrings: unlike substrings, subsequences are not required to occupy consecutive positions within the original sequences.", "output": "Here is the code to solve this problem: \n```python\ndef find_lcs(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n```", "code": "def find_lcs(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "entry_point": "find_lcs", "testcase": ["assert find_lcs(\"AGGTAB\", \"GXTXAYB\") == 4", "assert find_lcs(\"ABC\", \"AC\") == 2", "assert find_lcs(\"ABCDGH\", \"AEDFHR\") == 3"]}
{"seq_id": 893965871, "instruction": "Write a function to find the nth Fibonacci number using an iterative method.", "output": "Here is the code to solve this problem: \n```python\ndef nth_fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```", "code": "def nth_fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "entry_point": "nth_fibonacci", "testcase": ["assert nth_fibonacci(20) == 6765", "assert nth_fibonacci(15) == 610", "assert nth_fibonacci(10) == 55", "assert nth_fibonacci(1) == 1", "assert nth_fibonacci(0) == 0"]}
{"seq_id": 71064741757, "instruction": "Write a function to find the maximum subarray sum using Kadane's algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_subarray_sum(nums):\n    max_current = max_global = nums[0]\n    for i in range(1, len(nums)):\n        max_current = max(nums[i], max_current + nums[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global\n```", "code": "def find_max_subarray_sum(nums):\n    max_current = max_global = nums[0]\n    for i in range(1, len(nums)):\n        max_current = max(nums[i], max_current + nums[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global", "entry_point": "find_max_subarray_sum", "testcase": ["assert find_max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6", "assert find_max_subarray_sum([1]) == 1", "assert find_max_subarray_sum([5,4,-1,7,8]) == 23"]}
{"seq_id": 28482211127, "instruction": "Write a python function to find the missing number in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef missing_num(lst):\n    return next(i for i in range(lst[0], lst[-1]+1) if i not in lst)\n```", "code": "def missing_num(lst):\n    return next(i for i in range(lst[0], lst[-1]+1) if i not in lst)", "entry_point": "missing_num", "testcase": ["assert missing_num([1,2,3,5]) == 4", "assert missing_num([1,2,3,4,6,7,8,9]) == 5", "assert missing_num([1,3]) == 2"]}
{"seq_id": 21289009557, "instruction": "Write a function to check if the given string is a strict palindrome. A strict palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation, and case.", "output": "Here is the code to solve this problem: \n```python\nimport re\ndef is_strict_palindrome(s: str) -> bool:\n    s = re.sub(r'[^A-Za-z0-9]', '', s).lower()\n    return s == s[::-1]\n```", "code": "import re\ndef is_strict_palindrome(s: str) -> bool:\n    s = re.sub(r'[^A-Za-z0-9]', '', s).lower()\n    return s == s[::-1]", "entry_point": "is_strict_palindrome", "testcase": ["assert is_strict_palindrome(\"race a car\") == False", "assert is_strict_palindrome(\"A man, a plan, a canal: Panama\") == True", "assert is_strict_palindrome(\"No lemon, no melon\") == True", "assert is_strict_palindrome(\"Was it a car or a cat I saw?\") == True"]}
{"seq_id": 15951949231, "instruction": "Write a function to find the largest continuous sum in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef max_contiguous_sum(nums):\n    if not nums:\n        return 0\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def max_contiguous_sum(nums):\n    if not nums:\n        return 0\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "max_contiguous_sum", "testcase": ["assert max_contiguous_sum([1, 2, -1, 3, 4, 10, 10, -10, -1]) == 29", "assert max_contiguous_sum([-1, -2, -3, -4]) == -1", "assert max_contiguous_sum([1, 2, 3, 4, 5]) == 15"]}
{"seq_id": 17361637427, "instruction": "Write a function to check if one string is a permutation of the other. A permutation is a rearrangement of letters. The comparison should ignore case and whitespace.", "output": "Here is the code to solve this problem: \n```python\ndef isPermutation(str1: str, str2: str) -> bool:\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n    if len(str1) != len(str2):\n        return False\n    checker = {}\n    for char in str1:\n        if char in checker:\n            checker[char] += 1\n        else:\n            checker[char] = 1\n    for char in str2:\n        if char in checker:\n            checker[char] -= 1\n        else:\n            return False\n    for key in checker:\n        if checker[key] != 0:\n            return False\n    return True\n```", "code": "def isPermutation(str1: str, str2: str) -> bool:\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n    if len(str1) != len(str2):\n        return False\n    checker = {}\n    for char in str1:\n        if char in checker:\n            checker[char] += 1\n        else:\n            checker[char] = 1\n    for char in str2:\n        if char in checker:\n            checker[char] -= 1\n        else:\n            return False\n    for key in checker:\n        if checker[key] != 0:\n            return False\n    return True", "entry_point": "isPermutation", "testcase": ["assert isPermutation('aabbcc', 'abc') == False", "assert isPermutation('Conversation', 'Voices rant on') == True", "assert isPermutation('Dormitory', 'dirty room') == True", "assert isPermutation('School Master', 'The classroom') == True", "assert isPermutation('Hi man', 'hi     man') == True"]}
{"seq_id": 20352002067, "instruction": "Write a function to check if a string s1 is a permutation of another string s2.", "output": "Here is the code to solve this problem: \n```python\ndef checkPermutation(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2):\n        return False\n    \n    count = [0] * 256\n\n    for i in range(len(s1)):\n        count[ord(s1[i])] += 1\n\n    for i in range(len(s2)):\n        count[ord(s2[i])] -= 1\n        if count[ord(s2[i])] < 0:\n            return False\n\n    return True\n```", "code": "def checkPermutation(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2):\n        return False\n    \n    count = [0] * 256\n\n    for i in range(len(s1)):\n        count[ord(s1[i])] += 1\n\n    for i in range(len(s2)):\n        count[ord(s2[i])] -= 1\n        if count[ord(s2[i])] < 0:\n            return False\n\n    return True", "entry_point": "checkPermutation", "testcase": ["assert checkPermutation(\"java\", \"avajj\") == False", "assert checkPermutation(\"python\", \"java\") == False", "assert checkPermutation(\"python\", \"nohtyp\") == True", "assert checkPermutation(\"java\", \"avaj\") == True", "assert checkPermutation(\"abc\", \"bca\") == True"]}
{"seq_id": 38625900984, "instruction": "Write a function to calculate the total number of days between two given dates.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\n\ndef calculate_days(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return delta.days\n```", "code": "from datetime import datetime\n\ndef calculate_days(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return delta.days", "entry_point": "calculate_days", "testcase": ["assert calculate_days(\"2020-01-01\", \"2020-01-10\") == 9", "assert calculate_days(\"2020-01-01\", \"2020-02-01\") == 31", "assert calculate_days(\"2020-01-01\", \"2021-01-01\") == 366"]}
{"seq_id": 74180735780, "instruction": "Write a function that implements the binary search algorithm using recursion to find the index of an element in a sorted array.", "output": "Here is the code to solve this problem: \n```python\ndef binary_search_recursive(arr, target, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n\n    if low > high:\n        return -1\n\n    mid = (low + high) // 2\n\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search_recursive(arr, target, mid + 1, high)\n    else:\n        return binary_search_recursive(arr, target, low, mid - 1)\n```", "code": "def binary_search_recursive(arr, target, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n\n    if low > high:\n        return -1\n\n    mid = (low + high) // 2\n\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search_recursive(arr, target, mid + 1, high)\n    else:\n        return binary_search_recursive(arr, target, low, mid - 1)", "entry_point": "binary_search_recursive", "testcase": ["assert binary_search_recursive([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 22) == -1", "assert binary_search_recursive([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 0", "assert binary_search_recursive([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 8", "assert binary_search_recursive([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 10) == 4"]}
{"seq_id": 27266797922, "instruction": "Write a function to calculate the area of a given circle.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef calculate_circle_area(radius):\n  area = math.pi * radius ** 2\n  return area\n```", "code": "import math\n\ndef calculate_circle_area(radius):\n  area = math.pi * radius ** 2\n  return area", "entry_point": "calculate_circle_area", "testcase": ["assert calculate_circle_area(2) == 12.566370614359172", "assert calculate_circle_area(1) == 3.141592653589793", "assert calculate_circle_area(3) == 28.274333882308138"]}
{"seq_id": 26222585129, "instruction": "Write a function that finds all unique pairs of elements in a given list that add up to a specific target sum. The function should return a list of tuples, where each tuple represents a pair of numbers that add up to the target sum. If no such pairs are found, the function should return an empty list.", "output": "Here is the code to solve this problem: \n```python\ndef find_pairs(nums, target):\n    seen = {}\n    pairs = []\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen[num] = True\n    return pairs\n```", "code": "def find_pairs(nums, target):\n    seen = {}\n    pairs = []\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen[num] = True\n    return pairs", "entry_point": "find_pairs", "testcase": ["assert find_pairs([3, 2, 4], 6) == [(2, 4)]", "assert find_pairs([-1, -2, -3, -4, -5], -8) == [(-3, -5)]", "assert find_pairs([3, 3], 6) == [(3, 3)]", "assert find_pairs([2, 7, 11, 15], 9) == [(2, 7)]"]}
{"seq_id": 14704209231, "instruction": "Write a function to convert a list of characters into a string with a separator.", "output": "Here is the code to solve this problem: \n```python\ndef join_characters_with_separator(char_list, separator):\n  return separator.join(char_list)\n```", "code": "def join_characters_with_separator(char_list, separator):\n  return separator.join(char_list)", "entry_point": "join_characters_with_separator", "testcase": ["assert join_characters_with_separator(['a', 'b', 'c'], ', ') == 'a, b, c'", "assert join_characters_with_separator(['1', '2', '3'], ':') == '1:2:3'", "assert join_characters_with_separator(['x', 'y', 'z'], '-') == 'x-y-z'"]}
{"seq_id": 40976492011, "instruction": "Write a function to find the number of ways to reach the Nth step of a staircase, given that you can either take 1 step, 2 steps, or 3 steps at a time.", "output": "Here is the code to solve this problem: \n```python\ndef count_ways_to_climb_stairs(n):\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        first = 1\n        second = 1\n        third = 2\n        for i in range(3, n+1):\n            current = first + second + third\n            first = second\n            second = third\n            third = current\n        return third\n```", "code": "def count_ways_to_climb_stairs(n):\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        first = 1\n        second = 1\n        third = 2\n        for i in range(3, n+1):\n            current = first + second + third\n            first = second\n            second = third\n            third = current\n        return third", "entry_point": "count_ways_to_climb_stairs", "testcase": ["assert count_ways_to_climb_stairs(3) == 4", "assert count_ways_to_climb_stairs(5) == 13", "assert count_ways_to_climb_stairs(4) == 7"]}
{"seq_id": 12169677832, "instruction": "Write a function to find the numbers which are prime and less than or equal to n.\n\nA prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. \n\nFor example, the first six prime numbers are 2, 3, 5, 7, 11, and 13.", "output": "Here is the code to solve this problem: \n```python\ndef prime_nums(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        elif num <= 3:\n            return True\n        elif num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while (i * i) <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    primes = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n```", "code": "def prime_nums(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        elif num <= 3:\n            return True\n        elif num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while (i * i) <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    primes = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "entry_point": "prime_nums", "testcase": ["assert prime_nums(10) == [2, 3, 5, 7]", "assert prime_nums(20) == [2, 3, 5, 7, 11, 13, 17, 19]", "assert prime_nums(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"]}
{"seq_id": 74794944905, "instruction": "Write a function to convert a string of digits in words to an integer.", "output": "Here is the code to solve this problem: \n```python\ndef str_to_int(str_num):\n    word_to_digit = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    digits = [word_to_digit[word] for word in str_num.split()]\n    return int(''.join(digits))\n```", "code": "def str_to_int(str_num):\n    word_to_digit = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    digits = [word_to_digit[word] for word in str_num.split()]\n    return int(''.join(digits))", "entry_point": "str_to_int", "testcase": ["assert str_to_int(\"one three five\") == 135", "assert str_to_int(\"zero nine five\") == 95", "assert str_to_int(\"nine eight seven\") == 987"]}
{"seq_id": 7625232626, "instruction": "Write a python function to find the sum of the digits of the factorial of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef fact_digit_sum(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    sum = 0\n    while(fact != 0):\n        sum += fact % 10\n        fact //= 10\n    return sum\n```", "code": "def fact_digit_sum(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    sum = 0\n    while(fact != 0):\n        sum += fact % 10\n        fact //= 10\n    return sum", "entry_point": "fact_digit_sum", "testcase": ["assert fact_digit_sum(5) == 3", "assert fact_digit_sum(10) == 27", "assert fact_digit_sum(3) == 6"]}
{"seq_id": 1643596801, "instruction": "Write a python function that takes a list of integers and a target sum, then returns the minimum length of a contiguous subarray of which the sum is greater than or equal to the target. If there isn't one, return 0 instead.", "output": "Here is the code to solve this problem: \n```python\ndef min_sub_array_len(s: int, nums: list) -> int:\n    n = len(nums)\n    left = 0\n    right = 0\n    current_sum = 0\n    min_len = float(\"inf\")\n    while right < n:\n        current_sum += nums[right]\n        while current_sum >= s:\n            min_len = min(min_len, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n        right += 1\n    return min_len if min_len != float(\"inf\") else 0\n```", "code": "def min_sub_array_len(s: int, nums: list) -> int:\n    n = len(nums)\n    left = 0\n    right = 0\n    current_sum = 0\n    min_len = float(\"inf\")\n    while right < n:\n        current_sum += nums[right]\n        while current_sum >= s:\n            min_len = min(min_len, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n        right += 1\n    return min_len if min_len != float(\"inf\") else 0", "entry_point": "min_sub_array_len", "testcase": ["assert min_sub_array_len(4, [1,4,4]) == 1", "assert min_sub_array_len(7, [2,3,1,2,4,3]) == 2", "assert min_sub_array_len(11, [1,1,1,1,1,1,1,1]) == 0"]}
{"seq_id": 39300292800, "instruction": "Write a function to convert a list of Roman numerals into their decimal equivalents.", "output": "Here is the code to solve this problem: \n```python\ndef roman_to_decimal(roman_list):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    decimal_list = []\n    for roman in roman_list:\n        decimal_value = 0\n        for i in range(len(roman)):\n            if i > 0 and roman_dict[roman[i]] > roman_dict[roman[i - 1]]:\n                decimal_value += roman_dict[roman[i]] - 2 * roman_dict[roman[i - 1]]\n            else:\n                decimal_value += roman_dict[roman[i]]\n        decimal_list.append(decimal_value)\n    return decimal_list\n```", "code": "def roman_to_decimal(roman_list):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    decimal_list = []\n    for roman in roman_list:\n        decimal_value = 0\n        for i in range(len(roman)):\n            if i > 0 and roman_dict[roman[i]] > roman_dict[roman[i - 1]]:\n                decimal_value += roman_dict[roman[i]] - 2 * roman_dict[roman[i - 1]]\n            else:\n                decimal_value += roman_dict[roman[i]]\n        decimal_list.append(decimal_value)\n    return decimal_list", "entry_point": "roman_to_decimal", "testcase": ["assert roman_to_decimal(['I', 'V', 'X', 'L', 'C', 'D', 'M']) == [1, 5, 10, 50, 100, 500, 1000]", "assert roman_to_decimal(['XXV', 'LXXV', 'CXXV', 'DXXV', 'MDCCCLXXV']) == [25, 75, 125, 525, 1875]", "assert roman_to_decimal(['IV', 'IX', 'XL', 'XC', 'CD', 'CM', 'MM']) == [4, 9, 40, 90, 400, 900, 2000]"]}
{"seq_id": 10902334772, "instruction": "Write a python function to find the minimum number of time slots required to run a list of tasks with a cooldown interval.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef find_min_time_slots(tasks, cooldown):\n    time_slots = 0\n    task_map = {}\n    output_map = defaultdict(lambda: 0)\n    for task in tasks:\n        if task not in task_map or time_slots - task_map[task] > cooldown:\n            time_slots += 1\n            task_map[task] = time_slots\n        else:\n            time_slots = task_map[task] + cooldown + 1\n            task_map[task] = time_slots\n    return time_slots\n```", "code": "from collections import defaultdict\n\ndef find_min_time_slots(tasks, cooldown):\n    time_slots = 0\n    task_map = {}\n    output_map = defaultdict(lambda: 0)\n    for task in tasks:\n        if task not in task_map or time_slots - task_map[task] > cooldown:\n            time_slots += 1\n            task_map[task] = time_slots\n        else:\n            time_slots = task_map[task] + cooldown + 1\n            task_map[task] = time_slots\n    return time_slots", "entry_point": "find_min_time_slots", "testcase": ["assert find_min_time_slots([1, 1, 2, 1], 2) == 7", "assert find_min_time_slots([1, 2, 3, 1, 2, 3], 3) == 7", "assert find_min_time_slots([1, 2, 3, 4, 5, 6, 2, 4, 6, 1, 2, 4], 6) == 18"]}
{"seq_id": 40470446340, "instruction": "Create a Python function to determine if the first player will win a game given a list of coin values. In this game, two players take turns picking one or two coins from the left side of a line of coins until no coins are left. The player with the higher total coin value wins. The function should return True if the first player wins, and False otherwise.", "output": "Here is the code to solve this problem: \n```python\ndef coin_game(values):\n    if not values:\n        return False\n    n = len(values)\n    dp = [0] * (n + 1)\n    sumv = [0] * (n + 1)\n    sumall = 0\n    for i in range(1, n+1):\n        sumall += values[i-1]\n        sumv[i] = sumv[i-1] + values[n-i]\n    for i in range(n+1):\n        if i == 0:\n            dp[i] = 0\n        elif i == 1:\n            dp[i] = values[n-i]\n        elif i == 2:\n            dp[i] = values[n-i] + values[n-i+1]\n        else:\n            dp[i] = max(sumv[i]-dp[i-1], sumv[i]-dp[i-2])\n    return dp[n] > sumall/2\n```", "code": "def coin_game(values):\n    if not values:\n        return False\n    n = len(values)\n    dp = [0] * (n + 1)\n    sumv = [0] * (n + 1)\n    sumall = 0\n    for i in range(1, n+1):\n        sumall += values[i-1]\n        sumv[i] = sumv[i-1] + values[n-i]\n    for i in range(n+1):\n        if i == 0:\n            dp[i] = 0\n        elif i == 1:\n            dp[i] = values[n-i]\n        elif i == 2:\n            dp[i] = values[n-i] + values[n-i+1]\n        else:\n            dp[i] = max(sumv[i]-dp[i-1], sumv[i]-dp[i-2])\n    return dp[n] > sumall/2", "entry_point": "coin_game", "testcase": ["assert coin_game([1, 2, 4])==False", "assert coin_game([1, 2, 2])==True", "assert coin_game([7, 9, 5, 3, 10])==True"]}
{"seq_id": 16341553464, "instruction": "Write a python function to find the number of unique pairs in an array that have a specific difference.", "output": "Here is the code to solve this problem: \n```python\ndef count_pairs_with_diff(arr, diff):\n    arr.sort()\n    count = 0\n    left, right = 0, 1\n    while right < len(arr):\n        current_diff = arr[right] - arr[left]\n        if current_diff == diff:\n            count += 1\n            left += 1\n            right += 1\n        elif current_diff < diff:\n            right += 1\n        else:\n            left += 1\n            if left == right:\n                right += 1\n    return count\n```", "code": "def count_pairs_with_diff(arr, diff):\n    arr.sort()\n    count = 0\n    left, right = 0, 1\n    while right < len(arr):\n        current_diff = arr[right] - arr[left]\n        if current_diff == diff:\n            count += 1\n            left += 1\n            right += 1\n        elif current_diff < diff:\n            right += 1\n        else:\n            left += 1\n            if left == right:\n                right += 1\n    return count", "entry_point": "count_pairs_with_diff", "testcase": ["assert count_pairs_with_diff([1, 2, 3, 4, 5], 1) == 4", "assert count_pairs_with_diff([1, 3, 1, 5, 4], 0) == 1", "assert count_pairs_with_diff([1, 5, 3, 4, 2], 2) == 3"]}
{"seq_id": 73468187319, "instruction": "Write a python function to find the union of multiple sets.", "output": "Here is the code to solve this problem: \n```python\ndef union_sets(sets_list):\n    result = set()\n    for s in sets_list:\n        result = result.union(s)\n    return result\n```", "code": "def union_sets(sets_list):\n    result = set()\n    for s in sets_list:\n        result = result.union(s)\n    return result", "entry_point": "union_sets", "testcase": ["assert union_sets([{20, 21, 22}, {22, 23, 24, 25}, {26, 27, 28}]) == {20, 21, 22, 23, 24, 25, 26, 27, 28}", "assert union_sets([{10, 11, 12}, {11, 13, 14, 15}, {12, 16, 17}]) == {10, 11, 12, 13, 14, 15, 16, 17}", "assert union_sets([{1, 2, 3}, {4, 5}, {6, 7, 8}]) == {1, 2, 3, 4, 5, 6, 7, 8}"]}
{"seq_id": 37167417734, "instruction": "Write a function to find the most frequent elements in a list and return them as a list. If there are multiple elements with the same highest frequency, return all of them. The order of the elements in the returned list does not matter.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef top_frequent_elements(nums, k):\n    freq = Counter(nums)\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    return [key for key, _ in sorted_freq[:k]]\n```", "code": "from collections import Counter\n\ndef top_frequent_elements(nums, k):\n    freq = Counter(nums)\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    return [key for key, _ in sorted_freq[:k]]", "entry_point": "top_frequent_elements", "testcase": ["assert top_frequent_elements([4,1,-2,1,5,1,5,4,4], 3) == [4,1,5]", "assert top_frequent_elements([1,1,1,2,2,3], 2) == [1,2]", "assert top_frequent_elements([1], 1) == [1]"]}
{"seq_id": 69878226987, "instruction": "Write a function to find the number of ways to decode a message using a given key.", "output": "Here is the code to solve this problem: \n```python\ndef decode_ways(s, key):\n    if not s or s[0]=='0':\n        return 0\n    n, dp = len(s), [0]*(len(s)+1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n+1):\n        dp[i] = 0\n        if s[i-1:i]!='0':\n            dp[i] = dp[i-1]\n        if s[i-2:i]<='26' and s[i-2:i]!='00':\n            dp[i] += dp[i-2]\n    return dp[n]\n```", "code": "def decode_ways(s, key):\n    if not s or s[0]=='0':\n        return 0\n    n, dp = len(s), [0]*(len(s)+1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n+1):\n        dp[i] = 0\n        if s[i-1:i]!='0':\n            dp[i] = dp[i-1]\n        if s[i-2:i]<='26' and s[i-2:i]!='00':\n            dp[i] += dp[i-2]\n    return dp[n]", "entry_point": "decode_ways", "testcase": ["assert decode_ways(\"06\", {'1': 'A', '2': 'B', '3': 'C', '4': 'D', '5': 'E', '6': 'F', '7': 'G', '8': 'H', '9': 'I', '10': 'J', '11': 'K', '12': 'L', '13': 'M', '14': 'N', '15': 'O', '16': 'P', '17': 'Q', '18': 'R', '19': 'S', '20': 'T', '21': 'U', '22': 'V', '23': 'W', '24': 'X', '25': 'Y', '26': 'Z'})==0", "assert decode_ways(\"226\", {'1': 'A', '2': 'B', '3': 'C', '4': 'D', '5': 'E', '6': 'F', '7': 'G', '8': 'H', '9': 'I', '10': 'J', '11': 'K', '12': 'L', '13': 'M', '14': 'N', '15': 'O', '16': 'P', '17': 'Q', '18': 'R', '19': 'S', '20': 'T', '21': 'U', '22': 'V', '23': 'W', '24': 'X', '25': 'Y', '26': 'Z'})==3", "assert decode_ways(\"12\", {'1': 'A', '2': 'B', '3': 'C', '4': 'D', '5': 'E', '6': 'F', '7': 'G', '8': 'H', '9': 'I', '10': 'J', '11': 'K', '12': 'L', '13': 'M', '14': 'N', '15': 'O', '16': 'P', '17': 'Q', '18': 'R', '19': 'S', '20': 'T', '21': 'U', '22': 'V', '23': 'W', '24': 'X', '25': 'Y', '26': 'Z'})==2"]}
{"seq_id": 24036197312, "instruction": "Write a function to calculate the maximum consecutive floors without special floors in a building. You are given a range of floors from 'bottom' to 'top', and a list of 'special' floors. Your task is to find the largest number of consecutive floors that do not contain any special floors.", "output": "Here is the code to solve this problem: \n```python\ndef max_consecutive(bottom: int, top: int, special: list[int]) -> int:\n    special.extend([bottom-1, top+1])  # adding sentinels\n    special.sort()\n    maxi = 0\n    for i in range(1, len(special)):\n        maxi = max(maxi, special[i]-special[i-1]-1)\n    return maxi\n```", "code": "def max_consecutive(bottom: int, top: int, special: list[int]) -> int:\n    special.extend([bottom-1, top+1])  # adding sentinels\n    special.sort()\n    maxi = 0\n    for i in range(1, len(special)):\n        maxi = max(maxi, special[i]-special[i-1]-1)\n    return maxi", "entry_point": "max_consecutive", "testcase": ["assert max_consecutive(6, 8, [7,6,8]) == 0", "assert max_consecutive(2, 9, [4,6]) == 3", "assert max_consecutive(1, 5, [2,5]) == 2"]}
{"seq_id": 32230330759, "instruction": "Write a function to sort the given array by using Heap Sort.", "output": "Here is the code to solve this problem: \n```python\ndef sift(li, low, high):\n    \"\"\"\n    :param li: list\n    :param low: the position of root in the heap\n    :param high: the position of the last element in the heap\n    \"\"\"\n    i = low # index, as pointer1, point to root node\n    j = 2 * i + 1 # the left node of i\n    tmp = li[low] # store root value\n    \n    while j <= high:\n        # if the right node exist, and greater than the left one\n        if (j + 1 <= high) and (li[j + 1] > li[j]):\n             j = j + 1 # then j point to the right node\n        # if not, j still point to the left ndoe\n        \n        # compare a son node to its father node(root)\n        if li[j] > tmp: # the son node greater than the fathter node\n            li[i] = li[j] # move the son node to the father node\n            i = j # dive into the next level\n            j = 2 * i + 1\n        else: # the father node greater than the son node\n            li[i] = tmp # put the father node to the i position\n            break\n    else: # j > high\n        li[i] = tmp # put tmp to the left node\n\ndef heap_sort(li):\n    \"\"\"\n    :param li: list\n    \"\"\"\n    n = len(li)\n    for i in range(n // 2 - 1, -1, -1):\n        sift(li, i, n - 1)\n    \n    for i in range(n - 1, -1, -1):\n        li[i], li[0] = li[0], li[i]\n        sift(li, 0, i - 1)\n    return li\n```", "code": "def sift(li, low, high):\n    \"\"\"\n    :param li: list\n    :param low: the position of root in the heap\n    :param high: the position of the last element in the heap\n    \"\"\"\n    i = low # index, as pointer1, point to root node\n    j = 2 * i + 1 # the left node of i\n    tmp = li[low] # store root value\n    \n    while j <= high:\n        # if the right node exist, and greater than the left one\n        if (j + 1 <= high) and (li[j + 1] > li[j]):\n             j = j + 1 # then j point to the right node\n        # if not, j still point to the left ndoe\n        \n        # compare a son node to its father node(root)\n        if li[j] > tmp: # the son node greater than the fathter node\n            li[i] = li[j] # move the son node to the father node\n            i = j # dive into the next level\n            j = 2 * i + 1\n        else: # the father node greater than the son node\n            li[i] = tmp # put the father node to the i position\n            break\n    else: # j > high\n        li[i] = tmp # put tmp to the left node\n\ndef heap_sort(li):\n    \"\"\"\n    :param li: list\n    \"\"\"\n    n = len(li)\n    for i in range(n // 2 - 1, -1, -1):\n        sift(li, i, n - 1)\n    \n    for i in range(n - 1, -1, -1):\n        li[i], li[0] = li[0], li[i]\n        sift(li, 0, i - 1)\n    return li", "entry_point": "heap_sort", "testcase": ["assert heap_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]", "assert heap_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]", "assert heap_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]"]}
{"seq_id": 70015659007, "instruction": "Write a function to find the nth Catalan number.\nCatalan numbers are a sequence of natural numbers that have many applications in combinatorial mathematics. The nth Catalan number is given by the formula: C(n) = (2n choose n) / (n + 1)", "output": "Here is the code to solve this problem: \n```python\ndef catalan(n):\n    if n <= 1:\n        return 1\n    catalan = [0 for _ in range(n + 1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]\n```", "code": "def catalan(n):\n    if n <= 1:\n        return 1\n    catalan = [0 for _ in range(n + 1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]", "entry_point": "catalan", "testcase": ["assert catalan(5) == 42", "assert catalan(3) == 5", "assert catalan(0) == 1"]}
{"seq_id": 24098442706, "instruction": "Write a function to find the number of times a given target appears in a 2D list (list of lists).", "output": "Here is the code to solve this problem: \n```python\ndef count_target_2D_list(lst, target):\n    count = 0\n    for row in lst:\n        for elem in row:\n            if elem == target:\n                count += 1\n    return count\n```", "code": "def count_target_2D_list(lst, target):\n    count = 0\n    for row in lst:\n        for elem in row:\n            if elem == target:\n                count += 1\n    return count", "entry_point": "count_target_2D_list", "testcase": ["assert count_target_2D_list([[1,2,3],[4,5,6],[7,8,9]], 5) == 1", "assert count_target_2D_list([[1,1,1],[1,1,1],[1,1,1]], 1) == 9", "assert count_target_2D_list([[10,20,30],[40,50,60],[70,80,90]], 50) == 1"]}
{"seq_id": 23129864674, "instruction": "Write a python function to find the third maximum number in a given list of integers. If the third maximum does not exist, return the maximum number.", "output": "Here is the code to solve this problem: \n```python\ndef thirdMax(nums):\n    unique_nums = list(set(nums))\n    if len(unique_nums) < 3:\n        return max(unique_nums)\n    else:\n        unique_nums.remove(max(unique_nums))\n        unique_nums.remove(max(unique_nums))\n        return max(unique_nums)\n```", "code": "def thirdMax(nums):\n    unique_nums = list(set(nums))\n    if len(unique_nums) < 3:\n        return max(unique_nums)\n    else:\n        unique_nums.remove(max(unique_nums))\n        unique_nums.remove(max(unique_nums))\n        return max(unique_nums)", "entry_point": "thirdMax", "testcase": ["assert thirdMax([1,2]) == 2", "assert thirdMax([3,2,1]) == 1", "assert thirdMax([2,2,3,1]) == 1"]}
{"seq_id": 15320073758, "instruction": "Write a function that calculates the sum of the digits of a number raised to a given power.", "output": "Here is the code to solve this problem: \n```python\ndef power_digit_sum(number, power):\n    return sum([int(digit)**power for digit in str(number)])\n```", "code": "def power_digit_sum(number, power):\n    return sum([int(digit)**power for digit in str(number)])", "entry_point": "power_digit_sum", "testcase": ["assert power_digit_sum(10, 3) == 1", "assert power_digit_sum(999, 1) == 27", "assert power_digit_sum(123, 2) == 14"]}
{"seq_id": 23323307241, "instruction": "Write a python function to find the sum of the series 1^3 + 2^3 + 3^3 + ... + n^3.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_series(n): \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i) \n    return sum\n```", "code": "def sum_of_series(n): \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i) \n    return sum", "entry_point": "sum_of_series", "testcase": ["assert sum_of_series(3) == 36", "assert sum_of_series(5) == 225", "assert sum_of_series(4) == 100"]}
{"seq_id": 23945095251, "instruction": "Write a function to find the largest number formed by the given list of integers.", "output": "Here is the code to solve this problem: \n```python\nimport functools\n\n\ndef largest_number(numbers):\n    def comparator(n1, n2):\n        number_1 = int(n1 + n2)\n        number_2 = int(n2 + n1)\n\n        return (number_1 > number_2) - (number_1 < number_2)\n\n    numbers = list(map(str, numbers))\n    numbers = sorted(numbers, key=functools.cmp_to_key(comparator), reverse=True)\n\n    answer = str(int(\"\".join(numbers)))\n    return answer\n```", "code": "import functools\n\n\ndef largest_number(numbers):\n    def comparator(n1, n2):\n        number_1 = int(n1 + n2)\n        number_2 = int(n2 + n1)\n\n        return (number_1 > number_2) - (number_1 < number_2)\n\n    numbers = list(map(str, numbers))\n    numbers = sorted(numbers, key=functools.cmp_to_key(comparator), reverse=True)\n\n    answer = str(int(\"\".join(numbers)))\n    return answer", "entry_point": "largest_number", "testcase": ["assert largest_number([10, 2]) == \"210\"", "assert largest_number([1, 10, 100, 1000]) == \"1101001000\"", "assert largest_number([3, 30, 34, 5, 9]) == \"9534330\""]}
{"seq_id": 30756824209, "instruction": "Write a function to find the sum of all the elements in a list that are located at odd indices.", "output": "Here is the code to solve this problem: \n```python\ndef odd_index_sum(list1):\n    sum_odd = 0\n    for i in range(1, len(list1), 2):\n        sum_odd += list1[i]\n    return sum_odd\n```", "code": "def odd_index_sum(list1):\n    sum_odd = 0\n    for i in range(1, len(list1), 2):\n        sum_odd += list1[i]\n    return sum_odd", "entry_point": "odd_index_sum", "testcase": ["assert odd_index_sum([10, 20, 30, 40, 50]) == 60", "assert odd_index_sum([1, 2, 3, 4, 5]) == 6", "assert odd_index_sum([5, 15, 25, 35, 45]) == 50"]}
{"seq_id": 8708928247, "instruction": "Write a python function to convert a given number n to a string that represents the number in base 3, but instead of the usual digits 0, 1, and 2, it uses 1, 2, and 4 respectively.", "output": "Here is the code to solve this problem: \n```python\ndef convert_to_base_3(n):\n    mapping = {0: '1', 1: '2', 2: '4'}\n    result = []\n    i = 0\n    while True:\n        if n <= (3 ** (i + 1) - 1) // 2:\n            break\n        i += 1\n    start = (3 ** i - 1) // 2\n    m = n - start\n    digits = []\n    while m > 0:\n        remainder = m % 3\n        m = m // 3\n        digits.append(mapping[remainder])\n    return ''.join(digits[::-1])\n```", "code": "def convert_to_base_3(n):\n    mapping = {0: '1', 1: '2', 2: '4'}\n    result = []\n    i = 0\n    while True:\n        if n <= (3 ** (i + 1) - 1) // 2:\n            break\n        i += 1\n    start = (3 ** i - 1) // 2\n    m = n - start\n    digits = []\n    while m > 0:\n        remainder = m % 3\n        m = m // 3\n        digits.append(mapping[remainder])\n    return ''.join(digits[::-1])", "entry_point": "convert_to_base_3", "testcase": ["assert convert_to_base_3(3) == '4'", "assert convert_to_base_3(7) == '21'", "assert convert_to_base_3(2) == '2'"]}
{"seq_id": 26252668582, "instruction": "Write a function that takes a list of integers and returns a new list where each element is the factorial of the corresponding element in the input list.", "output": "Here is the code to solve this problem: \n```python\nfrom math import factorial\n\ndef factorial_list(test_list):\n    return [factorial(i) for i in test_list]\n```", "code": "from math import factorial\n\ndef factorial_list(test_list):\n    return [factorial(i) for i in test_list]", "entry_point": "factorial_list", "testcase": ["assert factorial_list([0, 1, 2, 3]) == [1, 1, 2, 6]", "assert factorial_list([3, 5, 7]) == [6, 120, 5040]", "assert factorial_list([1, 2, 3, 4, 5]) == [1, 2, 6, 24, 120]"]}
{"seq_id": 4098521020, "instruction": "Write a function to find the smallest rectangle enclosing all the given points in a 2D plane.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef find_smallest_rectangle(points: List[List[int]]) -> int:\n    if len(points) <= 2:\n        return 0\n    \n    min_x, max_x = float('inf'), float('-inf')\n    min_y, max_y = float('inf'), float('-inf')\n    \n    for x, y in points:\n        min_x = min(min_x, x)\n        max_x = max(max_x, x)\n        min_y = min(min_y, y)\n        max_y = max(max_y, y)\n        \n    return (max_x - min_x) * (max_y - min_y)\n```", "code": "from typing import List\n\ndef find_smallest_rectangle(points: List[List[int]]) -> int:\n    if len(points) <= 2:\n        return 0\n    \n    min_x, max_x = float('inf'), float('-inf')\n    min_y, max_y = float('inf'), float('-inf')\n    \n    for x, y in points:\n        min_x = min(min_x, x)\n        max_x = max(max_x, x)\n        min_y = min(min_y, y)\n        max_y = max(max_y, y)\n        \n    return (max_x - min_x) * (max_y - min_y)", "entry_point": "find_smallest_rectangle", "testcase": ["assert find_smallest_rectangle([(1,1), (1,3), (3,1), (3,3), (2,2)]) == 4", "assert find_smallest_rectangle([(1,1), (1,3), (3,1), (3,3), (4,1)]) == 6", "assert find_smallest_rectangle([(1,1)]) == 0"]}
{"seq_id": 4185244725, "instruction": "Write a python function to find the length of the longest substring that can be obtained by replacing at most k characters in the given string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef longest_substring_with_k_replacements(s: str, k: int) -> int:\n    left = 0\n    max_length = 0\n    char_count = defaultdict(int)\n    max_char_count = 0\n\n    for right in range(len(s)):\n        char_count[s[right]] += 1\n        max_char_count = max(max_char_count, char_count[s[right]])\n\n        if (right - left + 1) - max_char_count > k:\n            char_count[s[left]] -= 1\n            left += 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n```", "code": "from collections import defaultdict\n\ndef longest_substring_with_k_replacements(s: str, k: int) -> int:\n    left = 0\n    max_length = 0\n    char_count = defaultdict(int)\n    max_char_count = 0\n\n    for right in range(len(s)):\n        char_count[s[right]] += 1\n        max_char_count = max(max_char_count, char_count[s[right]])\n\n        if (right - left + 1) - max_char_count > k:\n            char_count[s[left]] -= 1\n            left += 1\n\n        max_length = max(max_length, right - left + 1)\n\n    return max_length", "entry_point": "longest_substring_with_k_replacements", "testcase": ["assert longest_substring_with_k_replacements(\"ABAB\", 2) == 4", "assert longest_substring_with_k_replacements(\"ABBB\", 2) == 4", "assert longest_substring_with_k_replacements(\"AABABBA\", 1) == 4"]}
{"seq_id": 74354451341, "instruction": "Write a function to find the shortest path from source to destination in a graph with at most K edges. The graph is represented as a list of flights where each flight is a tuple (src, dst, price). The function should return the cheapest price from source to destination, or -1 if there is no such path.", "output": "Here is the code to solve this problem: \n```python\nfrom math import inf, isinf\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\ndef find_cheapest_price(n, flights, src, dst, K):\n    graph = defaultdict(list)\n    for u, v, w in flights:\n        graph[u].append((v, w))\n    costs = defaultdict(lambda: inf)\n    queue = [(0, -1, src)]\n    while queue:\n        cost, stops, node = heappop(queue)\n        if stops > K or cost > costs[node]:\n            continue\n        costs[node] = cost\n        if node == dst:\n            return cost\n        for neigh, weight in graph[node]:\n            heappush(queue, (cost + weight, stops + 1, neigh))\n    return -1 if isinf(costs[dst]) else costs[dst]\n```", "code": "from math import inf, isinf\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\ndef find_cheapest_price(n, flights, src, dst, K):\n    graph = defaultdict(list)\n    for u, v, w in flights:\n        graph[u].append((v, w))\n    costs = defaultdict(lambda: inf)\n    queue = [(0, -1, src)]\n    while queue:\n        cost, stops, node = heappop(queue)\n        if stops > K or cost > costs[node]:\n            continue\n        costs[node] = cost\n        if node == dst:\n            return cost\n        for neigh, weight in graph[node]:\n            heappush(queue, (cost + weight, stops + 1, neigh))\n    return -1 if isinf(costs[dst]) else costs[dst]", "entry_point": "find_cheapest_price", "testcase": ["assert find_cheapest_price(4, [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], 0, 3, 1) == 700", "assert find_cheapest_price(3, [[0,1,100],[1,2,100],[0,2,500]], 0, 2, 0) == 500", "assert find_cheapest_price(3, [[0,1,100],[1,2,100],[0,2,500]], 0, 2, 1) == 200"]}
{"seq_id": 14198642365, "instruction": "Write a function to find the minimum element of a list of tuples based on the second element of each tuple.", "output": "Here is the code to solve this problem: \n```python\ndef find_min(test_list):\n  res = min(int(j) for i in test_list for j in i[1:])\n  return (res)\n```", "code": "def find_min(test_list):\n  res = min(int(j) for i in test_list for j in i[1:])\n  return (res)", "entry_point": "find_min", "testcase": ["assert find_min([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 1", "assert find_min([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 2", "assert find_min([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 3"]}
{"seq_id": 16042950865, "instruction": "Write a python function to find the largest continuous sum in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_LargestContinuousSum(arr):\n    if len(arr) == 0:\n        return 0\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def find_LargestContinuousSum(arr):\n    if len(arr) == 0:\n        return 0\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "find_LargestContinuousSum", "testcase": ["assert find_LargestContinuousSum([1,2,3,4,5]) == 15", "assert find_LargestContinuousSum([-1,-2,-3,-4]) == -1", "assert find_LargestContinuousSum([1,2,-1,3,4,10,10,-10,-1]) == 29"]}
{"seq_id": 13784981041, "instruction": "Write a python function to generate all possible combinations of given length using the elements of a list. The combinations can have repeated elements.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import product\n\ndef generate_combinations(elements, length):\n    return [''.join(e) for e in product(elements, repeat=length)]\n```", "code": "from itertools import product\n\ndef generate_combinations(elements, length):\n    return [''.join(e) for e in product(elements, repeat=length)]", "entry_point": "generate_combinations", "testcase": ["assert generate_combinations(['a','b','c'],2) == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']", "assert generate_combinations(['x','y'],4) == ['xxxx', 'xxxy', 'xxyx', 'xxyy', 'xyxx', 'xyxy', 'xyyx', 'xyyy', 'yxxx', 'yxxy', 'yxyx', 'yxyy', 'yyxx', 'yyxy', 'yyyx', 'yyyy']", "assert generate_combinations(['1','2','3'],3) == ['111', '112', '113', '121', '122', '123', '131', '132', '133', '211', '212', '213', '221', '222', '223', '231', '232', '233', '311', '312', '313', '321', '322', '323', '331', '332', '333']"]}
{"seq_id": 1924677019, "instruction": "Write a function to find the majority element in an array. The majority element is the element that appears more than n/2 times.", "output": "Here is the code to solve this problem: \n```python\ndef majority_element(arr):\n    count = 0\n    candidate = None\n\n    for i in arr:\n        if count == 0:\n            candidate = i\n            count = 1\n        elif candidate == i:\n            count += 1\n        else:\n            count -= 1\n\n    if count > 0:\n        if arr.count(candidate) > len(arr) // 2:\n            return candidate\n        else:\n            return None\n    else:\n        return None\n```", "code": "def majority_element(arr):\n    count = 0\n    candidate = None\n\n    for i in arr:\n        if count == 0:\n            candidate = i\n            count = 1\n        elif candidate == i:\n            count += 1\n        else:\n            count -= 1\n\n    if count > 0:\n        if arr.count(candidate) > len(arr) // 2:\n            return candidate\n        else:\n            return None\n    else:\n        return None", "entry_point": "majority_element", "testcase": ["assert majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4", "assert majority_element([3, 3, 4, 2, 4, 4, 2, 4]) == None", "assert majority_element([1, 2, 3, 3, 3]) == 3"]}
{"seq_id": 2730680645, "instruction": "Write a function to convert a list of integers into a single integer by concatenating the digits.", "output": "Here is the code to solve this problem: \n```python\ndef list_to_int(arr):\n    result = 0\n    for i in arr:\n        result = result * 10 + i\n    return result\n```", "code": "def list_to_int(arr):\n    result = 0\n    for i in arr:\n        result = result * 10 + i\n    return result", "entry_point": "list_to_int", "testcase": ["assert list_to_int([1,2,3,4,5,6,7,8,9]) == 123456789", "assert list_to_int([1,0,2,3]) == 1023", "assert list_to_int([9,9,9,9]) == 9999"]}
{"seq_id": 25200424637, "instruction": "Write a python function to find the minimum number of meeting rooms required for a list of meetings. Meetings are represented as lists of start and end times.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef min_Meeting_Rooms(intervals):\n    \"\"\"\n        A python function to find the minimum number of meeting rooms required.\n        Meetings are represented as lists of start and end times.\n    \"\"\"\n    \n    l = []\n    for start, end in sorted(intervals):\n        if l and l[0] <= start:\n            heapq.heapreplace(l, end)\n        else:\n            heapq.heappush(l, end)\n    return len(l)\n```", "code": "import heapq\n\ndef min_Meeting_Rooms(intervals):\n    \"\"\"\n        A python function to find the minimum number of meeting rooms required.\n        Meetings are represented as lists of start and end times.\n    \"\"\"\n    \n    l = []\n    for start, end in sorted(intervals):\n        if l and l[0] <= start:\n            heapq.heapreplace(l, end)\n        else:\n            heapq.heappush(l, end)\n    return len(l)", "entry_point": "min_Meeting_Rooms", "testcase": ["assert min_Meeting_Rooms([[0, 30],[5, 10],[15, 20]]) == 2", "assert min_Meeting_Rooms([[0, 30],[5, 10],[15, 20],[25,35]]) == 2", "assert min_Meeting_Rooms([[7,10],[2,4]]) == 1"]}
{"seq_id": 86712476205, "instruction": "Write a python function to find the number of distinct sub-sequences in a given string.\n\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. For example, \"ace\" is a subsequence of \"abcde\".\n\nGiven a string S and a string T, count the number of distinct subsequences of S which equals T.", "output": "Here is the code to solve this problem: \n```python\ndef numDistinct(s: str, t: str) -> int:\n    m, n = len(t), len(s)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for j in range(n + 1):\n        dp[0][j] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1] + (dp[i - 1][j - 1] if t[i - 1] == s[j - 1] else 0)\n    return dp[m][n]\n```", "code": "def numDistinct(s: str, t: str) -> int:\n    m, n = len(t), len(s)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for j in range(n + 1):\n        dp[0][j] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1] + (dp[i - 1][j - 1] if t[i - 1] == s[j - 1] else 0)\n    return dp[m][n]", "entry_point": "numDistinct", "testcase": ["assert numDistinct(\"rabbbit\", \"rabbit\") == 3", "assert numDistinct(\"ccc\", \"c\") == 3", "assert numDistinct(\"babgbag\", \"bag\") == 5"]}
{"seq_id": 29343952752, "instruction": "Write a python function to find the number of islands in a given grid. An island is represented by '1' and water is represented by '0'. Each cell is connected horizontally/vertically (not diagonally) to the adjacent cells and forms an island.", "output": "Here is the code to solve this problem: \n```python\ndef count_islands(grid):\n    if not grid:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(grid, i, j):\n    if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n        return\n    grid[i][j] = -1\n    dfs(grid, i+1, j)\n    dfs(grid, i-1, j)\n    dfs(grid, i, j+1)\n    dfs(grid, i, j-1)\n```", "code": "def count_islands(grid):\n    if not grid:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(grid, i, j):\n    if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n        return\n    grid[i][j] = -1\n    dfs(grid, i+1, j)\n    dfs(grid, i-1, j)\n    dfs(grid, i, j+1)\n    dfs(grid, i, j-1)", "entry_point": "count_islands", "testcase": ["assert count_islands([[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]]) == 6", "assert count_islands([[1, 1, 0], [0, 1, 1], [0, 0, 1]]) == 1", "assert count_islands([[1, 1, 1], [0, 0, 0], [1, 1, 1], [0, 0, 0]]) == 2"]}
{"seq_id": 10741459213, "instruction": "Write a function to find the longest palindrome substring in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_palindrome_substring(s):\n    if len(s) < 2:\n        return s\n    start = 0\n    max_len = 1\n\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return right - left - 1\n\n    for i in range(len(s)):\n        len1 = expand_around_center(i, i)\n        len2 = expand_around_center(i, i + 1)\n        max_len = max(max_len, len1, len2)\n        if max_len > (i - start + 1):\n            start = i - (max_len - 1) // 2\n    return s[start:start + max_len]\n```", "code": "def longest_palindrome_substring(s):\n    if len(s) < 2:\n        return s\n    start = 0\n    max_len = 1\n\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return right - left - 1\n\n    for i in range(len(s)):\n        len1 = expand_around_center(i, i)\n        len2 = expand_around_center(i, i + 1)\n        max_len = max(max_len, len1, len2)\n        if max_len > (i - start + 1):\n            start = i - (max_len - 1) // 2\n    return s[start:start + max_len]", "entry_point": "longest_palindrome_substring", "testcase": ["assert longest_palindrome_substring(\"babad\") == \"bab\"", "assert longest_palindrome_substring(\"ac\") == \"a\"", "assert longest_palindrome_substring(\"a\") == \"a\""]}
{"seq_id": 17123100652, "instruction": "Write a function to calculate the number of ways to climb a staircase of n steps, given that you can take a step of 1, 2, or 3 at a time.", "output": "Here is the code to solve this problem: \n```python\ndef staircase_ways(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return staircase_ways(n-1) + staircase_ways(n-2) + staircase_ways(n-3)\n```", "code": "def staircase_ways(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return staircase_ways(n-1) + staircase_ways(n-2) + staircase_ways(n-3)", "entry_point": "staircase_ways", "testcase": ["assert staircase_ways(3) == 4", "assert staircase_ways(4) == 7", "assert staircase_ways(5) == 13"]}
{"seq_id": 71531346737, "instruction": "Write a function that generates all possible combinations of string by replacing digits with corresponding letters on a telephone keypad.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef string_combinations(digits: str) -> List[str]:\n    if len(digits) == 0:\n        return []\n\n    digit_letter_dict = {\n        \"2\": ['a', 'b', 'c'],\n        \"3\":['d', 'e', 'f'],\n        \"4\":['g', 'h', 'i'],\n        \"5\":['j', 'k', 'l'],\n        \"6\":['m', 'n', 'o'],\n        \"7\":['p', 'q', 'r', 's'],\n        \"8\":['t', 'u', 'v'],\n        \"9\":['w', 'x', 'y', 'z'],\n    }\n\n    result = []\n\n    def backtrack(index, path):\n        if len(path) == len(digits):\n            result.append(\"\".join(path))\n            return\n\n        digit = digits[index]\n        for letter in digit_letter_dict[digit]:\n            path.append(letter)\n            backtrack(index+1, path)\n            path.pop()\n\n    backtrack(0, [])\n    return result\n\nif __name__ == '__main__':\n    print(string_combinations(\"23\"))\n    print(string_combinations(\"2\"))\n    print(string_combinations(\"\"))\n```", "code": "from typing import List\n\ndef string_combinations(digits: str) -> List[str]:\n    if len(digits) == 0:\n        return []\n\n    digit_letter_dict = {\n        \"2\": ['a', 'b', 'c'],\n        \"3\":['d', 'e', 'f'],\n        \"4\":['g', 'h', 'i'],\n        \"5\":['j', 'k', 'l'],\n        \"6\":['m', 'n', 'o'],\n        \"7\":['p', 'q', 'r', 's'],\n        \"8\":['t', 'u', 'v'],\n        \"9\":['w', 'x', 'y', 'z'],\n    }\n\n    result = []\n\n    def backtrack(index, path):\n        if len(path) == len(digits):\n            result.append(\"\".join(path))\n            return\n\n        digit = digits[index]\n        for letter in digit_letter_dict[digit]:\n            path.append(letter)\n            backtrack(index+1, path)\n            path.pop()\n\n    backtrack(0, [])\n    return result\n\nif __name__ == '__main__':\n    print(string_combinations(\"23\"))\n    print(string_combinations(\"2\"))\n    print(string_combinations(\"\"))", "entry_point": "string_combinations", "testcase": ["assert string_combinations(\"23\") == [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]", "assert string_combinations(\"\") == []", "assert string_combinations(\"2\") == [\"a\", \"b\", \"c\"]"]}
{"seq_id": 14328503141, "instruction": "Write a function to find the number of unique elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique(lst):\n    unique_elements = set(lst)\n    return len(unique_elements)\n```", "code": "def count_unique(lst):\n    unique_elements = set(lst)\n    return len(unique_elements)", "entry_point": "count_unique", "testcase": ["assert count_unique(['a', 'b', 'a', 'c', 'b', 'c', 'd', 'e']) == 5", "assert count_unique([1, 2, 3, 1, 2, 3, 4, 5]) == 5", "assert count_unique([1, 2, 3, 4, 5]) == 5"]}
{"seq_id": 35091447825, "instruction": "Write a function to generate the nth row of Pascal's triangle.", "output": "Here is the code to solve this problem: \n```python\ndef pascals_triangle_row(n):\n    res = [1]\n    for i in range(1, n + 1):\n        res.insert(0, 0)\n        for j in range(i):\n            res[j] = res[j] + res[j + 1]\n    return res\n```", "code": "def pascals_triangle_row(n):\n    res = [1]\n    for i in range(1, n + 1):\n        res.insert(0, 0)\n        for j in range(i):\n            res[j] = res[j] + res[j + 1]\n    return res", "entry_point": "pascals_triangle_row", "testcase": ["assert pascals_triangle_row(1)==[1, 1]", "assert pascals_triangle_row(0)==[1]", "assert pascals_triangle_row(5)==[1, 5, 10, 10, 5, 1]", "assert pascals_triangle_row(4)==[1, 4, 6, 4, 1]", "assert pascals_triangle_row(3)==[1, 3, 3, 1]"]}
{"seq_id": 10190872250, "instruction": "Write a function to find the good pairs in a list. A good pair is defined as a pair of indices (i, j) such that nums[i] == nums[j] and i < j.", "output": "Here is the code to solve this problem: \n```python\ndef find_good_pairs(nums):\n    count = 0\n    myDict = {}\n    for i in nums:\n        if i in myDict:\n            count += myDict[i]\n            myDict[i] += 1\n        else:\n            myDict[i] = 1\n    return count\n```", "code": "def find_good_pairs(nums):\n    count = 0\n    myDict = {}\n    for i in nums:\n        if i in myDict:\n            count += myDict[i]\n            myDict[i] += 1\n        else:\n            myDict[i] = 1\n    return count", "entry_point": "find_good_pairs", "testcase": ["assert find_good_pairs([1, 2, 3]) == 0", "assert find_good_pairs([1, 2, 3, 1, 1, 3]) == 4", "assert find_good_pairs([1, 1, 1, 1]) == 6"]}
{"seq_id": 38988571596, "instruction": "Write a function to find the shortest transformation sequence length from beginWord to endWord, such that only one letter can be changed at a time and each transformed word must exist in the wordList. Return the number of words in the shortest transformation sequence, and return 0 if no such sequence exists.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef word_ladder_length(beginWord, endWord, wordList):\n    if endWord not in wordList:\n        return 0\n    q = deque()\n    q.append([beginWord, 1])\n    \n    while q:\n        x, count = q.popleft()\n        if x == endWord:\n            return count\n        \n        for i in range(len(wordList)):\n            diff = 0\n            word = wordList[i]\n            for j in range(len(word)):\n                if x[j] != word[j]:\n                    diff += 1\n            if diff == 1:\n                q.append([word, count + 1])\n                wordList[i] = \"\"\n        \n    return 0\n```", "code": "from collections import deque\n\ndef word_ladder_length(beginWord, endWord, wordList):\n    if endWord not in wordList:\n        return 0\n    q = deque()\n    q.append([beginWord, 1])\n    \n    while q:\n        x, count = q.popleft()\n        if x == endWord:\n            return count\n        \n        for i in range(len(wordList)):\n            diff = 0\n            word = wordList[i]\n            for j in range(len(word)):\n                if x[j] != word[j]:\n                    diff += 1\n            if diff == 1:\n                q.append([word, count + 1])\n                wordList[i] = \"\"\n        \n    return 0", "entry_point": "word_ladder_length", "testcase": ["assert word_ladder_length(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]) == 5", "assert word_ladder_length(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]) == 0", "assert word_ladder_length(\"cold\", \"warm\", [\"cord\",\"card\",\"ward\",\"wary\",\"warm\"]) == 5"]}
{"seq_id": 70612990417, "instruction": "Write a function that returns the number of unique characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique_chars(s):\n    return len(set(s))\n\n# Test cases\nprint(count_unique_chars(\"abcabc\") == 3) \nprint(count_unique_chars(\"hello world\") == 8)\nprint(count_unique_chars(\"aAaAaA\") == 2)\n```", "code": "def count_unique_chars(s):\n    return len(set(s))\n\n# Test cases\nprint(count_unique_chars(\"abcabc\") == 3) \nprint(count_unique_chars(\"hello world\") == 8)\nprint(count_unique_chars(\"aAaAaA\") == 2)", "entry_point": "count_unique_chars", "testcase": ["assert count_unique_chars(\"abcabc\") == 3", "assert count_unique_chars(\"aAaAaA\") == 2", "assert count_unique_chars(\"hello world\") == 8"]}
{"seq_id": 33926752563, "instruction": "Write a function to find the depth of a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_depth(root):\n    if root is None:\n        return 0\n    else:\n        left_depth = find_depth(root.left)\n        right_depth = find_depth(root.right)\n        return max(left_depth, right_depth) + 1\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_depth(root):\n    if root is None:\n        return 0\n    else:\n        left_depth = find_depth(root.left)\n        right_depth = find_depth(root.right)\n        return max(left_depth, right_depth) + 1", "entry_point": "find_depth", "testcase": ["assert find_depth(TreeNode(1)) == 1", "assert find_depth(None) == 0", "assert find_depth(TreeNode(1, TreeNode(2), TreeNode(3))) == 2"]}
{"seq_id": 27878980976, "instruction": "Write a python function to find the k elements in an array that are closest to a given value x.", "output": "Here is the code to solve this problem: \n```python\nfrom heapq import *\ndef findClosest(arr, k, x):\n        minHeap = []\n        for num in arr:\n            heappush(minHeap, (abs(num - x), num))\n        res = []\n        for i in range(k):\n            res.append(heappop(minHeap)[1])\n        res.sort()\n        return res\n```", "code": "from heapq import *\ndef findClosest(arr, k, x):\n        minHeap = []\n        for num in arr:\n            heappush(minHeap, (abs(num - x), num))\n        res = []\n        for i in range(k):\n            res.append(heappop(minHeap)[1])\n        res.sort()\n        return res", "entry_point": "findClosest", "testcase": ["assert findClosest([1,2,3,4,5], 3, 3) == [2,3,4]", "assert findClosest([1,2,3,4,5,6,7], 4, 5) == [3,4,5,6]", "assert findClosest([1,3,4,5,6,7,9,10], 2, 8) == [7,9]"]}
{"seq_id": 36069878830, "instruction": "Write a function to calculate the surface area of a 3D shape represented by a grid.\n\nThe grid is a square matrix that represents the height of each cell. Each cell with a height greater than 0 is considered part of the 3D shape. The surface area of the shape is calculated by considering the total area of the exposed surfaces, including the top and bottom surfaces.\n\nThe function should take a list of lists of integers as a parameter, representing the grid. It should return an integer representing the surface area of the 3D shape.", "output": "Here is the code to solve this problem: \n```python\ndef surface_area(grid):\n    n = len(grid)\n    area = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]:\n                area += grid[i][j] * 4 + 2\n            else:\n                continue\n            if i > 0:\n                area -= min(grid[i][j], grid[i - 1][j]) * 2\n            if j > 0:\n                area -= min(grid[i][j], grid[i][j - 1]) * 2\n    return area\n```", "code": "def surface_area(grid):\n    n = len(grid)\n    area = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]:\n                area += grid[i][j] * 4 + 2\n            else:\n                continue\n            if i > 0:\n                area -= min(grid[i][j], grid[i - 1][j]) * 2\n            if j > 0:\n                area -= min(grid[i][j], grid[i][j - 1]) * 2\n    return area", "entry_point": "surface_area", "testcase": ["assert surface_area([[1, 2], [3, 4]]) == 34", "assert surface_area([[1, 0], [0, 2]]) == 16", "assert surface_area([[2]]) == 10"]}
{"seq_id": 45279758547, "instruction": "Write a python function to find the first non-repeated character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef first_non_repeated_char(s: str) -> str:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n```", "code": "def first_non_repeated_char(s: str) -> str:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None", "entry_point": "first_non_repeated_char", "testcase": ["assert first_non_repeated_char(\"abaccdeff\") == \"b\"", "assert first_non_repeated_char(\"aabbcc\") == None", "assert first_non_repeated_char(\"google\") == \"l\""]}
{"seq_id": 42097650644, "instruction": "Write a function that takes a string and returns the number of times each word appears in the string.", "output": "Here is the code to solve this problem: \n```python\ndef word_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n```", "code": "def word_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency", "entry_point": "word_frequency", "testcase": ["assert word_frequency(\"hello world hello\") == {\"hello\": 2, \"world\": 1}", "assert word_frequency(\"the quick brown fox jumps over the lazy dog\") == {\"the\": 2, \"quick\": 1, \"brown\": 1, \"fox\": 1, \"jumps\": 1, \"over\": 1, \"lazy\": 1, \"dog\": 1}", "assert word_frequency(\"one two three one two three\") == {\"one\": 2, \"two\": 2, \"three\": 2}"]}
{"seq_id": 38308500278, "instruction": "Write a function to check whether a given string is a valid URL.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n```", "code": "import re\n\ndef valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None", "entry_point": "valid_url", "testcase": ["assert valid_url('https://www.google.com') == True", "assert valid_url('ftp://example.com') == True", "assert valid_url('not_a_url') == False", "assert valid_url('http://localhost:8000') == True"]}
{"seq_id": 45211765456, "instruction": "Write a function to check if a graph is a star graph. A star graph is a tree with n nodes (where n >= 3) that consists of one central node with degree n - 1, and n - 1 leaves (nodes of degree 1).", "output": "Here is the code to solve this problem: \n```python\ndef is_star_graph(edges):\n    n = len(edges)+1\n    indegree = [0]*(n+1)\n\n    for u,v in edges:\n        indegree[u]+=1\n        indegree[v]+=1\n    center = -1\n    for i in range(1, n+1):\n        if indegree[i] > 1:\n            if center != -1:\n                return False\n            center = i\n    for i in range(1, n+1):\n        if i != center and indegree[i] != 1:\n            return False\n    return True\n```", "code": "def is_star_graph(edges):\n    n = len(edges)+1\n    indegree = [0]*(n+1)\n\n    for u,v in edges:\n        indegree[u]+=1\n        indegree[v]+=1\n    center = -1\n    for i in range(1, n+1):\n        if indegree[i] > 1:\n            if center != -1:\n                return False\n            center = i\n    for i in range(1, n+1):\n        if i != center and indegree[i] != 1:\n            return False\n    return True", "entry_point": "is_star_graph", "testcase": ["assert is_star_graph([[1,2], [2,3], [3,4]]) == False", "assert is_star_graph([[1,2], [2,3], [2,4]]) == True", "assert is_star_graph([[1,2], [1,3], [1,4], [1,5]]) == True"]}
{"seq_id": 16908560539, "instruction": "Write a python function to find the maximum number of nested lists within a given list.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_nested_list(l):\n    max_depth = 0\n    def dfs(l, depth):\n        nonlocal max_depth\n        for i in l:\n            if isinstance(i, list):\n                dfs(i, depth + 1)\n                max_depth = max(max_depth, depth + 1)\n    dfs(l, 0)\n    return max_depth\n```", "code": "def find_max_nested_list(l):\n    max_depth = 0\n    def dfs(l, depth):\n        nonlocal max_depth\n        for i in l:\n            if isinstance(i, list):\n                dfs(i, depth + 1)\n                max_depth = max(max_depth, depth + 1)\n    dfs(l, 0)\n    return max_depth", "entry_point": "find_max_nested_list", "testcase": ["assert find_max_nested_list([1,2,[3,4,5],[6,[7,8],9]]) == 2", "assert find_max_nested_list([1,[2,[3,[4,5]]]]) == 3", "assert find_max_nested_list([1,2,3]) == 0"]}
{"seq_id": 72213489900, "instruction": "Write a python function to find the leader in an array. A leader in an array is defined as an element which is greater than all the elements to its right side.", "output": "Here is the code to solve this problem: \n```python\ndef find_leader(A):\n    max_from_right = A[-1]\n    leaders = [max_from_right]\n    for i in range(len(A)-2, -1, -1):\n        if A[i] > max_from_right:\n            leaders.append(A[i])\n            max_from_right = A[i]\n    return leaders[::-1]\n```", "code": "def find_leader(A):\n    max_from_right = A[-1]\n    leaders = [max_from_right]\n    for i in range(len(A)-2, -1, -1):\n        if A[i] > max_from_right:\n            leaders.append(A[i])\n            max_from_right = A[i]\n    return leaders[::-1]", "entry_point": "find_leader", "testcase": ["assert find_leader([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert find_leader([1, 2, 3, 4, 5]) == [5]", "assert find_leader([16, 17, 4, 3, 5, 2]) == [17, 5, 2]"]}
{"seq_id": 17683643111, "instruction": "Write a python function to find the largest unique number in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_unique_number(nums):\n    dict1={}\n    for i in nums:\n        dict1[i]=dict1.get(i,0)+1\n    \n    list1=list(dict1.keys())\n\n    list1.sort(reverse=True)\n\n    for i in list1:\n        if dict1[i]==1:\n            return i\n    \n    return -1\n```", "code": "def largest_unique_number(nums):\n    dict1={}\n    for i in nums:\n        dict1[i]=dict1.get(i,0)+1\n    \n    list1=list(dict1.keys())\n\n    list1.sort(reverse=True)\n\n    for i in list1:\n        if dict1[i]==1:\n            return i\n    \n    return -1", "entry_point": "largest_unique_number", "testcase": ["assert largest_unique_number([2, 2, 2, 2, 2, 2]) == -1", "assert largest_unique_number([1, 2, 3, 4, 5]) == 5", "assert largest_unique_number([5, 7, 3, 9, 4, 9, 7, 3, 2]) == 5"]}
{"seq_id": 74551698031, "instruction": "Write a function to find the most played songs in a music library. The function should return a list of the indices of the songs. Songs should be sorted by the number of plays for each genre, and for songs with the same number of plays, the song with the lower index should come first. If a genre has more than two songs with the same number of plays, only the first two should be included in the result.", "output": "Here is the code to solve this problem: \n```python\ndef most_played_songs(genres, plays):\n    answer = []\n    \n    genre_dict = {}\n    idx_list_dict = {}\n    \n    for idx, genre in enumerate(genres):\n        genre_dict[genre] = genre_dict.get(genre, 0) + plays[idx]\n        idx_list_dict.setdefault(genre,[]).append(idx)\n        \n\n    sorted_keys = sorted(genre_dict, key=genre_dict.get, reverse=True)\n\n    for key in sorted_keys:\n        key_idxes = idx_list_dict[key]\n        sorted_idx = [i for i, val in sorted(enumerate([plays[i] for i in key_idxes]), key=lambda x: x[1], reverse=True)]\n        res = [key_idxes[i] for i in sorted_idx][:2]\n        answer.extend(res)\n        \n    return answer\n```", "code": "def most_played_songs(genres, plays):\n    answer = []\n    \n    genre_dict = {}\n    idx_list_dict = {}\n    \n    for idx, genre in enumerate(genres):\n        genre_dict[genre] = genre_dict.get(genre, 0) + plays[idx]\n        idx_list_dict.setdefault(genre,[]).append(idx)\n        \n\n    sorted_keys = sorted(genre_dict, key=genre_dict.get, reverse=True)\n\n    for key in sorted_keys:\n        key_idxes = idx_list_dict[key]\n        sorted_idx = [i for i, val in sorted(enumerate([plays[i] for i in key_idxes]), key=lambda x: x[1], reverse=True)]\n        res = [key_idxes[i] for i in sorted_idx][:2]\n        answer.extend(res)\n        \n    return answer", "entry_point": "most_played_songs", "testcase": ["assert most_played_songs([\"country\", \"country\", \"country\"], [100, 200, 300]) == [2, 1]", "assert most_played_songs([\"pop\", \"pop\", \"pop\", \"rock\", \"rock\", \"rock\"], [600, 500, 150, 800, 1000, 1000]) == [4, 5, 0, 1]", "assert most_played_songs([\"jazz\", \"jazz\", \"jazz\", \"jazz\"], [200, 300, 100, 400]) == [3, 1]"]}
{"seq_id": 72105641002, "instruction": "Write a python function to check whether an array is a valid mountain array or not. A valid mountain array is one where it increases first and then decreases. The array should have at least three elements.", "output": "Here is the code to solve this problem: \n```python\ndef validMountainArray(arr):\n    n = len(arr)\n    if n < 3:\n        return False\n    peak = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            peak = i\n        else:\n            break\n    if peak == 0 or peak == n-1:\n        return False\n    for i in range(peak, n-1):\n        if arr[i] <= arr[i+1]:\n            return False\n    return True\n```", "code": "def validMountainArray(arr):\n    n = len(arr)\n    if n < 3:\n        return False\n    peak = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            peak = i\n        else:\n            break\n    if peak == 0 or peak == n-1:\n        return False\n    for i in range(peak, n-1):\n        if arr[i] <= arr[i+1]:\n            return False\n    return True", "entry_point": "validMountainArray", "testcase": ["assert validMountainArray([0,3,2,1]) == True", "assert validMountainArray([2,1]) == False", "assert validMountainArray([3,5,5]) == False"]}
{"seq_id": 29863702472, "instruction": "Write a function that takes a list of integers as input and returns a new list where all the even numbers have been squared.", "output": "Here is the code to solve this problem: \n```python\ndef square_evens(lst):\n    return [num**2 if num % 2 == 0 else num for num in lst]\n```", "code": "def square_evens(lst):\n    return [num**2 if num % 2 == 0 else num for num in lst]", "entry_point": "square_evens", "testcase": ["assert square_evens([2, 4, 6, 8]) == [4, 16, 36, 64]", "assert square_evens([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]", "assert square_evens([1, 2, 3, 4, 5]) == [1, 4, 3, 16, 5]"]}
{"seq_id": 44153876846, "instruction": "Write a function to find the product of two non-negative integers using recursion without using the multiplication operator.", "output": "Here is the code to solve this problem: \n```python\ndef multiply(a, b):\n    if b == 0:\n        return 0\n    if b > 0:\n        return (a + multiply(a, b - 1))\n    if b < 0:\n        return -multiply(a, -b)\n```", "code": "def multiply(a, b):\n    if b == 0:\n        return 0\n    if b > 0:\n        return (a + multiply(a, b - 1))\n    if b < 0:\n        return -multiply(a, -b)", "entry_point": "multiply", "testcase": ["assert multiply(5, 3) == 15", "assert multiply(6, 7) == 42", "assert multiply(0, 10) == 0"]}
{"seq_id": 12855021949, "instruction": "Write a python function to calculate the power of a number using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef recursive_power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * recursive_power(base, exponent - 1)\n```", "code": "def recursive_power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * recursive_power(base, exponent - 1)", "entry_point": "recursive_power", "testcase": ["assert recursive_power(5, 2) == 25", "assert recursive_power(2, 3) == 8", "assert recursive_power(10, 0) == 1"]}
{"seq_id": 39586271929, "instruction": "Write a function to check if the first list of dates is lexicographically smaller than the second list of dates. Each date is represented as a list of three integers: [year, month, day].", "output": "Here is the code to solve this problem: \n```python\ndef check_dates(date1, date2):\n    answer = 0\n    if date1[0]!=date2[0]:\n        if date1[0]<date2[0]:\n            return 1\n    elif date1[1]!=date2[1]:\n        if date1[1]<date2[1]:\n            return 1\n    elif date1[2]!=date2[2]:\n        if date1[2]<date2[2]:\n            return 1\n    return answer\n```", "code": "def check_dates(date1, date2):\n    answer = 0\n    if date1[0]!=date2[0]:\n        if date1[0]<date2[0]:\n            return 1\n    elif date1[1]!=date2[1]:\n        if date1[1]<date2[1]:\n            return 1\n    elif date1[2]!=date2[2]:\n        if date1[2]<date2[2]:\n            return 1\n    return answer", "entry_point": "check_dates", "testcase": ["assert check_dates([2021, 1, 1], [2021, 1, 1]) == 0", "assert check_dates([2021, 12, 25], [2022, 1, 1]) == 1", "assert check_dates([2020, 12, 31], [2021, 1, 1]) == 1"]}
{"seq_id": 19154931218, "instruction": "Write a python function to check if a given number is prime in a given base.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef is_prime_base(n, base):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n    \n    trans_str = trans(n, base)\n    primes = trans_str.split('0')\n    while '' in primes:\n        primes.remove('')\n    for prime in primes:\n        tar = int(prime, base)\n        if not is_prime(tar):\n            return False\n    return True\n\ndef is_prime(target):\n    for i in range(2, int(math.sqrt(target)) + 1):\n        if target % i == 0:\n            return False\n    return True\n\ndef trans(n, k):\n    rev_base = ''\n    while n > 0:\n        n, mod = divmod(n, k)\n        rev_base += str(mod)\n    return rev_base[::-1]\n```", "code": "import math\n\ndef is_prime_base(n, base):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n < 2:\n        return False\n    \n    trans_str = trans(n, base)\n    primes = trans_str.split('0')\n    while '' in primes:\n        primes.remove('')\n    for prime in primes:\n        tar = int(prime, base)\n        if not is_prime(tar):\n            return False\n    return True\n\ndef is_prime(target):\n    for i in range(2, int(math.sqrt(target)) + 1):\n        if target % i == 0:\n            return False\n    return True\n\ndef trans(n, k):\n    rev_base = ''\n    while n > 0:\n        n, mod = divmod(n, k)\n        rev_base += str(mod)\n    return rev_base[::-1]", "entry_point": "is_prime_base", "testcase": ["assert is_prime_base(101, 2) == True", "assert is_prime_base(7, 10) == True", "assert is_prime_base(13, 10) == True"]}
{"seq_id": 32739404965, "instruction": "Write a python function that takes a string of comma-separated integers enclosed in curly braces and returns a sorted list of the integers.", "output": "Here is the code to solve this problem: \n```python\ndef parse_curly_ints(s):\n    s = s.strip(\"{}\")\n    return sorted(map(int, s.split(',')))\n```", "code": "def parse_curly_ints(s):\n    s = s.strip(\"{}\")\n    return sorted(map(int, s.split(',')))", "entry_point": "parse_curly_ints", "testcase": ["assert parse_curly_ints(\"{9,7,5,3,1}\") == [1, 3, 5, 7, 9]", "assert parse_curly_ints(\"{1,2,3}\") == [1, 2, 3]", "assert parse_curly_ints(\"{3,2,1,5,4}\") == [1, 2, 3, 4, 5]"]}
{"seq_id": 70329069081, "instruction": "Write a python function to find the number of substrings that are palindromes in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef count_Palindrome_Substrings(s):\n    n = len(s)\n    palindrome_count = 0\n    for i in range(n):\n        # Check for odd length palindromes\n        palindrome_count += expand_around_center(s, i, i)\n        # Check for even length palindromes\n        palindrome_count += expand_around_center(s, i, i+1)\n    return palindrome_count\n\ndef expand_around_center(s, left, right):\n    count = 0\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        count += 1\n        left -= 1\n        right += 1\n    return count\n```", "code": "def count_Palindrome_Substrings(s):\n    n = len(s)\n    palindrome_count = 0\n    for i in range(n):\n        # Check for odd length palindromes\n        palindrome_count += expand_around_center(s, i, i)\n        # Check for even length palindromes\n        palindrome_count += expand_around_center(s, i, i+1)\n    return palindrome_count\n\ndef expand_around_center(s, left, right):\n    count = 0\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        count += 1\n        left -= 1\n        right += 1\n    return count", "entry_point": "count_Palindrome_Substrings", "testcase": ["assert count_Palindrome_Substrings(\"abc\") == 3", "assert count_Palindrome_Substrings(\"aaa\") == 6", "assert count_Palindrome_Substrings(\"abba\") == 6"]}
{"seq_id": 18179555681, "instruction": "Write a python function to generate a matrix with n rows and n columns where the value of each cell is the maximum of its row or column index.\n\nFor example, for n = 3, the matrix should look like this:\n1 2 3\n2 2 3\n3 3 3", "output": "Here is the code to solve this problem: \n```python\ndef generate_matrix(n):\n    matrix = []\n    for i in range(n):\n        for j in range(n):\n            matrix.append(max(i+1, j+1))\n    return matrix\n```", "code": "def generate_matrix(n):\n    matrix = []\n    for i in range(n):\n        for j in range(n):\n            matrix.append(max(i+1, j+1))\n    return matrix", "entry_point": "generate_matrix", "testcase": ["assert generate_matrix(3) == [1, 2, 3, 2, 2, 3, 3, 3, 3]", "assert generate_matrix(2) == [1, 2, 2, 2]", "assert generate_matrix(4) == [1, 2, 3, 4, 2, 2, 3, 4, 3, 3, 3, 4, 4, 4, 4, 4]"]}
{"seq_id": 7294146800, "instruction": "Write a function to find the smallest window in a string containing all distinct characters of the given string.", "output": "Here is the code to solve this problem: \n```python\ndef distinct_substring(str):\n    distinct_chars = len(set(str))\n    start, start_index, min_len = 0, -1, float('inf')\n    count = {}\n    for end in range(len(str)):\n        count[str[end]] = count.get(str[end], 0) + 1\n        if len(count) == distinct_chars:\n            while count[str[start]] > 1:\n                if count[str[start]] > 1:\n                    count[str[start]] -= 1\n                start += 1\n            len_window = end - start + 1\n            if min_len > len_window:\n                min_len = len_window\n                start_index = start\n    return \"\" if start_index == -1 else str[start_index:start_index + min_len]\n```", "code": "def distinct_substring(str):\n    distinct_chars = len(set(str))\n    start, start_index, min_len = 0, -1, float('inf')\n    count = {}\n    for end in range(len(str)):\n        count[str[end]] = count.get(str[end], 0) + 1\n        if len(count) == distinct_chars:\n            while count[str[start]] > 1:\n                if count[str[start]] > 1:\n                    count[str[start]] -= 1\n                start += 1\n            len_window = end - start + 1\n            if min_len > len_window:\n                min_len = len_window\n                start_index = start\n    return \"\" if start_index == -1 else str[start_index:start_index + min_len]", "entry_point": "distinct_substring", "testcase": ["assert distinct_substring(\"abcdef\") == \"abcdef\"", "assert distinct_substring(\"aaaaa\") == \"a\"", "assert distinct_substring(\"aabcbcdbca\") == \"dbca\""]}
{"seq_id": 3063904944, "instruction": "Write a function to find the tuple with the highest product of its elements from a given list of tuples.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_tuple(test_list):\n    res = max(test_list, key=lambda x: x[0]*x[1])\n    return (res)\n```", "code": "def max_product_tuple(test_list):\n    res = max(test_list, key=lambda x: x[0]*x[1])\n    return (res)", "entry_point": "max_product_tuple", "testcase": ["assert max_product_tuple([(3, 4), (5, 6), (9, 10)]) == (9, 10)", "assert max_product_tuple([(4, 1), (7, 4), (11, 13)]) == (11, 13)", "assert max_product_tuple([(2, 1), (3, 2), (1, 3)]) == (3, 2)"]}
{"seq_id": 10574991893, "instruction": "Write a function to find the maximum number of overlapping segments from a list of segments. Each segment is represented as a tuple containing two integers, representing the segment's start and end points. For example, the segment (1, 3) means that the segment starts at 1 and ends at 3. Segments can overlap with each other, and your function should find the maximum number of segments that overlap at any point.", "output": "Here is the code to solve this problem: \n```python\ndef max_overlapping_segments(segments):\n    # Create a list of start and end points and mark them\n    points = []\n    for start, end in segments:\n        points.append((start, 1))\n        points.append((end, -1))\n    \n    # Sort the points by their position, and if two points have the same position, put the end points first\n    points.sort(key=lambda x: (x[0], -x[1]))\n    \n    # Count the maximum overlapping segments\n    max_overlapping = 0\n    current_overlapping = 0\n    for point, type in points:\n        current_overlapping += type\n        max_overlapping = max(max_overlapping, current_overlapping)\n    \n    return max_overlapping\n```", "code": "def max_overlapping_segments(segments):\n    # Create a list of start and end points and mark them\n    points = []\n    for start, end in segments:\n        points.append((start, 1))\n        points.append((end, -1))\n    \n    # Sort the points by their position, and if two points have the same position, put the end points first\n    points.sort(key=lambda x: (x[0], -x[1]))\n    \n    # Count the maximum overlapping segments\n    max_overlapping = 0\n    current_overlapping = 0\n    for point, type in points:\n        current_overlapping += type\n        max_overlapping = max(max_overlapping, current_overlapping)\n    \n    return max_overlapping", "entry_point": "max_overlapping_segments", "testcase": ["assert max_overlapping_segments([(1, 5), (2, 4), (3, 6)]) == 3", "assert max_overlapping_segments([(1, 2), (3, 4), (5, 6)]) == 1", "assert max_overlapping_segments([(1, 3), (2, 4), (5, 6)]) == 2"]}
{"seq_id": 28076733612, "instruction": "Implement a function to find the maximum number of non-overlapping intervals that can be selected from a given set of intervals.", "output": "Here is the code to solve this problem: \n```python\ndef max_non_overlapping_intervals(intervals):\n    intervals.sort(key=lambda x: x[1])\n    count, end = 0, float('-inf')\n    for interval in intervals:\n        if interval[0] >= end:\n            count += 1\n            end = interval[1]\n    return count\n```", "code": "def max_non_overlapping_intervals(intervals):\n    intervals.sort(key=lambda x: x[1])\n    count, end = 0, float('-inf')\n    for interval in intervals:\n        if interval[0] >= end:\n            count += 1\n            end = interval[1]\n    return count", "entry_point": "max_non_overlapping_intervals", "testcase": ["assert max_non_overlapping_intervals([(1, 3), (2, 4), (3, 6)]) == 2", "assert max_non_overlapping_intervals([(1, 2), (3, 4), (5, 6)]) == 3", "assert max_non_overlapping_intervals([(1, 10), (2, 3), (3, 4), (5, 8)]) == 3"]}
{"seq_id": 39856630970, "instruction": "Write a function that calculates the total number of grains of wheat on a chessboard given that the number on each square doubles.\n\nThere are 64 squares on a chessboard. The number of grains on the first square is 1, and it doubles on every subsequent square.\n\nWrite a function that takes an integer square (1 <= square <= 64) and returns the number of grains on that square.\n\nAdditionally, write a function that calculates the total number of grains on the chessboard.", "output": "Here is the code to solve this problem: \n```python\ndef chess_board(square):\n    return 2 ** (square - 1)\n\ndef total_grains():\n    total = 0\n    for i in range(1, 65):\n        total += chess_board(i)\n    return total\n```", "code": "def chess_board(square):\n    return 2 ** (square - 1)\n\ndef total_grains():\n    total = 0\n    for i in range(1, 65):\n        total += chess_board(i)\n    return total", "entry_point": "chess_board", "testcase": ["assert chess_board(2) == 2", "assert chess_board(6) == 32", "assert chess_board(5) == 16", "assert chess_board(3) == 4", "assert chess_board(4) == 8", "assert total_grains() == 18446744073709551615", "assert chess_board(1) == 1", "assert chess_board(64) == 9223372036854775808"]}
{"seq_id": 35439081580, "instruction": "Write a python function to find the maximum length of alternating subsequence in an array. An alternating subsequence is a sequence where the elements alternate between strictly increasing and strictly decreasing.", "output": "Here is the code to solve this problem: \n```python\ndef max_alternating_subsequence(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    inc = [1] * n  # Tracks maximum alternating subsequence ending with increasing\n    dec = [1] * n  # Tracks maximum alternating subsequence ending with decreasing\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc[i] = dec[i-1] + 1\n        elif arr[i] < arr[i-1]:\n            dec[i] = inc[i-1] + 1\n    return max(max(inc), max(dec))\n```", "code": "def max_alternating_subsequence(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    inc = [1] * n  # Tracks maximum alternating subsequence ending with increasing\n    dec = [1] * n  # Tracks maximum alternating subsequence ending with decreasing\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc[i] = dec[i-1] + 1\n        elif arr[i] < arr[i-1]:\n            dec[i] = inc[i-1] + 1\n    return max(max(inc), max(dec))", "entry_point": "max_alternating_subsequence", "testcase": ["assert max_alternating_subsequence([1, 2, 3, 4, 5, 6]) == 2", "assert max_alternating_subsequence([2, 3, 4, 3, 4]) == 4", "assert max_alternating_subsequence([7, 5, 4, 3, 2, 1]) == 2"]}
{"seq_id": 25544426821, "instruction": "Write a python function to find the longest subsequence of consecutive numbers in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_consecutive_subsequence(nums):\n    if not nums:\n        return 0\n    nums_set = set(nums)\n    longest_streak = 0\n    for num in nums_set:\n        if num - 1 not in nums_set:\n            current_num = num\n            current_streak = 1\n            while current_num + 1 in nums_set:\n                current_num += 1\n                current_streak += 1\n            longest_streak = max(longest_streak, current_streak)\n    return longest_streak\n```", "code": "def find_longest_consecutive_subsequence(nums):\n    if not nums:\n        return 0\n    nums_set = set(nums)\n    longest_streak = 0\n    for num in nums_set:\n        if num - 1 not in nums_set:\n            current_num = num\n            current_streak = 1\n            while current_num + 1 in nums_set:\n                current_num += 1\n                current_streak += 1\n            longest_streak = max(longest_streak, current_streak)\n    return longest_streak", "entry_point": "find_longest_consecutive_subsequence", "testcase": ["assert find_longest_consecutive_subsequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9", "assert find_longest_consecutive_subsequence([10, 5, 12, 3]) == 1", "assert find_longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) == 4"]}
{"seq_id": 9456486032, "instruction": "Write a function to find the sum of all divisors of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_divisors(n):\n    sum_div = 1 + n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_div += i\n            if i != n // i:\n                sum_div += n // i\n    return sum_div\n```", "code": "def sum_of_divisors(n):\n    sum_div = 1 + n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_div += i\n            if i != n // i:\n                sum_div += n // i\n    return sum_div", "entry_point": "sum_of_divisors", "testcase": ["assert sum_of_divisors(10) == 18", "assert sum_of_divisors(12) == 28", "assert sum_of_divisors(28) == 56"]}
{"seq_id": 4674731552, "instruction": "Write a python function to find the number of connected components in an undirected graph. The graph is represented in adjacency list format.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef count_components(n, edges):\n    graph = defaultdict(list)\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    visited = set()\n\n    def dfs(node):\n        if node in visited:\n            return False\n        visited.add(node)\n        for neighbor in graph[node]:\n            dfs(neighbor)\n        return True\n\n    count = 0\n    for i in range(n):\n        if i not in visited and dfs(i):\n            count += 1\n    return count + n - len(visited)\n```", "code": "from collections import defaultdict\n\ndef count_components(n, edges):\n    graph = defaultdict(list)\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    visited = set()\n\n    def dfs(node):\n        if node in visited:\n            return False\n        visited.add(node)\n        for neighbor in graph[node]:\n            dfs(neighbor)\n        return True\n\n    count = 0\n    for i in range(n):\n        if i not in visited and dfs(i):\n            count += 1\n    return count + n - len(visited)", "entry_point": "count_components", "testcase": ["assert count_components(3, []) == 3", "assert count_components(5, [[0, 1], [1, 2], [3, 4]]) == 2", "assert count_components(5, [[0, 1], [1, 2], [2, 3], [3, 4]]) == 1"]}
{"seq_id": 41411207478, "instruction": "Write a python function to find the shortest path between two nodes in an undirected graph using Breadth-First Search (BFS) algorithm.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict, deque\n\ndef find_shortest_path(n, edges, start, end):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * n\n    parent = [-1] * n\n\n    queue = deque([start])\n    visited[start] = True\n\n    while queue:\n        current = queue.popleft()\n\n        if current == end:\n            break\n\n        for neighbor in graph[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                parent[neighbor] = current\n                queue.append(neighbor)\n\n    path = []\n    while end != -1:\n        path.append(end)\n        end = parent[end]\n\n    return path[::-1]\n```", "code": "from collections import defaultdict, deque\n\ndef find_shortest_path(n, edges, start, end):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * n\n    parent = [-1] * n\n\n    queue = deque([start])\n    visited[start] = True\n\n    while queue:\n        current = queue.popleft()\n\n        if current == end:\n            break\n\n        for neighbor in graph[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                parent[neighbor] = current\n                queue.append(neighbor)\n\n    path = []\n    while end != -1:\n        path.append(end)\n        end = parent[end]\n\n    return path[::-1]", "entry_point": "find_shortest_path", "testcase": ["assert find_shortest_path(5, [[0, 1], [1, 2], [2, 3], [3, 4]], 0, 4) == [0, 1, 2, 3, 4]", "assert find_shortest_path(6, [[0, 1], [0, 2], [1, 3], [2, 3], [3, 4], [3, 5]], 0, 4) == [0, 1, 3, 4]", "assert find_shortest_path(3, [[0, 1], [1, 2]], 0, 2) == [0, 1, 2]"]}
{"seq_id": 72889370357, "instruction": "Write a python function to find the maximum of three numbers without using the max() function.", "output": "Here is the code to solve this problem: \n```python\ndef find_Maximum(a, b, c):\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n```", "code": "def find_Maximum(a, b, c):\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c", "entry_point": "find_Maximum", "testcase": ["assert find_Maximum(5, 10, 3) == 10", "assert find_Maximum(100, 50, 25) == 100", "assert find_Maximum(-5, -10, -3) == -3"]}
{"seq_id": 30884570191, "instruction": "Write a function to find the maximum sum of a path in a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef maxPathSum(root):\n    def dfs(node):\n        nonlocal max_sum\n        if not node:\n            return 0\n        left = max(0, dfs(node.left))\n        right = max(0, dfs(node.right))\n        max_sum = max(max_sum, left + right + node.val)\n        return max(left, right) + node.val\n\n    max_sum = float('-inf')\n    dfs(root)\n    return max_sum\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef maxPathSum(root):\n    def dfs(node):\n        nonlocal max_sum\n        if not node:\n            return 0\n        left = max(0, dfs(node.left))\n        right = max(0, dfs(node.right))\n        max_sum = max(max_sum, left + right + node.val)\n        return max(left, right) + node.val\n\n    max_sum = float('-inf')\n    dfs(root)\n    return max_sum", "entry_point": "maxPathSum", "testcase": ["assert maxPathSum(TreeNode(1, TreeNode(2, None, None), TreeNode(3, None, None))) == 6", "assert maxPathSum(TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7, None, None), TreeNode(2, None, None)), None), TreeNode(8, TreeNode(13, None, None), TreeNode(4, TreeNode(5, None, None), TreeNode(1, None, None))))) == 48", "assert maxPathSum(TreeNode(-10, TreeNode(9, None, None), TreeNode(20, TreeNode(15, None, None), TreeNode(7, None, None)))) == 42"]}
{"seq_id": 26622393304, "instruction": "Write a function to find the kth largest elements in an unsorted array using a min heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef kthLargestElement(nums, k):\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap[0]\n```", "code": "import heapq\n\ndef kthLargestElement(nums, k):\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap[0]", "entry_point": "kthLargestElement", "testcase": ["assert kthLargestElement([9,8,7,6,5,4,3,2,1],1)==9", "assert kthLargestElement([3,2,3,1,2,4,5,5,6],4)==4", "assert kthLargestElement([3,2,1,5,6,4],2)==5"]}
{"seq_id": 11358690142, "instruction": "Write a function to find the maximum difference between two consecutive elements in a list of integer coordinates.", "output": "Here is the code to solve this problem: \n```python\ndef max_diff_between_consecutive(points):\n    points.sort()\n    diff = 0\n    for i in range(len(points)-1):\n        b = points[i+1] - points[i]\n        if b > diff:\n            diff = b\n    return diff\n```", "code": "def max_diff_between_consecutive(points):\n    points.sort()\n    diff = 0\n    for i in range(len(points)-1):\n        b = points[i+1] - points[i]\n        if b > diff:\n            diff = b\n    return diff", "entry_point": "max_diff_between_consecutive", "testcase": ["assert max_diff_between_consecutive([10, 20, 30, 40, 50]) == 10", "assert max_diff_between_consecutive([1, 100, 50, 200, 100, 300]) == 100", "assert max_diff_between_consecutive([5, 7, 9, 2, 4, 6]) == 2"]}
{"seq_id": 73153237487, "instruction": "Write a python function to find the number of pairs in an array that have a difference of k.", "output": "Here is the code to solve this problem: \n```python\ndef count_pairs_with_diff_k(arr, k):\n    arr.sort()\n    count = 0\n    left, right = 0, 1\n\n    while right < len(arr):\n        diff = arr[right] - arr[left]\n        if diff == k:\n            count += 1\n            left += 1\n            right += 1\n        elif diff < k:\n            right += 1\n        else:\n            left += 1\n            if left == right:\n                right += 1\n\n    return count\n```", "code": "def count_pairs_with_diff_k(arr, k):\n    arr.sort()\n    count = 0\n    left, right = 0, 1\n\n    while right < len(arr):\n        diff = arr[right] - arr[left]\n        if diff == k:\n            count += 1\n            left += 1\n            right += 1\n        elif diff < k:\n            right += 1\n        else:\n            left += 1\n            if left == right:\n                right += 1\n\n    return count", "entry_point": "count_pairs_with_diff_k", "testcase": ["assert count_pairs_with_diff_k([1, 7, 5, 9, 2, 12, 3], 2) == 4", "assert count_pairs_with_diff_k([1, 3, 1, 5, 4], 0) == 1", "assert count_pairs_with_diff_k([1, 5, 3, 4, 2], 1) == 4"]}
{"seq_id": 1983886262, "instruction": "Write a python function to find the number of days in a given month of a specific year, taking into account leap years.", "output": "Here is the code to solve this problem: \n```python\ndef month_days(year, month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 29\n        else:\n            return 28\n    else:\n        return -1\n```", "code": "def month_days(year, month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 29\n        else:\n            return 28\n    else:\n        return -1", "entry_point": "month_days", "testcase": ["assert month_days(2020, 2) == 29", "assert month_days(2019, 2) == 28", "assert month_days(2020, 1) == 31", "assert month_days(2020, 4) == 30"]}
{"seq_id": 38922231168, "instruction": "Write a python function to find the number of distinct subsequences in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef count_distinct_subsequences(s):\n    dp = [1]\n    last_occurrence = {}\n    for i, char in enumerate(s):\n        dp.append(dp[-1] * 2)\n        if char in last_occurrence:\n            dp[-1] -= dp[last_occurrence[char]]\n        last_occurrence[char] = i\n    return dp[-1] - 1\n```", "code": "def count_distinct_subsequences(s):\n    dp = [1]\n    last_occurrence = {}\n    for i, char in enumerate(s):\n        dp.append(dp[-1] * 2)\n        if char in last_occurrence:\n            dp[-1] -= dp[last_occurrence[char]]\n        last_occurrence[char] = i\n    return dp[-1] - 1", "entry_point": "count_distinct_subsequences", "testcase": ["assert count_distinct_subsequences(\"abc\") == 7", "assert count_distinct_subsequences(\"aaa\") == 3", "assert count_distinct_subsequences(\"aba\") == 6"]}
{"seq_id": 7834018040, "instruction": "Write a python function to find the number of valid parentheses strings using dynamic programming.\n\nA valid parentheses string is either empty \"\", or any of the following:\n1. If A is a valid parentheses string, then (A) is a valid parentheses string.\n2. If A and B are valid parentheses strings, then concatenation of A and B, AB is a valid parentheses string.\n\nFor example, \"\", \"()\", \"()()\", and \"(()(()))\" are all valid parentheses strings.", "output": "Here is the code to solve this problem: \n```python\ndef num_valid_parentheses(n):\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n```", "code": "def num_valid_parentheses(n):\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]", "entry_point": "num_valid_parentheses", "testcase": ["assert num_valid_parentheses(4) == 14", "assert num_valid_parentheses(1) == 1", "assert num_valid_parentheses(3) == 5"]}
{"seq_id": 5319115541, "instruction": "Write a python function to find the smallest k numbers in a list.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef smallestK(arr, k):\n    return heapq.nsmallest(k, arr)\n```", "code": "import heapq\n\ndef smallestK(arr, k):\n    return heapq.nsmallest(k, arr)", "entry_point": "smallestK", "testcase": ["assert smallestK([3, 2, 1], 2) == [1, 2]", "assert smallestK([0,1,2,1], 1) == [0]", "assert smallestK([7,6,5,4,3,2,1], 3) == [1, 2, 3]"]}
{"seq_id": 34817516235, "instruction": "Write a function that takes a string representing a mathematical expression in reverse Polish notation (RPN) and returns the result of the expression. The expression will consist of integers and the four basic arithmetic operations: +, -, *, and /.", "output": "Here is the code to solve this problem: \n```python\ndef evaluate_rpn_expression(tokens):\n    stack = []\n    for token in tokens:\n        if token in ['+', '-', '*', '/']:\n            b = stack.pop()\n            a = stack.pop()\n            if token == '+':\n                stack.append(a + b)\n            elif token == '-':\n                stack.append(a - b)\n            elif token == '*':\n                stack.append(a * b)\n            elif token == '/':\n                stack.append(int(a / b))\n        else:\n            stack.append(int(token))\n    return stack.pop()\n```", "code": "def evaluate_rpn_expression(tokens):\n    stack = []\n    for token in tokens:\n        if token in ['+', '-', '*', '/']:\n            b = stack.pop()\n            a = stack.pop()\n            if token == '+':\n                stack.append(a + b)\n            elif token == '-':\n                stack.append(a - b)\n            elif token == '*':\n                stack.append(a * b)\n            elif token == '/':\n                stack.append(int(a / b))\n        else:\n            stack.append(int(token))\n    return stack.pop()", "entry_point": "evaluate_rpn_expression", "testcase": ["assert evaluate_rpn_expression([\"2\", \"1\", \"+\", \"3\", \"*\"]) == 9", "assert evaluate_rpn_expression([\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]) == 22", "assert evaluate_rpn_expression([\"4\", \"13\", \"5\", \"/\", \"+\"]) == 6"]}
{"seq_id": 34844825847, "instruction": "Write a function to find the pair of numbers in the given array that has the smallest absolute difference.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef minimum_abs_difference(arr):\n    min_diff = 10**6\n    result = defaultdict(list)\n    arr.sort()\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        result[diff].append([arr[i], arr[i+1]])\n        min_diff = min(min_diff, diff)\n    return result[min_diff]\n```", "code": "from collections import defaultdict\n\ndef minimum_abs_difference(arr):\n    min_diff = 10**6\n    result = defaultdict(list)\n    arr.sort()\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        result[diff].append([arr[i], arr[i+1]])\n        min_diff = min(min_diff, diff)\n    return result[min_diff]", "entry_point": "minimum_abs_difference", "testcase": ["assert minimum_abs_difference([4, 2, 1, 3]) == [[1, 2], [2, 3], [3, 4]]", "assert minimum_abs_difference([3, 8, -10, 23, 19, -4, -14, 27]) == [[-14, -10], [19, 23], [23, 27]]", "assert minimum_abs_difference([1, 3, 6, 10, 15]) == [[1, 3]]"]}
{"seq_id": 24871290361, "instruction": "Write a python function to find the middle element of a given list. If the list has an even number of elements, return the two middle elements.", "output": "Here is the code to solve this problem: \n```python\ndef find_middle(lst):\n    middle = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return lst[middle-1:middle+1]\n    else:\n        return [lst[middle]]\n```", "code": "def find_middle(lst):\n    middle = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return lst[middle-1:middle+1]\n    else:\n        return [lst[middle]]", "entry_point": "find_middle", "testcase": ["assert find_middle([1,2,3,4,5,6,7,8]) == [4,5]", "assert find_middle([1,2,3,4,5]) == [3]", "assert find_middle([1,2,3,4,5,6]) == [3,4]"]}
{"seq_id": 7419276060, "instruction": "Write a python function to find the number of possible binary search trees with given number of nodes.", "output": "Here is the code to solve this problem: \n```python\ndef numTrees(n):\n    if n <= 1:\n        return 1\n    total = 0\n    for i in range(n):\n        total += numTrees(i) * numTrees(n - i - 1)\n    return total\n```", "code": "def numTrees(n):\n    if n <= 1:\n        return 1\n    total = 0\n    for i in range(n):\n        total += numTrees(i) * numTrees(n - i - 1)\n    return total", "entry_point": "numTrees", "testcase": ["assert numTrees(5) == 42", "assert numTrees(4) == 14", "assert numTrees(3) == 5"]}
{"seq_id": 21457594578, "instruction": "Write a function that implements the Boyer-Moore Voting Algorithm to find the majority element in a list of integers. The majority element is the one that appears more than n/2 times in the list.", "output": "Here is the code to solve this problem: \n```python\ndef majority_search(stream: list) -> int:\n    current_count = 0\n    current_val = None\n    \n    for item in stream:\n        if current_val is None:\n            current_count += 1\n            current_val = item\n        else:\n            if current_count == 0:\n                current_val = item\n                current_count += 1\n            elif current_val == item:\n                current_count += 1\n            else:\n                current_count -= 1\n            \n    return current_val\n```", "code": "def majority_search(stream: list) -> int:\n    current_count = 0\n    current_val = None\n    \n    for item in stream:\n        if current_val is None:\n            current_count += 1\n            current_val = item\n        else:\n            if current_count == 0:\n                current_val = item\n                current_count += 1\n            elif current_val == item:\n                current_count += 1\n            else:\n                current_count -= 1\n            \n    return current_val", "entry_point": "majority_search", "testcase": ["assert majority_search([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4", "assert majority_search([3, 3, 3, 2, 2]) == 3", "assert majority_search([1, 2, 3, 4, 5, 5, 5, 5]) == 5"]}
{"seq_id": 2260158137, "instruction": "Write a function to find the number of unique paths from the top-left corner to the bottom-right corner in a 2D grid, considering obstacles. You can only move either down or right at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef unique_path_with_obstacles(obstacleGrid):\n    columnLen = len(obstacleGrid[0])\n    rowLen = len(obstacleGrid)\n    note = [0] * columnLen\n    ret = 0\n\n    # \u5904\u7406\u521d\u59cb\u4e0a\u8fb9\u754c\u5e76\u7528\u8bb0\u4e8b\u672cnote\u4fdd\u5b58\n    for i,v in enumerate(obstacleGrid[0]):\n        if v == 1:\n            break\n        note[i] = 1\n\n    if rowLen == 1:\n        return note[-1]\n\n    for r in range(1, rowLen):\n        for c in range(columnLen):\n\n            # \u5f53\u524d\u4f4d\u7f6e\u4e3a\u969c\u788d\u7269\n            if obstacleGrid[r][c] == 1:\n                ret = 0\n                note[c] = 0\n                continue\n            # \u5f53\u524d\u4f4d\u7f6e\u4f4d\u4e8e\u5de6\u8fb9\u754c\n            if c == 0:\n                ret = note[c]\n                continue\n\n            # \u666e\u901a\u60c5\u51b5\n            ret = ret + note[c]\n            note[c] = ret\n\n    return ret\n```", "code": "def unique_path_with_obstacles(obstacleGrid):\n    columnLen = len(obstacleGrid[0])\n    rowLen = len(obstacleGrid)\n    note = [0] * columnLen\n    ret = 0\n\n    # \u5904\u7406\u521d\u59cb\u4e0a\u8fb9\u754c\u5e76\u7528\u8bb0\u4e8b\u672cnote\u4fdd\u5b58\n    for i,v in enumerate(obstacleGrid[0]):\n        if v == 1:\n            break\n        note[i] = 1\n\n    if rowLen == 1:\n        return note[-1]\n\n    for r in range(1, rowLen):\n        for c in range(columnLen):\n\n            # \u5f53\u524d\u4f4d\u7f6e\u4e3a\u969c\u788d\u7269\n            if obstacleGrid[r][c] == 1:\n                ret = 0\n                note[c] = 0\n                continue\n            # \u5f53\u524d\u4f4d\u7f6e\u4f4d\u4e8e\u5de6\u8fb9\u754c\n            if c == 0:\n                ret = note[c]\n                continue\n\n            # \u666e\u901a\u60c5\u51b5\n            ret = ret + note[c]\n            note[c] = ret\n\n    return ret", "entry_point": "unique_path_with_obstacles", "testcase": ["assert unique_path_with_obstacles([[1]]) == 0", "assert unique_path_with_obstacles([[0,0,0],[0,1,0],[0,0,0]]) == 2", "assert unique_path_with_obstacles([[0,1],[0,0]]) == 1"]}
{"seq_id": 5493783126, "instruction": "Write a python function to check if a binary tree is a binary search tree (BST).", "output": "Here is the code to solve this problem: \n```python\n# A binary tree node\nclass Node:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n# This function should return tree if it is a BST, and false otherwise\ndef isBST(root): \n    return (isBSTUtil(root, float('-inf'), float('inf')))\n\n# Returns true if the given tree is a binary search tree (efficient version)\ndef isBSTUtil(root, mini, maxi): \n    # An empty tree is BST\n    if root is None:\n        return True\n  \n    # False if this node violates the min/max constraint \n    if root.key < mini or root.key > maxi:\n        return False\n  \n    # Otherwise check the subtrees recursively, \n    # tightening the min or max constraint \n    return (isBSTUtil(root.left, mini, root.key -1) and\n          isBSTUtil(root.right, root.key+1, maxi))\n  \n# Let's create this tree:\n#     4\n#    / \\\n#   2   5\n#  / \\\n# 1   3\nroot = Node(4)\nroot.left = Node(2)\nroot.right = Node(5)\nroot.left.left = Node(1)\nroot.left.right = Node(3)\n\n# Check function\ndef check():\n    assert isBST(root) == True\n    root.left.right.key = 2  # This makes it not a BST\n    assert isBST(root) == False\n\ncheck()\n```", "code": "# A binary tree node\nclass Node:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n# This function should return tree if it is a BST, and false otherwise\ndef isBST(root): \n    return (isBSTUtil(root, float('-inf'), float('inf')))\n\n# Returns true if the given tree is a binary search tree (efficient version)\ndef isBSTUtil(root, mini, maxi): \n    # An empty tree is BST\n    if root is None:\n        return True\n  \n    # False if this node violates the min/max constraint \n    if root.key < mini or root.key > maxi:\n        return False\n  \n    # Otherwise check the subtrees recursively, \n    # tightening the min or max constraint \n    return (isBSTUtil(root.left, mini, root.key -1) and\n          isBSTUtil(root.right, root.key+1, maxi))\n  \n# Let's create this tree:\n#     4\n#    / \\\n#   2   5\n#  / \\\n# 1   3\nroot = Node(4)\nroot.left = Node(2)\nroot.right = Node(5)\nroot.left.left = Node(1)\nroot.left.right = Node(3)\n\n# Check function\ndef check():\n    assert isBST(root) == True\n    root.left.right.key = 2  # This makes it not a BST\n    assert isBST(root) == False\n\ncheck()", "entry_point": "isBST", "testcase": ["# A binary tree node", "", "    # Fill this in.", "# This function should return tree if it is a BST, and false otherwise", "#     4", "#  / \\", "#   2   5", "# Let's create this tree:", "", "#    / \\", "root.left = Node(2)", "# 1   3", "root.right = Node(5)", "root = Node(4)", "root.left.right = Node(3)", "root.left.left = Node(1)", "", "# Check function", ""]}
{"seq_id": 7238997037, "instruction": "Write a function to find the smallest missing positive integer from a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing_positive(nums):\n    nums = [num for num in nums if num > 0]\n    nums = list(set(nums))\n    nums.sort()\n    if len(nums) == 0:\n        return 1\n    if nums[0] > 1:\n        return 1\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] > 1:\n            return nums[i-1] + 1\n    return nums[-1] + 1\n```", "code": "def find_missing_positive(nums):\n    nums = [num for num in nums if num > 0]\n    nums = list(set(nums))\n    nums.sort()\n    if len(nums) == 0:\n        return 1\n    if nums[0] > 1:\n        return 1\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] > 1:\n            return nums[i-1] + 1\n    return nums[-1] + 1", "entry_point": "find_missing_positive", "testcase": ["assert find_missing_positive([1, 2, 0]) == 3", "assert find_missing_positive([7, 8, 9, 11, 12]) == 1", "assert find_missing_positive([3, 4, -1, 1]) == 2"]}
{"seq_id": 71859167036, "instruction": "Create a python function that finds the most frequent words in a list of strings. If there are more than one most frequent word, return all of them.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef frequent_words(words):\n    word_counts = Counter(words)\n    max_count = max(word_counts.values())\n    return [word for word, count in word_counts.items() if count == max_count]\n```", "code": "from collections import Counter\n\ndef frequent_words(words):\n    word_counts = Counter(words)\n    max_count = max(word_counts.values())\n    return [word for word, count in word_counts.items() if count == max_count]", "entry_point": "frequent_words", "testcase": ["assert frequent_words([\"red\", \"blue\", \"green\", \"red\", \"blue\", \"blue\"]) == [\"blue\"]", "assert frequent_words([\"cat\", \"dog\", \"cat\", \"dog\", \"elephant\"]) == [\"cat\", \"dog\"]", "assert frequent_words([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"]) == [\"apple\"]"]}
{"seq_id": 29539916133, "instruction": "Write a python function to calculate the minimum number of steps required to achieve a target sum using the squares of integers.", "output": "Here is the code to solve this problem: \n```python\ndef num_min_squares(target):\n    dp = [0] * (target + 1)\n    for i in range(1, target + 1):\n        dp[i] = i\n        for x in range(1, int(i ** 0.5) + 1):\n            square = x * x\n            if i < square:\n                break\n            dp[i] = min(dp[i], dp[i - square] + 1)\n    return dp[target]\n```", "code": "def num_min_squares(target):\n    dp = [0] * (target + 1)\n    for i in range(1, target + 1):\n        dp[i] = i\n        for x in range(1, int(i ** 0.5) + 1):\n            square = x * x\n            if i < square:\n                break\n            dp[i] = min(dp[i], dp[i - square] + 1)\n    return dp[target]", "entry_point": "num_min_squares", "testcase": ["assert num_min_squares(13)==2", "assert num_min_squares(12)==3", "assert num_min_squares(23)==4"]}
{"seq_id": 8238501694, "instruction": "Write a python function to find the number of balanced parentheses expressions that can be formed with a given number of pairs of parentheses.", "output": "Here is the code to solve this problem: \n```python\ndef count_balanced_parentheses(n):\n    if n == 0:\n        return 1\n    result = 0\n    for i in range(n):\n        result += count_balanced_parentheses(i) * count_balanced_parentheses(n - 1 - i)\n    return result\n```", "code": "def count_balanced_parentheses(n):\n    if n == 0:\n        return 1\n    result = 0\n    for i in range(n):\n        result += count_balanced_parentheses(i) * count_balanced_parentheses(n - 1 - i)\n    return result", "entry_point": "count_balanced_parentheses", "testcase": ["assert count_balanced_parentheses(5) == 42", "assert count_balanced_parentheses(4) == 14", "assert count_balanced_parentheses(3) == 5"]}
{"seq_id": 70530435845, "instruction": "Write a function to find the smallest positive number which is missing from the given unsorted list.", "output": "Here is the code to solve this problem: \n```python\ndef missing_num(arr):\n    arr.sort()\n    min_num = 1\n    for num in arr:\n        if num == min_num:\n            min_num += 1\n    return min_num\n    \n# Alternate solution\ndef missing_num(arr):\n    n = len(arr)\n    arr = set(arr)\n    for i in range(1, n+2):\n        if i not in arr:\n            return i\n```", "code": "def missing_num(arr):\n    arr.sort()\n    min_num = 1\n    for num in arr:\n        if num == min_num:\n            min_num += 1\n    return min_num\n    \n# Alternate solution\ndef missing_num(arr):\n    n = len(arr)\n    arr = set(arr)\n    for i in range(1, n+2):\n        if i not in arr:\n            return i", "entry_point": "missing_num", "testcase": ["assert missing_num([1, 2, 0]) == 3", "assert missing_num([3, 4, -1, 1]) == 2", "assert missing_num([7, 8, 9, 11, 12]) == 1"]}
{"seq_id": 21316943937, "instruction": "Write a function to find the longest substring with exactly k distinct characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring_with_k_distinct(str1, k):\n    window_start, max_length = 0, 0\n    char_frequency = {}\n\n    # in the following loop we'll try to extend the range [window_start, window_end]\n    for window_end in range(len(str1)):\n        right_char = str1[window_end]\n        if right_char not in char_frequency:\n            char_frequency[right_char] = 0\n        char_frequency[right_char] += 1\n\n        # shrink the sliding window, until we are left with 'k' distinct characters in the char_frequency\n        while len(char_frequency) > k:\n            left_char = str1[window_start]\n            char_frequency[left_char] -= 1\n            if char_frequency[left_char] == 0:\n                del char_frequency[left_char]\n            window_start += 1  # shrink the window\n        # remember the maximum length so far\n        max_length = max(max_length, window_end - window_start + 1)\n\n    return max_length\n```", "code": "def longest_substring_with_k_distinct(str1, k):\n    window_start, max_length = 0, 0\n    char_frequency = {}\n\n    # in the following loop we'll try to extend the range [window_start, window_end]\n    for window_end in range(len(str1)):\n        right_char = str1[window_end]\n        if right_char not in char_frequency:\n            char_frequency[right_char] = 0\n        char_frequency[right_char] += 1\n\n        # shrink the sliding window, until we are left with 'k' distinct characters in the char_frequency\n        while len(char_frequency) > k:\n            left_char = str1[window_start]\n            char_frequency[left_char] -= 1\n            if char_frequency[left_char] == 0:\n                del char_frequency[left_char]\n            window_start += 1  # shrink the window\n        # remember the maximum length so far\n        max_length = max(max_length, window_end - window_start + 1)\n\n    return max_length", "entry_point": "longest_substring_with_k_distinct", "testcase": ["assert longest_substring_with_k_distinct(\"araaci\", 1) == 2", "assert longest_substring_with_k_distinct(\"araaci\", 2) == 4", "assert longest_substring_with_k_distinct(\"aabacbebebe\", 3) == 7", "assert longest_substring_with_k_distinct(\"cbbebi\", 3) == 5"]}
{"seq_id": 47525328536, "instruction": "Write a function to find the closest palindrome number for a given number.", "output": "Here is the code to solve this problem: \n```python\ndef find_closest_palindrome(num):\n    if str(num) == str(num)[::-1]:\n        return num\n    else:\n        diff = float('inf')\n        res = None\n        for i in range(num-100,num+100):\n            if str(i) == str(i)[::-1]:\n                if abs(i-num) < diff:\n                    diff = abs(i-num)\n                    res = i\n        return res\n```", "code": "def find_closest_palindrome(num):\n    if str(num) == str(num)[::-1]:\n        return num\n    else:\n        diff = float('inf')\n        res = None\n        for i in range(num-100,num+100):\n            if str(i) == str(i)[::-1]:\n                if abs(i-num) < diff:\n                    diff = abs(i-num)\n                    res = i\n        return res", "entry_point": "find_closest_palindrome", "testcase": ["assert find_closest_palindrome(123) == 121", "assert find_closest_palindrome(999) == 999", "assert find_closest_palindrome(500) == 505"]}
{"seq_id": 74520913725, "instruction": "Write a function to find the largest overlap between two binary matrices. A binary matrix is a matrix where all elements are 0 or 1. The overlap is the largest number of ones shared by the two matrices when one matrix is shifted in any direction (up, down, left, right) relative to the other matrix.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef largest_overlap(img1, img2):\n    bestMax = 0\n    img1Ones = []\n    img2Ones = []\n    shiftCount = defaultdict(int)\n\n    for i in range(len(img1)):\n        for j in range(len(img1[0])):\n            if img1[i][j] == 1: img1Ones.append((i, j))\n            if img2[i][j] == 1: img2Ones.append((i, j))\n\n    for r_1, c_1 in img1Ones:\n        for r_2, c_2 in img2Ones:\n            rowShift, ColShift = r_1 - r_2, c_1 - c_2\n            shiftCount[(rowShift, ColShift)] += 1\n                \n            bestMax = max(bestMax, shiftCount[(rowShift, ColShift)])\n\n    return bestMax\n```", "code": "from collections import defaultdict\n\ndef largest_overlap(img1, img2):\n    bestMax = 0\n    img1Ones = []\n    img2Ones = []\n    shiftCount = defaultdict(int)\n\n    for i in range(len(img1)):\n        for j in range(len(img1[0])):\n            if img1[i][j] == 1: img1Ones.append((i, j))\n            if img2[i][j] == 1: img2Ones.append((i, j))\n\n    for r_1, c_1 in img1Ones:\n        for r_2, c_2 in img2Ones:\n            rowShift, ColShift = r_1 - r_2, c_1 - c_2\n            shiftCount[(rowShift, ColShift)] += 1\n                \n            bestMax = max(bestMax, shiftCount[(rowShift, ColShift)])\n\n    return bestMax", "entry_point": "largest_overlap", "testcase": ["assert largest_overlap([[1,1,0],[0,1,0],[0,1,0]], [[0,0,0],[0,1,1],[0,0,1]]) == 3", "assert largest_overlap([[0]], [[0]]) == 0", "assert largest_overlap([[1]], [[1]]) == 1"]}
{"seq_id": 29920745621, "instruction": "Write a python function to calculate the number of leap years between two given years.", "output": "Here is the code to solve this problem: \n```python\ndef count_leap_years(start_year, end_year):\n    leap_years = 0\n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            leap_years += 1\n    return leap_years\n```", "code": "def count_leap_years(start_year, end_year):\n    leap_years = 0\n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            leap_years += 1\n    return leap_years", "entry_point": "count_leap_years", "testcase": ["assert count_leap_years(2000, 2020) == 6", "assert count_leap_years(1990, 2000) == 3", "assert count_leap_years(2021, 2030) == 2"]}
{"seq_id": 71293437826, "instruction": "Write a function to find the minimum number of coins to make up a given amount. You can use an unlimited amount of coins for each denomination. If it is not possible to make up the given amount, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef minCoins(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if i >= coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1\n```", "code": "def minCoins(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if i >= coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1", "entry_point": "minCoins", "testcase": ["assert minCoins([1, 2, 5], 11) == 3", "assert minCoins([2], 3) == -1", "assert minCoins([1, 5, 10, 25], 100) == 4", "assert minCoins([1], 0) == 0"]}
{"seq_id": 1098150279, "instruction": "Write a function that checks if a given string is a valid palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward, ignoring spaces, punctuation, and capitalization.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_palindrome(s: str) -> bool:\n    s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return s == s[::-1]\n```", "code": "import re\n\ndef is_valid_palindrome(s: str) -> bool:\n    s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return s == s[::-1]", "entry_point": "is_valid_palindrome", "testcase": ["assert is_valid_palindrome(\"12321\") == True", "assert is_valid_palindrome(\"racecar\") == True", "assert is_valid_palindrome(\"race a car\") == False", "assert is_valid_palindrome(\"A man, a plan, a canal: Panama\") == True"]}
{"seq_id": 37696065904, "instruction": "Write a function to find the minimum number of jumps to reach the end of an array from the first element. Each element represents the maximum jump length from that position.", "output": "Here is the code to solve this problem: \n```python\ndef jump_to_end(nums):\n    maxIdx = 0\n    gMaxIdx = 0\n    jumps = 0\n    for i in range(len(nums)):\n        if i > gMaxIdx:\n            jumps += 1\n            gMaxIdx = maxIdx\n        maxIdx = max(maxIdx, i+nums[i])\n    return jumps\n```", "code": "def jump_to_end(nums):\n    maxIdx = 0\n    gMaxIdx = 0\n    jumps = 0\n    for i in range(len(nums)):\n        if i > gMaxIdx:\n            jumps += 1\n            gMaxIdx = maxIdx\n        maxIdx = max(maxIdx, i+nums[i])\n    return jumps", "entry_point": "jump_to_end", "testcase": ["assert jump_to_end([2,3,1,1,4])==2", "assert jump_to_end([1,1,1,1,1])==4", "assert jump_to_end([10,9,8,7,6,5,4,3,2,1,0])==1"]}
{"seq_id": 72418396286, "instruction": "Write a function that generates the nth row of Pascal's triangle.", "output": "Here is the code to solve this problem: \n```python\ndef pascal_triangle_row(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        row = [1]\n        for j in range(1, n):\n            row.append(pascal_triangle_row(n-1)[j-1] + pascal_triangle_row(n-1)[j])\n        row.append(1)\n        return row\n```", "code": "def pascal_triangle_row(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        row = [1]\n        for j in range(1, n):\n            row.append(pascal_triangle_row(n-1)[j-1] + pascal_triangle_row(n-1)[j])\n        row.append(1)\n        return row", "entry_point": "pascal_triangle_row", "testcase": ["assert pascal_triangle_row(0) == [1]", "assert pascal_triangle_row(1) == [1, 1]", "assert pascal_triangle_row(4) == [1, 4, 6, 4, 1]"]}
{"seq_id": 23545781531, "instruction": "Write a function that takes in a list of integers and an integer k, and returns the number of pairs of numbers in the list that sum up to a multiple of k.", "output": "Here is the code to solve this problem: \n```python\ndef count_divisible_pairs(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                count += 1\n    return count\n```", "code": "def count_divisible_pairs(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                count += 1\n    return count", "entry_point": "count_divisible_pairs", "testcase": ["assert count_divisible_pairs([1, 3, 2, 6, 1, 2], 3) == 5", "assert count_divisible_pairs([10, 20, 30, 40, 50], 10) == 10", "assert count_divisible_pairs([1, 2, 3, 4, 5], 5) == 2"]}
{"seq_id": 687911169, "instruction": "Write a python function to find the kth smallest element in an unsorted list using quickselect algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i + 1\n\ndef quickSelect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivotIndex = partition(arr, low, high)\n    if k == pivotIndex:\n        return arr[k]\n    elif k < pivotIndex:\n        return quickSelect(arr, low, pivotIndex - 1, k)\n    else:\n        return quickSelect(arr, pivotIndex + 1, high, k)\n\ndef kthSmallestElement(arr, k):\n    return quickSelect(arr, 0, len(arr) - 1, k - 1)\n```", "code": "def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i + 1\n\ndef quickSelect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivotIndex = partition(arr, low, high)\n    if k == pivotIndex:\n        return arr[k]\n    elif k < pivotIndex:\n        return quickSelect(arr, low, pivotIndex - 1, k)\n    else:\n        return quickSelect(arr, pivotIndex + 1, high, k)\n\ndef kthSmallestElement(arr, k):\n    return quickSelect(arr, 0, len(arr) - 1, k - 1)", "entry_point": "kthSmallestElement", "testcase": ["assert kthSmallestElement([12, 3, 5, 7, 19], 2) == 5", "assert kthSmallestElement([7, 10, 4, 3, 20, 15], 4) == 10", "assert kthSmallestElement([7, 10, 4, 3, 20, 15], 3) == 7"]}
{"seq_id": 74647741647, "instruction": "Write a function to find the first non-repeating character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef first_non_repeating_character(s: str) -> str:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return \"-\"\n```", "code": "def first_non_repeating_character(s: str) -> str:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return \"-\"", "entry_point": "first_non_repeating_character", "testcase": ["assert first_non_repeating_character(\"abacabaabacaba\") == \"-\"", "assert first_non_repeating_character(\"aabcc\") == \"b\"", "assert first_non_repeating_character(\"aabb\") == \"-\"", "assert first_non_repeating_character(\"abacabad\") == \"c\""]}
{"seq_id": 37216182761, "instruction": "Write a python function to find the longest consecutive subsequence from a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_consecutive(nums):\n    if not nums:\n        return 0\n\n    nums = set(nums)\n    longest_streak = 0\n\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in nums:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak\n```", "code": "def find_longest_consecutive(nums):\n    if not nums:\n        return 0\n\n    nums = set(nums)\n    longest_streak = 0\n\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in nums:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak", "entry_point": "find_longest_consecutive", "testcase": ["assert find_longest_consecutive([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9", "assert find_longest_consecutive([1, 4, 7, 10]) == 1", "assert find_longest_consecutive([100, 4, 200, 1, 3, 2]) == 4"]}
{"seq_id": 10490596587, "instruction": "Write a python function to find the k closest elements to x in a given list of integers. The function should return the k closest elements in ascending order.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef findClosestElements(arr, k, x):\n    if len(arr) < k:\n        return []\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, ( -(abs(arr[i] - x)), -arr[i]))\n    for i in range(k, len(arr)):\n        heapq.heappushpop(heap, ( - (abs(arr[i] - x)), -arr[i]))\n    for i in range(k):\n        arr[i] = -heapq.heappop(heap)[1]\n    return sorted(arr[:k])\n```", "code": "import heapq\n\ndef findClosestElements(arr, k, x):\n    if len(arr) < k:\n        return []\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, ( -(abs(arr[i] - x)), -arr[i]))\n    for i in range(k, len(arr)):\n        heapq.heappushpop(heap, ( - (abs(arr[i] - x)), -arr[i]))\n    for i in range(k):\n        arr[i] = -heapq.heappop(heap)[1]\n    return sorted(arr[:k])", "entry_point": "findClosestElements", "testcase": ["assert findClosestElements([1,2,3,4,5], 4, 3) == [1,2,3,4]", "assert findClosestElements([1,2,3,4,5], 4, -1) == [1,2,3,4]", "assert findClosestElements([1,4,6,8], 3, 5) == [4,6,8]"]}
{"seq_id": 7001923480, "instruction": "Write a function to find the number of unique combinations of a given length from a list of numbers.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import combinations\n\ndef unique_combinations(lst, n):\n    return len(set(combinations(lst, n)))\n```", "code": "from itertools import combinations\n\ndef unique_combinations(lst, n):\n    return len(set(combinations(lst, n)))", "entry_point": "unique_combinations", "testcase": ["assert unique_combinations([1, 2, 3], 2) == 3", "assert unique_combinations([1, 2, 3, 4, 5], 4) == 5", "assert unique_combinations([1, 2, 3, 4], 3) == 4"]}
{"seq_id": 2331284142, "instruction": "Write a function that generates all possible permutations of a given list of elements using backtracking.", "output": "Here is the code to solve this problem: \n```python\ndef backtrack(curr, remaining):\n    if len(remaining) == 0:\n        return [curr]\n    result = []\n    for i in range(len(remaining)):\n        new_curr = curr + [remaining[i]]\n        new_remaining = remaining[:i] + remaining[i+1:]\n        result += backtrack(new_curr, new_remaining)\n    return result\n\ndef permutations(elements):\n    return backtrack([], elements)\n```", "code": "def backtrack(curr, remaining):\n    if len(remaining) == 0:\n        return [curr]\n    result = []\n    for i in range(len(remaining)):\n        new_curr = curr + [remaining[i]]\n        new_remaining = remaining[:i] + remaining[i+1:]\n        result += backtrack(new_curr, new_remaining)\n    return result\n\ndef permutations(elements):\n    return backtrack([], elements)", "entry_point": "permutations", "testcase": ["assert permutations([1]) == [[1]]", "assert permutations([1,2]) == [[1,2],[2,1]]", "assert permutations([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"]}
{"seq_id": 33496013366, "instruction": "Write a python function to reverse the digits of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_number(num):\n    rev = 0\n    while num > 0:\n        rem = num % 10\n        rev = (rev * 10) + rem\n        num = num // 10\n    return rev\n```", "code": "def reverse_number(num):\n    rev = 0\n    while num > 0:\n        rem = num % 10\n        rev = (rev * 10) + rem\n        num = num // 10\n    return rev", "entry_point": "reverse_number", "testcase": ["assert reverse_number(12345) == 54321", "assert reverse_number(45678) == 87654", "assert reverse_number(98765) == 56789"]}
{"seq_id": 14578235258, "instruction": "Write a Python function that converts a given number of seconds into a human-readable format of hours, minutes, and seconds.", "output": "Here is the code to solve this problem: \n```python\ndef convert_seconds(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f\"{hours} hour(s) {minutes} minute(s) {seconds} second(s)\"\n```", "code": "def convert_seconds(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f\"{hours} hour(s) {minutes} minute(s) {seconds} second(s)\"", "entry_point": "convert_seconds", "testcase": ["assert convert_seconds(3600) == \"1 hour(s) 0 minute(s) 0 second(s)\"", "assert convert_seconds(3665) == \"1 hour(s) 1 minute(s) 5 second(s)\"", "assert convert_seconds(60) == \"0 hour(s) 1 minute(s) 0 second(s)\""]}
{"seq_id": 72288104666, "instruction": "Write a function to find the number of connected components in an undirected graph. The graph is represented as an adjacency list.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef count_connected_components(n: int, edges: List[List[int]]) -> int:\n    ids = [0] * n\n    for i in range(n):\n        ids[i] = i\n    for edge in edges:\n        union(edge[0], edge[1], ids)\n    comp_set = set()\n    for i in range(n):\n        comp_set.add(find(i, ids))\n    return len(comp_set)\n\ndef union(edge1, edge2, ids):\n    parent1 = find(edge1, ids)\n    parent2 = find(edge2, ids)\n    ids[parent1] = parent2\n\ndef find(edge, ids):\n    if ids[edge] != edge: \n        ids[edge] = find(ids[edge], ids)\n    return ids[edge]\n```", "code": "from typing import List\n\ndef count_connected_components(n: int, edges: List[List[int]]) -> int:\n    ids = [0] * n\n    for i in range(n):\n        ids[i] = i\n    for edge in edges:\n        union(edge[0], edge[1], ids)\n    comp_set = set()\n    for i in range(n):\n        comp_set.add(find(i, ids))\n    return len(comp_set)\n\ndef union(edge1, edge2, ids):\n    parent1 = find(edge1, ids)\n    parent2 = find(edge2, ids)\n    ids[parent1] = parent2\n\ndef find(edge, ids):\n    if ids[edge] != edge: \n        ids[edge] = find(ids[edge], ids)\n    return ids[edge]", "entry_point": "count_connected_components", "testcase": ["assert count_connected_components(5, [[0, 1], [1, 2], [3, 4]]) == 2", "assert count_connected_components(5, [[0, 1], [1, 2], [2, 3], [3, 4]]) == 1", "assert count_connected_components(6, [[0, 1], [2, 3], [4, 5]]) == 3"]}
{"seq_id": 20383247274, "instruction": "Write a function to generate the nth row of Pascal's triangle.", "output": "Here is the code to solve this problem: \n```python\ndef pascal_row(n):\n    row = [1]\n    for i in range(1, n+1):\n        row.append(row[i-1] * (n-i+1) // i)\n    return row\n```", "code": "def pascal_row(n):\n    row = [1]\n    for i in range(1, n+1):\n        row.append(row[i-1] * (n-i+1) // i)\n    return row", "entry_point": "pascal_row", "testcase": ["assert pascal_row(5) == [1, 5, 10, 10, 5, 1]", "assert pascal_row(4) == [1, 4, 6, 4, 1]", "assert pascal_row(3) == [1, 3, 3, 1]"]}
{"seq_id": 34908877856, "instruction": "Write a function that checks if a given string is a valid hexadecimal color code.\n\nA valid hexadecimal color code starts with a '#' followed by exactly 6 hexadecimal characters (0-9, a-f, A-F).", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_hex_color(color):\n    pattern = r'^#[0-9a-fA-F]{6}$'\n    return bool(re.match(pattern, color))\n```", "code": "import re\n\ndef is_valid_hex_color(color):\n    pattern = r'^#[0-9a-fA-F]{6}$'\n    return bool(re.match(pattern, color))", "entry_point": "is_valid_hex_color", "testcase": ["assert is_valid_hex_color(\"#1A2B3C\") == True", "assert is_valid_hex_color(\"#1A2B3G\") == False", "assert is_valid_hex_color(\"123456\") == False", "assert is_valid_hex_color(\"#1A2B3C4D5E\") == False", "assert is_valid_hex_color(\"#123\") == False"]}
{"seq_id": 8019974914, "instruction": "Write a python function to find the length of the longest subsequence of equal elements in a given array.", "output": "Here is the code to solve this problem: \n```python\ndef longest_equal_subsequence(arr): \n    max_len = 1\n    current_len = 1\n    for i in range(1, len(arr)): \n        if arr[i] == arr[i-1]: \n            current_len += 1\n            max_len = max(max_len, current_len) \n        else: \n            current_len = 1\n    return max_len\n```", "code": "def longest_equal_subsequence(arr): \n    max_len = 1\n    current_len = 1\n    for i in range(1, len(arr)): \n        if arr[i] == arr[i-1]: \n            current_len += 1\n            max_len = max(max_len, current_len) \n        else: \n            current_len = 1\n    return max_len", "entry_point": "longest_equal_subsequence", "testcase": ["assert longest_equal_subsequence([1,2,3,4,5,6]) == 1", "assert longest_equal_subsequence([5,5,5,5,5,5]) == 6", "assert longest_equal_subsequence([1,1,2,2,2,3,3,3,3]) == 4"]}
{"seq_id": 30097536847, "instruction": "Write a python function to find the maximum points that lie on the same straight line given an array of points on the X-Y plane.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef calculate_slope(p1, p2):\n    if p2[0]-p1[0] == 0:\n        return float('inf')\n    return (p2[1] - p1[1]) / (p2[0] - p1[0])\n\ndef max_on_same_line(points):\n    n = len(points)\n    if n < 3:\n        return n\n    \n    max_points_on_line = 0\n    \n    for i in range(n):\n        slopes = defaultdict(int)\n        duplicate_point = 1\n        \n        for j in range(i + 1, n):\n            if points[i] == points[j]:\n                duplicate_point += 1\n                continue\n            slopes[calculate_slope(points[i], points[j])] += 1\n            \n        max_points_on_line = max(max_points_on_line, max(slopes.values(), default=0) + duplicate_point)\n        \n    return max_points_on_line\n```", "code": "from collections import defaultdict\n\ndef calculate_slope(p1, p2):\n    if p2[0]-p1[0] == 0:\n        return float('inf')\n    return (p2[1] - p1[1]) / (p2[0] - p1[0])\n\ndef max_on_same_line(points):\n    n = len(points)\n    if n < 3:\n        return n\n    \n    max_points_on_line = 0\n    \n    for i in range(n):\n        slopes = defaultdict(int)\n        duplicate_point = 1\n        \n        for j in range(i + 1, n):\n            if points[i] == points[j]:\n                duplicate_point += 1\n                continue\n            slopes[calculate_slope(points[i], points[j])] += 1\n            \n        max_points_on_line = max(max_points_on_line, max(slopes.values(), default=0) + duplicate_point)\n        \n    return max_points_on_line", "entry_point": "max_on_same_line", "testcase": ["assert max_on_same_line([[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]) == 4", "assert max_on_same_line([[1,1],[2,2],[3,3]]) == 3", "assert max_on_same_line([[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]) == 7"]}
{"seq_id": 27427080920, "instruction": "Write a function that takes a string and returns the number of times each letter appears in the string.", "output": "Here is the code to solve this problem: \n```python\ndef letter_frequency(s):\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq\n```", "code": "def letter_frequency(s):\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq", "entry_point": "letter_frequency", "testcase": ["assert letter_frequency(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\") == {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2, 'g': 2, 'h': 2, 'i': 2, 'j': 2, 'k': 2, 'l': 2, 'm': 2, 'n': 2, 'o': 2, 'p': 2, 'q': 2, 'r': 2, 's': 2, 't': 2, 'u': 2, 'v': 2, 'w': 2, 'x': 2, 'y': 2, 'z': 2}", "assert letter_frequency(\"python\") == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "assert letter_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}"]}
{"seq_id": 9555007341, "instruction": "Write a function to find the kth smallest element in an unsorted array using the QuickSelect algorithm.", "output": "Here is the code to solve this problem: \n```python\nimport random\n\ndef partition(nums, low, high):\n    pivot = nums[high]\n    i = low - 1\n    for j in range(low, high):\n        if nums[j] <= pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n    nums[i+1], nums[high] = nums[high], nums[i+1]\n    return i+1\n\ndef quickSelect(nums, low, high, k):\n    if low == high:\n        return nums[low]\n    pivot_index = partition(nums, low, high)\n    if k == pivot_index:\n        return nums[k]\n    elif k < pivot_index:\n        return quickSelect(nums, low, pivot_index - 1, k)\n    else:\n        return quickSelect(nums, pivot_index + 1, high, k)\n\ndef kthSmallest(nums, k):\n    return quickSelect(nums, 0, len(nums) - 1, k - 1)\n```", "code": "import random\n\ndef partition(nums, low, high):\n    pivot = nums[high]\n    i = low - 1\n    for j in range(low, high):\n        if nums[j] <= pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n    nums[i+1], nums[high] = nums[high], nums[i+1]\n    return i+1\n\ndef quickSelect(nums, low, high, k):\n    if low == high:\n        return nums[low]\n    pivot_index = partition(nums, low, high)\n    if k == pivot_index:\n        return nums[k]\n    elif k < pivot_index:\n        return quickSelect(nums, low, pivot_index - 1, k)\n    else:\n        return quickSelect(nums, pivot_index + 1, high, k)\n\ndef kthSmallest(nums, k):\n    return quickSelect(nums, 0, len(nums) - 1, k - 1)", "entry_point": "kthSmallest", "testcase": ["assert kthSmallest([3,2,1,5,6,4], 2) == 2", "assert kthSmallest([5,3,1,2,4], 3) == 3", "assert kthSmallest([3,2,3,1,2,4,5,5,6], 4) == 3"]}
{"seq_id": 9992932581, "instruction": "Write a python function to find the nth number that is both a Fibonacci number and prime.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci_prime(n):\n    if n <= 0:\n        return None\n\n    count = 0\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n\ndef nth_fibonacci_prime(n):\n    return fibonacci_prime(n)\n```", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci_prime(n):\n    if n <= 0:\n        return None\n\n    count = 0\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n\ndef nth_fibonacci_prime(n):\n    return fibonacci_prime(n)", "entry_point": "nth_fibonacci_prime", "testcase": ["assert nth_fibonacci_prime(1) == 2", "assert nth_fibonacci_prime(2) == 3", "assert nth_fibonacci_prime(3) == 5", "assert nth_fibonacci_prime(5) == 89", "assert nth_fibonacci_prime(4) == 13"]}
{"seq_id": 36305249209, "instruction": "Write a function that implements a topological sort on a directed acyclic graph (DAG) represented as a list of prerequisites. The function should return a list of node values in a valid order if such an order exists, or an empty list if the graph contains cycles and such an order cannot be determined.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef topological_sort(numCourses, prerequisites):\n    graph = defaultdict(list)\n    indegree = [0] * numCourses\n    for course, prereq in prerequisites:\n        graph[prereq].append(course)\n        indegree[course] += 1\n\n    queue = [i for i in range(numCourses) if indegree[i] == 0]\n    result = []\n    while queue:\n        node = queue.pop(0)\n        result.append(node)\n        for neighbor in graph[node]:\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    if len(result) == numCourses:\n        return result\n    else:\n        return []\n```", "code": "from collections import defaultdict\n\ndef topological_sort(numCourses, prerequisites):\n    graph = defaultdict(list)\n    indegree = [0] * numCourses\n    for course, prereq in prerequisites:\n        graph[prereq].append(course)\n        indegree[course] += 1\n\n    queue = [i for i in range(numCourses) if indegree[i] == 0]\n    result = []\n    while queue:\n        node = queue.pop(0)\n        result.append(node)\n        for neighbor in graph[node]:\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    if len(result) == numCourses:\n        return result\n    else:\n        return []", "entry_point": "topological_sort", "testcase": ["assert topological_sort(2, [[1,0],[0,1]]) == []", "assert topological_sort(2, [[1,0]]) == [0,1]", "assert topological_sort(4, [[1,0],[2,0],[3,1],[3,2]]) == [0,1,2,3] or [0,2,1,3]"]}
{"seq_id": 3075883713, "instruction": "Write a function that checks if a given string has balanced parentheses. The function should return True if the string is balanced and False otherwise. A string is considered balanced if every opening parenthesis has a corresponding closing parenthesis and they are correctly nested.", "output": "Here is the code to solve this problem: \n```python\ndef is_balanced(s: str) -> bool:\n    if len(s) % 2 == 1:\n        return False\n    stack = []\n    pairs = {\n        \"]\": \"[\",\n        \"}\": \"{\",\n        \")\": \"(\"\n    }\n    for ch in s:\n        if ch in pairs:\n            if not stack or stack[-1] != pairs[ch]:\n                return False\n            stack.pop()\n        else:\n            stack.append(ch)\n\n    return not stack\n```", "code": "def is_balanced(s: str) -> bool:\n    if len(s) % 2 == 1:\n        return False\n    stack = []\n    pairs = {\n        \"]\": \"[\",\n        \"}\": \"{\",\n        \")\": \"(\"\n    }\n    for ch in s:\n        if ch in pairs:\n            if not stack or stack[-1] != pairs[ch]:\n                return False\n            stack.pop()\n        else:\n            stack.append(ch)\n\n    return not stack", "entry_point": "is_balanced", "testcase": ["assert is_balanced(\"{[]}\") == True", "assert is_balanced(\"([)]\") == False", "assert is_balanced(\"(]\") == False", "assert is_balanced(\"()[]{}\") == True", "assert is_balanced(\"()\") == True"]}
{"seq_id": 40710169844, "instruction": "Write a function that returns the number of palindromic substrings in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef count_palindromic_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        # Count odd length palindromes\n        total_count += expand_around_center(i, i)\n        # Count even length palindromes\n        total_count += expand_around_center(i, i + 1)\n\n    return total_count\n```", "code": "def count_palindromic_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        # Count odd length palindromes\n        total_count += expand_around_center(i, i)\n        # Count even length palindromes\n        total_count += expand_around_center(i, i + 1)\n\n    return total_count", "entry_point": "count_palindromic_substrings", "testcase": ["assert count_palindromic_substrings(\"racecar\") == 10", "assert count_palindromic_substrings(\"aaa\") == 6", "assert count_palindromic_substrings(\"abc\") == 3"]}
{"seq_id": 20536615076, "instruction": "Write a function to count the number of words in a string. A word is defined as a sequence of characters separated by spaces.", "output": "Here is the code to solve this problem: \n```python\ndef count_words(sentence):\n    words = sentence.split()\n    return len(words)\n```", "code": "def count_words(sentence):\n    words = sentence.split()\n    return len(words)", "entry_point": "count_words", "testcase": ["assert count_words(\"This is a test\") == 4", "assert count_words(\"I am learning Python\") == 4", "assert count_words(\"Hello world\") == 2"]}
{"seq_id": 28932182256, "instruction": "Write a python function to remove all elements from a list that are less than a specified minimum value.", "output": "Here is the code to solve this problem: \n```python\ndef filter_list(numbers, min_val):\n    return [num for num in numbers if num >= min_val]\n```", "code": "def filter_list(numbers, min_val):\n    return [num for num in numbers if num >= min_val]", "entry_point": "filter_list", "testcase": ["assert filter_list([100, 200, 300, 400, 500], 500) == [500]", "assert filter_list([1, 2, 3, 4, 5], 3) == [3, 4, 5]", "assert filter_list([10, 20, 30, 40, 50], 25) == [30, 40, 50]"]}
{"seq_id": 74491430438, "instruction": "Write a python function to calculate the number of ways to make up a certain amount (target) with a given list of coin denominations. The coins can be used multiple times.", "output": "Here is the code to solve this problem: \n```python\ndef coin_combinations(nums, target):\n        dp = [0 for _ in range(target + 1)]\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for index,coin in enumerate(nums):\n                if(i >= coin):\n                    dp[i] += dp[i - coin]\n        return dp[target]\n```", "code": "def coin_combinations(nums, target):\n        dp = [0 for _ in range(target + 1)]\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for index,coin in enumerate(nums):\n                if(i >= coin):\n                    dp[i] += dp[i - coin]\n        return dp[target]", "entry_point": "coin_combinations", "testcase": ["assert coin_combinations([1, 2, 3], 4) == 7", "assert coin_combinations([1], 0) == 1", "assert coin_combinations([2], 3) == 0"]}
{"seq_id": 72578709565, "instruction": "Write a python function that calculates the minimum number of steps required to make all elements of an array equal, where a step is defined as replacing an element with the average of all elements in the array.", "output": "Here is the code to solve this problem: \n```python\ndef minSteps(nums):\n    steps = 0\n    avg = sum(nums)/len(nums)\n    for num in nums:\n        if num != avg:\n            steps += 1\n            nums = [avg if x == num else x for x in nums]\n    return steps\n```", "code": "def minSteps(nums):\n    steps = 0\n    avg = sum(nums)/len(nums)\n    for num in nums:\n        if num != avg:\n            steps += 1\n            nums = [avg if x == num else x for x in nums]\n    return steps", "entry_point": "minSteps", "testcase": ["assert minSteps([1,2,3]) == 2", "assert minSteps([1,2,3,4,5]) == 4", "assert minSteps([1,1,1]) == 0"]}
{"seq_id": 38688361706, "instruction": "Write a function to find the number of ways to decode a message encoded from 0 to 25. The encoding rules are as follows:\n- 'A' -> 1\n- 'B' -> 2\n- ...\n- 'Z' -> 26", "output": "Here is the code to solve this problem: \n```python\ndef decodeWays(s: str) -> int:\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        if s[i-1] != '0':\n            dp[i] = dp[i-1]\n        two_digit = int(s[i-2:i])\n        if 10 <= two_digit <= 26:\n            dp[i] += dp[i-2]\n    return dp[n]\n```", "code": "def decodeWays(s: str) -> int:\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        if s[i-1] != '0':\n            dp[i] = dp[i-1]\n        two_digit = int(s[i-2:i])\n        if 10 <= two_digit <= 26:\n            dp[i] += dp[i-2]\n    return dp[n]", "entry_point": "decodeWays", "testcase": ["assert decodeWays(\"12\") == 2", "assert decodeWays(\"226\") == 3", "assert decodeWays(\"06\") == 0"]}
{"seq_id": 10465897941, "instruction": "Write a function to find the n\u2019th Hex number.", "output": "Here is the code to solve this problem: \n```python\ndef get_hex_number(n):\n    return n * (2 * n - 1)\n```", "code": "def get_hex_number(n):\n    return n * (2 * n - 1)", "entry_point": "get_hex_number", "testcase": ["assert get_hex_number(2) == 6", "assert get_hex_number(3) == 15", "assert get_hex_number(1) == 1"]}
{"seq_id": 17253370067, "instruction": "Write a function to find the maximum number of full groups of people that can be seated in a movie theater given the number of rows and the reserved seats. A full group consists of at least two people, and no two people in the same group can sit next to each other. A group can only be seated in a row if there are at least two consecutive empty seats in that row.", "output": "Here is the code to solve this problem: \n```python\ndef max_full_groups(n, reservedSeats):\n    reservedSeats.sort(key=lambda x: x[0])\n    reservedSeats.append([0, 0])\n    M = len(reservedSeats)\n    free = [True] * 11\n    free[reservedSeats[0][1]] = False\n    i = 1\n    count = 0\n    while i < M:\n        if reservedSeats[i][0] == reservedSeats[i - 1][0]:\n            free[reservedSeats[i][1]] = False\n        else:\n            mid_seats = True\n            if free[2] and free[3] and free[4] and free[5]:\n                mid_seats = False\n                count += 1\n            if free[6] and free[7] and free[8] and free[9]:\n                mid_seats = False\n                count += 1\n            if mid_seats and free[4] and free[5] and free[6] and free[7]:\n                count += 1\n            n -= 1\n            free = [True] * 11\n            free[reservedSeats[i][1]] = False\n        i += 1\n\n    return count + n * 2\n```", "code": "def max_full_groups(n, reservedSeats):\n    reservedSeats.sort(key=lambda x: x[0])\n    reservedSeats.append([0, 0])\n    M = len(reservedSeats)\n    free = [True] * 11\n    free[reservedSeats[0][1]] = False\n    i = 1\n    count = 0\n    while i < M:\n        if reservedSeats[i][0] == reservedSeats[i - 1][0]:\n            free[reservedSeats[i][1]] = False\n        else:\n            mid_seats = True\n            if free[2] and free[3] and free[4] and free[5]:\n                mid_seats = False\n                count += 1\n            if free[6] and free[7] and free[8] and free[9]:\n                mid_seats = False\n                count += 1\n            if mid_seats and free[4] and free[5] and free[6] and free[7]:\n                count += 1\n            n -= 1\n            free = [True] * 11\n            free[reservedSeats[i][1]] = False\n        i += 1\n\n    return count + n * 2", "entry_point": "max_full_groups", "testcase": ["assert max_full_groups(3, [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]])==4", "assert max_full_groups(4, [[4,3],[1,4],[4,6],[1,7]])==4", "assert max_full_groups(2, [[2,1],[1,8],[2,6]])==2"]}
{"seq_id": 21776823456, "instruction": "Write a function to determine if a string is a valid pin name based on the following rules:\n- A valid pin name starts with a letter.\n- After the letter, there can be any number of digits.\n- After the digits, there can be an optional single letter suffix.\n- There should be no other characters or spaces.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_pin_name(pin):\n    pattern = r'^[A-Za-z]\\d*[A-Za-z]?$'\n    return bool(re.match(pattern, pin))\n```", "code": "import re\n\ndef is_valid_pin_name(pin):\n    pattern = r'^[A-Za-z]\\d*[A-Za-z]?$'\n    return bool(re.match(pattern, pin))", "entry_point": "is_valid_pin_name", "testcase": ["assert is_valid_pin_name(\"A123\") == True", "assert is_valid_pin_name(\"1A\") == False", "assert is_valid_pin_name(\"A123B456\") == False", "assert is_valid_pin_name(\"A123C\") == True", "assert is_valid_pin_name(\"A123C4\") == False", "assert is_valid_pin_name(\"A\") == True", "assert is_valid_pin_name(\"1\") == False", "assert is_valid_pin_name(\"B2C\") == True"]}
{"seq_id": 74635745677, "instruction": "Write a python function to find the longest sequence of consecutive zeros that is surrounded by ones at both the ends in the binary representation of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_consecutive_zeros(N):\n    binary_representation = bin(N)[2:]\n    max_gap = 0\n    current_gap = 0\n    found_one = False\n    \n    for bit in binary_representation:\n        if bit == '1':\n            if found_one and current_gap > max_gap:\n                max_gap = current_gap\n            current_gap = 0\n            found_one = True\n        elif found_one:\n            current_gap += 1\n            \n    return max_gap\n```", "code": "def find_max_consecutive_zeros(N):\n    binary_representation = bin(N)[2:]\n    max_gap = 0\n    current_gap = 0\n    found_one = False\n    \n    for bit in binary_representation:\n        if bit == '1':\n            if found_one and current_gap > max_gap:\n                max_gap = current_gap\n            current_gap = 0\n            found_one = True\n        elif found_one:\n            current_gap += 1\n            \n    return max_gap", "entry_point": "find_max_consecutive_zeros", "testcase": ["assert find_max_consecutive_zeros(15) == 0", "assert find_max_consecutive_zeros(32) == 0", "assert find_max_consecutive_zeros(1041) == 5"]}
{"seq_id": 28948783648, "instruction": "Write a python function that takes a list of numbers and returns a new list with the numbers rounded to the nearest integer.", "output": "Here is the code to solve this problem: \n```python\ndef round_numbers(numbers):\n    return [round(num) for num in numbers]\n```", "code": "def round_numbers(numbers):\n    return [round(num) for num in numbers]", "entry_point": "round_numbers", "testcase": ["assert round_numbers([3.2, 4.7, 4.5, 9.9]) == [3, 5, 4, 10]", "assert round_numbers([1.1, 2.2, 3.3, 4.4, 5.5]) == [1, 2, 3, 4, 6]", "assert round_numbers([2.8, 1.2, 3.5, 4.6, 5.5]) == [3, 1, 4, 5, 6]"]}
{"seq_id": 70913976303, "instruction": "Write a function to get the nth digit of Champernowne's constant. Champernowne's constant is a transcendental real constant whose decimal expansion has important properties in number theory. It is constructed by concatenating the positive integers:\n```\nC10 = 0.12345678910111213141516...\n```", "output": "Here is the code to solve this problem: \n```python\ndef get_nth_digit(n):\n    if n < 10:\n        return n\n    digit_length = 1\n    while n > digit_length * 9 * 10 ** (digit_length - 1):\n        n -= digit_length * 9 * 10 ** (digit_length - 1)\n        digit_length += 1\n    number = 10 ** (digit_length - 1) + (n - 1) // digit_length\n    digit_index = (n - 1) % digit_length\n    return int(str(number)[digit_index])\n```", "code": "def get_nth_digit(n):\n    if n < 10:\n        return n\n    digit_length = 1\n    while n > digit_length * 9 * 10 ** (digit_length - 1):\n        n -= digit_length * 9 * 10 ** (digit_length - 1)\n        digit_length += 1\n    number = 10 ** (digit_length - 1) + (n - 1) // digit_length\n    digit_index = (n - 1) % digit_length\n    return int(str(number)[digit_index])", "entry_point": "get_nth_digit", "testcase": ["assert get_nth_digit(1)==1", "assert get_nth_digit(11)==0", "assert get_nth_digit(100)==5", "assert get_nth_digit(15)==2"]}
{"seq_id": 15305765743, "instruction": "Write a python function to calculate the number of times a given number appears in a list and return the index positions of the occurrences.", "output": "Here is the code to solve this problem: \n```python\ndef find_number_positions(nums, target):\n    positions = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            positions.append(i)\n    return positions\n```", "code": "def find_number_positions(nums, target):\n    positions = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            positions.append(i)\n    return positions", "entry_point": "find_number_positions", "testcase": ["assert find_number_positions([10, 20, 30, 40, 50], 10) == [0]", "assert find_number_positions([1, 2, 3, 2, 4, 2], 2) == [1, 3, 5]", "assert find_number_positions([5, 5, 5, 5, 5], 5) == [0, 1, 2, 3, 4]"]}
{"seq_id": 38901950841, "instruction": "Write a python function to find the maximum product of three numbers in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_three(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n```", "code": "def max_product_three(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])", "entry_point": "max_product_three", "testcase": ["assert max_product_three([-10, -10, 5, 2]) == 500", "assert max_product_three([-5, 2, 0, 3, -4]) == 60", "assert max_product_three([1, 2, 3]) == 6"]}
{"seq_id": 2261877182, "instruction": "Write a function to determine if a given string is a valid number or not. A valid number can be an integer, a floating point number, or a scientific notation.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_number(s: str) -> bool:\n    try:\n        float(s)\n        return True\n    except ValueError:\n        try:\n            if s.lower().count('e') == 1:\n                integer, exponent = s.lower().split('e')\n                if integer[0] in ('-', '+'):\n                    integer = integer[1:]\n                if not integer or not exponent:\n                    return False\n                float(integer)\n                int(exponent)\n                return True\n        except ValueError:\n            return False\n    return False\n```", "code": "def is_valid_number(s: str) -> bool:\n    try:\n        float(s)\n        return True\n    except ValueError:\n        try:\n            if s.lower().count('e') == 1:\n                integer, exponent = s.lower().split('e')\n                if integer[0] in ('-', '+'):\n                    integer = integer[1:]\n                if not integer or not exponent:\n                    return False\n                float(integer)\n                int(exponent)\n                return True\n        except ValueError:\n            return False\n    return False", "entry_point": "is_valid_number", "testcase": ["assert is_valid_number(\"123\") == True", "assert is_valid_number(\"-123.456\") == True", "assert is_valid_number(\"1.23e10\") == True", "assert is_valid_number(\".e1\") == False", "assert is_valid_number(\"123e\") == False", "assert is_valid_number(\"1.23e-10\") == True", "assert is_valid_number(\"123.456\") == True"]}
{"seq_id": 34602033761, "instruction": "Write a function to find the length of the shortest contiguous subarray whose sum is at least a given value.", "output": "Here is the code to solve this problem: \n```python\ndef min_subarray_length(target, nums):\n    if nums == None or len(nums) == 0:\n        return 0\n    if nums[0] >= target:\n        return 1\n\n    start = 0\n    end = 0\n    window_sum = 0\n    minimum = float('inf')\n\n    while end < len(nums):\n        window_sum += nums[end]\n        end += 1\n\n        while window_sum >= target:\n            minimum = min(minimum, end - start)\n            window_sum -= nums[start]\n            start += 1\n\n    return minimum if minimum != float('inf') else 0\n```", "code": "def min_subarray_length(target, nums):\n    if nums == None or len(nums) == 0:\n        return 0\n    if nums[0] >= target:\n        return 1\n\n    start = 0\n    end = 0\n    window_sum = 0\n    minimum = float('inf')\n\n    while end < len(nums):\n        window_sum += nums[end]\n        end += 1\n\n        while window_sum >= target:\n            minimum = min(minimum, end - start)\n            window_sum -= nums[start]\n            start += 1\n\n    return minimum if minimum != float('inf') else 0", "entry_point": "min_subarray_length", "testcase": ["assert min_subarray_length(7, [2, 3, 1, 2, 4, 3])==2", "assert min_subarray_length(11, [1, 1, 1, 1, 1])==0", "assert min_subarray_length(4, [1, 4, 4])==1"]}
{"seq_id": 32384365892, "instruction": "Write a function that checks if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.", "output": "Here is the code to solve this problem: \n```python\ndef check_anagrams(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n```", "code": "def check_anagrams(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False", "entry_point": "check_anagrams", "testcase": ["assert check_anagrams('hello', 'world') == False", "assert check_anagrams('triangle', 'integral') == True", "assert check_anagrams('listen', 'silent') == True", "assert check_anagrams('finder', 'friend') == True", "assert check_anagrams('binary', 'brainy') == True", "assert check_anagrams('admirer', 'married') == True"]}
{"seq_id": 28966378416, "instruction": "Write a function to find the number of distinct island shapes in a given grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.", "output": "Here is the code to solve this problem: \n```python\ndef count_distinct_islands(grid):\n    def dfs(x, y, position):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] != 1:\n            return\n        grid[x][y] = 2\n        position.append((x, y))\n        dfs(x + 1, y, position)\n        dfs(x - 1, y, position)\n        dfs(x, y + 1, position)\n        dfs(x, y - 1, position)\n\n    def normalize(position):\n        min_x = min([p[0] for p in position])\n        min_y = min([p[1] for p in position])\n        return [(p[0] - min_x, p[1] - min_y) for p in position]\n\n    island_positions = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                position = []\n                dfs(i, j, position)\n                island_positions.append(normalize(position))\n\n    return len(set([tuple(sorted(p)) for p in island_positions]))\n```", "code": "def count_distinct_islands(grid):\n    def dfs(x, y, position):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] != 1:\n            return\n        grid[x][y] = 2\n        position.append((x, y))\n        dfs(x + 1, y, position)\n        dfs(x - 1, y, position)\n        dfs(x, y + 1, position)\n        dfs(x, y - 1, position)\n\n    def normalize(position):\n        min_x = min([p[0] for p in position])\n        min_y = min([p[1] for p in position])\n        return [(p[0] - min_x, p[1] - min_y) for p in position]\n\n    island_positions = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                position = []\n                dfs(i, j, position)\n                island_positions.append(normalize(position))\n\n    return len(set([tuple(sorted(p)) for p in island_positions]))", "entry_point": "count_distinct_islands", "testcase": ["assert count_distinct_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]]) == 1", "assert count_distinct_islands([[1,1,0,1,1],[1,0,0,0,0],[0,1,0,0,1],[0,1,0,1,1]]) == 4", "assert count_distinct_islands([[1,1,0,1,1],[1,0,0,0,0],[0,0,0,0,1],[1,1,0,1,1]]) == 3"]}
{"seq_id": 28525100613, "instruction": "Write a python function to find the number of distinct subsequences in a string.", "output": "Here is the code to solve this problem: \n```python\ndef distinct_subsequences(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    last_occurrence = {}\n    for i in range(1, n + 1):\n        dp[i] = 2 * dp[i - 1]\n        if s[i - 1] in last_occurrence:\n            dp[i] -= dp[last_occurrence[s[i - 1]]]\n        last_occurrence[s[i - 1]] = i - 1\n    return dp[n] - 1\n```", "code": "def distinct_subsequences(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    last_occurrence = {}\n    for i in range(1, n + 1):\n        dp[i] = 2 * dp[i - 1]\n        if s[i - 1] in last_occurrence:\n            dp[i] -= dp[last_occurrence[s[i - 1]]]\n        last_occurrence[s[i - 1]] = i - 1\n    return dp[n] - 1", "entry_point": "distinct_subsequences", "testcase": ["assert distinct_subsequences(\"abc\") == 7", "assert distinct_subsequences(\"abcd\") == 15", "assert distinct_subsequences(\"aaa\") == 3"]}
{"seq_id": 7092440687, "instruction": "Write a python function to convert a given string to uppercase without using the in-built upper() function.", "output": "Here is the code to solve this problem: \n```python\ndef string_to_uppercase(input_string):\n    uppercase_string = \"\"\n    for char in input_string:\n        if 'a' <= char <= 'z':\n            # Convert lowercase character to uppercase\n            uppercase_char = chr(ord(char) - 32)\n        else:\n            uppercase_char = char\n        uppercase_string += uppercase_char\n    return uppercase_string\n```", "code": "def string_to_uppercase(input_string):\n    uppercase_string = \"\"\n    for char in input_string:\n        if 'a' <= char <= 'z':\n            # Convert lowercase character to uppercase\n            uppercase_char = chr(ord(char) - 32)\n        else:\n            uppercase_char = char\n        uppercase_string += uppercase_char\n    return uppercase_string", "entry_point": "string_to_uppercase", "testcase": ["assert string_to_uppercase(\"world\") == \"WORLD\"", "assert string_to_uppercase(\"python\") == \"PYTHON\"", "assert string_to_uppercase(\"hello\") == \"HELLO\""]}
{"seq_id": 38236064568, "instruction": "Write a function to find the largest number possible from a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_number(numbers):\n    numbers = list(map(str, numbers)) # convert each number to string\n    numbers.sort(key=lambda x:x*3, reverse=True) # sort the numbers\n    return int(''.join(numbers)) # join the numbers and convert to integer\n```", "code": "def find_largest_number(numbers):\n    numbers = list(map(str, numbers)) # convert each number to string\n    numbers.sort(key=lambda x:x*3, reverse=True) # sort the numbers\n    return int(''.join(numbers)) # join the numbers and convert to integer", "entry_point": "find_largest_number", "testcase": ["assert find_largest_number([10,2])==210", "assert find_largest_number([54,546,548,60])==6054854654", "assert find_largest_number([3,30,34,5,9])==9534330"]}
{"seq_id": 25771004990, "instruction": "Write a function to find the power of a number x raised to y.", "output": "Here is the code to solve this problem: \n```python\ndef power(x, y):\n    if y == 0:\n        return 1\n    if y % 2 == 0:\n        return power(x, y // 2) * power(x, y // 2)\n    else:\n        return x * power(x, y // 2) * power(x, y // 2)\n```", "code": "def power(x, y):\n    if y == 0:\n        return 1\n    if y % 2 == 0:\n        return power(x, y // 2) * power(x, y // 2)\n    else:\n        return x * power(x, y // 2) * power(x, y // 2)", "entry_point": "power", "testcase": ["assert power(5, 2)==25", "assert power(2, 3)==8", "assert power(10, 0)==1"]}
{"seq_id": 14386195455, "instruction": "Write a function to determine if two rectangles intersect. Rectangles are defined by their top-left and bottom-right coordinates.", "output": "Here is the code to solve this problem: \n```python\ndef do_rectangles_intersect(top_left1, bottom_right1, top_left2, bottom_right2):\n    x1, y1 = top_left1\n    x2, y2 = bottom_right1\n    x3, y3 = top_left2\n    x4, y4 = bottom_right2\n\n    if x3 > x2 or x1 > x4 or y3 > y2 or y1 > y4:\n        return False\n    return True\n```", "code": "def do_rectangles_intersect(top_left1, bottom_right1, top_left2, bottom_right2):\n    x1, y1 = top_left1\n    x2, y2 = bottom_right1\n    x3, y3 = top_left2\n    x4, y4 = bottom_right2\n\n    if x3 > x2 or x1 > x4 or y3 > y2 or y1 > y4:\n        return False\n    return True", "entry_point": "do_rectangles_intersect", "testcase": ["assert do_rectangles_intersect((1, 1), (3, 3), (4, 4), (6, 6)) == False", "assert do_rectangles_intersect((0, 0), (5, 5), (-1, -1), (1, 1)) == True", "assert do_rectangles_intersect((1, 1), (3, 3), (2, 2), (4, 4)) == True"]}
{"seq_id": 72865080974, "instruction": "Write a function to find the kth smallest element in an unsorted list using the QuickSelect algorithm.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef quickSelect(arr: List[int], k: int) -> int:\n    if len(arr) == 1:\n        return arr[0]\n    \n    pivot = arr[len(arr) // 2]\n    \n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    if k <= len(left):\n        return quickSelect(left, k)\n    elif k > len(left) + len(middle):\n        return quickSelect(right, k - len(left) - len(middle))\n    \n    return middle[0]\n```", "code": "from typing import List\n\ndef quickSelect(arr: List[int], k: int) -> int:\n    if len(arr) == 1:\n        return arr[0]\n    \n    pivot = arr[len(arr) // 2]\n    \n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    if k <= len(left):\n        return quickSelect(left, k)\n    elif k > len(left) + len(middle):\n        return quickSelect(right, k - len(left) - len(middle))\n    \n    return middle[0]", "entry_point": "quickSelect", "testcase": ["assert quickSelect([10, 4, 5, 8, 6, 11, 26], 3) == 6", "assert quickSelect([7, 10, 4, 3, 20, 15], 3) == 7", "assert quickSelect([1, 3, 2, 4], 2) == 2"]}
{"seq_id": 9352916847, "instruction": "Write a function to find the median of two sorted arrays. The overall run time complexity should be O(log (m+n)).", "output": "Here is the code to solve this problem: \n```python\ndef findMedianSortedArrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2 - 1] + nums[length // 2]) / 2\n    else:\n        return nums[length // 2]\n```", "code": "def findMedianSortedArrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2 - 1] + nums[length // 2]) / 2\n    else:\n        return nums[length // 2]", "entry_point": "findMedianSortedArrays", "testcase": ["assert findMedianSortedArrays([1, 2], [3, 4]) == 2.5", "assert findMedianSortedArrays([1, 3], [2]) == 2.0", "assert findMedianSortedArrays([1, 3], [2, 7]) == 2.5"]}
{"seq_id": 1895163533, "instruction": "Write a function that takes a list of integers as an input and returns the product of all the odd numbers in the list.", "output": "Here is the code to solve this problem: \n```python\ndef product_of_odds(nums):\n    product = 1\n    for num in nums:\n        if num % 2 != 0:\n            product *= num\n    return product\n```", "code": "def product_of_odds(nums):\n    product = 1\n    for num in nums:\n        if num % 2 != 0:\n            product *= num\n    return product", "entry_point": "product_of_odds", "testcase": ["assert product_of_odds([1, 3, 5, 6, 8]) == 15", "assert product_of_odds([2, 4, 6, 8]) == 1", "assert product_of_odds([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 945"]}
{"seq_id": 14990737245, "instruction": "Write a function to find the largest square sub-matrix with all 1's in a binary matrix.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_square(matrix):\n    if not matrix:\n        return 0\n    \n    rows, cols = len(matrix), len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    max_side = 0\n    \n    # Initialize first row and column of dp matrix\n    for i in range(rows):\n        dp[i][0] = matrix[i][0]\n        max_side = max(max_side, dp[i][0])\n    for j in range(cols):\n        dp[0][j] = matrix[0][j]\n        max_side = max(max_side, dp[0][j])\n    \n    # Fill in the rest of the dp matrix\n    for i in range(1, rows):\n        for j in range(1, cols):\n            if matrix[i][j] == 1:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_side = max(max_side, dp[i][j])\n    \n    return max_side ** 2\n```", "code": "def find_largest_square(matrix):\n    if not matrix:\n        return 0\n    \n    rows, cols = len(matrix), len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    max_side = 0\n    \n    # Initialize first row and column of dp matrix\n    for i in range(rows):\n        dp[i][0] = matrix[i][0]\n        max_side = max(max_side, dp[i][0])\n    for j in range(cols):\n        dp[0][j] = matrix[0][j]\n        max_side = max(max_side, dp[0][j])\n    \n    # Fill in the rest of the dp matrix\n    for i in range(1, rows):\n        for j in range(1, cols):\n            if matrix[i][j] == 1:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_side = max(max_side, dp[i][j])\n    \n    return max_side ** 2", "entry_point": "find_largest_square", "testcase": ["assert find_largest_square([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == 1", "assert find_largest_square([[0, 0, 0], [0, 1, 1], [1, 1, 1]]) == 4", "assert find_largest_square([[1, 0, 1], [1, 1, 1], [0, 1, 1]]) == 4"]}
{"seq_id": 73595722309, "instruction": "Write a python function to find the largest triplet product in a given array.", "output": "Here is the code to solve this problem: \n```python\ndef largest_triplet_product(arr):\n    arr.sort()\n    n = len(arr)\n    return max(arr[0]*arr[1]*arr[n-1], arr[n-1]*arr[n-2]*arr[n-3])\n\nassert largest_triplet_product([1, 2, 3, 4, 5]) == 60\nassert largest_triplet_product([10, 3, 5, 6, 20]) == 1200\nassert largest_triplet_product([-10, -3, -5, -6, -20]) == -90\n```", "code": "def largest_triplet_product(arr):\n    arr.sort()\n    n = len(arr)\n    return max(arr[0]*arr[1]*arr[n-1], arr[n-1]*arr[n-2]*arr[n-3])\n\nassert largest_triplet_product([1, 2, 3, 4, 5]) == 60\nassert largest_triplet_product([10, 3, 5, 6, 20]) == 1200\nassert largest_triplet_product([-10, -3, -5, -6, -20]) == -90", "entry_point": "largest_triplet_product", "testcase": ["assert largest_triplet_product([1, 2, 3, 4, 5]) == 60", "assert largest_triplet_product([10, 3, 5, 6, 20]) == 1200", "assert largest_triplet_product([-10, -3, -5, -6, -20]) == -90"]}
{"seq_id": 17740620006, "instruction": "Write a function that finds the length of the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring_length(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length\n```", "code": "def longest_substring_length(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length", "entry_point": "longest_substring_length", "testcase": ["assert longest_substring_length(\"bbbbb\") == 1", "assert longest_substring_length(\"\") == 0", "assert longest_substring_length(\"pwwkew\") == 3", "assert longest_substring_length(\"abcabcbb\") == 3"]}
{"seq_id": 17677882645, "instruction": "Write a function to remove all occurrences of a given character from a string.", "output": "Here is the code to solve this problem: \n```python\ndef remove_char(s, char):\n    return s.replace(char, \"\")\n```", "code": "def remove_char(s, char):\n    return s.replace(char, \"\")", "entry_point": "remove_char", "testcase": ["assert remove_char(\"hello world\", \"l\")==\"heo word\"", "assert remove_char(\"abcdef\", \"x\")==\"abcdef\"", "assert remove_char(\"python programming\", \"m\")==\"python prograing\""]}
{"seq_id": 26470482635, "instruction": "Write a function to find the first non-repeating character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef find_first_non_repeating(s):\n    dict = {}\n    for letter in s:\n        dict[letter] = dict.setdefault(letter, 0) + 1\n    for index, letter in enumerate(s):\n        if dict[letter] == 1:\n            return letter\n    return -1\n```", "code": "def find_first_non_repeating(s):\n    dict = {}\n    for letter in s:\n        dict[letter] = dict.setdefault(letter, 0) + 1\n    for index, letter in enumerate(s):\n        if dict[letter] == 1:\n            return letter\n    return -1", "entry_point": "find_first_non_repeating", "testcase": ["assert find_first_non_repeating(\"loveleetcode\") == \"v\"", "assert find_first_non_repeating(\"leetcode\") == \"l\"", "assert find_first_non_repeating(\"aabb\") == -1"]}
{"seq_id": 41342431266, "instruction": "Write a function to check if a given string is a palindrome ignoring case, spaces, and punctuation.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef check_palindrome_ignore_case_and_punctuation(s: str) -> bool:\n    s = re.sub(r'[\\W_]+', '', s.lower()) # Remove punctuation and spaces, convert to lowercase\n    return s == s[::-1]\n```", "code": "import re\n\ndef check_palindrome_ignore_case_and_punctuation(s: str) -> bool:\n    s = re.sub(r'[\\W_]+', '', s.lower()) # Remove punctuation and spaces, convert to lowercase\n    return s == s[::-1]", "entry_point": "check_palindrome_ignore_case_and_punctuation", "testcase": ["assert check_palindrome_ignore_case_and_punctuation(\"No 'x' in Nixon\") == True", "assert check_palindrome_ignore_case_and_punctuation(\"A man, a plan, a canal: Panama\") == True", "assert check_palindrome_ignore_case_and_punctuation(\"Was it a car or a cat I saw?\") == True", "assert check_palindrome_ignore_case_and_punctuation(\"Hello, world!\") == False"]}
{"seq_id": 39060511366, "instruction": "Write a function to find the maximum value in a list of tuples based on their second element.", "output": "Here is the code to solve this problem: \n```python\ndef find_max(tuples_list):\n    return max(tuples_list, key=lambda x: x[1])[1]\n```", "code": "def find_max(tuples_list):\n    return max(tuples_list, key=lambda x: x[1])[1]", "entry_point": "find_max", "testcase": ["assert find_max([(10, 20), (20, 10), (30, 5)]) == 20", "assert find_max([(1, 5), (2, 3), (4, 8)]) == 8", "assert find_max([(1, 2), (3, 1), (5, 10)]) == 10"]}
{"seq_id": 684304837, "instruction": "Write a Python function to find the kth smallest element in an unsorted list using a min heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef findKthSmallestElement(arr, k):\n    heapq.heapify(arr)\n    for _ in range(k-1):\n        heapq.heappop(arr)\n    return heapq.heappop(arr)\n```", "code": "import heapq\n\ndef findKthSmallestElement(arr, k):\n    heapq.heapify(arr)\n    for _ in range(k-1):\n        heapq.heappop(arr)\n    return heapq.heappop(arr)", "entry_point": "findKthSmallestElement", "testcase": ["assert findKthSmallestElement([7, 10, 4, 3, 20, 15], 3) == 7", "import heapq", "assert findKthSmallestElement([7, 10, 4, 3, 20, 15], 4) == 10", "assert findKthSmallestElement([12, 3, 5, 7, 19], 2) == 5"]}
{"seq_id": 32032975829, "instruction": "Write a function to check if a number is a perfect cube or not.", "output": "Here is the code to solve this problem: \n```python\ndef isPerfectCube(num):\n    if num < 0:\n        num = -num\n    s = 0\n    h = num\n    while s <= h:\n        med = (s + h)//2\n        cube = med * med * med\n        if cube > num:\n            h = med - 1\n        elif cube < num:\n            s = med + 1\n        else:\n            return True\n    return False\n```", "code": "def isPerfectCube(num):\n    if num < 0:\n        num = -num\n    s = 0\n    h = num\n    while s <= h:\n        med = (s + h)//2\n        cube = med * med * med\n        if cube > num:\n            h = med - 1\n        elif cube < num:\n            s = med + 1\n        else:\n            return True\n    return False", "entry_point": "isPerfectCube", "testcase": ["assert isPerfectCube(8) == True", "assert isPerfectCube(1) == True", "assert isPerfectCube(28) == False", "assert isPerfectCube(-27) == True", "assert isPerfectCube(64) == True", "assert isPerfectCube(0) == True", "assert isPerfectCube(-28) == False", "assert isPerfectCube(27) == True", "assert isPerfectCube(125) == True"]}
{"seq_id": 34085949630, "instruction": "Write a python function to count the pairs with absolute difference as k.", "output": "Here is the code to solve this problem: \n```python\ndef count_pairs_diff_k(A,k):\n    count = 0\n    freq = {}\n    for i in A:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if i + k in freq:\n            count += freq[i] * freq[i + k]\n    return count\n```", "code": "def count_pairs_diff_k(A,k):\n    count = 0\n    freq = {}\n    for i in A:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if i + k in freq:\n            count += freq[i] * freq[i + k]\n    return count", "entry_point": "count_pairs_diff_k", "testcase": ["assert count_pairs_diff_k([3,2,1,5,4],2) == 3", "assert count_pairs_diff_k([1,2,2,1],1) == 4", "assert count_pairs_diff_k([1,3],3) == 0"]}
{"seq_id": 24584195188, "instruction": "Write a function to find the maximum number of elements in a list that are divisible by a given number k.", "output": "Here is the code to solve this problem: \n```python\ndef max_divisible(lst, k):\n    count = 0\n    for i in lst:\n        if i % k == 0:\n            count += 1\n    return count\n```", "code": "def max_divisible(lst, k):\n    count = 0\n    for i in lst:\n        if i % k == 0:\n            count += 1\n    return count", "entry_point": "max_divisible", "testcase": ["assert max_divisible([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 3", "assert max_divisible([1, 2, 3, 4, 5], 7) == 0", "assert max_divisible([10, 20, 30, 40, 50, 60, 70, 80, 90], 10) == 9"]}
{"seq_id": 25906057442, "instruction": "Write a python function to find the maximum length of a subarray with equal number of 0's and 1's.", "output": "Here is the code to solve this problem: \n```python\ndef max_length_subarray(nums):\n    ctr = 0\n    d = {0:0}\n    maxlen = 0\n    for i, val in enumerate(nums, 1):\n        if val==0:\n            ctr-=1\n        else:\n            ctr+=1\n\n        if ctr in d:\n            maxlen = max(maxlen, i-d[ctr])\n        else:\n            d[ctr] = i\n    return maxlen\n\n# Testing\nprint(max_length_subarray([0, 1])) # Expected output: 2\nprint(max_length_subarray([0, 1, 0])) # Expected output: 2\nprint(max_length_subarray([0, 1, 0, 1, 0, 1, 1])) # Expected output: 6\n```", "code": "def max_length_subarray(nums):\n    ctr = 0\n    d = {0:0}\n    maxlen = 0\n    for i, val in enumerate(nums, 1):\n        if val==0:\n            ctr-=1\n        else:\n            ctr+=1\n\n        if ctr in d:\n            maxlen = max(maxlen, i-d[ctr])\n        else:\n            d[ctr] = i\n    return maxlen\n\n# Testing\nprint(max_length_subarray([0, 1])) # Expected output: 2\nprint(max_length_subarray([0, 1, 0])) # Expected output: 2\nprint(max_length_subarray([0, 1, 0, 1, 0, 1, 1])) # Expected output: 6", "entry_point": "max_length_subarray", "testcase": ["assert max_length_subarray([0,1]) == 2", "assert max_length_subarray([0,1,0]) == 2", "assert max_length_subarray([0, 1, 0, 1, 0, 1, 1]) == 6"]}
{"seq_id": 14260831242, "instruction": "Write a python function to find the smallest missing number from a sorted list of non-negative integers, where the list may contain duplicates.", "output": "Here is the code to solve this problem: \n```python\ndef find_smallest_missing_number(arr):\n    i = 0\n    while i < len(arr):\n        correct_index = arr[i]\n        if arr[i] < len(arr) and arr[i] != arr[correct_index]:\n            arr[i], arr[correct_index] = arr[correct_index], arr[i]\n        else:\n            i += 1\n    for i in range(len(arr)):\n        if arr[i] != i:\n            return i\n    return len(arr)\n```", "code": "def find_smallest_missing_number(arr):\n    i = 0\n    while i < len(arr):\n        correct_index = arr[i]\n        if arr[i] < len(arr) and arr[i] != arr[correct_index]:\n            arr[i], arr[correct_index] = arr[correct_index], arr[i]\n        else:\n            i += 1\n    for i in range(len(arr)):\n        if arr[i] != i:\n            return i\n    return len(arr)", "entry_point": "find_smallest_missing_number", "testcase": ["assert find_smallest_missing_number([0,0,1,2,3,4,5,6,7,8,9]) == 10", "assert find_smallest_missing_number([0,1,1,2,2,3,4,5,6,7,8,9]) == 10", "assert find_smallest_missing_number([0,1,2,3,4,5,6,7,8,9]) == 10"]}
{"seq_id": 20121048178, "instruction": "Write a function that takes a list of integers as input and returns a new list with each element's square root. If an element is negative, it should be replaced with 0 in the output list.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef square_root_list(input_list):\n    output_list = []\n    for num in input_list:\n        if num >= 0:\n            output_list.append(math.sqrt(num))\n        else:\n            output_list.append(0)\n    return output_list\n```", "code": "import math\n\ndef square_root_list(input_list):\n    output_list = []\n    for num in input_list:\n        if num >= 0:\n            output_list.append(math.sqrt(num))\n        else:\n            output_list.append(0)\n    return output_list", "entry_point": "square_root_list", "testcase": ["assert square_root_list([4, 16, 9, -36, 25]) == [2, 4, 3, 0, 5]", "assert square_root_list([9, 25, -4, 36, 0]) == [3, 5, 0, 6, 0]", "assert square_root_list([-100, 100, 49, 81, -25]) == [0, 10, 7, 9, 0]"]}
{"seq_id": 39726817881, "instruction": "Write a python function to find the smallest palindrome larger than the given number.", "output": "Here is the code to solve this problem: \n```python\ndef next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n```", "code": "def next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]", "entry_point": "next_smallest_palindrome", "testcase": ["assert next_smallest_palindrome(99) == 101", "assert next_smallest_palindrome(111) == 121", "assert next_smallest_palindrome(2133) == 2222"]}
{"seq_id": 746698917, "instruction": "Write a python function that takes a list of strings as input. Each string represents a person's name and a list of test scores separated by commas. The function should return a dictionary where the keys are the names and the values are lists of integers representing the test scores.", "output": "Here is the code to solve this problem: \n```python\ndef score_parser(records):\n    answer = {}\n    for r in records:\n        name, scores = r.split(':')\n        answer[name] = list(map(int, scores.split(',')))\n    return answer\n```", "code": "def score_parser(records):\n    answer = {}\n    for r in records:\n        name, scores = r.split(':')\n        answer[name] = list(map(int, scores.split(',')))\n    return answer", "entry_point": "score_parser", "testcase": ["assert score_parser([\"jack:9,10,13,9,15\", \"jerry:7,7,14,10,17\"]) == {'jack': [9, 10, 13, 9, 15], 'jerry': [7, 7, 14, 10, 17]}", "assert score_parser([\"jean:0,0,11,20,0\", \"alex:21,2,7,11,4\"]) == {'jean': [0, 0, 11, 20, 0], 'alex': [21, 2, 7, 11, 4]}", "assert score_parser([\"kevin:8,4,5,0,0\", \"brown:3,5,16,3,18\"]) == {'kevin': [8, 4, 5, 0, 0], 'brown': [3, 5, 16, 3, 18]}"]}
{"seq_id": 74562552155, "instruction": "Write a function to find the number of unique prime factors of a given number. A prime factor is a factor that is a prime number. The function should return the count of unique prime factors.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique_prime_factors(num):\n    if num < 2:\n        return 0\n    factors = set()\n    # Check for 2 as a prime factor\n    if num % 2 == 0:\n        factors.add(2)\n        while num % 2 == 0:\n            num //= 2\n    # Check for odd prime factors\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            factors.add(i)\n            while num % i == 0:\n                num //= i\n    # If num is a prime number greater than 2\n    if num > 2:\n        factors.add(num)\n    return len(factors)\n\nassert count_unique_prime_factors(100) == 2\nassert count_unique_prime_factors(45) == 2\nassert count_unique_prime_factors(13) == 1\n```", "code": "def count_unique_prime_factors(num):\n    if num < 2:\n        return 0\n    factors = set()\n    # Check for 2 as a prime factor\n    if num % 2 == 0:\n        factors.add(2)\n        while num % 2 == 0:\n            num //= 2\n    # Check for odd prime factors\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            factors.add(i)\n            while num % i == 0:\n                num //= i\n    # If num is a prime number greater than 2\n    if num > 2:\n        factors.add(num)\n    return len(factors)\n\nassert count_unique_prime_factors(100) == 2\nassert count_unique_prime_factors(45) == 2\nassert count_unique_prime_factors(13) == 1", "entry_point": "count_unique_prime_factors", "testcase": ["assert count_unique_prime_factors(45) == 2", "assert count_unique_prime_factors(100) == 2", "assert count_unique_prime_factors(13) == 1"]}
{"seq_id": 70271678266, "instruction": "Write a function to find the length of the longest consecutive subsequence in an array.", "output": "Here is the code to solve this problem: \n```python\ndef findLongestConsecutiveSubsequence(nums):\n    if not nums:\n        return 0\n\n    nums = set(nums)\n    longest_streak = 0\n\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in nums:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak\n```", "code": "def findLongestConsecutiveSubsequence(nums):\n    if not nums:\n        return 0\n\n    nums = set(nums)\n    longest_streak = 0\n\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in nums:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak", "entry_point": "findLongestConsecutiveSubsequence", "testcase": ["assert findLongestConsecutiveSubsequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9", "assert findLongestConsecutiveSubsequence([10, 5, 12, 3]) == 1", "assert findLongestConsecutiveSubsequence([100, 4, 200, 1, 3, 2]) == 4"]}
{"seq_id": 73669316842, "instruction": "Write a python function that takes a list of strings as input. Each string represents a non-negative integer. The function should sort these strings such that the concatenated result in descending order forms the largest possible number.", "output": "Here is the code to solve this problem: \n```python\ndef largestNumber(nums):\n    from functools import cmp_to_key\n\n    def compare(x, y):\n        return int(y+x) - int(x+y)\n\n    nums = [str(num) for num in nums]\n    nums.sort(key=cmp_to_key(compare))\n    return str(int(''.join(nums)))\n```", "code": "def largestNumber(nums):\n    from functools import cmp_to_key\n\n    def compare(x, y):\n        return int(y+x) - int(x+y)\n\n    nums = [str(num) for num in nums]\n    nums.sort(key=cmp_to_key(compare))\n    return str(int(''.join(nums)))", "entry_point": "largestNumber", "testcase": ["assert largestNumber([\"3\", \"30\", \"34\", \"5\", \"9\"]) == \"9534330\"", "assert largestNumber([\"10\", \"68\", \"97\", \"9\", \"21\", \"12\"]) == \"99768211210\"", "assert largestNumber([\"0\", \"0\", \"1\"]) == \"100\""]}
{"seq_id": 10133336341, "instruction": "Write a python function to find the smallest repeating pattern in a string, if any.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_repeating_pattern(s):\n    for i in range(1, len(s)//2 + 1):\n        if len(s) % i == 0:\n            if s[:i] * (len(s)//i) == s:\n                return s[:i]\n    return s\n```", "code": "def smallest_repeating_pattern(s):\n    for i in range(1, len(s)//2 + 1):\n        if len(s) % i == 0:\n            if s[:i] * (len(s)//i) == s:\n                return s[:i]\n    return s", "entry_point": "smallest_repeating_pattern", "testcase": ["assert smallest_repeating_pattern('abababab') == 'ab'", "assert smallest_repeating_pattern('abcabcabc') == 'abc'", "assert smallest_repeating_pattern('a') == 'a'", "assert smallest_repeating_pattern('abcabcab') == 'abcabcab'", "assert smallest_repeating_pattern('abcdabcd') == 'abcd'"]}
{"seq_id": 25827410276, "instruction": "Write a function to find the kth largest element in a given list. You can assume that k is always valid, that is, 1 \u2264 k \u2264 length of the list.", "output": "Here is the code to solve this problem: \n```python\ndef kth_largest(nums, k):\n    nums.sort()\n    return nums[-k]\n```", "code": "def kth_largest(nums, k):\n    nums.sort()\n    return nums[-k]", "entry_point": "kth_largest", "testcase": ["assert kth_largest([1,2,3,4,5], 3) == 3", "assert kth_largest([3,2,1,5,6,4], 2) == 5", "assert kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4"]}
{"seq_id": 43297807760, "instruction": "Write a python function to generate all possible substrings from a given string.", "output": "Here is the code to solve this problem: \n```python\ndef substrings(s):\n    result = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            result.append(s[i:j])\n    return result\n```", "code": "def substrings(s):\n    result = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            result.append(s[i:j])\n    return result", "entry_point": "substrings", "testcase": ["assert substrings(\"\") == []", "assert substrings(\"abc\") == [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]", "assert substrings(\"xyz\") == [\"x\", \"xy\", \"xyz\", \"y\", \"yz\", \"z\"]"]}
{"seq_id": 37477134482, "instruction": "Write a function to extract the numbers from a given string and return them as a list.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef extract_numbers(input_string):\n    return [int(i) for i in re.findall(r'\\d', input_string)]\n```", "code": "import re\n\ndef extract_numbers(input_string):\n    return [int(i) for i in re.findall(r'\\d', input_string)]", "entry_point": "extract_numbers", "testcase": ["assert extract_numbers(\"abc123xyz\")==[1, 2, 3]", "assert extract_numbers(\"hello5world4\")==[5, 4]", "assert extract_numbers(\"98765test\") == [9, 8, 7, 6, 5]"]}
{"seq_id": 17411614994, "instruction": "Write a python function to find the maximum product of three numbers in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_three(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])\n```", "code": "def max_product_three(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])", "entry_point": "max_product_three", "testcase": ["assert max_product_three([1, 2, 3])==6", "assert max_product_three([-10, -10, 5, 2])==500", "assert max_product_three([1, 2, 3, 4, 5])==60"]}
{"seq_id": 26624127079, "instruction": "Write a function `find_longest_unique_substring` that takes a string as an input and returns the length of the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_unique_substring(s):\n    if not s:\n        return 0\n    start = 0\n    max_length = 0\n    used_chars = {}\n    for i in range(len(s)):\n        if s[i] in used_chars and start <= used_chars[s[i]]:\n            start = used_chars[s[i]] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n        used_chars[s[i]] = i\n    return max_length\n```", "code": "def find_longest_unique_substring(s):\n    if not s:\n        return 0\n    start = 0\n    max_length = 0\n    used_chars = {}\n    for i in range(len(s)):\n        if s[i] in used_chars and start <= used_chars[s[i]]:\n            start = used_chars[s[i]] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n        used_chars[s[i]] = i\n    return max_length", "entry_point": "find_longest_unique_substring", "testcase": ["assert find_longest_unique_substring(\"abcabcbb\") == 3", "assert find_longest_unique_substring(\"bbbbb\") == 1", "assert find_longest_unique_substring(\"au\") == 2", "assert find_longest_unique_substring(\" \") == 1", "assert find_longest_unique_substring(\"\") == 0", "assert find_longest_unique_substring(\"pwwkew\") == 3", "assert find_longest_unique_substring(\"dvdf\") == 3"]}
{"seq_id": 23792150170, "instruction": "Write a python function to find the sum of the largest contiguous subarray within a one-dimensional array of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_contiguous_sum(arr):\n    max_current = max_global = arr[0]\n    for i in range(1, len(arr)):\n        max_current = max(arr[i], max_current + arr[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global\n```", "code": "def largest_contiguous_sum(arr):\n    max_current = max_global = arr[0]\n    for i in range(1, len(arr)):\n        max_current = max(arr[i], max_current + arr[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global", "entry_point": "largest_contiguous_sum", "testcase": ["assert largest_contiguous_sum([1]) == 1", "assert largest_contiguous_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6", "assert largest_contiguous_sum([-1, -2, -3, -4]) == -1"]}
{"seq_id": 41766119202, "instruction": "Write a function that takes a list of integers as input and returns a list of unique elements from the input list, sorted in ascending order.", "output": "Here is the code to solve this problem: \n```python\ndef unique_sorted(lst):\n    return sorted(set(lst))\n```", "code": "def unique_sorted(lst):\n    return sorted(set(lst))", "entry_point": "unique_sorted", "testcase": ["assert unique_sorted([-1, -2, -3, -4, -4, -3, -2, -1]) == [-4, -3, -2, -1]", "assert unique_sorted([10, 20, 20, 10, 30]) == [10, 20, 30]", "assert unique_sorted([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]"]}
{"seq_id": 12714704895, "instruction": "Write a python function to find the last position of an element in a sorted array.", "output": "Here is the code to solve this problem: \n```python\ndef find_last_position(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```", "code": "def find_last_position(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "entry_point": "find_last_position", "testcase": ["assert find_last_position([1,2,2,2,3,4,5], 2) == 3", "assert find_last_position([1,2,3,4,5], 6) == -1", "assert find_last_position([1,1,1,1,1,1,1], 1) == 6"]}
{"seq_id": 74952367359, "instruction": "Write a python function to find the maximum number of nested lists within a given list.", "output": "Here is the code to solve this problem: \n```python\ndef max_nested_lists(lst):\n    depth = 0\n    max_depth = 0\n    for item in lst:\n        if isinstance(item, list):\n            max_depth, depth = max_nested_lists_helper(item, depth+1, max_depth)\n    return max_depth\n\ndef max_nested_lists_helper(lst, depth, max_depth):\n    for item in lst:\n        if isinstance(item, list):\n            max_depth, depth = max_nested_lists_helper(item, depth+1, max_depth)\n        else:\n            max_depth = max(max_depth, depth)\n    return max_depth, depth-1\n```", "code": "def max_nested_lists(lst):\n    depth = 0\n    max_depth = 0\n    for item in lst:\n        if isinstance(item, list):\n            max_depth, depth = max_nested_lists_helper(item, depth+1, max_depth)\n    return max_depth\n\ndef max_nested_lists_helper(lst, depth, max_depth):\n    for item in lst:\n        if isinstance(item, list):\n            max_depth, depth = max_nested_lists_helper(item, depth+1, max_depth)\n        else:\n            max_depth = max(max_depth, depth)\n    return max_depth, depth-1", "entry_point": "max_nested_lists", "testcase": ["assert max_nested_lists([1,2,3]) == 0", "assert max_nested_lists([1,[2,[3,[4]]]]) == 3", "assert max_nested_lists([1,2,[3,[4,5],6]]) == 2"]}
{"seq_id": 16027100961, "instruction": "Write a python function to count the number of valid permutations of a given array where the array elements follow a specific pattern defined by another array. The pattern array contains 0s and 1s where 0s mean the next element should be less than the current, and 1s mean the next element should be greater than the current.", "output": "Here is the code to solve this problem: \n```python\ndef count_valid_permutations(A, N):\n    Arr = [i+1 for i in range(N)]\n    count = [0]\n    \n    def perm(i, Arr, A, count):\n        if i==len(Arr)-1:\n            if checkOK(A, Arr):\n                count[0] += 1\n        else:\n            for j in range(i, len(Arr)):\n                Arr[i], Arr[j] = Arr[j], Arr[i]\n                perm(i+1, Arr, A, count)\n                Arr[i], Arr[j] = Arr[j], Arr[i]\n    \n    def checkOK(A, p):\n        for i in range(N-1):\n            if A[i]==0 and p[i]>=p[i+1]:\n                return False\n            if A[i]==1 and p[i]<=p[i+1]:\n                return False\n        return True\n\n    perm(0, Arr, A, count)\n    return count[0]\n```", "code": "def count_valid_permutations(A, N):\n    Arr = [i+1 for i in range(N)]\n    count = [0]\n    \n    def perm(i, Arr, A, count):\n        if i==len(Arr)-1:\n            if checkOK(A, Arr):\n                count[0] += 1\n        else:\n            for j in range(i, len(Arr)):\n                Arr[i], Arr[j] = Arr[j], Arr[i]\n                perm(i+1, Arr, A, count)\n                Arr[i], Arr[j] = Arr[j], Arr[i]\n    \n    def checkOK(A, p):\n        for i in range(N-1):\n            if A[i]==0 and p[i]>=p[i+1]:\n                return False\n            if A[i]==1 and p[i]<=p[i+1]:\n                return False\n        return True\n\n    perm(0, Arr, A, count)\n    return count[0]", "entry_point": "count_valid_permutations", "testcase": ["assert count_valid_permutations([1, 0], 3) == 2", "assert count_valid_permutations([1, 1, 0], 4) == 3", "assert count_valid_permutations([0], 2) == 1"]}
{"seq_id": 36236039971, "instruction": "Write a function to find the length of the longest word in a list of words.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_word_length(word_list):\n    max_length = 0\n    for word in word_list:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n```", "code": "def find_longest_word_length(word_list):\n    max_length = 0\n    for word in word_list:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length", "entry_point": "find_longest_word_length", "testcase": ["assert find_longest_word_length([\"hello\", \"world\", \"python\"]) == 6", "assert find_longest_word_length([\"a\", \"ab\", \"abc\"]) == 3", "assert find_longest_word_length([\"short\", \"longer\", \"longest\"]) == 7"]}
{"seq_id": 9251341325, "instruction": "Write a python function to find the number of ways to reach the last cell of a given grid from the first cell using only right and down moves.", "output": "Here is the code to solve this problem: \n```python\ndef count_Paths(grid):\n    m, n = grid\n    dp = [[0 for x in range(n+1)] for y in range(m+1)]\n    dp[1][1] = 1\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if i == 1 and j == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[m][n]\n```", "code": "def count_Paths(grid):\n    m, n = grid\n    dp = [[0 for x in range(n+1)] for y in range(m+1)]\n    dp[1][1] = 1\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if i == 1 and j == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[m][n]", "entry_point": "count_Paths", "testcase": ["assert count_Paths((3, 2)) == 3", "assert count_Paths((3, 3)) == 6", "assert count_Paths((2, 2)) == 2"]}
{"seq_id": 21150924744, "instruction": "Write a function to check if a binary tree is balanced. A binary tree is balanced if the depth of the two subtrees of every node never differ by more than one.", "output": "Here is the code to solve this problem: \n```python\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_balanced(root):\n    def check(root):\n        if root is None:\n            return 0\n        left = check(root.left)\n        right = check(root.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return check(root) != -1\n```", "code": "class BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_balanced(root):\n    def check(root):\n        if root is None:\n            return 0\n        left = check(root.left)\n        right = check(root.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return check(root) != -1", "entry_point": "is_balanced", "testcase": ["assert is_balanced(BinaryTree(1, BinaryTree(2, BinaryTree(4, BinaryTree(6))), BinaryTree(3))) == False", "assert is_balanced(BinaryTree(1, BinaryTree(2, BinaryTree(4)), BinaryTree(3))) == True", "assert is_balanced(BinaryTree(1, BinaryTree(2), BinaryTree(3))) == True", "assert is_balanced(BinaryTree(1)) == True", "assert is_balanced(None) == True"]}
{"seq_id": 7583892630, "instruction": "Write a function to implement the Dijkstra's shortest path algorithm for a weighted graph. The graph is represented as an adjacency list, and the function should return the shortest path distances from a source node to all other nodes in the graph.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef dijkstra_shortest_path(graph, source):\n    distances = {node: float('inf') for node in graph}\n    distances[source] = 0\n    priority_queue = [(0, source)]\n    heapq.heapify(priority_queue)\n\n    while priority_queue:\n        current_distance, current_node = heapq.heappop(priority_queue)\n\n        if current_distance > distances[current_node]:\n            continue\n\n        for neighbor, weight in graph[current_node].items():\n            distance = current_distance + weight\n\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(priority_queue, (distance, neighbor))\n\n    return distances\n```", "code": "import heapq\n\ndef dijkstra_shortest_path(graph, source):\n    distances = {node: float('inf') for node in graph}\n    distances[source] = 0\n    priority_queue = [(0, source)]\n    heapq.heapify(priority_queue)\n\n    while priority_queue:\n        current_distance, current_node = heapq.heappop(priority_queue)\n\n        if current_distance > distances[current_node]:\n            continue\n\n        for neighbor, weight in graph[current_node].items():\n            distance = current_distance + weight\n\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(priority_queue, (distance, neighbor))\n\n    return distances", "entry_point": "dijkstra_shortest_path", "testcase": ["assert dijkstra_shortest_path({0: {1: 1, 2: 4}, 1: {2: 2, 3: 5}, 2: {3: 1}, 3: {}}, 0)==({0: 0, 1: 1, 2: 3, 3: 4})", "assert dijkstra_shortest_path({0: {1: 7, 2: 9}, 1: {2: 10, 3: 15}, 2: {3: 11}, 3: {}}, 0)==({0: 0, 1: 7, 2: 9, 3: 20})", "assert dijkstra_shortest_path({0: {1: 2, 2: 1}, 1: {3: 3}, 2: {3: 1}, 3: {}}, 0)==({0: 0, 1: 2, 2: 1, 3: 2})"]}
{"seq_id": 30563965702, "instruction": "Write a python function to find the smallest positive number that cannot be represented as the sum of any non-empty subset of a given list of positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef smallestMissingPositive(arr):\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    smallest_missing = 1\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n        elif num > smallest_missing:\n            break\n    return smallest_missing\n```", "code": "def smallestMissingPositive(arr):\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    smallest_missing = 1\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n        elif num > smallest_missing:\n            break\n    return smallest_missing", "entry_point": "smallestMissingPositive", "testcase": ["assert smallestMissingPositive([1, 2, 3]) == 4", "assert smallestMissingPositive([3, 4, -1, 1]) == 2", "assert smallestMissingPositive([1, 1]) == 2", "assert smallestMissingPositive([1, 2, 0]) == 3"]}
{"seq_id": 41145207798, "instruction": "Write a python function that takes a string as an argument and returns a dictionary with each unique word in the string as a key and the number of its occurrences as the value.", "output": "Here is the code to solve this problem: \n```python\ndef word_count(text):\n    words = text.split()\n    word_count_dict = {}\n    for word in words:\n        if word in word_count_dict:\n            word_count_dict[word] += 1\n        else:\n            word_count_dict[word] = 1\n    return word_count_dict\n```", "code": "def word_count(text):\n    words = text.split()\n    word_count_dict = {}\n    for word in words:\n        if word in word_count_dict:\n            word_count_dict[word] += 1\n        else:\n            word_count_dict[word] = 1\n    return word_count_dict", "entry_point": "word_count", "testcase": ["assert word_count(\"Hello World Hello\") == {'Hello': 2, 'World': 1}", "assert word_count(\"Every day is a new day\") == {'Every': 1, 'day': 2, 'is': 1, 'a': 1, 'new': 1}", "assert word_count(\"One fish two fish red fish blue fish\") == {'One': 1, 'fish': 4, 'two': 1, 'red': 1, 'blue': 1}"]}
{"seq_id": 5402426780, "instruction": "Write a function to find the kth largest element in an unsorted list using a min heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef kth_largest(nums, k):\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap[0]\n```", "code": "import heapq\n\ndef kth_largest(nums, k):\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap[0]", "entry_point": "kth_largest", "testcase": ["assert kth_largest([3, 2, 1, 5, 6, 4], 2) == 5", "assert kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4", "assert kth_largest([6, 5, 4, 3, 2, 1], 3) == 4"]}
{"seq_id": 9364402629, "instruction": "Write a python function to find the number of subarrays with a given sum in an array.", "output": "Here is the code to solve this problem: \n```python\ndef count_subarrays_with_sum(nums, target):\n    count = 0\n    sum_dict = {0: 1}\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum - target in sum_dict:\n            count += sum_dict[current_sum - target]\n        sum_dict[current_sum] = sum_dict.get(current_sum, 0) + 1\n    return count\n```", "code": "def count_subarrays_with_sum(nums, target):\n    count = 0\n    sum_dict = {0: 1}\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum - target in sum_dict:\n            count += sum_dict[current_sum - target]\n        sum_dict[current_sum] = sum_dict.get(current_sum, 0) + 1\n    return count", "entry_point": "count_subarrays_with_sum", "testcase": ["assert count_subarrays_with_sum([1,1,1], 2) == 2", "assert count_subarrays_with_sum([10,2,-2,-20,10], -10) == 3", "assert count_subarrays_with_sum([1,2,3], 3) == 2"]}
{"seq_id": 11857534295, "instruction": "Write a function to check if a given sequence of numbers can be a valid post-order traversal sequence of a binary search tree (BST).\n\nThe function should take a list of integers as input and return True if the sequence can be a valid post-order traversal sequence of a BST, and False otherwise.\n\nA valid post-order traversal sequence of a BST is a sequence that can be obtained by traversing the tree in post-order (left subtree, right subtree, root) and storing the values of the nodes in the traversal order.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_post_order(sequence):\n    if not sequence:\n        return True\n\n    root = sequence[-1]\n    pivot = 0\n    for i in range(len(sequence) - 1):\n        if sequence[i] < root:\n            pivot += 1\n        else:\n            break\n    for i in range(pivot, len(sequence) - 1):\n        if sequence[i] <= root:\n            return False\n\n    if pivot > 0 and not is_valid_post_order(sequence[:pivot]):\n        return False\n    if pivot < len(sequence) - 1 and not is_valid_post_order(sequence[pivot:-1]):\n        return False\n\n    return True\n```", "code": "def is_valid_post_order(sequence):\n    if not sequence:\n        return True\n\n    root = sequence[-1]\n    pivot = 0\n    for i in range(len(sequence) - 1):\n        if sequence[i] < root:\n            pivot += 1\n        else:\n            break\n    for i in range(pivot, len(sequence) - 1):\n        if sequence[i] <= root:\n            return False\n\n    if pivot > 0 and not is_valid_post_order(sequence[:pivot]):\n        return False\n    if pivot < len(sequence) - 1 and not is_valid_post_order(sequence[pivot:-1]):\n        return False\n\n    return True", "entry_point": "is_valid_post_order", "testcase": ["assert is_valid_post_order([5, 7, 6, 9, 11, 10, 8]) == True", "assert is_valid_post_order([5, 8, 6, 9, 11, 10, 7]) == False", "assert is_valid_post_order([100]) == True", "assert is_valid_post_order([]) == True"]}
{"seq_id": 17271706636, "instruction": "Write a function to generate the n-th Fibonacci number using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n```", "code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "entry_point": "fib", "testcase": ["assert fib(15) == 610", "assert fib(1) == 1", "assert fib(0) == 0", "assert fib(10) == 55"]}
{"seq_id": 72119789565, "instruction": "Write a function to find the maximum xor value of two numbers in an array.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node.children:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n            \n    def getMax(self, num):\n        node = self.root\n        max_xor = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if (1 - bit) in node.children:\n                max_xor += (1 << i)\n                node = node.children[1 - bit]\n            else:\n                node = node.children[bit]\n        return max_xor\n    \ndef findMaximumXOR(nums):\n    trie = Trie()\n    max_xor = 0\n    for num in nums:\n        trie.insert(num)\n        max_xor = max(max_xor, trie.getMax(num))\n    return max_xor\n```", "code": "from collections import deque\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node.children:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n            \n    def getMax(self, num):\n        node = self.root\n        max_xor = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if (1 - bit) in node.children:\n                max_xor += (1 << i)\n                node = node.children[1 - bit]\n            else:\n                node = node.children[bit]\n        return max_xor\n    \ndef findMaximumXOR(nums):\n    trie = Trie()\n    max_xor = 0\n    for num in nums:\n        trie.insert(num)\n        max_xor = max(max_xor, trie.getMax(num))\n    return max_xor", "entry_point": "findMaximumXOR", "testcase": ["assert findMaximumXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127", "assert findMaximumXOR([3, 10, 5, 25, 2, 8]) == 28", "assert findMaximumXOR([1,2,3,9,8]) == 11"]}
{"seq_id": 26126492226, "instruction": "Write a function to find if there is a path in the given undirected graph from the source vertex to the destination vertex.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef valid_path(n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n    origin = [[] for _ in range(n)]\n    for e0, e1 in edges:\n        origin[e0].append(e1)\n        origin[e1].append(e0)\n    visit = []\n\n    def dfs(des):\n        if des == source:\n            return True\n        if des not in visit:\n            visit.append(des)\n            for x in origin[des]:\n                if dfs(x):\n                    return True\n        return False\n\n    return dfs(destination)\n\nif __name__ == '__main__':\n    print(valid_path(3, [[0,1],[1,2],[2,0]], 0, 2))\n    print(valid_path(6, [[0,1],[0,2],[3,4],[3,5]], 0, 5))\n    print(valid_path(3, [[0,1],[1,2],[2,0]], 0, 1))\n```", "code": "from typing import List\n\ndef valid_path(n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n    origin = [[] for _ in range(n)]\n    for e0, e1 in edges:\n        origin[e0].append(e1)\n        origin[e1].append(e0)\n    visit = []\n\n    def dfs(des):\n        if des == source:\n            return True\n        if des not in visit:\n            visit.append(des)\n            for x in origin[des]:\n                if dfs(x):\n                    return True\n        return False\n\n    return dfs(destination)\n\nif __name__ == '__main__':\n    print(valid_path(3, [[0,1],[1,2],[2,0]], 0, 2))\n    print(valid_path(6, [[0,1],[0,2],[3,4],[3,5]], 0, 5))\n    print(valid_path(3, [[0,1],[1,2],[2,0]], 0, 1))", "entry_point": "valid_path", "testcase": ["assert valid_path(3, [[0,1],[1,2],[2,0]], 0, 2) == True", "assert valid_path(3, [[0,1],[1,2],[2,0]], 0, 1) == True", "assert valid_path(6, [[0,1],[0,2],[3,4],[3,5]], 0, 5) == False"]}
{"seq_id": 73598756071, "instruction": "Write a function to convert a given string to CamelCase.", "output": "Here is the code to solve this problem: \n```python\ndef to_camel_case(s):\n  return ''.join(x.capitalize() or '_' for x in s.split())\n\n# let's test our function\nassert to_camel_case(\"hello world\") == \"HelloWorld\"\nassert to_camel_case(\"python programming\") == \"PythonProgramming\"\nassert to_camel_case(\"this is a test\") == \"ThisIsATest\"\n```", "code": "def to_camel_case(s):\n  return ''.join(x.capitalize() or '_' for x in s.split())\n\n# let's test our function\nassert to_camel_case(\"hello world\") == \"HelloWorld\"\nassert to_camel_case(\"python programming\") == \"PythonProgramming\"\nassert to_camel_case(\"this is a test\") == \"ThisIsATest\"", "entry_point": "to_camel_case", "testcase": ["assert to_camel_case(\"hello world\") == \"HelloWorld\"", "assert to_camel_case(\"this is a test\") == \"ThisIsATest\"", "assert to_camel_case(\"python programming\") == \"PythonProgramming\""]}
{"seq_id": 33345415670, "instruction": "Write a python function to find the length of the longest subsequence of consecutive characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longestConsecutiveSubsequence(s):\n    if len(s) == 0:\n        return 0\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_len += 1\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 1\n    return max(max_len, current_len)\n```", "code": "def longestConsecutiveSubsequence(s):\n    if len(s) == 0:\n        return 0\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_len += 1\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 1\n    return max(max_len, current_len)", "entry_point": "longestConsecutiveSubsequence", "testcase": ["assert longestConsecutiveSubsequence(\"aaabbbccc\") == 3", "assert longestConsecutiveSubsequence(\"aabbcc\") == 2", "assert longestConsecutiveSubsequence(\"aabbbcc\") == 3"]}
{"seq_id": 27270082885, "instruction": "Create a Python function that takes a list of strings and a string of characters. The function should return the total length of all strings in the list that can be formed using the characters provided. Each character in the characters string can only be used once per word.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef count_formable_strings(words, chars):\n    chars_count = Counter(chars)\n    total_length = 0\n    for word in words:\n        word_count = Counter(word)\n        if all(word_count[char] <= chars_count[char] for char in word_count):\n            total_length += len(word)\n    return total_length\n```", "code": "from collections import Counter\n\ndef count_formable_strings(words, chars):\n    chars_count = Counter(chars)\n    total_length = 0\n    for word in words:\n        word_count = Counter(word)\n        if all(word_count[char] <= chars_count[char] for char in word_count):\n            total_length += len(word)\n    return total_length", "entry_point": "count_formable_strings", "testcase": ["assert count_formable_strings([\"cat\", \"bt\", \"hat\", \"tree\"], \"atach\") == 6", "assert count_formable_strings([\"hello\", \"world\", \"leetcode\"], \"welldonehoneyr\") == 10", "assert count_formable_strings([\"apple\", \"banana\", \"orange\"], \"a\") == 0"]}
{"seq_id": 74794224347, "instruction": "Write a function to calculate the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef calculate_diameter(root):\n    def height(node):\n        if node is None:\n            return 0\n        return 1 + max(height(node.left), height(node.right))\n\n    def diameter_util(node):\n        if node is None:\n            return 0\n        l_height = height(node.left)\n        r_height = height(node.right)\n        l_diameter = diameter_util(node.left)\n        r_diameter = diameter_util(node.right)\n        return max(l_height + r_height + 1, max(l_diameter, r_diameter))\n\n    return diameter_util(root) - 1\n\n# Test cases\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\n\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\nroot1.left.left = TreeNode(4)\nroot1.left.right = TreeNode(5)\nroot1.right.left = TreeNode(6)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\nroot2.left.left = TreeNode(4)\nroot2.left.right = TreeNode(5)\nroot2.right.right = TreeNode(6)\nroot2.right.right.right = TreeNode(7)\n\nassert calculate_diameter(root) == 3\nassert calculate_diameter(root1) == 4\nassert calculate_diameter(root2) == 5\n```", "code": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef calculate_diameter(root):\n    def height(node):\n        if node is None:\n            return 0\n        return 1 + max(height(node.left), height(node.right))\n\n    def diameter_util(node):\n        if node is None:\n            return 0\n        l_height = height(node.left)\n        r_height = height(node.right)\n        l_diameter = diameter_util(node.left)\n        r_diameter = diameter_util(node.right)\n        return max(l_height + r_height + 1, max(l_diameter, r_diameter))\n\n    return diameter_util(root) - 1\n\n# Test cases\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\n\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\nroot1.left.left = TreeNode(4)\nroot1.left.right = TreeNode(5)\nroot1.right.left = TreeNode(6)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\nroot2.left.left = TreeNode(4)\nroot2.left.right = TreeNode(5)\nroot2.right.right = TreeNode(6)\nroot2.right.right.right = TreeNode(7)\n\nassert calculate_diameter(root) == 3\nassert calculate_diameter(root1) == 4\nassert calculate_diameter(root2) == 5", "entry_point": "calculate_diameter", "testcase": ["assert calculate_diameter(root) == 3", "assert calculate_diameter(root1) == 4", "assert calculate_diameter(root2) == 5"]}
{"seq_id": 7722787390, "instruction": "Write a python function to find the maximum concatenated string length from a given list of strings. The function should return the length of the longest string that can be formed by concatenating the strings in the list under the following conditions:\n1. Each string in the list can be used at most once.\n2. No string in the list can be a substring of the concatenated string.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef max_concatenated_string_length(arr: List[str]) -> int:\n    def backtrack(index, current):\n        if index == len(arr):\n            return len(current)\n        # Skip current string\n        max_len = backtrack(index + 1, current)\n        # Include current string if it doesn't contain any duplicate characters and is not a substring of the current string\n        if not any(char in current for char in arr[index]) and len(set(arr[index])) == len(arr[index]):\n            max_len = max(max_len, backtrack(index + 1, current + arr[index]))\n        return max_len\n\n    return backtrack(0, \"\")\n\n# Test cases\nassert max_concatenated_string_length([\"un\", \"iq\", \"ue\"]) == 4\nassert max_concatenated_string_length([\"cha\", \"r\", \"act\", \"ers\"]) == 6\nassert max_concatenated_string_length([\"abcdefghijklmnopqrstuvwxyz\"]) == 26\n```", "code": "from typing import List\n\ndef max_concatenated_string_length(arr: List[str]) -> int:\n    def backtrack(index, current):\n        if index == len(arr):\n            return len(current)\n        # Skip current string\n        max_len = backtrack(index + 1, current)\n        # Include current string if it doesn't contain any duplicate characters and is not a substring of the current string\n        if not any(char in current for char in arr[index]) and len(set(arr[index])) == len(arr[index]):\n            max_len = max(max_len, backtrack(index + 1, current + arr[index]))\n        return max_len\n\n    return backtrack(0, \"\")\n\n# Test cases\nassert max_concatenated_string_length([\"un\", \"iq\", \"ue\"]) == 4\nassert max_concatenated_string_length([\"cha\", \"r\", \"act\", \"ers\"]) == 6\nassert max_concatenated_string_length([\"abcdefghijklmnopqrstuvwxyz\"]) == 26", "entry_point": "max_concatenated_string_length", "testcase": ["assert max_concatenated_string_length([\"cha\", \"r\", \"act\", \"ers\"]) == 6", "assert max_concatenated_string_length([\"un\", \"iq\", \"ue\"]) == 4", "assert max_concatenated_string_length([\"abcdefghijklmnopqrstuvwxyz\"]) == 26"]}
{"seq_id": 5163996790, "instruction": "Write a python function to merge two sorted lists into a single sorted list.", "output": "Here is the code to solve this problem: \n```python\ndef mergeSortedLists(l1, l2):\n    i = j = 0\n    result = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            result.append(l1[i])\n            i += 1\n        else:\n            result.append(l2[j])\n            j += 1\n    while i < len(l1):\n        result.append(l1[i])\n        i += 1\n    while j < len(l2):\n        result.append(l2[j])\n        j += 1\n    return result\n```", "code": "def mergeSortedLists(l1, l2):\n    i = j = 0\n    result = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            result.append(l1[i])\n            i += 1\n        else:\n            result.append(l2[j])\n            j += 1\n    while i < len(l1):\n        result.append(l1[i])\n        i += 1\n    while j < len(l2):\n        result.append(l2[j])\n        j += 1\n    return result", "entry_point": "mergeSortedLists", "testcase": ["assert mergeSortedLists([1, 3, 5], [2, 6, 7]) == [1, 2, 3, 5, 6, 7]", "assert mergeSortedLists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert mergeSortedLists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]"]}
{"seq_id": 14296983059, "instruction": "Write a python function to check if the given string is a valid URL or not.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef check_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n```", "code": "import re\n\ndef check_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None", "entry_point": "check_URL", "testcase": ["assert check_URL(\"www.google.com\") == False", "assert check_URL(\"https://www.google.com\") == True", "assert check_URL(\"http://www.example.com\") == True", "assert check_URL(\"https:/www.google.com\") == False"]}
{"seq_id": 10785703127, "instruction": "Write a function to find the second maximum element in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef second_max(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n```", "code": "def second_max(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]", "entry_point": "second_max", "testcase": ["assert second_max([10, 20, 4, 45, 99]) == 45", "assert second_max([45, 1, 34, 89, 23, 6]) == 45", "assert second_max([1, 2, 3, 4]) == 3"]}
{"seq_id": 73422123729, "instruction": "Write a function that finds the minimum steps needed to convert string str1 to string str2 using insert, remove, or replace operations.", "output": "Here is the code to solve this problem: \n```python\ndef minEditDist(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    dp = [[0 for x in range(len2 + 1)] for x in range(len1 + 1)] \n  \n    for i in range(len1 + 1): \n        for j in range(len2 + 1): \n  \n            if i == 0: \n                dp[i][j] = j\n  \n            elif j == 0: \n                dp[i][j] = i\n  \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n  \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])      # Replace \n  \n    return dp[len1][len2]\n```", "code": "def minEditDist(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    dp = [[0 for x in range(len2 + 1)] for x in range(len1 + 1)] \n  \n    for i in range(len1 + 1): \n        for j in range(len2 + 1): \n  \n            if i == 0: \n                dp[i][j] = j\n  \n            elif j == 0: \n                dp[i][j] = i\n  \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n  \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])      # Replace \n  \n    return dp[len1][len2]", "entry_point": "minEditDist", "testcase": ["assert minEditDist(\"sunday\", \"saturday\") == 3", "assert minEditDist(\"intention\", \"execution\") == 5", "assert minEditDist(\"horse\", \"ros\") == 3"]}
{"seq_id": 5493869206, "instruction": "Write a function to find the length of the longest consecutive elements sequence in an unsorted array.", "output": "Here is the code to solve this problem: \n```python\ndef longest_sequence(nums):\n    if not nums:\n        return 0\n\n    nums = set(nums)\n    longest_streak = 0\n\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in nums:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak\n```", "code": "def longest_sequence(nums):\n    if not nums:\n        return 0\n\n    nums = set(nums)\n    longest_streak = 0\n\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in nums:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak", "entry_point": "longest_sequence", "testcase": ["assert longest_sequence([10, 5, 12, 3]) == 1", "assert longest_sequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9", "assert longest_sequence([100, 4, 200, 1, 3, 2]) == 4"]}
{"seq_id": 15210644639, "instruction": "Write a function to check if a given undirected graph is a tree. A graph is a tree if it is connected and does not contain any cycles.", "output": "Here is the code to solve this problem: \n```python\ndef is_tree(edges):\n    parent = {}\n    rank = {}\n\n    def make_set(u):\n        parent[u] = u\n        rank[u] = 0\n\n    def find(u):\n        if parent[u] != u:\n            parent[u] = find(parent[u])\n        return parent[u]\n\n    def union(u, v):\n        root1 = find(u)\n        root2 = find(v)\n        if root1 != root2:\n            if rank[root1] > rank[root2]:\n                parent[root2] = root1\n            elif rank[root1] < rank[root2]:\n                parent[root1] = root2\n            else:\n                parent[root2] = root1\n                rank[root1] += 1\n\n    for u, v in edges:\n        make_set(u)\n        make_set(v)\n        if find(u) == find(v):\n            return False\n        union(u, v)\n\n    return len(edges) == len(parent) - 1\n```", "code": "def is_tree(edges):\n    parent = {}\n    rank = {}\n\n    def make_set(u):\n        parent[u] = u\n        rank[u] = 0\n\n    def find(u):\n        if parent[u] != u:\n            parent[u] = find(parent[u])\n        return parent[u]\n\n    def union(u, v):\n        root1 = find(u)\n        root2 = find(v)\n        if root1 != root2:\n            if rank[root1] > rank[root2]:\n                parent[root2] = root1\n            elif rank[root1] < rank[root2]:\n                parent[root1] = root2\n            else:\n                parent[root2] = root1\n                rank[root1] += 1\n\n    for u, v in edges:\n        make_set(u)\n        make_set(v)\n        if find(u) == find(v):\n            return False\n        union(u, v)\n\n    return len(edges) == len(parent) - 1", "entry_point": "is_tree", "testcase": ["assert is_tree([(1, 2), (2, 3), (3, 4)]) == True", "assert is_tree([(1, 2), (2, 3), (3, 1)]) == False", "assert is_tree([(1, 2), (2, 3), (3, 4), (4, 5)]) == True", "assert is_tree([(1, 2), (2, 3), (4, 5)]) == False", "assert is_tree([(1, 2), (2, 3), (3, 4), (4, 1)]) == False"]}
{"seq_id": 27046200112, "instruction": "Write a function to find the number of occurrences of an element in a sorted array using binary search.", "output": "Here is the code to solve this problem: \n```python\ndef binary_search_occurrences(arr, target):\n    def find_leftmost():\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left if arr[left] == target else -1\n\n    def find_rightmost():\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = left + (right - left) // 2 + 1\n            if arr[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        return right if arr[right] == target else -1\n\n    left_index = find_leftmost()\n    if left_index == -1:\n        return 0\n    right_index = find_rightmost()\n    return right_index - left_index + 1\n```", "code": "def binary_search_occurrences(arr, target):\n    def find_leftmost():\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left if arr[left] == target else -1\n\n    def find_rightmost():\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = left + (right - left) // 2 + 1\n            if arr[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        return right if arr[right] == target else -1\n\n    left_index = find_leftmost()\n    if left_index == -1:\n        return 0\n    right_index = find_rightmost()\n    return right_index - left_index + 1", "entry_point": "binary_search_occurrences", "testcase": ["assert binary_search_occurrences([1, 2, 2, 2, 3, 4, 5], 2) == 3", "assert binary_search_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 0", "assert binary_search_occurrences([1, 1, 2, 3, 3, 3, 4, 4, 4, 4], 3) == 3"]}
{"seq_id": 24847687695, "instruction": "Write a function that takes a list of integers and a target number, then returns the two numbers from the list that add up to the target. Assume that each input would have exactly one solution, and the same element cannot be used twice.", "output": "Here is the code to solve this problem: \n```python\ndef find_pair(numbers, target):\n    num_dict = {}\n    for i, num in enumerate(numbers):\n        complement = target - num\n        if complement in num_dict:\n            return (num_dict[complement], i)\n        num_dict[num] = i\n    return None\n```", "code": "def find_pair(numbers, target):\n    num_dict = {}\n    for i, num in enumerate(numbers):\n        complement = target - num\n        if complement in num_dict:\n            return (num_dict[complement], i)\n        num_dict[num] = i\n    return None", "entry_point": "find_pair", "testcase": ["assert find_pair([3, 3], 6) == (0, 1)", "assert find_pair([2, 7, 11, 15], 9) == (0, 1)", "assert find_pair([3, 2, 4], 6) == (1, 2)"]}
{"seq_id": 1057445937, "instruction": "Write a function that takes a list of integers as input and returns a new list with only the even numbers from the original list, sorted in ascending order.", "output": "Here is the code to solve this problem: \n```python\ndef even_sorted(nums):\n    even_nums = [num for num in nums if num % 2 == 0]\n    even_nums.sort()\n    return even_nums\n```", "code": "def even_sorted(nums):\n    even_nums = [num for num in nums if num % 2 == 0]\n    even_nums.sort()\n    return even_nums", "entry_point": "even_sorted", "testcase": ["assert even_sorted([1, 3, 5, 7, 9]) == []", "assert even_sorted([9, 5, 3, 2, 6, 8, 1]) == [2, 6, 8]", "assert even_sorted([4, 7, 1, 3, 10, 2]) == [2, 4, 10]"]}
{"seq_id": 20149257682, "instruction": "Write a python function to find the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring_without_repeating(s):\n    if not s:\n        return \"\"\n    left = 0\n    right = 0\n    max_len = 0\n    max_substring = \"\"\n    char_dict = {}\n    while right < len(s):\n        if s[right] in char_dict:\n            left = max(char_dict[s[right]] + 1, left)\n        char_dict[s[right]] = right\n        if right - left + 1 > max_len:\n            max_len = right - left + 1\n            max_substring = s[left:right+1]\n        right += 1\n    return max_substring\n```", "code": "def longest_substring_without_repeating(s):\n    if not s:\n        return \"\"\n    left = 0\n    right = 0\n    max_len = 0\n    max_substring = \"\"\n    char_dict = {}\n    while right < len(s):\n        if s[right] in char_dict:\n            left = max(char_dict[s[right]] + 1, left)\n        char_dict[s[right]] = right\n        if right - left + 1 > max_len:\n            max_len = right - left + 1\n            max_substring = s[left:right+1]\n        right += 1\n    return max_substring", "entry_point": "longest_substring_without_repeating", "testcase": ["assert longest_substring_without_repeating(\"abcabcbb\") == \"abc\"", "assert longest_substring_without_repeating(\"pwwkew\") == \"wke\"", "assert longest_substring_without_repeating(\"bbbbb\") == \"b\""]}
{"seq_id": 35160773228, "instruction": "Write a function to find the maximum number of unique sum of any subarray of a given array.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef max_unique_subarray_sum(nums: List[int]) -> int:\n    max_sum = 0\n    current_sum = 0\n    seen = {}\n    start = 0\n    for end, num in enumerate(nums):\n        current_sum += num\n        if num in seen and seen[num] >= start:\n            start = seen[num] + 1\n            current_sum = sum(nums[start:end+1])\n        seen[num] = end\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "from typing import List\n\ndef max_unique_subarray_sum(nums: List[int]) -> int:\n    max_sum = 0\n    current_sum = 0\n    seen = {}\n    start = 0\n    for end, num in enumerate(nums):\n        current_sum += num\n        if num in seen and seen[num] >= start:\n            start = seen[num] + 1\n            current_sum = sum(nums[start:end+1])\n        seen[num] = end\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "max_unique_subarray_sum", "testcase": ["assert max_unique_subarray_sum([4,2,4,5,6]) == 17", "assert max_unique_subarray_sum([1,2,3,4]) == 10", "assert max_unique_subarray_sum([5,2,1,2,5,2,1,2,5]) == 8"]}
{"seq_id": 20736680320, "instruction": "Write a function to find all permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef string_permutations(s):\n    return set(''.join(p) for p in permutations(s))\n```", "code": "from itertools import permutations\n\ndef string_permutations(s):\n    return set(''.join(p) for p in permutations(s))", "entry_point": "string_permutations", "testcase": ["assert string_permutations(\"abc\") == {'cba', 'cab', 'abc', 'acb', 'bac', 'bca'}", "assert string_permutations(\"dog\") == {'god', 'gdo', 'odg', 'ogd', 'dgo', 'dog'}", "assert string_permutations(\"cat\") == {'tca', 'cta', 'act', 'atc', 'cat', 'tac'}"]}
{"seq_id": 11891045088, "instruction": "Write a python function to find the number of pairs in a list that sum up to a given target. The pairs should be unique.", "output": "Here is the code to solve this problem: \n```python\ndef find_pair_sum(numbers, target):\n    num_map = {}\n    pair_count = 0\n\n    for i, num in enumerate(numbers):\n        complement = target - num\n        if complement in num_map:\n            pair_count += len(num_map[complement])\n            if num in num_map:\n                num_map[num].append(i)\n            else:\n                num_map[num] = [i]\n        else:\n            if num in num_map:\n                num_map[num].append(i)\n            else:\n                num_map[num] = [i]\n\n    return pair_count\n```", "code": "def find_pair_sum(numbers, target):\n    num_map = {}\n    pair_count = 0\n\n    for i, num in enumerate(numbers):\n        complement = target - num\n        if complement in num_map:\n            pair_count += len(num_map[complement])\n            if num in num_map:\n                num_map[num].append(i)\n            else:\n                num_map[num] = [i]\n        else:\n            if num in num_map:\n                num_map[num].append(i)\n            else:\n                num_map[num] = [i]\n\n    return pair_count", "entry_point": "find_pair_sum", "testcase": ["assert find_pair_sum([1, 1, 1, 1], 2) == 6", "assert find_pair_sum([1, 5, 7, -1, 5], 6) == 3", "assert find_pair_sum([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 11) == 9"]}
{"seq_id": 27674238860, "instruction": "Write a function to find all the words that immediately follow a specific first word and a second word in a given sentence.", "output": "Here is the code to solve this problem: \n```python\ndef find_following_words(text, first, second):\n    words = text.split()\n    s=[]\n    for i in range(len(words)-2):\n        if words[i] == first and words[i+1] == second:\n            s.append(words[i+2])\n    return s\n```", "code": "def find_following_words(text, first, second):\n    words = text.split()\n    s=[]\n    for i in range(len(words)-2):\n        if words[i] == first and words[i+1] == second:\n            s.append(words[i+2])\n    return s", "entry_point": "find_following_words", "testcase": ["assert find_following_words(\"i love python and i love coding\", \"i\", \"love\")==['python', 'coding']", "assert find_following_words(\"the quick brown fox jumps over the lazy dog\", \"the\", \"quick\")==['brown']", "assert find_following_words(\"alice is a good girl she is a good student\", \"a\", \"good\")==['girl', 'student']"]}
{"seq_id": 21215072, "instruction": "Write a python function to count the number of pairs with given sum in an array.", "output": "Here is the code to solve this problem: \n```python\ndef count_pairs(arr, target):\n    count = 0\n    frequency = {}\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in frequency:\n            count += frequency[complement]\n        if arr[i] in frequency:\n            frequency[arr[i]] += 1\n        else:\n            frequency[arr[i]] = 1\n    return count\n```", "code": "def count_pairs(arr, target):\n    count = 0\n    frequency = {}\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in frequency:\n            count += frequency[complement]\n        if arr[i] in frequency:\n            frequency[arr[i]] += 1\n        else:\n            frequency[arr[i]] = 1\n    return count", "entry_point": "count_pairs", "testcase": ["assert count_pairs([1, 5, 7, -1, 5], 6) == 3", "assert count_pairs([1, 1, 1, 1], 2) == 6", "assert count_pairs([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 11) == 9"]}
{"seq_id": 27438973631, "instruction": "Write a function to find the next largest number which has the same set of digits as the given number.", "output": "Here is the code to solve this problem: \n```python\ndef next_largest_number(num):\n    num = list(str(num))\n    for i in range(len(num)-2, -1, -1):\n        if num[i] < num[i+1]:\n            break\n    if i == 0 and num[i] >= num[i+1]:\n        return -1\n    x = num[i]\n    smallest = i+1\n    for j in range(i+1, len(num)):\n        if num[j] > x and num[j] < num[smallest]:\n            smallest = j\n    num[smallest], num[i] = num[i], num[smallest]\n    num[i+1:] = sorted(num[i+1:])\n    return int(''.join(num))\n```", "code": "def next_largest_number(num):\n    num = list(str(num))\n    for i in range(len(num)-2, -1, -1):\n        if num[i] < num[i+1]:\n            break\n    if i == 0 and num[i] >= num[i+1]:\n        return -1\n    x = num[i]\n    smallest = i+1\n    for j in range(i+1, len(num)):\n        if num[j] > x and num[j] < num[smallest]:\n            smallest = j\n    num[smallest], num[i] = num[i], num[smallest]\n    num[i+1:] = sorted(num[i+1:])\n    return int(''.join(num))", "entry_point": "next_largest_number", "testcase": ["assert next_largest_number(513)==531", "assert next_largest_number(2017)==2071", "assert next_largest_number(12)==21"]}
{"seq_id": 33048105539, "instruction": "Write a python function to remove all the occurrences of a given value from a list.", "output": "Here is the code to solve this problem: \n```python\nclass Solution:\n    def remove_element(self, nums, val):\n        i = 0\n        j = 0\n        n = len(nums)\n        while j < n:\n            if nums[j] != val:\n                nums[i] = nums[j]\n                i += 1\n            j += 1\n        return i\n\nsol = Solution()\ndef remove_element(nums, val):\n    return sol.remove_element(nums, val)\n```", "code": "class Solution:\n    def remove_element(self, nums, val):\n        i = 0\n        j = 0\n        n = len(nums)\n        while j < n:\n            if nums[j] != val:\n                nums[i] = nums[j]\n                i += 1\n            j += 1\n        return i\n\nsol = Solution()\ndef remove_element(nums, val):\n    return sol.remove_element(nums, val)", "entry_point": "remove_element", "testcase": ["assert remove_element([3, 3, 3, 3, 3], 3) == 0", "assert remove_element([1, 2, 3, 2, 4, 2], 2) == 3", "assert remove_element([1, 2, 3, 4, 5], 6) == 5"]}
{"seq_id": 17800689178, "instruction": "Write a function to find the minimum cost to make all elements in an array equal. The cost of changing an element is the absolute difference between the new value and the old value. You can perform the operation any number of times.", "output": "Here is the code to solve this problem: \n```python\ndef minimum_cost(arr):\n    arr.sort()\n    median = arr[len(arr)//2]\n    return sum([abs(i-median) for i in arr])\n```", "code": "def minimum_cost(arr):\n    arr.sort()\n    median = arr[len(arr)//2]\n    return sum([abs(i-median) for i in arr])", "entry_point": "minimum_cost", "testcase": ["assert minimum_cost([1,3,6,8,10]) == 14", "assert minimum_cost([1,5,2,6,3,4]) == 9", "assert minimum_cost([2,2,2,2,2]) == 0"]}
{"seq_id": 235954672, "instruction": "Write a function that takes a string and returns the number of substrings that are palindromes.", "output": "Here is the code to solve this problem: \n```python\ndef palindrome_substrings(str):\n    n = len(str)\n    dp = [[False] * n for _ in range(n)]\n    count = 0\n\n    for i in range(n):\n        dp[i][i] = True\n        count += 1\n\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = True\n            count += 1\n\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if dp[i+1][j-1] and str[i] == str[j]:\n                dp[i][j] = True\n                count += 1\n\n    return count\n```", "code": "def palindrome_substrings(str):\n    n = len(str)\n    dp = [[False] * n for _ in range(n)]\n    count = 0\n\n    for i in range(n):\n        dp[i][i] = True\n        count += 1\n\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = True\n            count += 1\n\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if dp[i+1][j-1] and str[i] == str[j]:\n                dp[i][j] = True\n                count += 1\n\n    return count", "entry_point": "palindrome_substrings", "testcase": ["assert palindrome_substrings(\"abc\") == 3", "assert palindrome_substrings(\"racecar\") == 10", "assert palindrome_substrings(\"aaa\") == 6"]}
{"seq_id": 73468277559, "instruction": "Write a python function to find the number of similar pairs in a given list of strings. Two strings are considered similar if they contain the same characters in any order.", "output": "Here is the code to solve this problem: \n```python\ndef similar_pairs(words):\n    res = 0\n        \n    for indx, word in enumerate(words):\n        word = set(word)\n            \n        for next_word in words[indx+1:]:\n            if word == set(next_word):\n                res += 1\n                    \n    return res\n```", "code": "def similar_pairs(words):\n    res = 0\n        \n    for indx, word in enumerate(words):\n        word = set(word)\n            \n        for next_word in words[indx+1:]:\n            if word == set(next_word):\n                res += 1\n                    \n    return res", "entry_point": "similar_pairs", "testcase": ["assert similar_pairs([\"nba\", \"cba\", \"dba\"]) == 0", "assert similar_pairs([\"aabb\", \"ab\", \"ba\"]) == 3", "assert similar_pairs([\"aba\", \"aabb\", \"abcd\", \"bac\", \"aabc\"]) == 2"]}
{"seq_id": 24453669034, "instruction": "Write a function to find the intersection of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef intersection(arr1, arr2):\n    i, j = 0, 0\n    result = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            if not result or result[-1] != arr1[i]:  # Avoid duplicates in the result\n                result.append(arr1[i])\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n```", "code": "def intersection(arr1, arr2):\n    i, j = 0, 0\n    result = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            if not result or result[-1] != arr1[i]:  # Avoid duplicates in the result\n                result.append(arr1[i])\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return result", "entry_point": "intersection", "testcase": ["assert intersection([1, 2, 4, 5, 6], [2, 3, 5, 7]) == [2, 5]", "assert intersection([10, 20, 30, 40], [15, 20, 25, 30, 35]) == [20, 30]", "assert intersection([1, 2, 2, 3, 4], [2, 2, 4, 6, 8]) == [2, 4]"]}
{"seq_id": 71995787311, "instruction": "Write a python function that takes a list of integers and returns a list of strings representing the Push and Pop operations required to build the input list using a stack. The function should simulate pushing integers from 1 to the maximum value in the input list onto the stack and popping them off when the number is not in the input list.", "output": "Here is the code to solve this problem: \n```python\ndef stack_operations(target):\n    operations = []\n    current = 1\n    for num in target:\n        while current < num:\n            operations.append(\"Push\")\n            operations.append(\"Pop\")\n            current += 1\n        operations.append(\"Push\")\n        current += 1\n    return operations\n```", "code": "def stack_operations(target):\n    operations = []\n    current = 1\n    for num in target:\n        while current < num:\n            operations.append(\"Push\")\n            operations.append(\"Pop\")\n            current += 1\n        operations.append(\"Push\")\n        current += 1\n    return operations", "entry_point": "stack_operations", "testcase": ["assert stack_operations([1, 3]) == [\"Push\", \"Push\", \"Pop\", \"Push\"]", "assert stack_operations([1, 2]) == [\"Push\", \"Push\"]", "assert stack_operations([1, 2, 3]) == [\"Push\", \"Push\", \"Push\"]"]}
{"seq_id": 2323243384, "instruction": "Write a function that takes a string and returns a dictionary with the frequency of each character in the string.", "output": "Here is the code to solve this problem: \n```python\ndef character_frequency(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n```", "code": "def character_frequency(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency", "entry_point": "character_frequency", "testcase": ["assert character_frequency(\"python\") == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "assert character_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}", "assert character_frequency(\"aaaabbbccc\") == {'a': 4, 'b': 3, 'c': 3}"]}
{"seq_id": 38279747573, "instruction": "Write a Python function that finds the difference of two lists. The difference means the elements that are in the first list but not in the second list.", "output": "Here is the code to solve this problem: \n```python\ndef list_difference(list1, list2):\n    return [i for i in list1 if i not in list2]\n```", "code": "def list_difference(list1, list2):\n    return [i for i in list1 if i not in list2]", "entry_point": "list_difference", "testcase": ["assert list_difference([1, 2, 3, 4, 5], [3, 4, 5, 6]) == [1, 2]", "assert list_difference([10, 20, 30, 40], [15, 20, 25, 30, 35]) == [10, 40]", "assert list_difference(['a', 'b', 'c', 'd'], ['c', 'd', 'e', 'f']) == ['a', 'b']"]}
{"seq_id": 40955202062, "instruction": "Write a function to convert a binary string to a hexadecimal string.", "output": "Here is the code to solve this problem: \n```python\ndef binary_to_hex(binary_str):\n    hex_str = hex(int(binary_str, 2))\n    return hex_str[2:].upper()\n```", "code": "def binary_to_hex(binary_str):\n    hex_str = hex(int(binary_str, 2))\n    return hex_str[2:].upper()", "entry_point": "binary_to_hex", "testcase": ["assert binary_to_hex(\"10110110\") == \"B6\"", "assert binary_to_hex(\"1011\") == \"B\"", "assert binary_to_hex(\"110101011001\") == \"D59\""]}
{"seq_id": 39519549111, "instruction": "Write a function to find the maximum product of two numbers in a sequence of positive numbers. If the sequence has less than two numbers, return None.", "output": "Here is the code to solve this problem: \n```python\ndef product_max(sequence):\n    if len(sequence) < 2:\n        return None\n    sequence = sorted(sequence)\n    return max(sequence[-1]*sequence[-2], sequence[0]*sequence[1])\n```", "code": "def product_max(sequence):\n    if len(sequence) < 2:\n        return None\n    sequence = sorted(sequence)\n    return max(sequence[-1]*sequence[-2], sequence[0]*sequence[1])", "entry_point": "product_max", "testcase": ["assert product_max((1,)) == None", "assert product_max((10,2,3,4))==40", "assert product_max((5,1,2,7,3))==35"]}
{"seq_id": 72541972260, "instruction": "Write a function to implement a simple REGEX matcher that supports '.' and '*'. '.' Matches any single character. '*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).", "output": "Here is the code to solve this problem: \n```python\ndef isMatch(s: str, p: str) -> bool:\n    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n    dp[0][0] = True\n    for i in range(2, len(p) + 1):\n        dp[0][i] = dp[0][i - 2] and p[i - 1] == '*'\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(p) + 1):\n            if p[j - 1] in {s[i - 1], '.'}:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 2]\n                if p[j - 2] in {s[i - 1], '.'}:\n                    dp[i][j] |= dp[i - 1][j]\n    return dp[-1][-1]\n```", "code": "def isMatch(s: str, p: str) -> bool:\n    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n    dp[0][0] = True\n    for i in range(2, len(p) + 1):\n        dp[0][i] = dp[0][i - 2] and p[i - 1] == '*'\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(p) + 1):\n            if p[j - 1] in {s[i - 1], '.'}:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i][j - 2]\n                if p[j - 2] in {s[i - 1], '.'}:\n                    dp[i][j] |= dp[i - 1][j]\n    return dp[-1][-1]", "entry_point": "isMatch", "testcase": ["assert isMatch(\"aa\",\"a\") == False", "assert isMatch(\"aab\",\"c*a*b\") == True", "assert isMatch(\"aa\",\"a*\") == True", "assert isMatch(\"ab\",\".*\") == True", "assert isMatch(\"mississippi\",\"mis*is*p*.\") == False"]}
{"seq_id": 207432179, "instruction": "Write a function that takes a list of integers and returns a list of their binary representations.", "output": "Here is the code to solve this problem: \n```python\ndef int_to_binary(nums):\n    binary_list = []\n    for num in nums:\n        binary_list.append(bin(num)[2:])\n    return binary_list\n```", "code": "def int_to_binary(nums):\n    binary_list = []\n    for num in nums:\n        binary_list.append(bin(num)[2:])\n    return binary_list", "entry_point": "int_to_binary", "testcase": ["assert int_to_binary([3, 8, 13]) == ['11', '1000', '1101']", "assert int_to_binary([21, 34, 45]) == ['10101', '100010', '101101']", "assert int_to_binary([5, 10, 15]) == ['101', '1010', '1111']"]}
{"seq_id": 73966602438, "instruction": "Write a function to generate a list of all possible permutations of a given list of elements.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef permutation_list(input_list):\n    return [list(perm) for perm in permutations(input_list)]\n```", "code": "from itertools import permutations\n\ndef permutation_list(input_list):\n    return [list(perm) for perm in permutations(input_list)]", "entry_point": "permutation_list", "testcase": ["assert permutation_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "assert permutation_list(['a', 'b', 'c']) == [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]", "assert permutation_list([1]) == [[1]]"]}
{"seq_id": 9447153811, "instruction": "Write a function to count the number of continuous subarrays whose sum is equal to a given value.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef count_subarrays(nums, target):\n    count = 0\n    current_sum = 0\n    hashmap = defaultdict(int)\n    hashmap[0] = 1\n\n    for num in nums:\n        current_sum += num\n        if (current_sum - target) in hashmap:\n            count += hashmap[current_sum - target]\n\n        hashmap[current_sum] += 1\n\n    return count\n```", "code": "from collections import defaultdict\n\ndef count_subarrays(nums, target):\n    count = 0\n    current_sum = 0\n    hashmap = defaultdict(int)\n    hashmap[0] = 1\n\n    for num in nums:\n        current_sum += num\n        if (current_sum - target) in hashmap:\n            count += hashmap[current_sum - target]\n\n        hashmap[current_sum] += 1\n\n    return count", "entry_point": "count_subarrays", "testcase": ["assert count_subarrays([10, 2, -2, -20, 10], -10) == 3", "assert count_subarrays([1, 2, 3], 3) == 2", "assert count_subarrays([1, 1, 1], 2) == 2"]}
{"seq_id": 29447063555, "instruction": "Write a python function to find the minimum length of the string after removing all occurrences of given substrings.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef min_length(s, dict):\n  queue = deque([s])\n  visited = set([s])\n  min_length = len(s)\n\n  while queue:\n    curr_str = queue.popleft()\n\n    min_length = min(min_length, len(curr_str))\n\n    for word in dict:\n      found_idx = curr_str.find(word)\n      while found_idx != -1:\n        udpated_str = curr_str[:found_idx] + curr_str[found_idx+len(word):]\n\n        if udpated_str not in visited:\n          queue.append(udpated_str)\n          visited.add(udpated_str)\n\n        found_idx = curr_str.find(word, found_idx+1)\n\n  return min_length\n```", "code": "from collections import deque\n\ndef min_length(s, dict):\n  queue = deque([s])\n  visited = set([s])\n  min_length = len(s)\n\n  while queue:\n    curr_str = queue.popleft()\n\n    min_length = min(min_length, len(curr_str))\n\n    for word in dict:\n      found_idx = curr_str.find(word)\n      while found_idx != -1:\n        udpated_str = curr_str[:found_idx] + curr_str[found_idx+len(word):]\n\n        if udpated_str not in visited:\n          queue.append(udpated_str)\n          visited.add(udpated_str)\n\n        found_idx = curr_str.find(word, found_idx+1)\n\n  return min_length", "entry_point": "min_length", "testcase": ["assert min_length(\"abcabd\", [\"ab\",\"abcd\"]) == 0", "assert min_length(\"ccdaabcdbb\", [\"ab\",\"cd\"]) == 2", "assert min_length(\"hellothere\", [\"ll\",\"he\"]) == 4"]}
{"seq_id": 18513880882, "instruction": "Write a function to calculate the sum of all prime numbers in a list.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_primes(numbers):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return sum(filter(is_prime, numbers))\n```", "code": "def sum_of_primes(numbers):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return sum(filter(is_prime, numbers))", "entry_point": "sum_of_primes", "testcase": ["assert sum_of_primes([1, 4, 6, 8, 10, 12]) == 0", "assert sum_of_primes([2, 3, 5, 7, 11, 13]) == 41", "assert sum_of_primes([29, 37, 41, 43, 47]) == 197"]}
{"seq_id": 39788578333, "instruction": "Write a python function to find the maximum profit that can be earned from selling and buying stocks given a list of prices where the ith element is the price of the ith day.", "output": "Here is the code to solve this problem: \n```python\ndef max_Profit(prices):\n    if not prices:\n        return 0\n    profit = 0\n    min_price = prices[0]\n    for price in prices:\n        profit = max(profit, price - min_price)\n        min_price = min(min_price, price)\n    return profit\n```", "code": "def max_Profit(prices):\n    if not prices:\n        return 0\n    profit = 0\n    min_price = prices[0]\n    for price in prices:\n        profit = max(profit, price - min_price)\n        min_price = min(min_price, price)\n    return profit", "entry_point": "max_Profit", "testcase": ["assert max_Profit([7,1,5,3,6,4]) == 5", "assert max_Profit([1,2,3,4,5]) == 4", "assert max_Profit([7,6,4,3,1]) == 0"]}
{"seq_id": 12307870644, "instruction": "Write a function to find all unique quadruplets in the array which gives the sum of zero.", "output": "Here is the code to solve this problem: \n```python\ndef fourSum(nums, target):\n    nums.sort()\n    results = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left, right = j + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total < target:\n                    left += 1\n                elif total > target:\n                    right -= 1\n                else:\n                    results.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n    return results\n```", "code": "def fourSum(nums, target):\n    nums.sort()\n    results = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left, right = j + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total < target:\n                    left += 1\n                elif total > target:\n                    right -= 1\n                else:\n                    results.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n    return results", "entry_point": "fourSum", "testcase": ["assert fourSum([-3,-2,-1,0,0,1,2,3], 0) == [[-3, -2, 2, 3], [-3, -1, 1, 3], [-3, 0, 0, 3], [-3, 0, 1, 2], [-2, -1, 0, 3], [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]", "assert fourSum([0,0,0,0], 0) == [[0, 0, 0, 0]]", "assert fourSum([-2,-1,0,0,1,2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]"]}
{"seq_id": 4759423171, "instruction": "Write a python function that takes a list of integers and an integer k as input. The function should return the maximum score that can be achieved by playing a game with the following rules:\n1. You start with a power of k.\n2. On each turn, you can either add the smallest token in the list to your power and increase your score by 1, or subtract the largest token in the list from your power and decrease your score by 1.\n3. You can only add a token if it is less than or equal to your current power.\n4. You can only subtract a token if your current score is greater than 0.\nThe function should return the maximum score that can be achieved.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef play_game(tokens, power):\n    result = 0\n    current = 0\n    d = deque(sorted(tokens))\n    while d and (d[0] <= power or current):\n        if d[0] <= power:\n            power -= d.popleft() # Subtract min when subtracting\n            current += 1\n        else:\n            power += d.pop() # Pick Max When picking\n            current -= 1\n        result = max(result, current)\n    return result\n```", "code": "from collections import deque\n\ndef play_game(tokens, power):\n    result = 0\n    current = 0\n    d = deque(sorted(tokens))\n    while d and (d[0] <= power or current):\n        if d[0] <= power:\n            power -= d.popleft() # Subtract min when subtracting\n            current += 1\n        else:\n            power += d.pop() # Pick Max When picking\n            current -= 1\n        result = max(result, current)\n    return result", "entry_point": "play_game", "testcase": ["assert play_game([100, 200], 150) == 1", "assert play_game([100], 50) == 0", "assert play_game([100, 200, 300, 400], 200) == 2"]}
{"seq_id": 37527787870, "instruction": "Write a python function that checks if a given list of numbers is monotonically increasing or decreasing.", "output": "Here is the code to solve this problem: \n```python\ndef check_monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            increasing = False\n        if arr[i] < arr[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n```", "code": "def check_monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            increasing = False\n        if arr[i] < arr[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing", "entry_point": "check_monotonic", "testcase": ["assert check_monotonic([10, 5, 5, 4]) == True", "assert check_monotonic([1,2,4,70]) == True", "assert check_monotonic([1, 5, 2, -1]) == False", "assert check_monotonic([100, 20, 10, 5]) == True", "assert check_monotonic([1,5,7,10]) == True"]}
{"seq_id": 7080013403, "instruction": "Given a list of strings, write a function to sort it lexicographically in reverse order.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_lexi_sort(arr):\n    return sorted(arr, reverse=True)\n```", "code": "def reverse_lexi_sort(arr):\n    return sorted(arr, reverse=True)", "entry_point": "reverse_lexi_sort", "testcase": ["assert reverse_lexi_sort([\"hello\", \"world\", \"python\"]) == [\"world\", \"python\", \"hello\"]", "assert reverse_lexi_sort([\"cat\", \"dog\", \"elephant\"]) == [\"elephant\", \"dog\", \"cat\"]", "assert reverse_lexi_sort([\"a\", \"aa\", \"aaa\"]) == [\"aaa\", \"aa\", \"a\"]"]}
{"seq_id": 28247218127, "instruction": "Write a function to find the integer square root of a given number using binary search.", "output": "Here is the code to solve this problem: \n```python\ndef int_sqrt(x):\n    lo, hi = 0, x\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if (mid + 1) * (mid + 1) > x:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo if lo * lo <= x else lo - 1\n```", "code": "def int_sqrt(x):\n    lo, hi = 0, x\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if (mid + 1) * (mid + 1) > x:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo if lo * lo <= x else lo - 1", "entry_point": "int_sqrt", "testcase": ["assert int_sqrt(16) == 4", "assert int_sqrt(0) == 0", "assert int_sqrt(4) == 2", "assert int_sqrt(1) == 1", "assert int_sqrt(8) == 2"]}
{"seq_id": 11604718143, "instruction": "Write a function to find the sum of largest and smallest numbers in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef sum_largest_smallest(lst):\n    return max(lst) + min(lst)\n```", "code": "def sum_largest_smallest(lst):\n    return max(lst) + min(lst)", "entry_point": "sum_largest_smallest", "testcase": ["assert sum_largest_smallest([10,20,30,40,50]) == 60", "assert sum_largest_smallest([1,2,3,4,5]) == 6", "assert sum_largest_smallest([100,200,300,400,500]) == 600"]}
{"seq_id": 17899484140, "instruction": "Write a function to find the minimum number of operations required to make all array elements unique. An operation consists of incrementing a chosen element by 1.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\ndef minOpsForUnique(A):\n    duplicates, result = [], 0\n    hmap = Counter(A)\n    for i in range(80000):\n        if hmap[i] >= 2:\n            duplicates.extend([i] * (hmap[i] - 1))\n        elif hmap[i] == 0 and duplicates:\n            result += i - duplicates.pop()\n    return result\n```", "code": "from collections import Counter\ndef minOpsForUnique(A):\n    duplicates, result = [], 0\n    hmap = Counter(A)\n    for i in range(80000):\n        if hmap[i] >= 2:\n            duplicates.extend([i] * (hmap[i] - 1))\n        elif hmap[i] == 0 and duplicates:\n            result += i - duplicates.pop()\n    return result", "entry_point": "minOpsForUnique", "testcase": ["assert minOpsForUnique([1,2,2]) == 1", "assert minOpsForUnique([3,2,1,2,1,7]) == 6", "assert minOpsForUnique([5, 5, 5, 5]) == 6"]}
{"seq_id": 72215893818, "instruction": "Write a python function that takes a string of numbers and returns the sum of all numbers in the string. The string may contain non-numeric characters which should be ignored.", "output": "Here is the code to solve this problem: \n```python\ndef sum_numbers(s):\n    nums = ''.join(c if c.isdigit() else ' ' for c in s).split()\n    return sum(int(num) for num in nums)\n```", "code": "def sum_numbers(s):\n    nums = ''.join(c if c.isdigit() else ' ' for c in s).split()\n    return sum(int(num) for num in nums)", "entry_point": "sum_numbers", "testcase": ["assert sum_numbers(\"100%200&300\") == 600", "assert sum_numbers(\"xyz\") == 0", "assert sum_numbers(\"123abc45\") == 168"]}
{"seq_id": 6243382691, "instruction": "Write a Python function to find the number of days between two dates.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\n\ndef calc_days_between(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return abs(delta.days)\n```", "code": "from datetime import datetime\n\ndef calc_days_between(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return abs(delta.days)", "entry_point": "calc_days_between", "testcase": ["assert calc_days_between('2020-01-01', '2020-12-31') == 365", "assert calc_days_between('2021-01-01', '2022-01-01') == 365", "assert calc_days_between('2020-01-01', '2021-01-01') == 366"]}
{"seq_id": 43619286168, "instruction": "Write a python function to find the count of subarrays with sum equal to a given number k.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef countSubarraysWithSum(nums: List[int], k: int) -> int:\n    count = 0\n    sum = 0\n    hash_map = {0:1}\n    \n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum-k in hash_map:\n            count += hash_map[sum-k]\n        if sum in hash_map:\n            hash_map[sum] += 1\n        else:\n            hash_map[sum] = 1\n            \n    return count\n```", "code": "from typing import List\n\ndef countSubarraysWithSum(nums: List[int], k: int) -> int:\n    count = 0\n    sum = 0\n    hash_map = {0:1}\n    \n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum-k in hash_map:\n            count += hash_map[sum-k]\n        if sum in hash_map:\n            hash_map[sum] += 1\n        else:\n            hash_map[sum] = 1\n            \n    return count", "entry_point": "countSubarraysWithSum", "testcase": ["assert countSubarraysWithSum([1,1,1], 2) == 2", "assert countSubarraysWithSum([1], 0) == 0", "assert countSubarraysWithSum([1,2,3], 3) == 2"]}
{"seq_id": 70425255257, "instruction": "Write a python function to find the largest divisor of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_divisor(num):\n    divisor = num // 2\n    while divisor > 0:\n        if num % divisor == 0:\n            return divisor\n        divisor -= 1\n    return 1\n```", "code": "def find_largest_divisor(num):\n    divisor = num // 2\n    while divisor > 0:\n        if num % divisor == 0:\n            return divisor\n        divisor -= 1\n    return 1", "entry_point": "find_largest_divisor", "testcase": ["assert find_largest_divisor(12) == 6", "assert find_largest_divisor(105) == 35", "assert find_largest_divisor(2) == 1"]}
{"seq_id": 3923619555, "instruction": "Write a function to reverse the order of words in a given sentence while maintaining the order of characters in each word.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_sentence_order(sentence):\n    words = sentence.split()\n    reversed_sentence = ' '.join(reversed(words))\n    return reversed_sentence\n```", "code": "def reverse_sentence_order(sentence):\n    words = sentence.split()\n    reversed_sentence = ' '.join(reversed(words))\n    return reversed_sentence", "entry_point": "reverse_sentence_order", "testcase": ["assert reverse_sentence_order(\"Keep calm and code on\") == \"on code and calm Keep\"", "assert reverse_sentence_order(\"Python is fun\") == \"fun is Python\"", "assert reverse_sentence_order(\"Hello World\") == \"World Hello\""]}
{"seq_id": 14144090856, "instruction": "Write a Python function to implement the Josephus problem. The Josephus problem is a theoretical problem related to a certain counting-out game. People are standing in a circle waiting to be executed. Counting begins at a specified point in the circle and proceeds around the circle in a specified direction. After a specified number of people are skipped, the next person is executed. The procedure is repeated with the remaining people, starting with the next person, going in the same direction and skipping the same number of people, until only one person remains, and is freed.", "output": "Here is the code to solve this problem: \n```python\ndef josephus(n, k):\n    if n == 1:\n        return 1\n    else:\n        return (josephus(n - 1, k) + k - 1) % n + 1\n```", "code": "def josephus(n, k):\n    if n == 1:\n        return 1\n    else:\n        return (josephus(n - 1, k) + k - 1) % n + 1", "entry_point": "josephus", "testcase": ["assert josephus(7, 3) == 4", "assert josephus(1, 3) == 1", "assert josephus(10, 2) == 5"]}
{"seq_id": 35159878248, "instruction": "Write a python function to find the number of distinct prime factors of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef distinct_prime_factors(n):\n    factors = set()\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return len(factors)\n```", "code": "def distinct_prime_factors(n):\n    factors = set()\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return len(factors)", "entry_point": "distinct_prime_factors", "testcase": ["assert distinct_prime_factors(10) == 2", "assert distinct_prime_factors(100) == 2", "assert distinct_prime_factors(30) == 3"]}
{"seq_id": 35810993392, "instruction": "Write a function that takes a list of integers and returns a list of their square roots. The function should also handle negative numbers by returning their square roots as complex numbers.", "output": "Here is the code to solve this problem: \n```python\nimport cmath\n\ndef square_roots(numbers):\n    result = []\n    for num in numbers:\n        result.append(cmath.sqrt(num))\n    return result\n```", "code": "import cmath\n\ndef square_roots(numbers):\n    result = []\n    for num in numbers:\n        result.append(cmath.sqrt(num))\n    return result", "entry_point": "square_roots", "testcase": ["assert square_roots([-1, -4, 9, 16]) == [1j, 2j, 3.0, 4.0]", "assert square_roots([1, 4, 9, 16]) == [1.0, 2.0, 3.0, 4.0]", "assert square_roots([25, -9, 16, 0]) == [5.0, 3j, 4.0, 0.0]"]}
{"seq_id": 21673173040, "instruction": "Write a function to convert a number from one base to another base.", "output": "Here is the code to solve this problem: \n```python\ndef convert_base(num, from_base, to_base):\n    if isinstance(num, str):\n        n = int(num, from_base)\n    else:\n        n = int(num)\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n < to_base:\n        return alphabet[n]\n    else:\n        return convert_base(n // to_base, 10, to_base) + alphabet[n % to_base]\n```", "code": "def convert_base(num, from_base, to_base):\n    if isinstance(num, str):\n        n = int(num, from_base)\n    else:\n        n = int(num)\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n < to_base:\n        return alphabet[n]\n    else:\n        return convert_base(n // to_base, 10, to_base) + alphabet[n % to_base]", "entry_point": "convert_base", "testcase": ["assert convert_base(13, 10, 2) == '1101'", "assert convert_base(8, 10, 2) == '1000'", "assert convert_base(1000, 10, 3) == '1101001'", "assert convert_base(15, 10, 16) == 'F'", "assert convert_base(8, 10, 8) == '10'", "assert convert_base(255, 10, 16) == 'FF'"]}
{"seq_id": 14469971761, "instruction": "Write a function to find the sum of all the elements in a list of lists.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_nested_lists(nested_list):\n    return sum(sum(lst) for lst in nested_list)\n```", "code": "def sum_of_nested_lists(nested_list):\n    return sum(sum(lst) for lst in nested_list)", "entry_point": "sum_of_nested_lists", "testcase": ["assert sum_of_nested_lists([[1, 2, 3], [4, 5], [6]]) == 21", "assert sum_of_nested_lists([[10, 20], [30, 40], [50, 60]]) == 210", "assert sum_of_nested_lists([[], [], []]) == 0"]}
{"seq_id": 12289339661, "instruction": "Write a function to find the number of occurrences of a given number in a sorted array.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\n\ndef find_occurrences(nums: List[int], target: int) -> int:\n    left, right = 0, len(nums) - 1\n    first = last = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            first = mid\n            right = mid - 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if first == -1:\n        return 0\n\n    left, right = first, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            last = mid\n            left = mid + 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last - first + 1\n```", "code": "from typing import List\n\n\ndef find_occurrences(nums: List[int], target: int) -> int:\n    left, right = 0, len(nums) - 1\n    first = last = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            first = mid\n            right = mid - 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if first == -1:\n        return 0\n\n    left, right = first, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            last = mid\n            left = mid + 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last - first + 1", "entry_point": "find_occurrences", "testcase": ["assert find_occurrences([1, 1, 1, 1, 1, 1, 1], 1) == 7", "assert find_occurrences([1, 2, 2, 2, 3, 4, 5], 2) == 3", "assert find_occurrences([1, 2, 3, 4, 5], 6) == 0"]}
{"seq_id": 19863283218, "instruction": "Write a function that takes two lists of strings and a list of similar word pairs. Determine if the two lists of strings are similar based on the similar word pairs. Two lists are considered similar if for each pair of corresponding strings, they are either identical or marked as similar in the word pairs. Note that similarity is not transitive but is symmetric, and a word is always similar to itself.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef are_lists_similar(words1, words2, pairs):\n    if len(words1) != len(words2): return False\n        \n    similar = defaultdict(list)\n        \n    for first, sec in pairs:\n        similar[first].append(sec)\n        similar[sec].append(first)\n        \n    for i in range(len(words1)):\n        if words1[i] != words2[i]:\n            if words2[i] not in similar[words1[i]]: return False\n    \n    return True\n```", "code": "from collections import defaultdict\n\ndef are_lists_similar(words1, words2, pairs):\n    if len(words1) != len(words2): return False\n        \n    similar = defaultdict(list)\n        \n    for first, sec in pairs:\n        similar[first].append(sec)\n        similar[sec].append(first)\n        \n    for i in range(len(words1)):\n        if words1[i] != words2[i]:\n            if words2[i] not in similar[words1[i]]: return False\n    \n    return True", "entry_point": "are_lists_similar", "testcase": ["assert are_lists_similar([\"great\", \"acting\", \"skills\"], [\"fine\", \"drama\", \"talent\"], [[\"great\", \"fine\"], [\"acting\",\"drama\"], [\"skills\",\"talent\"]])==True", "assert are_lists_similar([\"great\"], [\"doubleplus\", \"good\"], [])==False", "assert are_lists_similar([\"great\"], [\"great\"], [])==True"]}
{"seq_id": 72543230745, "instruction": "Write a function that takes a list of integers and returns a new list with only the unique elements from the original list, keeping the order.", "output": "Here is the code to solve this problem: \n```python\ndef uniquify(lst):\n    unique = []\n    for i in lst:\n        if lst.count(i) == 1:\n            unique.append(i)\n    return unique\n```", "code": "def uniquify(lst):\n    unique = []\n    for i in lst:\n        if lst.count(i) == 1:\n            unique.append(i)\n    return unique", "entry_point": "uniquify", "testcase": ["assert uniquify([9,10,11,12,9,10]) == [11,12]", "assert uniquify([1,2,3,2,3,4]) == [1,4]", "assert uniquify([5,6,7,8,5,6]) == [7,8]"]}
{"seq_id": 31147523398, "instruction": "Write a function to check whether the given undirected graph is connected or not using DFS algorithm.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef dfs(graph, visited, v):\n    visited[v]=True\n\n    for adj in graph[v]:\n        if(visited[adj]==False):\n            dfs(graph,visited,adj)\n\ndef check_connected_graph(edges):\n    # graph :: tree\n    graph=defaultdict(list)\n    visited={key:False for key in range(1,len(edges)+1)}\n    \n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    # for key,val in graph.items():\n    #     print(key,val)\n\n    dfs(graph,visited,1)\n\n    for v in visited.values():\n        if v==False:\n            return False\n    return True\n```", "code": "from collections import defaultdict\n\ndef dfs(graph, visited, v):\n    visited[v]=True\n\n    for adj in graph[v]:\n        if(visited[adj]==False):\n            dfs(graph,visited,adj)\n\ndef check_connected_graph(edges):\n    # graph :: tree\n    graph=defaultdict(list)\n    visited={key:False for key in range(1,len(edges)+1)}\n    \n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    # for key,val in graph.items():\n    #     print(key,val)\n\n    dfs(graph,visited,1)\n\n    for v in visited.values():\n        if v==False:\n            return False\n    return True", "entry_point": "check_connected_graph", "testcase": ["assert check_connected_graph([(1,2),(2,3),(3,4),(4,1)])==True", "assert check_connected_graph([(1,2),(2,3),(3,4),(4,5),(5,1)])==True", "assert check_connected_graph([(1,2),(2,3),(3,4),(5,6),(6,7)])==False"]}
{"seq_id": 14831454327, "instruction": "Write a python function to check if a given string is a valid date in the format \"MM/DD/YYYY\".", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_date(date_str):\n    pattern = r\"^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/([12][0-9]{3})$\"\n    if re.match(pattern, date_str):\n        month, day, year = map(int, date_str.split('/'))\n        if month == 2:\n            if day > 29 or (day == 29 and not is_leap_year(year)):\n                return False\n        elif month in [4, 6, 9, 11] and day > 30:\n            return False\n        return True\n    return False\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n```", "code": "import re\n\ndef is_valid_date(date_str):\n    pattern = r\"^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/([12][0-9]{3})$\"\n    if re.match(pattern, date_str):\n        month, day, year = map(int, date_str.split('/'))\n        if month == 2:\n            if day > 29 or (day == 29 and not is_leap_year(year)):\n                return False\n        elif month in [4, 6, 9, 11] and day > 30:\n            return False\n        return True\n    return False\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)", "entry_point": "is_valid_date", "testcase": ["assert is_valid_date(\"01/01/2000\") == True", "assert is_valid_date(\"02/29/2019\") == False", "assert is_valid_date(\"04/31/2020\") == False", "assert is_valid_date(\"12/31/2020\") == True"]}
{"seq_id": 13749422536, "instruction": "Write a function to find the number of times a specific number appears in a sorted list of integers.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\n\ndef search(nums: List[int], target: int) -> int:\n    if len(nums) == 0:\n        return 0\n    if nums[-1] < target or nums[0] > target:\n        return 0\n\n    left, right = 0, len(nums) - 1\n    mid = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            break\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if nums[mid] == target:\n        cnt = 1\n        # Left search\n        tmp = mid\n        while mid > 0:\n            mid -= 1\n            if nums[mid] == target:\n                cnt += 1\n            else:\n                break\n        # Right search, keeping the original mid value\n        mid = tmp\n        while mid < len(nums) - 1:\n            mid += 1\n            if nums[mid] == target:\n                cnt += 1\n            else:\n                break\n        return cnt\n    else:\n        return 0\n\n# Test cases\nassert search([5, 7, 7, 8, 8, 10], 8) == 2\nassert search([1, 4], 1) == 1\nassert search([5, 7, 7, 8, 8, 10], 6) == 0\n```", "code": "from typing import List\n\n\ndef search(nums: List[int], target: int) -> int:\n    if len(nums) == 0:\n        return 0\n    if nums[-1] < target or nums[0] > target:\n        return 0\n\n    left, right = 0, len(nums) - 1\n    mid = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            break\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if nums[mid] == target:\n        cnt = 1\n        # Left search\n        tmp = mid\n        while mid > 0:\n            mid -= 1\n            if nums[mid] == target:\n                cnt += 1\n            else:\n                break\n        # Right search, keeping the original mid value\n        mid = tmp\n        while mid < len(nums) - 1:\n            mid += 1\n            if nums[mid] == target:\n                cnt += 1\n            else:\n                break\n        return cnt\n    else:\n        return 0\n\n# Test cases\nassert search([5, 7, 7, 8, 8, 10], 8) == 2\nassert search([1, 4], 1) == 1\nassert search([5, 7, 7, 8, 8, 10], 6) == 0", "entry_point": "search", "testcase": ["assert search([5, 7, 7, 8, 8, 10], 8) == 2", "assert search([1, 4], 1) == 1", "assert search([5, 7, 7, 8, 8, 10], 6) == 0"]}
{"seq_id": 15170547273, "instruction": "Write a function to check if the given array contains any duplicates and return the count of duplicates for each element.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef count_duplicates(arr):\n    counter = Counter(arr)\n    duplicates = {k: v for k, v in counter.items() if v > 1}\n    return duplicates\n```", "code": "from collections import Counter\n\ndef count_duplicates(arr):\n    counter = Counter(arr)\n    duplicates = {k: v for k, v in counter.items() if v > 1}\n    return duplicates", "entry_point": "count_duplicates", "testcase": ["assert count_duplicates([1, 2, 3, 2, 1, 5, 6, 5, 5, 5]) == {1: 2, 2: 2, 5: 4}", "assert count_duplicates([1, 1, 1, 1, 1]) == {1: 5}", "assert count_duplicates([10, 20, 30, 40]) == {}"]}
{"seq_id": 32814046591, "instruction": "Write a function to find the top k frequent elements from a list of numbers.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef top_k_frequent(nums, k):\n    count = Counter(nums)\n    return [item for item, _ in count.most_common(k)]\n```", "code": "from collections import Counter\n\ndef top_k_frequent(nums, k):\n    count = Counter(nums)\n    return [item for item, _ in count.most_common(k)]", "entry_point": "top_k_frequent", "testcase": ["assert top_k_frequent([1,1,1,2,2,3], 2) == [1, 2]", "assert top_k_frequent([1], 1) == [1]", "assert top_k_frequent([4,1,-2,1,1,3,1,-2,4,2], 2) == [1, 4]"]}
{"seq_id": 43058492973, "instruction": "Write a function that takes a list of integers as input and returns a new list where each element is the sum of all other elements except the one at the current index. The function should not modify the original list.\n\nFor example:\n- Given the input list `[1, 2, 3, 4]`, the function should return `[9, 8, 7, 6]` because:\n  - At index 0: `2 + 3 + 4 = 9`\n  - At index 1: `1 + 3 + 4 = 8`\n  - At index 2: `1 + 2 + 4 = 7`\n  - At index 3: `1 + 2 + 3 = 6`", "output": "Here is the code to solve this problem: \n```python\ndef sum_except_self(nums):\n    total_sum = sum(nums)\n    result = [total_sum - num for num in nums]\n    return result\n```", "code": "def sum_except_self(nums):\n    total_sum = sum(nums)\n    result = [total_sum - num for num in nums]\n    return result", "entry_point": "sum_except_self", "testcase": ["assert sum_except_self([1, 2, 3, 4]) == [9, 8, 7, 6]", "assert sum_except_self([0, 0, 0, 0]) == [0, 0, 0, 0]", "assert sum_except_self([2, 3, 4, 5, 6]) == [18, 17, 16, 15, 14]", "assert sum_except_self([-1, -2, -3, -4]) == [-9, -8, -7, -6]"]}
{"seq_id": 26499006437, "instruction": "Write a function to find the kth smallest element in an unsorted array.", "output": "Here is the code to solve this problem: \n```python\ndef kthSmallest(arr, k):\n    arr.sort()\n    return arr[k-1]\n```", "code": "def kthSmallest(arr, k):\n    arr.sort()\n    return arr[k-1]", "entry_point": "kthSmallest", "testcase": ["assert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7", "assert kthSmallest([12, 3, 5, 7, 19], 2) == 5", "assert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10"]}
{"seq_id": 70487878630, "instruction": "Write a function that takes a list of integers as input and returns a list of tuples. Each tuple should contain the integer from the input list and its frequency in the list. The tuples should be sorted based on the frequency of the integers in descending order. If two integers have the same frequency, they should be sorted in ascending order based on their values.", "output": "Here is the code to solve this problem: \n```python\ndef frequency_sort(nums):\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n```", "code": "def frequency_sort(nums):\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return sorted(freq.items(), key=lambda x: (-x[1], x[0]))", "entry_point": "frequency_sort", "testcase": ["assert frequency_sort([4, 6, 2, 6, 4, 4, 6]) == [(4, 3), (6, 3), (2, 1)]", "assert frequency_sort([1, 2, 3, 3, 2, 1, 1, 3]) == [(1, 3), (3, 3), (2, 2)]", "assert frequency_sort([9, 8, 7, 8, 9, 9]) == [(9, 3), (8, 2), (7, 1)]"]}
{"seq_id": 70496528300, "instruction": "Write a python function to move all the negative numbers to the left of the list and all the non-negative numbers to the right of the list.", "output": "Here is the code to solve this problem: \n```python\ndef rearrange(nums):\n    left = []\n    right = []\n    for num in nums:\n        if num < 0:\n            left.append(num)\n        else:\n            right.append(num)\n    return left + right\n```", "code": "def rearrange(nums):\n    left = []\n    right = []\n    for num in nums:\n        if num < 0:\n            left.append(num)\n        else:\n            right.append(num)\n    return left + right", "entry_point": "rearrange", "testcase": ["assert rearrange([-1, 2, -3, 4, -5, 6]) == [-1, -3, -5, 2, 4, 6]", "assert rearrange([-1, -2, -3, -4, -5, 0]) == [-1, -2, -3, -4, -5, 0]", "assert rearrange([1, -2, 3, -4, -5, -6]) == [-2, -4, -5, -6, 1, 3]"]}
{"seq_id": 43290416162, "instruction": "Write a python function to perform the 'camelCase' conversion on a given string. Camel case is a practice of writing phrases without spaces, each word is capitalized except for the first one.", "output": "Here is the code to solve this problem: \n```python\ndef to_camel_case(s):\n    # split the string by spaces\n    words = s.split(' ')\n    \n    # capitalize each word except the first one\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n    \n    # join the words without spaces\n    camel_case_string = ''.join(words)\n    \n    return camel_case_string\n```", "code": "def to_camel_case(s):\n    # split the string by spaces\n    words = s.split(' ')\n    \n    # capitalize each word except the first one\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n    \n    # join the words without spaces\n    camel_case_string = ''.join(words)\n    \n    return camel_case_string", "entry_point": "to_camel_case", "testcase": ["assert to_camel_case(\"this is a string\") == \"thisIsAString\"", "assert to_camel_case(\"this is another string\") == \"thisIsAnotherString\"", "assert to_camel_case(\"one more test\") == \"oneMoreTest\""]}
{"seq_id": 25154673243, "instruction": "Write a python function to find the sum of squares of first n even natural numbers.", "output": "Here is the code to solve this problem: \n```python\ndef sum_square_even(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)\n```", "code": "def sum_square_even(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "entry_point": "sum_square_even", "testcase": ["assert sum_square_even(4) == 120", "assert sum_square_even(3) == 56", "assert sum_square_even(2) == 20"]}
{"seq_id": 41630548743, "instruction": "Write a function to rotate an array to the right by k steps, where k is non-negative.", "output": "Here is the code to solve this problem: \n```python\ndef rotate(nums, k):\n    k %= len(nums)\n    nums.reverse()\n    nums[:k] = reversed(nums[:k])\n    nums[k:] = reversed(nums[k:])\n    return nums\n```", "code": "def rotate(nums, k):\n    k %= len(nums)\n    nums.reverse()\n    nums[:k] = reversed(nums[:k])\n    nums[k:] = reversed(nums[k:])\n    return nums", "entry_point": "rotate", "testcase": ["assert rotate([1,2,3,4,5,6,7], 3) == [5,6,7,1,2,3,4]", "assert rotate([-1,-100,3,99], 2) == [3,99,-1,-100]", "assert rotate([1,2,3], 1) == [3,1,2]"]}
{"seq_id": 27453174286, "instruction": "Write a function to calculate the length of the longest common subsequence (LCS) between two strings.\n\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The longest common subsequence (LCS) problem is finding the longest subsequence present in both strings.", "output": "Here is the code to solve this problem: \n```python\ndef LCS_length(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[0 for x in range(n + 1)] for x in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    return L[m][n]\n```", "code": "def LCS_length(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[0 for x in range(n + 1)] for x in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    return L[m][n]", "entry_point": "LCS_length", "testcase": ["assert LCS_length(\"AGGTAB\", \"GXTXAYB\") == 4", "assert LCS_length(\"ABC\", \"DEF\") == 0", "assert LCS_length(\"ABCBDAB\", \"BDCABC\") == 4"]}
{"seq_id": 17838383818, "instruction": "Write a function to find the minimum number of operations needed to make a given string of '0's and '1's alternating.\n\nThe function should take a single argument, a string 's' consisting only of '0's and '1's. The goal is to make the string alternating, meaning no two adjacent characters are equal. You can perform operations where you change any '0' to '1' or vice versa.\n\nReturn the minimum number of operations needed to make 's' alternating.", "output": "Here is the code to solve this problem: \n```python\ndef min_operations_to_alternate(s):\n    if len(s) < 2:\n        return 0\n\n    tempS1 = []\n    tempS2 = []\n    countS1 = 0\n    countS2 = 0\n\n    for swi in range(len(s)):\n        tempS1.append(str(swi % 2))\n        if (swi % 2 == 0):\n            tempS2.append(\"1\")\n        else:\n            tempS2.append(\"0\")\n\n    for swi in range(len(s)):\n        if s[swi] != tempS1[swi]:\n            countS1 += 1\n        if s[swi] != tempS2[swi]:\n            countS2 += 1\n\n    return min(countS1, countS2)\n```", "code": "def min_operations_to_alternate(s):\n    if len(s) < 2:\n        return 0\n\n    tempS1 = []\n    tempS2 = []\n    countS1 = 0\n    countS2 = 0\n\n    for swi in range(len(s)):\n        tempS1.append(str(swi % 2))\n        if (swi % 2 == 0):\n            tempS2.append(\"1\")\n        else:\n            tempS2.append(\"0\")\n\n    for swi in range(len(s)):\n        if s[swi] != tempS1[swi]:\n            countS1 += 1\n        if s[swi] != tempS2[swi]:\n            countS2 += 1\n\n    return min(countS1, countS2)", "entry_point": "min_operations_to_alternate", "testcase": ["assert min_operations_to_alternate(\"1111\") == 2", "assert min_operations_to_alternate(\"10\") == 0", "assert min_operations_to_alternate(\"0100\") == 1", "assert min_operations_to_alternate(\"10010100\") == 3"]}
{"seq_id": 1659195529, "instruction": "Write a python function to check if the input string is a valid code format. The valid code format is defined as follows: \n- The code format starts with \"BEGIN OF ALGORITHM\"\n- The code format ends with \"END OF ALGORITHM\"\n- In between, it contains lines of code that start with \"#\" followed by a space and then the line description.\n- Each line of code ends with a new line (\"\\n\") except the last line.", "output": "Here is the code to solve this problem: \n```python\ndef check_valid_code(code):\n    lines = code.split(\"\\n\")\n    if lines[0] != \"BEGIN OF ALGORITHM\" or lines[-1] != \"END OF ALGORITHM\":\n        return False\n    for line in lines[1:-1]:\n        if not line.startswith(\"# \"):\n            return False\n    return True\n```", "code": "def check_valid_code(code):\n    lines = code.split(\"\\n\")\n    if lines[0] != \"BEGIN OF ALGORITHM\" or lines[-1] != \"END OF ALGORITHM\":\n        return False\n    for line in lines[1:-1]:\n        if not line.startswith(\"# \"):\n            return False\n    return True", "entry_point": "check_valid_code", "testcase": ["assert check_valid_code(\"# Not a valid start\") == False", "assert check_valid_code(\"BEGIN OF ALGORITHM\\n# This is a valid line\\n# This is another valid lineEND OF ALGORITHM\") == False", "assert check_valid_code(\"BEGIN OF ALGORITHM\\nNot a valid line\\nEND OF ALGORITHM\") == False", "assert check_valid_code(\"BEGIN OF ALGORITHM\\n# This is a valid line\\n# This is another valid line\\nEND OF ALGORITHM\") == True"]}
{"seq_id": 32382822196, "instruction": "Write a python function to find the maximum frequency of an element in an array.", "output": "Here is the code to solve this problem: \n```python\ndef max_frequency(arr,n):\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_freq = 0\n    max_freq_num = None\n    for key, value in freq.items():\n        if value > max_freq:\n            max_freq = value\n            max_freq_num = key\n    return max_freq_num\n```", "code": "def max_frequency(arr,n):\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_freq = 0\n    max_freq_num = None\n    for key, value in freq.items():\n        if value > max_freq:\n            max_freq = value\n            max_freq_num = key\n    return max_freq_num", "entry_point": "max_frequency", "testcase": ["assert max_frequency([1,2,3,1,2,1],6) == 1", "assert max_frequency([1,1,1,1,1,1,2,2,2,2,2,2],12) == 1", "assert max_frequency([2,3,3,1,1,4,3],7) == 3"]}
{"seq_id": 30980456599, "instruction": "Write a python function that takes a positive integer and returns the number of its digits.", "output": "Here is the code to solve this problem: \n```python\ndef count_digits(number):\n    if number == 0:\n        return 1\n    count = 0\n    while number > 0:\n        number = number // 10\n        count += 1\n    return count\n```", "code": "def count_digits(number):\n    if number == 0:\n        return 1\n    count = 0\n    while number > 0:\n        number = number // 10\n        count += 1\n    return count", "entry_point": "count_digits", "testcase": ["assert count_digits(1) == 1", "assert count_digits(4567) == 4", "assert count_digits(123) == 3"]}
{"seq_id": 73968160502, "instruction": "Write a python function to find the number of prime numbers in a given list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef prime_numbers(numbers):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in numbers:\n        if is_prime(num):\n            count += 1\n    return count\n```", "code": "def prime_numbers(numbers):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in numbers:\n        if is_prime(num):\n            count += 1\n    return count", "entry_point": "prime_numbers", "testcase": ["assert prime_numbers([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4", "assert prime_numbers([4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0", "assert prime_numbers([11, 13, 17, 19, 23, 29, 31, 37, 41]) == 9"]}
{"seq_id": 30417254248, "instruction": "Write a python function to find the number of ways to express n as the sum of 1, 3, and 4.", "output": "Here is the code to solve this problem: \n```python\ndef ways_to_express(n):\n    if n == 1 or n == 2:\n        return 1\n    if n == 3:\n        return 2\n    dp = [0] * (n + 1)\n    dp[1], dp[2], dp[3] = 1, 1, 2\n    dp[4] = 3\n    for i in range(5, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 3] + dp[i - 4]\n    return dp[n]\n```", "code": "def ways_to_express(n):\n    if n == 1 or n == 2:\n        return 1\n    if n == 3:\n        return 2\n    dp = [0] * (n + 1)\n    dp[1], dp[2], dp[3] = 1, 1, 2\n    dp[4] = 3\n    for i in range(5, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "entry_point": "ways_to_express", "testcase": ["assert ways_to_express(2) == 1", "assert ways_to_express(1) == 1", "assert ways_to_express(4) == 3", "assert ways_to_express(3) == 2"]}
{"seq_id": 15212777809, "instruction": "Write a function that takes a list of integers and returns the maximum sum of a sub-array with the length of k where all elements are distinct.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef max_distinct_subarray_sum(nums, k):\n    ans = 0\n    cnt = Counter(nums[: k - 1])\n    s = sum(nums[: k - 1])\n    for in_, out in zip(nums[k - 1 :], nums):\n        cnt[in_] += 1  # Move in element\n        s += in_\n        if len(cnt) == k:\n            ans = max(ans, s)\n        cnt[out] -= 1  # Move out element\n        if cnt[out] == 0:\n            del cnt[out]  # Remove element with count 0\n        s -= out\n    return ans\n```", "code": "from collections import Counter\n\ndef max_distinct_subarray_sum(nums, k):\n    ans = 0\n    cnt = Counter(nums[: k - 1])\n    s = sum(nums[: k - 1])\n    for in_, out in zip(nums[k - 1 :], nums):\n        cnt[in_] += 1  # Move in element\n        s += in_\n        if len(cnt) == k:\n            ans = max(ans, s)\n        cnt[out] -= 1  # Move out element\n        if cnt[out] == 0:\n            del cnt[out]  # Remove element with count 0\n        s -= out\n    return ans", "entry_point": "max_distinct_subarray_sum", "testcase": ["assert max_distinct_subarray_sum([1,5,4,2,9,9,9], 3) == 15", "assert max_distinct_subarray_sum([1,2,3,4,5], 2) == 9", "assert max_distinct_subarray_sum([4,4,4], 3) == 0"]}
{"seq_id": 38466561284, "instruction": "Write a python function to find the missing element in the second list that was originally in the first list.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n\n    for i in range(len(arr2)):\n        if (arr1[i] != arr2[i]):\n            return arr1[i]\n\n    return arr1[-1]\n```", "code": "def find_missing(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n\n    for i in range(len(arr2)):\n        if (arr1[i] != arr2[i]):\n            return arr1[i]\n\n    return arr1[-1]", "entry_point": "find_missing", "testcase": ["assert find_missing([10,10,11,11], [11,11,10]) == 10", "assert find_missing([5,5,7,7], [5,7,7]) == 5", "assert find_missing([1,2,2,3], [1,2,3]) == 2"]}
{"seq_id": 41925597723, "instruction": "Write a function to find the minimum number of jumps required to reach the end of the given array from the first element. Starting from the first element, you can jump according to the value at the current position in the array. The goal is to reach the last index in the minimum number of jumps.", "output": "Here is the code to solve this problem: \n```python\ndef min_jumps(arr):\n    if len(arr) <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n\n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n\n    for i in range(1, len(arr)):\n        if i == len(arr) - 1:\n            return jump\n\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n\n    return -1\n```", "code": "def min_jumps(arr):\n    if len(arr) <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n\n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n\n    for i in range(1, len(arr)):\n        if i == len(arr) - 1:\n            return jump\n\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n\n    return -1", "entry_point": "min_jumps", "testcase": ["assert min_jumps([0, 2, 3]) == -1", "assert min_jumps([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 1", "assert min_jumps([2, 3, 1, 1, 4]) == 2"]}
{"seq_id": 461894140, "instruction": "Write a python function to find the smallest substring that contains all the characters of a given pattern.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_Substring(s, pattern):\n    from collections import Counter\n    patternCount = Counter(pattern)\n    required = len(patternCount)\n    formed = 0\n    windowCounts = Counter()\n    left, right = 0, 0\n    minLength = float(\"inf\"), None, None\n\n    while right < len(s):\n        character = s[right]\n        windowCounts[character] += 1\n\n        if character in patternCount and windowCounts[character] == patternCount[character]:\n            formed += 1\n\n        while left <= right and formed == required:\n            character = s[left]\n\n            if right - left + 1 < minLength[0]:\n                minLength = (right - left + 1, left, right)\n\n            windowCounts[character] -= 1\n            if character in patternCount and windowCounts[character] < patternCount[character]:\n                formed -= 1\n\n            left += 1    \n\n        right += 1    \n\n    return \"\" if minLength[0] == float(\"inf\") else s[minLength[1] : minLength[2] + 1]\n```", "code": "def smallest_Substring(s, pattern):\n    from collections import Counter\n    patternCount = Counter(pattern)\n    required = len(patternCount)\n    formed = 0\n    windowCounts = Counter()\n    left, right = 0, 0\n    minLength = float(\"inf\"), None, None\n\n    while right < len(s):\n        character = s[right]\n        windowCounts[character] += 1\n\n        if character in patternCount and windowCounts[character] == patternCount[character]:\n            formed += 1\n\n        while left <= right and formed == required:\n            character = s[left]\n\n            if right - left + 1 < minLength[0]:\n                minLength = (right - left + 1, left, right)\n\n            windowCounts[character] -= 1\n            if character in patternCount and windowCounts[character] < patternCount[character]:\n                formed -= 1\n\n            left += 1    \n\n        right += 1    \n\n    return \"\" if minLength[0] == float(\"inf\") else s[minLength[1] : minLength[2] + 1]", "entry_point": "smallest_Substring", "testcase": ["assert smallest_Substring(\"hello\", \"eo\") == \"ello\"", "assert smallest_Substring(\"this is a test string\", \"tist\") == \"t stri\"", "assert smallest_Substring(\"abcdxyz\", \"xyz\") == \"xyz\""]}
{"seq_id": 6417691618, "instruction": "Write a python function to find the largest palindrome product formed by the product of two n-digit numbers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_palindrome_product(n):\n    max_num = 10**n - 1\n    min_num = 10**(n-1)\n    max_palindrome = 0\n\n    for i in range(max_num, min_num - 1, -1):\n        for j in range(i, min_num - 1, -1):\n            product = i * j\n            if product <= max_palindrome:\n                break\n            if str(product) == str(product)[::-1]:\n                max_palindrome = max(max_palindrome, product)\n\n    return max_palindrome\n```", "code": "def largest_palindrome_product(n):\n    max_num = 10**n - 1\n    min_num = 10**(n-1)\n    max_palindrome = 0\n\n    for i in range(max_num, min_num - 1, -1):\n        for j in range(i, min_num - 1, -1):\n            product = i * j\n            if product <= max_palindrome:\n                break\n            if str(product) == str(product)[::-1]:\n                max_palindrome = max(max_palindrome, product)\n\n    return max_palindrome", "entry_point": "largest_palindrome_product", "testcase": ["assert largest_palindrome_product(3) == 906609", "assert largest_palindrome_product(2) == 9009", "assert largest_palindrome_product(4) == 99000099"]}
{"seq_id": 12784208387, "instruction": "Write a function that takes a list of numbers and returns a new list with the numbers rounded to the nearest integer.", "output": "Here is the code to solve this problem: \n```python\ndef round_list(nums):\n    return list(map(round, nums))\n```", "code": "def round_list(nums):\n    return list(map(round, nums))", "entry_point": "round_list", "testcase": ["assert round_list([0.8, 1.4, 2.6, 3.5, 4.5]) == [1, 1, 3, 4, 4]", "assert round_list([1.2, 2.5, 3.7, 4.1]) == [1, 2, 4, 4]", "assert round_list([5.5, 6.3, 7.2, 8.9, 9.9]) == [6, 6, 7, 9, 10]"]}
{"seq_id": 4729052187, "instruction": "Write a function to find the maximum number in a list without using the built-in max function.", "output": "Here is the code to solve this problem: \n```python\ndef find_max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\n```", "code": "def find_max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num", "entry_point": "find_max", "testcase": ["assert find_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123", "assert find_max([1, 2, 3]) == 3", "assert find_max([10, 20, 30, 40, 50]) == 50"]}
{"seq_id": 11181615116, "instruction": "Write a Python function that finds the shortest path in a grid to change all 1's to 2's given that 2 represents a rotten orange that can rot any fresh orange (represented by 1) adjacent to it (up, down, left, right). We assume that the grid is completely surrounded by walls and there are no oranges outside the grid. If it's impossible to rot all the fresh oranges, the function should return -1.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\ndef oranges_rotting(grid):\n    m, n = len(grid), len(grid[0])\n    queue = deque()\n    fresh = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 2:\n                queue.append((i, j))\n            elif grid[i][j] == 1:\n                fresh += 1\n    \n    minutes = 0\n    while queue and fresh > 0:\n        for _ in range(len(queue)):\n            x, y = queue.popleft()\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1:\n                    grid[nx][ny] = 2\n                    fresh -= 1\n                    queue.append((nx, ny))\n        minutes += 1\n    return minutes if fresh == 0 else -1\n```", "code": "from collections import deque\ndef oranges_rotting(grid):\n    m, n = len(grid), len(grid[0])\n    queue = deque()\n    fresh = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 2:\n                queue.append((i, j))\n            elif grid[i][j] == 1:\n                fresh += 1\n    \n    minutes = 0\n    while queue and fresh > 0:\n        for _ in range(len(queue)):\n            x, y = queue.popleft()\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1:\n                    grid[nx][ny] = 2\n                    fresh -= 1\n                    queue.append((nx, ny))\n        minutes += 1\n    return minutes if fresh == 0 else -1", "entry_point": "oranges_rotting", "testcase": ["assert oranges_rotting([[2,1,1],[1,1,0],[0,1,1]]) == 4", "assert oranges_rotting([[2,1,1],[0,1,1],[1,0,1]]) == -1", "assert oranges_rotting([[0,2]]) == 0"]}
{"seq_id": 29663763251, "instruction": "Write a function to find the Kth smallest number in an unsorted list of numbers using a min heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef find_Kth_smallest(nums, k):\n    return sorted(nums)[k-1]\n\ndef find_Kth_smallest_heap(nums, k):\n    heapq.heapify(nums)\n    for _ in range(k-1):\n        heapq.heappop(nums)\n    return heapq.heappop(nums)\n\nassert find_Kth_smallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert find_Kth_smallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert find_Kth_smallest([7, 10, 4, 3, 20, 15], 6) == 20\n\nassert find_Kth_smallest_heap([7, 10, 4, 3, 20, 15], 3) == 7\nassert find_Kth_smallest_heap([7, 10, 4, 3, 20, 15], 4) == 10\nassert find_Kth_smallest_heap([7, 10, 4, 3, 20, 15], 6) == 20\n```", "code": "import heapq\n\ndef find_Kth_smallest(nums, k):\n    return sorted(nums)[k-1]\n\ndef find_Kth_smallest_heap(nums, k):\n    heapq.heapify(nums)\n    for _ in range(k-1):\n        heapq.heappop(nums)\n    return heapq.heappop(nums)\n\nassert find_Kth_smallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert find_Kth_smallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert find_Kth_smallest([7, 10, 4, 3, 20, 15], 6) == 20\n\nassert find_Kth_smallest_heap([7, 10, 4, 3, 20, 15], 3) == 7\nassert find_Kth_smallest_heap([7, 10, 4, 3, 20, 15], 4) == 10\nassert find_Kth_smallest_heap([7, 10, 4, 3, 20, 15], 6) == 20", "entry_point": "find_Kth_smallest", "testcase": ["assert find_Kth_smallest([7, 10, 4, 3, 20, 15], 4) == 10", "assert find_Kth_smallest([7, 10, 4, 3, 20, 15], 6) == 20", "assert find_Kth_smallest([7, 10, 4, 3, 20, 15], 3) == 7"]}
{"seq_id": 7530892125, "instruction": "Write a python function to find the smallest repeating cycle in a list.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_repeating_cycle(lst):\n    length = len(lst)\n    for i in range(1, length // 2 + 1):\n        if length % i == 0:\n            if lst[:i] * (length // i) == lst:\n                return lst[:i]\n    return lst\n```", "code": "def smallest_repeating_cycle(lst):\n    length = len(lst)\n    for i in range(1, length // 2 + 1):\n        if length % i == 0:\n            if lst[:i] * (length // i) == lst:\n                return lst[:i]\n    return lst", "entry_point": "smallest_repeating_cycle", "testcase": ["assert smallest_repeating_cycle([1, 2, 1, 2]) == [1, 2]", "assert smallest_repeating_cycle([1, 2, 3, 1, 2, 3]) == [1, 2, 3]", "assert smallest_repeating_cycle([1, 2, 3, 4]) == [1, 2, 3, 4]"]}
{"seq_id": 13687370825, "instruction": "Write a function to find the middle node of a singly linked list.", "output": "Here is the code to solve this problem: \n```python\nclass ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef find_middle_node(values):\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow.value\n```", "code": "class ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\ndef find_middle_node(values):\n    if not values:\n        return None\n    head = ListNode(values[0])\n    current = head\n    for value in values[1:]:\n        current.next = ListNode(value)\n        current = current.next\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow.value", "entry_point": "find_middle_node", "testcase": ["assert find_middle_node([1, 2, 3, 4, 5, 6]) == 4", "assert find_middle_node([1, 2, 3, 4, 5]) == 3", "assert find_middle_node([1]) == 1"]}
{"seq_id": 18268108738, "instruction": "Write a function to find the minimum number of swaps required to sort a list.", "output": "Here is the code to solve this problem: \n```python\ndef minSwaps(arr):\n    n = len(arr)\n    ans = 0\n    temp = arr.copy()\n    temp.sort()\n    visited = {i:False for i in range(n)}\n    for i in range(n):\n        if visited[i] or temp[i] == arr[i]:\n            continue\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = temp.index(arr[j])\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans\n```", "code": "def minSwaps(arr):\n    n = len(arr)\n    ans = 0\n    temp = arr.copy()\n    temp.sort()\n    visited = {i:False for i in range(n)}\n    for i in range(n):\n        if visited[i] or temp[i] == arr[i]:\n            continue\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = temp.index(arr[j])\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans", "entry_point": "minSwaps", "testcase": ["assert minSwaps([10,19,6,3,5]) == 2", "assert minSwaps([2,3,4,5,1]) == 4", "assert minSwaps([1,3,5,2,4,6,7]) == 3"]}
{"seq_id": 20438564450, "instruction": "Write a function to find the nth number in the Lucas sequence, where the sequence starts with 2 and 1, and each subsequent number is the sum of the two preceding ones.", "output": "Here is the code to solve this problem: \n```python\ndef lucas_number(n): \n    a, b = 2, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n```", "code": "def lucas_number(n): \n    a, b = 2, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "entry_point": "lucas_number", "testcase": ["assert lucas_number(5) == 11", "assert lucas_number(2) == 3", "assert lucas_number(4) == 7"]}
{"seq_id": 3966571927, "instruction": "Write a python function to find the longest subarray with equal number of 0's and 1's.", "output": "Here is the code to solve this problem: \n```python\ndef longest_Subarray(arr):\n    sum = 0\n    max_length = 0\n    d = dict()\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sum -= 1\n        else:\n            sum += 1\n        if sum == 0:\n            max_length = i + 1\n        if sum in d:\n            max_length = max(max_length, i - d[sum])\n        else:\n            d[sum] = i\n    return max_length\n```", "code": "def longest_Subarray(arr):\n    sum = 0\n    max_length = 0\n    d = dict()\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sum -= 1\n        else:\n            sum += 1\n        if sum == 0:\n            max_length = i + 1\n        if sum in d:\n            max_length = max(max_length, i - d[sum])\n        else:\n            d[sum] = i\n    return max_length", "entry_point": "longest_Subarray", "testcase": ["assert longest_Subarray([0, 1, 0, 0, 1, 1, 1]) == 6", "assert longest_Subarray([1, 0, 1, 1, 1, 0, 0]) == 6", "assert longest_Subarray([0, 1, 0, 1, 1, 1, 0]) == 4"]}
{"seq_id": 25398272016, "instruction": "Write a python function to find the nth prime number using the Sieve of Eratosthenes algorithm.", "output": "Here is the code to solve this problem: \n```python\nfrom math import sqrt\n\ndef find_Nth_Prime(n):\n    pn = n\n\n    sieve_size = 110000\n    sieve = list(range(sieve_size))\n    sieve[0] = None\n    sieve[1] = None\n\n    pi = 1\n    for i in range(sieve_size):\n        if sieve[i] == None:\n            continue\n        pi += 1\n        j = 2\n        while i*j < sieve_size:\n            sieve[i*j] = None\n            j += 1\n    \n    if pi < pn:\n        return f'Only {pi} primes out of {pn} found. Increase sieve_size.'\n    else:\n        sieve = [x for x in sieve if x is not None]\n        return sieve[pn-1]\n\nif __name__ == '__main__':\n    print(find_Nth_Prime(10001))\n```", "code": "from math import sqrt\n\ndef find_Nth_Prime(n):\n    pn = n\n\n    sieve_size = 110000\n    sieve = list(range(sieve_size))\n    sieve[0] = None\n    sieve[1] = None\n\n    pi = 1\n    for i in range(sieve_size):\n        if sieve[i] == None:\n            continue\n        pi += 1\n        j = 2\n        while i*j < sieve_size:\n            sieve[i*j] = None\n            j += 1\n    \n    if pi < pn:\n        return f'Only {pi} primes out of {pn} found. Increase sieve_size.'\n    else:\n        sieve = [x for x in sieve if x is not None]\n        return sieve[pn-1]\n\nif __name__ == '__main__':\n    print(find_Nth_Prime(10001))", "entry_point": "find_Nth_Prime", "testcase": ["assert find_Nth_Prime(3) == 5", "assert find_Nth_Prime(1) == 2", "assert find_Nth_Prime(4) == 7", "assert find_Nth_Prime(5) == 11", "assert find_Nth_Prime(2) == 3", "assert find_Nth_Prime(10001) == 104743"]}
{"seq_id": 39139600396, "instruction": "Write a Python function that checks if a given string is a valid hexadecimal number. A valid hexadecimal number starts with \"0x\" followed by one or more hexadecimal digits (0-9, a-f, A-F).", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_hexadecimal(hex_str):\n    pattern = r'^0x[0-9a-fA-F]+$'\n    if re.match(pattern, hex_str):\n        return True\n    else:\n        return False\n```", "code": "import re\n\ndef is_valid_hexadecimal(hex_str):\n    pattern = r'^0x[0-9a-fA-F]+$'\n    if re.match(pattern, hex_str):\n        return True\n    else:\n        return False", "entry_point": "is_valid_hexadecimal", "testcase": ["assert is_valid_hexadecimal(\"0x10\") == True", "assert is_valid_hexadecimal(\"0xGHIJ\") == False", "assert is_valid_hexadecimal(\"12345\") == False", "assert is_valid_hexadecimal(\"0x\") == False", "assert is_valid_hexadecimal(\"0x1A3F\") == True"]}
{"seq_id": 71868535319, "instruction": "Write a function to find the maximum and minimum numbers in a given list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef max_min(list1):\n    max_num = max(list1)\n    min_num = min(list1)\n    return (max_num, min_num)\n```", "code": "def max_min(list1):\n    max_num = max(list1)\n    min_num = min(list1)\n    return (max_num, min_num)", "entry_point": "max_min", "testcase": ["assert max_min([1,2,3]) == (3,1)", "assert max_min([4,5,6]) == (6,4)", "assert max_min([7,8,9]) == (9,7)"]}
{"seq_id": 26627809689, "instruction": "Develop a python function to perform a binary search on a sorted list to find a specific element. The function should return the index of the element if found, otherwise it should return -1.", "output": "Here is the code to solve this problem: \n```python\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n\n        mid = (high + low) // 2\n\n        # If x is greater, ignore left half\n        if arr[mid] < x:\n            low = mid + 1\n\n        # If x is smaller, ignore right half\n        elif arr[mid] > x:\n            high = mid - 1\n\n        # x is present at mid\n        else:\n            return mid\n\n    # If we reach here, then the element was not present\n    return -1\n```", "code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n\n        mid = (high + low) // 2\n\n        # If x is greater, ignore left half\n        if arr[mid] < x:\n            low = mid + 1\n\n        # If x is smaller, ignore right half\n        elif arr[mid] > x:\n            high = mid - 1\n\n        # x is present at mid\n        else:\n            return mid\n\n    # If we reach here, then the element was not present\n    return -1", "entry_point": "binary_search", "testcase": ["assert binary_search([1,3,5,7,9],6) == -1", "assert binary_search([1,3,5,7,9],5) == 2", "assert binary_search([1,2,3,4,5,6,7,8,9,10],1) == 0", "assert binary_search([1,2,3,4,5,6,7,8,9,10],10) == 9"]}
{"seq_id": 17035217841, "instruction": "Write a function to find the kth largest element in an unsorted list using a min-heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef find_kth_largest(nums, k):\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap[0]\n\nassert find_kth_largest([3,2,1,5,6,4], 2) == 5\nassert find_kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert find_kth_largest([3,2,1], 2) == 2\n```", "code": "import heapq\n\ndef find_kth_largest(nums, k):\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap[0]\n\nassert find_kth_largest([3,2,1,5,6,4], 2) == 5\nassert find_kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert find_kth_largest([3,2,1], 2) == 2", "entry_point": "find_kth_largest", "testcase": ["assert find_kth_largest([3,2,1], 2) == 2", "assert find_kth_largest([3,2,1,5,6,4], 2) == 5", "assert find_kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4"]}
{"seq_id": 28375550852, "instruction": "Write a python function to find the maximum frequency of any valid substring of a given string. A valid substring is one that has the same number of opening and closing parentheses, and all the opening parentheses come before the closing ones.", "output": "Here is the code to solve this problem: \n```python\ndef max_freq_substring(s):\n    freq = {}\n    max_freq = 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            freq[s[i-count:i+1]] = freq.get(s[i-count:i+1], 0) + 1\n            max_freq = max(max_freq, freq[s[i-count:i+1]])\n        elif count < 0:\n            count = 0\n    return max_freq\n```", "code": "def max_freq_substring(s):\n    freq = {}\n    max_freq = 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            freq[s[i-count:i+1]] = freq.get(s[i-count:i+1], 0) + 1\n            max_freq = max(max_freq, freq[s[i-count:i+1]])\n        elif count < 0:\n            count = 0\n    return max_freq", "entry_point": "max_freq_substring", "testcase": ["assert max_freq_substring(\"()\") == 1", "assert max_freq_substring(\"((()))\") == 1", "assert max_freq_substring(\"()()\") == 2"]}
{"seq_id": 71883348824, "instruction": "Write a python function to find the height of a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        return max(left_height, right_height) + 1\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        return max(left_height, right_height) + 1", "entry_point": "height", "testcase": ["assert height(None) == 0", "assert height(TreeNode(1, TreeNode(2), TreeNode(3))) == 2", "assert height(TreeNode(1)) == 1"]}
{"seq_id": 42713806806, "instruction": "Write a function to find the smallest repeating pattern in a given string and return the number of times the pattern is repeated to form the original string. If no repeating pattern is found, return 1.", "output": "Here is the code to solve this problem: \n```python\ndef find_smallest_pattern(s):\n    pattern_length = 1\n    while pattern_length <= len(s) // 2:\n        if len(s) % pattern_length == 0:\n            pattern = s[:pattern_length]\n            if pattern * (len(s) // pattern_length) == s:\n                return len(s) // pattern_length\n        pattern_length += 1\n    return 1\n```", "code": "def find_smallest_pattern(s):\n    pattern_length = 1\n    while pattern_length <= len(s) // 2:\n        if len(s) % pattern_length == 0:\n            pattern = s[:pattern_length]\n            if pattern * (len(s) // pattern_length) == s:\n                return len(s) // pattern_length\n        pattern_length += 1\n    return 1", "entry_point": "find_smallest_pattern", "testcase": ["assert find_smallest_pattern(\"ababab\") == 3", "assert find_smallest_pattern(\"abcd\") == 1", "assert find_smallest_pattern(\"abcabcabc\") == 3"]}
{"seq_id": 41690022918, "instruction": "Write a function to find the number of unique numbers in a list.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique(list_nums):\n   unique_nums = set(list_nums)\n   count_unique = len(unique_nums)\n   return count_unique\n```", "code": "def count_unique(list_nums):\n   unique_nums = set(list_nums)\n   count_unique = len(unique_nums)\n   return count_unique", "entry_point": "count_unique", "testcase": ["assert count_unique([1, 2, 3, 5, 7, 8, 9, 10])==8", "assert count_unique([1, 2, 2, 3, 3, 3, 4, 5, 5])==5", "assert count_unique([1, 1, 1, 1, 1, 1])==1"]}
{"seq_id": 28870963526, "instruction": "Write a function to calculate the area of a sector of a circle given the radius and the angle in degrees. The function should return the area rounded to 2 decimal places.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef circle_sector_area(radius, angle):\n    \"\"\"\n    Calculate the area of a sector of a circle.\n    \n    :param radius: Radius of the circle\n    :param angle: Angle of the sector in degrees\n    :return: Area of the sector rounded to 2 decimal places\n    \"\"\"\n    if radius <= 0 or angle < 0 or angle > 360:\n        return \"Invalid input\"\n    area = (angle / 360) * math.pi * math.pow(radius, 2)\n    return round(area, 2)\n```", "code": "import math\n\ndef circle_sector_area(radius, angle):\n    \"\"\"\n    Calculate the area of a sector of a circle.\n    \n    :param radius: Radius of the circle\n    :param angle: Angle of the sector in degrees\n    :return: Area of the sector rounded to 2 decimal places\n    \"\"\"\n    if radius <= 0 or angle < 0 or angle > 360:\n        return \"Invalid input\"\n    area = (angle / 360) * math.pi * math.pow(radius, 2)\n    return round(area, 2)", "entry_point": "circle_sector_area", "testcase": ["assert circle_sector_area(5, 90) == 19.63", "assert circle_sector_area(10, 360) == 314.16", "assert circle_sector_area(3, 180) == 14.14"]}
{"seq_id": 24434954005, "instruction": "Write a python function to find the longest palindromic substring in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_Palindrome(s):\n    if len(s) == 0:\n        return 0\n    maxLen = 1\n    start = 0\n    for i in range(len(s)):\n        if i - maxLen >= 1 and s[i - maxLen - 1 : i + 1] == s[i - maxLen - 1 : i + 1][::-1]:\n            start = i - maxLen - 1\n            maxLen += 2\n            continue\n        if i - maxLen >= 0 and s[i - maxLen : i + 1] == s[i - maxLen : i + 1][::-1]:\n            start = i - maxLen\n            maxLen += 1\n    return s[start : start + maxLen]\n```", "code": "def longest_Palindrome(s):\n    if len(s) == 0:\n        return 0\n    maxLen = 1\n    start = 0\n    for i in range(len(s)):\n        if i - maxLen >= 1 and s[i - maxLen - 1 : i + 1] == s[i - maxLen - 1 : i + 1][::-1]:\n            start = i - maxLen - 1\n            maxLen += 2\n            continue\n        if i - maxLen >= 0 and s[i - maxLen : i + 1] == s[i - maxLen : i + 1][::-1]:\n            start = i - maxLen\n            maxLen += 1\n    return s[start : start + maxLen]", "entry_point": "longest_Palindrome", "testcase": ["assert longest_Palindrome(\"babad\") == \"bab\"", "assert longest_Palindrome(\"cbbd\") == \"bb\"", "assert longest_Palindrome(\"ac\") == \"a\"", "assert longest_Palindrome(\"a\") == \"a\""]}
{"seq_id": 15664196855, "instruction": "Write a python function to find the number of ways to express a number as a sum of consecutive positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef count_consecutive_sums(n):\n    count = 0\n    i = 1\n    while i * (i - 1) // 2 < n:\n        if (n - i * (i - 1) // 2) % i == 0:\n            count += 1\n        i += 1\n    return count\n```", "code": "def count_consecutive_sums(n):\n    count = 0\n    i = 1\n    while i * (i - 1) // 2 < n:\n        if (n - i * (i - 1) // 2) % i == 0:\n            count += 1\n        i += 1\n    return count", "entry_point": "count_consecutive_sums", "testcase": ["assert count_consecutive_sums(5) == 2", "assert count_consecutive_sums(9) == 3", "assert count_consecutive_sums(15) == 4"]}
{"seq_id": 71754608584, "instruction": "Write a python function to find the length of the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring_length(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length\n```", "code": "def longest_substring_length(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length", "entry_point": "longest_substring_length", "testcase": ["assert longest_substring_length('bbbbb') == 1", "assert longest_substring_length('abcabcbb') == 3", "assert longest_substring_length('pwwkew') == 3"]}
{"seq_id": 29543500337, "instruction": "Write a function to find the student with the highest average score from a list of student-score pairs.", "output": "Here is the code to solve this problem: \n```python\ndef find_top_student(scores):\n    top_score = 0\n    top_student = None\n\n    for student, score in scores:\n        if score > top_score:\n            top_score = score\n            top_student = student\n\n    return (top_student, top_score)\n```", "code": "def find_top_student(scores):\n    top_score = 0\n    top_student = None\n\n    for student, score in scores:\n        if score > top_score:\n            top_score = score\n            top_student = student\n\n    return (top_student, top_score)", "entry_point": "find_top_student", "testcase": ["assert find_top_student([(1,91),(2,88),(3,90),(4,95),(5,89)])==(4,95)", "assert find_top_student([(1,92),(2,85),(3,88),(4,93),(5,91)])==(4,93)", "assert find_top_student([(1,89),(2,94),(3,92),(4,90),(5,88)])==(2,94)"]}
{"seq_id": 9722223043, "instruction": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).", "output": "Here is the code to solve this problem: \n```python\ndef hamming_weight(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```", "code": "def hamming_weight(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "entry_point": "hamming_weight", "testcase": ["assert hamming_weight(128)==1", "assert hamming_weight(11)==3", "assert hamming_weight(4294967293)==31"]}
{"seq_id": 12545836259, "instruction": "Write a python function to find the longest common substring between two given strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_substring(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    result = 0\n    end = 0\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n                if L[i][j] > result:\n                    result = L[i][j]\n                    end = i - 1\n            else:\n                L[i][j] = 0\n    return str1[end-result+1:end+1]\n```", "code": "def longest_common_substring(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    result = 0\n    end = 0\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n                if L[i][j] > result:\n                    result = L[i][j]\n                    end = i - 1\n            else:\n                L[i][j] = 0\n    return str1[end-result+1:end+1]", "entry_point": "longest_common_substring", "testcase": ["assert longest_common_substring(\"abcdef\", \"xyz\") == \"\"", "assert longest_common_substring(\"abcdxyz\", \"xyzabcd\") == \"abcd\"", "assert longest_common_substring(\"123456\", \"654321\") == \"1\""]}
{"seq_id": 4985320888, "instruction": "Write a function to find the intersection of two lists, returning the common elements. If an element appears more than once in both lists, it should appear in the result as many times as it appears in the list with the minimum frequency.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef findCommonElements(list1, list2):\n    counter1 = Counter(list1)\n    counter2 = Counter(list2)\n    commonElements = []\n    for element in set(list1) & set(list2):\n        minFrequency = min(counter1[element], counter2[element])\n        commonElements.extend([element] * minFrequency)\n    return commonElements\n```", "code": "from collections import Counter\n\ndef findCommonElements(list1, list2):\n    counter1 = Counter(list1)\n    counter2 = Counter(list2)\n    commonElements = []\n    for element in set(list1) & set(list2):\n        minFrequency = min(counter1[element], counter2[element])\n        commonElements.extend([element] * minFrequency)\n    return commonElements", "entry_point": "findCommonElements", "testcase": ["assert findCommonElements([1,2,2,3,4], [2,2,3,5]) == [2,2,3]", "assert findCommonElements([10,20,20,30,40], [20,20,30,50,60]) == [20,20,30]", "assert findCommonElements([1,2,3,4,5], [6,7,8]) == []"]}
{"seq_id": 30828973422, "instruction": "Write a python function to calculate the minimum number of operations to make two strings equal. You can perform three types of operations: insert a character, delete a character, or replace a character. The function should return the minimum number of operations required.", "output": "Here is the code to solve this problem: \n```python\ndef minimum_operations(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j],    # Delete\n                                   dp[i][j-1],    # Insert\n                                   dp[i-1][j-1])  # Replace\n    return dp[m][n]\n```", "code": "def minimum_operations(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j],    # Delete\n                                   dp[i][j-1],    # Insert\n                                   dp[i-1][j-1])  # Replace\n    return dp[m][n]", "entry_point": "minimum_operations", "testcase": ["assert minimum_operations(\"horse\", \"ros\") == 3", "assert minimum_operations(\"intention\", \"execution\") == 5", "assert minimum_operations(\"abc\", \"abc\") == 0"]}
{"seq_id": 26830625188, "instruction": "Write a python function that takes a list of numbers and returns a list of all possible permutations of those numbers.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef permutations_list(lst):\n    return [list(permutation) for permutation in permutations(lst)]\n```", "code": "from itertools import permutations\n\ndef permutations_list(lst):\n    return [list(permutation) for permutation in permutations(lst)]", "entry_point": "permutations_list", "testcase": ["assert permutations_list([1,2]) == [[1, 2], [2, 1]]", "assert permutations_list([1]) == [[1]]", "assert permutations_list([1,2,3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"]}
{"seq_id": 12260566393, "instruction": "Write a function to find the longest common suffix in a list of strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_suffix(strs):\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    flag = False\n    index = 0\n    suffix = \"\"\n    for i in range(len(strs[0])-1, -1, -1):\n        for element in strs[1:]:\n            if len(element)-1-index < 0:\n                flag = True\n                break\n            if strs[0][-1-index] != element[-1-index]:\n                flag = True\n        if flag is True:\n            flag = False\n            break\n        else:\n            suffix = strs[0][-1-index] + suffix\n        index += 1\n    return suffix\n```", "code": "def longest_common_suffix(strs):\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    flag = False\n    index = 0\n    suffix = \"\"\n    for i in range(len(strs[0])-1, -1, -1):\n        for element in strs[1:]:\n            if len(element)-1-index < 0:\n                flag = True\n                break\n            if strs[0][-1-index] != element[-1-index]:\n                flag = True\n        if flag is True:\n            flag = False\n            break\n        else:\n            suffix = strs[0][-1-index] + suffix\n        index += 1\n    return suffix", "entry_point": "longest_common_suffix", "testcase": ["assert longest_common_suffix([\"prefix\", \"suffix\", \"affix\"])==\"fix\"", "assert longest_common_suffix([\"hello\", \"world\", \"python\", \"java\"])==\"\" ", "assert longest_common_suffix([\"hello\", \"hello\", \"hello\"])==\"hello\"", "assert longest_common_suffix([])==\"\"", "assert longest_common_suffix([\"abc\"])==\"abc\""]}
{"seq_id": 25200591417, "instruction": "Write a python function to find all the permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef find_permutations(str1):\n    if len(str1) == 1:\n        return [str1]\n    permutations = []\n    for i in range(len(str1)):\n        char = str1[i]\n        remaining_str = str1[:i] + str1[i+1:]\n        for permutation in find_permutations(remaining_str):\n            permutations.append(char + permutation)\n    return permutations\n```", "code": "def find_permutations(str1):\n    if len(str1) == 1:\n        return [str1]\n    permutations = []\n    for i in range(len(str1)):\n        char = str1[i]\n        remaining_str = str1[:i] + str1[i+1:]\n        for permutation in find_permutations(remaining_str):\n            permutations.append(char + permutation)\n    return permutations", "entry_point": "find_permutations", "testcase": ["assert find_permutations(\"abc\") == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']", "assert find_permutations(\"a\") == ['a']", "assert find_permutations(\"ab\") == ['ab', 'ba']"]}
{"seq_id": 72612415722, "instruction": "Write a python function to find the Fibonacci number at a given position using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef fib_recursion(n):\n    if n <= 1:\n        return n\n    else:\n        return fib_recursion(n-1) + fib_recursion(n-2)\n```", "code": "def fib_recursion(n):\n    if n <= 1:\n        return n\n    else:\n        return fib_recursion(n-1) + fib_recursion(n-2)", "entry_point": "fib_recursion", "testcase": ["assert fib_recursion(6) == 8", "assert fib_recursion(1) == 1", "assert fib_recursion(0) == 0", "assert fib_recursion(10) == 55"]}
{"seq_id": 20064628222, "instruction": "Write a Python function that takes two lists of intervals and returns the union of these intervals. An interval is represented as a pair of integers [start, end]. The union of two intervals is the smallest interval that contains both.", "output": "Here is the code to solve this problem: \n```python\ndef union_intervals(A, B):\n    intervals = sorted(A + B, key=lambda x: x[0])\n    result = []\n    for interval in intervals:\n        if not result or result[-1][1] < interval[0]:\n            result.append(interval)\n        else:\n            result[-1][1] = max(result[-1][1], interval[1])\n    return result\n```", "code": "def union_intervals(A, B):\n    intervals = sorted(A + B, key=lambda x: x[0])\n    result = []\n    for interval in intervals:\n        if not result or result[-1][1] < interval[0]:\n            result.append(interval)\n        else:\n            result[-1][1] = max(result[-1][1], interval[1])\n    return result", "entry_point": "union_intervals", "testcase": ["assert union_intervals([[1, 3], [5, 8]], [[2, 4], [6, 10]]) == [[1, 4], [5, 10]]", "assert union_intervals([[1, 10]], [[2, 9]]) == [[1, 10]]", "assert union_intervals([[1, 2], [3, 5], [8, 10]], [[4, 6], [9, 12]]) == [[1, 2], [3, 6], [8, 12]]"]}
{"seq_id": 34742643858, "instruction": "Write a function that takes a string and a list of strings, and returns the number of times the string appears in the list, ignoring case sensitivity.", "output": "Here is the code to solve this problem: \n```python\ndef count_string(lst, str):\n    count = 0\n    str_lower = str.lower()\n    for s in lst:\n        if s.lower() == str_lower:\n            count += 1\n    return count\n```", "code": "def count_string(lst, str):\n    count = 0\n    str_lower = str.lower()\n    for s in lst:\n        if s.lower() == str_lower:\n            count += 1\n    return count", "entry_point": "count_string", "testcase": ["assert count_string([\"Hello\", \"hello\", \"WORLD\", \"world\"], \"hello\") == 2", "assert count_string([\"Python\", \"python\", \"PYTHON\", \"java\"], \"python\") == 3", "assert count_string([\"apple\", \"banana\", \"APPLE\", \"BANANA\", \"grape\"], \"apple\") == 2"]}
{"seq_id": 36669844108, "instruction": "Write a function to find the missing numbers in a given range based on a list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing_numbers(nums, lower, upper):\n    result = []\n    for i in range(lower, upper+1):\n        if i not in nums:\n            result.append(i)\n    return result\n```", "code": "def find_missing_numbers(nums, lower, upper):\n    result = []\n    for i in range(lower, upper+1):\n        if i not in nums:\n            result.append(i)\n    return result", "entry_point": "find_missing_numbers", "testcase": ["assert find_missing_numbers([3, 5, 6, 10], 1, 12) == [1, 2, 4, 7, 8, 9, 11, 12]", "assert find_missing_numbers([1, 3, 5, 7], 0, 10) == [0, 2, 4, 6, 8, 9, 10]", "assert find_missing_numbers([2, 4, 6, 8], 1, 10) == [1, 3, 5, 7, 9, 10]"]}
{"seq_id": 18306215396, "instruction": "Write a Python function to find the maximum product of three numbers from a list.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_product(lst):\n    if len(lst) < 3:\n        raise ValueError(\"List must contain at least 3 elements.\")\n    lst.sort()\n    return max(lst[0] * lst[1] * lst[-1], lst[-1] * lst[-2] * lst[-3])\n```", "code": "def find_max_product(lst):\n    if len(lst) < 3:\n        raise ValueError(\"List must contain at least 3 elements.\")\n    lst.sort()\n    return max(lst[0] * lst[1] * lst[-1], lst[-1] * lst[-2] * lst[-3])", "entry_point": "find_max_product", "testcase": ["assert find_max_product([1, 2, 3, 4, -5]) == 24", "assert find_max_product([1, 2, 3, 4, 5]) == 60", "assert find_max_product([-1, -2, -3, -4]) == -6", "assert find_max_product([1, 10, 2, 6, 5, 3]) == 300"]}
{"seq_id": 30658156628, "instruction": "Write a function to remove all occurrences of a given value from a list and return the modified list.", "output": "Here is the code to solve this problem: \n```python\ndef remove_value(lst, value):\n    return [x for x in lst if x != value]\n```", "code": "def remove_value(lst, value):\n    return [x for x in lst if x != value]", "entry_point": "remove_value", "testcase": ["assert remove_value([5, 6, 7, 8, 9], 10) == [5, 6, 7, 8, 9]", "assert remove_value([1, 1, 1, 1, 1], 1) == []", "assert remove_value([1, 2, 3, 2, 4], 2) == [1, 3, 4]"]}
{"seq_id": 18883963016, "instruction": "Write a python function to find the number of islands in a given 2D grid. An island is formed by connected 1s (representing land) and is surrounded by water (0s). Assume all four edges of the grid are surrounded by water.", "output": "Here is the code to solve this problem: \n```python\ndef number_of_islands(grid):\n    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return\n        grid[i][j] = 0\n        dfs(i-1, j)\n        dfs(i+1, j)\n        dfs(i, j-1)\n        dfs(i, j+1)\n        \n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    return count\n```", "code": "def number_of_islands(grid):\n    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return\n        grid[i][j] = 0\n        dfs(i-1, j)\n        dfs(i+1, j)\n        dfs(i, j-1)\n        dfs(i, j+1)\n        \n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    return count", "entry_point": "number_of_islands", "testcase": ["assert number_of_islands([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 1, 1]]) == 2", "assert number_of_islands([[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 1", "assert number_of_islands([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]) == 3"]}
{"seq_id": 13281583167, "instruction": "Given a sorted integer array `nums` and a target value `target`, write a function to search for the target in the array. If the target exists in the array, return its index. If the target does not exist, return the index where it would be if it were inserted in order.", "output": "Here is the code to solve this problem: \n```python\ndef searchInsert(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```", "code": "def searchInsert(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left", "entry_point": "searchInsert", "testcase": ["assert searchInsert([1, 3, 5, 6], 2) == 1", "assert searchInsert([1, 3, 5, 6], 5) == 2", "assert searchInsert([1, 3, 5, 6], 7) == 4", "assert searchInsert([1, 3, 5, 6], 0) == 0"]}
{"seq_id": 20644857012, "instruction": "Write a function to convert an integer to its English word representation for numbers 1 to 999.", "output": "Here is the code to solve this problem: \n```python\ndef convert_to_words(n):\n    ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n    tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n\n    def helper(num):\n        if num < 10:\n            return ones[num]\n        elif num < 20:\n            return teens[num - 10]\n        elif num < 100:\n            return tens[num // 10] + (\" \" + ones[num % 10] if num % 10 != 0 else \"\")\n        else:\n            return ones[num // 100] + \" Hundred \" + helper(num % 100)\n\n    if n == 0:\n        return \"Zero\"\n    result = \"\"\n    i = 0\n    while n > 0:\n        if n % 1000 != 0:\n            result = helper(n % 1000) + \" \" + thousands[i] + \" \" + result\n        n //= 1000\n        i += 1\n    return result.strip()\n\nprint(convert_to_words(123))  # One Hundred Twenty Three\nprint(convert_to_words(12))  # Twelve\nprint(convert_to_words(101))  # One Hundred One\nprint(convert_to_words(1009))  # One Thousand Nine\n```", "code": "def convert_to_words(n):\n    ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n    tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n\n    def helper(num):\n        if num < 10:\n            return ones[num]\n        elif num < 20:\n            return teens[num - 10]\n        elif num < 100:\n            return tens[num // 10] + (\" \" + ones[num % 10] if num % 10 != 0 else \"\")\n        else:\n            return ones[num // 100] + \" Hundred \" + helper(num % 100)\n\n    if n == 0:\n        return \"Zero\"\n    result = \"\"\n    i = 0\n    while n > 0:\n        if n % 1000 != 0:\n            result = helper(n % 1000) + \" \" + thousands[i] + \" \" + result\n        n //= 1000\n        i += 1\n    return result.strip()\n\nprint(convert_to_words(123))  # One Hundred Twenty Three\nprint(convert_to_words(12))  # Twelve\nprint(convert_to_words(101))  # One Hundred One\nprint(convert_to_words(1009))  # One Thousand Nine", "entry_point": "convert_to_words", "testcase": ["assert convert_to_words(1009) == \"One Thousand Nine\"", "assert convert_to_words(123) == \"One Hundred Twenty Three\"", "assert convert_to_words(101) == \"One Hundred One\"", "assert convert_to_words(12) == \"Twelve\""]}
{"seq_id": 37293141128, "instruction": "Write a python function to find all unique permutations of a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef permutation(nums):\n    res = []\n    def backtrack(nums, tmp):\n        if not nums:\n            res.append(tmp)\n        else:\n            for i in range(len(nums)):\n                backtrack(nums[:i]+nums[i+1:], tmp+[nums[i]])\n    backtrack(nums, [])\n    return res\n```", "code": "def permutation(nums):\n    res = []\n    def backtrack(nums, tmp):\n        if not nums:\n            res.append(tmp)\n        else:\n            for i in range(len(nums)):\n                backtrack(nums[:i]+nums[i+1:], tmp+[nums[i]])\n    backtrack(nums, [])\n    return res", "entry_point": "permutation", "testcase": ["assert permutation([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]", "assert permutation([0,1]) == [[0,1],[1,0]]", "assert permutation([1]) == [[1]]"]}
{"seq_id": 32291968065, "instruction": "Write a function to find the nth heptagonal number.", "output": "Here is the code to solve this problem: \n```python\ndef nth_heptagonal(n):\n    return n * (5 * n - 3) // 2\n```", "code": "def nth_heptagonal(n):\n    return n * (5 * n - 3) // 2", "entry_point": "nth_heptagonal", "testcase": ["assert nth_heptagonal(1) == 1", "assert nth_heptagonal(2) == 7", "assert nth_heptagonal(5) == 55", "assert nth_heptagonal(4) == 34", "assert nth_heptagonal(3) == 18"]}
{"seq_id": 846546778, "instruction": "Write a python function to find the kth smallest prime number in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(n):\n    if n == 2 or n == 3: return True\n    if n < 2 or n%2 == 0: return False\n    if n < 9: return True\n    if n%3 == 0: return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n%f == 0: return False\n        if n%(f+2) == 0: return False\n        f +=6\n    return True\n\ndef kth_smallest_prime(lst, k):\n    primes = [x for x in lst if is_prime(x)]\n    if len(primes) < k:\n        return \"No prime number in the list\"\n    primes.sort()\n    return primes[k-1]\n```", "code": "def is_prime(n):\n    if n == 2 or n == 3: return True\n    if n < 2 or n%2 == 0: return False\n    if n < 9: return True\n    if n%3 == 0: return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n%f == 0: return False\n        if n%(f+2) == 0: return False\n        f +=6\n    return True\n\ndef kth_smallest_prime(lst, k):\n    primes = [x for x in lst if is_prime(x)]\n    if len(primes) < k:\n        return \"No prime number in the list\"\n    primes.sort()\n    return primes[k-1]", "entry_point": "kth_smallest_prime", "testcase": ["assert kth_smallest_prime([2, 3, 5, 7, 11, 13], 3) == 5", "assert kth_smallest_prime([29, 37, 2, 5, 7, 11, 13], 4) == 11", "assert kth_smallest_prime([4, 6, 8, 10, 12], 2) == \"No prime number in the list\"", "assert kth_smallest_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31], 1) == 2"]}
{"seq_id": 19151827728, "instruction": "Write a function to calculate the number of unique binary search trees (BSTs) that store values 1...n.", "output": "Here is the code to solve this problem: \n```python\ndef num_trees(n):\n    if n <= 1:\n        return 1\n    dp = [1, 1]\n    for i in range(2, n + 1):\n        dp.append(0)\n        for j in range(0, i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n```", "code": "def num_trees(n):\n    if n <= 1:\n        return 1\n    dp = [1, 1]\n    for i in range(2, n + 1):\n        dp.append(0)\n        for j in range(0, i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]", "entry_point": "num_trees", "testcase": ["assert num_trees(1) == 1", "assert num_trees(4) == 14", "assert num_trees(3) == 5"]}
{"seq_id": 31042374200, "instruction": "Write a python function to find the sum of the largest contiguous subarray within a one-dimensional array of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_sum(arr):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n \n    return max_so_far\n```", "code": "def find_largest_sum(arr):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n \n    return max_so_far", "entry_point": "find_largest_sum", "testcase": ["assert find_largest_sum([1]) == 1", "assert find_largest_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6", "assert find_largest_sum([-1, -2, -3, -4]) == -1"]}
{"seq_id": 5691605211, "instruction": "Write a python function that checks if a given string is a palindrome or not using a stack data structure. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward or forward.", "output": "Here is the code to solve this problem: \n```python\ndef is_palindrome_stack(s):\n    s = list(s)\n    stack = []\n\n    for char in s:\n        stack.append(char)\n\n    for char in s:\n        if char != stack.pop():\n            return False\n    return True\n```", "code": "def is_palindrome_stack(s):\n    s = list(s)\n    stack = []\n\n    for char in s:\n        stack.append(char)\n\n    for char in s:\n        if char != stack.pop():\n            return False\n    return True", "entry_point": "is_palindrome_stack", "testcase": ["assert is_palindrome_stack('python') == False", "assert is_palindrome_stack('radar') == True", "assert is_palindrome_stack('racecar') == True"]}
{"seq_id": 22357598446, "instruction": "Write a function to return the symmetric difference between two sets of integers. The symmetric difference of two sets is the set of elements which are in either of the sets and not in their intersection.", "output": "Here is the code to solve this problem: \n```python\ndef symmetric_diff(set1, set2):\n    return set1.symmetric_difference(set2)\n```", "code": "def symmetric_diff(set1, set2):\n    return set1.symmetric_difference(set2)", "entry_point": "symmetric_diff", "testcase": ["assert symmetric_diff({1, 2, 3}, {3, 4, 5}) == {1, 2, 4, 5}", "assert symmetric_diff({10, 20, 30}, {30, 40, 50}) == {10, 20, 40, 50}", "assert symmetric_diff({1, 2, 3}, {4, 5, 6}) == {1, 2, 3, 4, 5, 6}"]}
{"seq_id": 41442201729, "instruction": "Write a function to find the roots of a quadratic equation.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef quadratic_roots(a, b, c):\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return (-b / (2 * a),) * 2\n    else:\n        sqrt_delta = math.sqrt(delta)\n        return ((-b + sqrt_delta) / (2 * a), (-b - sqrt_delta) / (2 * a))\n```", "code": "import math\n\ndef quadratic_roots(a, b, c):\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return (-b / (2 * a),) * 2\n    else:\n        sqrt_delta = math.sqrt(delta)\n        return ((-b + sqrt_delta) / (2 * a), (-b - sqrt_delta) / (2 * a))", "entry_point": "quadratic_roots", "testcase": ["assert quadratic_roots(1, -3, 2) == (2, 1)", "assert quadratic_roots(1, -2, 1) == (1, 1)", "assert quadratic_roots(1, 0, -4) == (2, -2)"]}
{"seq_id": 2604054137, "instruction": "Write a python function to find the minimum number of perfect square numbers which sum to 'n'.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef find_min_squares(n):\n    if n <= 0:\n        return 0\n    queue = deque([n])\n    depth = 0\n    while queue:\n        depth += 1\n        size = len(queue)\n        for i in range(size):\n            curt = queue.popleft()\n            for j in range(1, curt):\n                if j * j > curt:\n                    break\n                res = curt - j * j\n                \n                if res == 0:\n                    return depth\n                else:\n                    queue.append(res)\n    return depth\n```", "code": "from collections import deque\n\ndef find_min_squares(n):\n    if n <= 0:\n        return 0\n    queue = deque([n])\n    depth = 0\n    while queue:\n        depth += 1\n        size = len(queue)\n        for i in range(size):\n            curt = queue.popleft()\n            for j in range(1, curt):\n                if j * j > curt:\n                    break\n                res = curt - j * j\n                \n                if res == 0:\n                    return depth\n                else:\n                    queue.append(res)\n    return depth", "entry_point": "find_min_squares", "testcase": ["assert find_min_squares(12) == 3", "assert find_min_squares(13) == 2", "assert find_min_squares(100) == 1"]}
{"seq_id": 16875419916, "instruction": "Write a python function that takes a string of parentheses and returns the minimum number of parentheses that need to be removed to make the string valid. A valid string of parentheses is one where every opening parenthesis \"(\" is matched with a closing parenthesis \")\".", "output": "Here is the code to solve this problem: \n```python\ndef minRemoveToMakeValid(s):\n    left = 0\n    right = 0\n    count = 0\n    for i in s:\n        if i == \"(\":\n            left += 1\n        elif i == \")\":\n            right += 1\n            if right > left:\n                count += 1\n                right -= 1\n    count += abs(right - left)\n    return count\n```", "code": "def minRemoveToMakeValid(s):\n    left = 0\n    right = 0\n    count = 0\n    for i in s:\n        if i == \"(\":\n            left += 1\n        elif i == \")\":\n            right += 1\n            if right > left:\n                count += 1\n                right -= 1\n    count += abs(right - left)\n    return count", "entry_point": "minRemoveToMakeValid", "testcase": ["assert minRemoveToMakeValid(\"())()\") == 1", "assert minRemoveToMakeValid(\")()(\") == 2", "assert minRemoveToMakeValid(\"((()))\") == 0"]}
{"seq_id": 4718241453, "instruction": "Write a python function to find the largest element in a given list using binary search algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef binary_search_largest(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n            \n    return nums[left]\n```", "code": "def binary_search_largest(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n            \n    return nums[left]", "entry_point": "binary_search_largest", "testcase": ["assert binary_search_largest([1,2,3,4,5]) == 5", "assert binary_search_largest([5,4,3,2,1]) == 5", "assert binary_search_largest([1]) == 1"]}
{"seq_id": 70268916033, "instruction": "Write a function that takes a list of integers and returns a new list with each integer replaced by the next largest prime number.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef next_prime(n):\n    while True:\n        n += 1\n        if is_prime(n):\n            return n\n\ndef next_largest_primes(nums):\n    return [next_prime(n) for n in nums]\n```", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef next_prime(n):\n    while True:\n        n += 1\n        if is_prime(n):\n            return n\n\ndef next_largest_primes(nums):\n    return [next_prime(n) for n in nums]", "entry_point": "next_largest_primes", "testcase": ["assert next_largest_primes([14, 17, 18])==[17, 19, 19]", "assert next_largest_primes([3, 5, 8])==[5, 7, 11]", "assert next_largest_primes([22, 23, 29])==[23, 29, 31]"]}
{"seq_id": 13285465457, "instruction": "Write a function that takes a 2D grid as input and returns the number of closed islands in the grid. A closed island is defined as a group of '0's (land) that is completely surrounded by '1's (water). The grid is represented as a list of lists, where each inner list represents a row of the grid.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef closedIsland(grid: List[List[int]]) -> int:\n    def dfs(r, c, val):\n        if grid[r][c] == 0:\n            grid[r][c] = val\n            for i in range(4):\n                nb_r, nb_c = r + dirs[i], c + dirs[i + 1]\n                if 0 <= nb_r < rows and 0 <= nb_c < cols:\n                    dfs(nb_r, nb_c, val)\n\n    dirs = [0, 1, 0, -1, 0]\n    res, rows, cols = 0, len(grid), len(grid[0])\n\n    for r in range(rows):\n        if grid[r][0] == 0:\n            dfs(r, 0, 2)\n        if grid[r][cols - 1] == 0:\n            dfs(r, cols - 1, 2)\n\n    for c in range(cols):\n        if grid[0][c] == 0:\n            dfs(0, c, 2)\n        if grid[rows - 1][c] == 0:\n            dfs(rows - 1, c, 2)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 0:\n                res += 1\n                dfs(r, c, 2)\n    return res\n```", "code": "from typing import List\n\ndef closedIsland(grid: List[List[int]]) -> int:\n    def dfs(r, c, val):\n        if grid[r][c] == 0:\n            grid[r][c] = val\n            for i in range(4):\n                nb_r, nb_c = r + dirs[i], c + dirs[i + 1]\n                if 0 <= nb_r < rows and 0 <= nb_c < cols:\n                    dfs(nb_r, nb_c, val)\n\n    dirs = [0, 1, 0, -1, 0]\n    res, rows, cols = 0, len(grid), len(grid[0])\n\n    for r in range(rows):\n        if grid[r][0] == 0:\n            dfs(r, 0, 2)\n        if grid[r][cols - 1] == 0:\n            dfs(r, cols - 1, 2)\n\n    for c in range(cols):\n        if grid[0][c] == 0:\n            dfs(0, c, 2)\n        if grid[rows - 1][c] == 0:\n            dfs(rows - 1, c, 2)\n\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 0:\n                res += 1\n                dfs(r, c, 2)\n    return res", "entry_point": "closedIsland", "testcase": ["assert closedIsland([[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]) == 2", "assert closedIsland([[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]) == 1", "assert closedIsland([[1,1,1,1,1,1,1],[1,0,0,0,0,0,1],[1,0,1,1,1,0,1],[1,0,1,0,1,0,1],[1,0,1,1,1,0,1],[1,0,0,0,0,0,1],[1,1,1,1,1,1,1]]) == 2"]}
{"seq_id": 32568720919, "instruction": "Write a python function to find all possible permutations of a given list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef all_permutations(nums):\n    result = []\n    path = []\n    \n    def backtracking(nums, startIndex):\n        if len(path) == len(nums):\n            result.append(path[:])\n            return\n        for i in range(len(nums)):\n            if nums[i] in path:\n                continue\n            path.append(nums[i])\n            backtracking(nums, i+1)\n            path.pop()\n    backtracking(nums, 0)\n    return result\n```", "code": "def all_permutations(nums):\n    result = []\n    path = []\n    \n    def backtracking(nums, startIndex):\n        if len(path) == len(nums):\n            result.append(path[:])\n            return\n        for i in range(len(nums)):\n            if nums[i] in path:\n                continue\n            path.append(nums[i])\n            backtracking(nums, i+1)\n            path.pop()\n    backtracking(nums, 0)\n    return result", "entry_point": "all_permutations", "testcase": ["assert all_permutations([1,2,3])==[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "assert all_permutations([1,2])==[[1, 2], [2, 1]]", "assert all_permutations([1])==[[1]]"]}
{"seq_id": 28848854390, "instruction": "Write a function to find the sum of all elements in the diagonal of a given square matrix.", "output": "Here is the code to solve this problem: \n```python\ndef matrix_diagonal_sum(matrix):\n    result = 0\n    for i in range(len(matrix)):\n        result += matrix[i][i]\n    return result\n```", "code": "def matrix_diagonal_sum(matrix):\n    result = 0\n    for i in range(len(matrix)):\n        result += matrix[i][i]\n    return result", "entry_point": "matrix_diagonal_sum", "testcase": ["assert matrix_diagonal_sum([[1,2,3],[4,5,6],[7,8,9]])==15", "assert matrix_diagonal_sum([[5]])==5", "assert matrix_diagonal_sum([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]])==4"]}
{"seq_id": 69832951871, "instruction": "Write a function to find the longest consecutive substring in a given string of lowercase letters.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consecutive_substring(s):\n    if len(s) == 0:\n        return \"\"\n    \n    max_substring = s[0]\n    current_substring = s[0]\n    \n    for i in range(1, len(s)):\n        if ord(s[i]) == ord(s[i-1]) + 1:\n            current_substring += s[i]\n            if len(current_substring) > len(max_substring):\n                max_substring = current_substring\n        else:\n            current_substring = s[i]\n    \n    return max_substring\n```", "code": "def longest_consecutive_substring(s):\n    if len(s) == 0:\n        return \"\"\n    \n    max_substring = s[0]\n    current_substring = s[0]\n    \n    for i in range(1, len(s)):\n        if ord(s[i]) == ord(s[i-1]) + 1:\n            current_substring += s[i]\n            if len(current_substring) > len(max_substring):\n                max_substring = current_substring\n        else:\n            current_substring = s[i]\n    \n    return max_substring", "entry_point": "longest_consecutive_substring", "testcase": ["assert longest_consecutive_substring(\"abcde\")==\"abcde\"", "assert longest_consecutive_substring(\"zyx\")==\"z\"", "assert longest_consecutive_substring(\"abca\")==\"abc\""]}
{"seq_id": 977546157, "instruction": "Write a function to find the top view of a binary tree. The top view of a tree is the set of nodes seen when the tree is viewed from the top. Given a binary tree, return the values of the nodes that form the top view of the tree from left to right.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\nclass Tree:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef top_view(root):\n    if not root:\n        return []\n    res = []\n    index_que = deque()\n    index_que.append(0)\n    res_que = deque()\n    res_que.append(root.val)\n    que = deque()\n    que.append((root, 0))\n\n    while que:\n        node, idx = que.popleft()\n        if idx < index_que[0]:\n            index_que.appendleft(idx)\n            res_que.appendleft(node.val)\n        if idx > index_que[-1]:\n            index_que.append(idx)\n            res_que.append(node.val)\n        if node.left:\n            que.append((node.left, idx - 1))\n        if node.right:\n            que.append((node.right, idx + 1))\n\n    return list(res_que)\n\n# Test case\ntree = Tree(1, Tree(2, Tree(4), Tree(5, Tree(8), Tree(9))), Tree(3, Tree(6), Tree(7)))\nassert top_view(tree) == [4, 2, 1, 3, 7]\n```", "code": "from collections import deque\n\nclass Tree:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef top_view(root):\n    if not root:\n        return []\n    res = []\n    index_que = deque()\n    index_que.append(0)\n    res_que = deque()\n    res_que.append(root.val)\n    que = deque()\n    que.append((root, 0))\n\n    while que:\n        node, idx = que.popleft()\n        if idx < index_que[0]:\n            index_que.appendleft(idx)\n            res_que.appendleft(node.val)\n        if idx > index_que[-1]:\n            index_que.append(idx)\n            res_que.append(node.val)\n        if node.left:\n            que.append((node.left, idx - 1))\n        if node.right:\n            que.append((node.right, idx + 1))\n\n    return list(res_que)\n\n# Test case\ntree = Tree(1, Tree(2, Tree(4), Tree(5, Tree(8), Tree(9))), Tree(3, Tree(6), Tree(7)))\nassert top_view(tree) == [4, 2, 1, 3, 7]", "entry_point": "top_view", "testcase": ["# Tree:", "#        1", "#   4   5 6   7", "#    / \\   / \\", "#     2     3", "#     8   9", "#      / \\", "", "#      /   \\", "assert top_view(tree) == [4, 2, 1, 3, 7]"]}
{"seq_id": 2279736766, "instruction": "Write a python function to reverse the digits of a given number and check if the reversed number is a prime number. If the reversed number is a prime number, return it. Otherwise, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef reverse_prime(n):\n    reversed_num = int(str(n)[::-1])\n    if is_prime(reversed_num):\n        return reversed_num\n    return -1\n```", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef reverse_prime(n):\n    reversed_num = int(str(n)[::-1])\n    if is_prime(reversed_num):\n        return reversed_num\n    return -1", "entry_point": "reverse_prime", "testcase": ["assert reverse_prime(13) == 31", "assert reverse_prime(234) == -1", "assert reverse_prime(765) == -1"]}
{"seq_id": 7677031296, "instruction": "Write a function to find the number of ways to reach the last cell of a grid with obstacles using dynamic programming.", "output": "Here is the code to solve this problem: \n```python\ndef num_ways(obstacleGrid):\n    m = len(obstacleGrid)\n    n = len(obstacleGrid[0])\n    dp = [[0]*n for _ in range(m)]\n    dp[0][0] = 1 - obstacleGrid[0][0]\n    for i in range(m):\n        for j in range(n):\n            if obstacleGrid[i][j] == 1:\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n    return dp[-1][-1]\n```", "code": "def num_ways(obstacleGrid):\n    m = len(obstacleGrid)\n    n = len(obstacleGrid[0])\n    dp = [[0]*n for _ in range(m)]\n    dp[0][0] = 1 - obstacleGrid[0][0]\n    for i in range(m):\n        for j in range(n):\n            if obstacleGrid[i][j] == 1:\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n    return dp[-1][-1]", "entry_point": "num_ways", "testcase": ["assert num_ways([[0,0,0],[0,1,0],[0,0,0]]) == 2", "assert num_ways([[0,1],[0,0]]) == 1", "assert num_ways([[1,0]]) == 0"]}
{"seq_id": 74572408345, "instruction": "Write a function to find the minimum number of coins required to make a given amount. You have an infinite number of coins of each denomination. The denominations are given in a list.", "output": "Here is the code to solve this problem: \n```python\ndef min_coins(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if i >= coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1\n```", "code": "def min_coins(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if i >= coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1", "entry_point": "min_coins", "testcase": ["assert min_coins([2], 3) == -1", "assert min_coins([1], 0) == 0", "assert min_coins([1, 2, 5], 11) == 3"]}
{"seq_id": 26924963426, "instruction": "Write a function that takes a two-dimensional list as an input parameter and returns a new list with the original list's elements in reverse order for each row.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_rows(matrix):\n    reversed_matrix = []\n    for row in matrix:\n        reversed_matrix.append(row[::-1])\n    return reversed_matrix\n```", "code": "def reverse_rows(matrix):\n    reversed_matrix = []\n    for row in matrix:\n        reversed_matrix.append(row[::-1])\n    return reversed_matrix", "entry_point": "reverse_rows", "testcase": ["assert reverse_rows([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]", "assert reverse_rows([[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]) == [[\"c\", \"b\", \"a\"], [\"e\", \"d\"]]", "assert reverse_rows([[10, 20], [30, 40, 50], [60]]) == [[20, 10], [50, 40, 30], [60]]"]}
{"seq_id": 42803623619, "instruction": "Write a function `find_next_prime` that takes an integer `n` as input and returns the next prime number greater than `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef find_next_prime(n):\n    prime_candidate = n + 1\n    while True:\n        if is_prime(prime_candidate):\n            return prime_candidate\n        prime_candidate += 1\n```", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef find_next_prime(n):\n    prime_candidate = n + 1\n    while True:\n        if is_prime(prime_candidate):\n            return prime_candidate\n        prime_candidate += 1", "entry_point": "find_next_prime", "testcase": ["assert find_next_prime(10) == 11", "assert find_next_prime(100) == 101", "assert find_next_prime(17) == 19", "assert find_next_prime(14) == 17"]}
{"seq_id": 7388650310, "instruction": "Write a Python function to find the number of ways to tile a 2xn board using 2x1 tiles.", "output": "Here is the code to solve this problem: \n```python\ndef number_of_ways(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return number_of_ways(n-1) + number_of_ways(n-2)\n```", "code": "def number_of_ways(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return number_of_ways(n-1) + number_of_ways(n-2)", "entry_point": "number_of_ways", "testcase": ["assert number_of_ways(4) == 5", "assert number_of_ways(3) == 3", "assert number_of_ways(5) == 8"]}
{"seq_id": 74159859384, "instruction": "Write a python function to find the largest palindrome made from the product of two n-digit numbers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_Palindrome(n) :\n    def is_Palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    max_Palindrome = 0\n    for i in range(10**n-1, 10**(n-1)-1, -1):\n        for j in range(i, 10**(n-1)-1, -1):\n            product = i * j\n            if product <= max_Palindrome:\n                break\n            if is_Palindrome(product):\n                max_Palindrome = product\n    return max_Palindrome\n```", "code": "def largest_Palindrome(n) :\n    def is_Palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    max_Palindrome = 0\n    for i in range(10**n-1, 10**(n-1)-1, -1):\n        for j in range(i, 10**(n-1)-1, -1):\n            product = i * j\n            if product <= max_Palindrome:\n                break\n            if is_Palindrome(product):\n                max_Palindrome = product\n    return max_Palindrome", "entry_point": "largest_Palindrome", "testcase": ["assert largest_Palindrome(2) == 9009", "assert largest_Palindrome(1) == 9", "assert largest_Palindrome(3) == 906609"]}
{"seq_id": 35778999655, "instruction": "Create a function to simulate the movement of a snake in a grid. The snake starts at position (0, 0) and moves in the direction specified by the input string. If the snake hits the boundary of the grid or itself, return 'Game Over'. If the input string is empty, return 'Snake is still alive'. The grid size is 10x10.", "output": "Here is the code to solve this problem: \n```python\ndef snake_movement(directions):\n    x, y = 0, 0\n    visited = {(0, 0)}\n    direction_map = {'U': (-1, 0), 'D': (1, 0), 'L': (0, -1), 'R': (0, 1)}\n\n    for direction in directions:\n        dx, dy = direction_map[direction]\n        x += dx\n        y += dy\n        if x < 0 or x >= 10 or y < 0 or y >= 10 or (x, y) in visited:\n            return 'Game Over'\n        visited.add((x, y))\n\n    return 'Snake is still alive'\n```", "code": "def snake_movement(directions):\n    x, y = 0, 0\n    visited = {(0, 0)}\n    direction_map = {'U': (-1, 0), 'D': (1, 0), 'L': (0, -1), 'R': (0, 1)}\n\n    for direction in directions:\n        dx, dy = direction_map[direction]\n        x += dx\n        y += dy\n        if x < 0 or x >= 10 or y < 0 or y >= 10 or (x, y) in visited:\n            return 'Game Over'\n        visited.add((x, y))\n\n    return 'Snake is still alive'", "entry_point": "snake_movement", "testcase": ["assert snake_movement(\"RRRR\") == 'Snake is still alive'", "assert snake_movement(\"\") == 'Snake is still alive'", "assert snake_movement(\"URDL\") == 'Game Over'", "assert snake_movement(\"UUUUUUU\") == 'Game Over'"]}
{"seq_id": 39085873135, "instruction": "Write a function to find the maximum product of three integers in an array.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_three(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n```", "code": "def max_product_three(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])", "entry_point": "max_product_three", "testcase": ["assert max_product_three([1, 2, 3]) == 6", "assert max_product_three([-10, -10, 5, 2]) == 500", "assert max_product_three([1, 2, 3, 4]) == 24"]}
{"seq_id": 15771949054, "instruction": "Write a function that takes two lists of integers, nums1 and nums2, and merges them into a single sorted list in-place. The first list, nums1, has a size m+n, where the first m elements denote the original elements of nums1 and the remaining n elements are set to 0 and should be ignored. The second list, nums2, has a size n containing n elements. Merge nums1 and nums2 into nums1 so that nums1 becomes a sorted list.", "output": "Here is the code to solve this problem: \n```python\ndef merge_arrays(nums1, m, nums2, n):\n    # Truncate nums1 to its original size\n    nums1[:m+n] = nums1[:m]\n    # Extend nums1 with nums2\n    nums1.extend(nums2)\n    # Sort the list in-place\n    nums1[:m+n] = sorted(nums1[:m+n])\n    return nums1\n```", "code": "def merge_arrays(nums1, m, nums2, n):\n    # Truncate nums1 to its original size\n    nums1[:m+n] = nums1[:m]\n    # Extend nums1 with nums2\n    nums1.extend(nums2)\n    # Sort the list in-place\n    nums1[:m+n] = sorted(nums1[:m+n])\n    return nums1", "entry_point": "merge_arrays", "testcase": ["assert merge_arrays([1,2,3,0,0,0], 3, [2,5,6], 3) == [1,2,2,3,5,6]", "assert merge_arrays([0], 0, [1], 1) == [1]", "assert merge_arrays([1], 1, [], 0) == [1]"]}
{"seq_id": 12452044756, "instruction": "Write a Python function to find the number of unique quadruplets in the array that sum up to a given target value.", "output": "Here is the code to solve this problem: \n```python\ndef find_quadruplets(nums, target):\n    nums.sort()\n    results = []\n    n = len(nums)\n    for i in range(n-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, n-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left, right = j+1, n-1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    results.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1\n    return results\n```", "code": "def find_quadruplets(nums, target):\n    nums.sort()\n    results = []\n    n = len(nums)\n    for i in range(n-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, n-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left, right = j+1, n-1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    results.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1\n    return results", "entry_point": "find_quadruplets", "testcase": ["assert find_quadruplets([2, 2, 2, 2, 2], 8) == [[2, 2, 2, 2]]", "assert find_quadruplets([1, 2, 4, 5, 6], 20) == []", "assert find_quadruplets([1, 0, -1, 0, -2, 2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]"]}
{"seq_id": 27655454147, "instruction": "Write a python function to find the maximum value that can be obtained from a given array of coins by picking exactly k coins. The coins can only be picked from either ends of the array.", "output": "Here is the code to solve this problem: \n```python\ndef pick_coins(coins, k):\n    n = len(coins)\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i < j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i-1][j-1] + coins[i-1], dp[i-1][j])\n    return dp[n][k]\n```", "code": "def pick_coins(coins, k):\n    n = len(coins)\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i < j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i-1][j-1] + coins[i-1], dp[i-1][j])\n    return dp[n][k]", "entry_point": "pick_coins", "testcase": ["assert pick_coins([5, 3, 1, 4, 2], 3) == 12", "assert pick_coins([10, 20, 30, 40, 50], 2) == 90", "assert pick_coins([1, 2, 3, 4, 5], 3) == 12"]}
{"seq_id": 36790547482, "instruction": "Write a function to convert a given comma-separated string into a list and reverse the order of the list elements.", "output": "Here is the code to solve this problem: \n```python\ndef str_to_list_and_reverse(s):\n  str_list = s.split(',')\n  str_list.reverse()\n  return str_list\n```", "code": "def str_to_list_and_reverse(s):\n  str_list = s.split(',')\n  str_list.reverse()\n  return str_list", "entry_point": "str_to_list_and_reverse", "testcase": ["assert str_to_list_and_reverse(\"apple,banana,grape,mango\") == ['mango', 'grape', 'banana', 'apple']", "assert str_to_list_and_reverse(\"dog,cat,bird,fish\") == ['fish', 'bird', 'cat', 'dog']", "assert str_to_list_and_reverse(\"1,2,3,4,5\") == ['5', '4', '3', '2', '1']"]}
{"seq_id": 74267622390, "instruction": "Write a python function to check if there are three distinct elements in a given list that sum up to a specific target value.", "output": "Here is the code to solve this problem: \n```python\ndef threeSum(nums, target):\n    nums.sort()\n    n = len(nums)\n    for i in range(n):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n```", "code": "def threeSum(nums, target):\n    nums.sort()\n    n = len(nums)\n    for i in range(n):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "entry_point": "threeSum", "testcase": ["assert threeSum([0, -1, 2, -3, 1], 0) == True", "assert threeSum([1, 2, 3, 4, 5], 9) == True", "assert threeSum([1, 2, 3, 4, 5], 15) == False"]}
{"seq_id": 74017687914, "instruction": "Write a function to find the minimum number of platforms required at a railway station such that no train waits. Trains arrive and depart at the times provided in two lists. The arrival times list contains the arrival times of the trains, and the departure times list contains the departure times of the trains. Both lists are in chronological order.", "output": "Here is the code to solve this problem: \n```python\ndef minimum_platform(n, arrival, departure):\n    time = []\n    i, j = 0, 0\n    while i < len(arrival) and j < len(departure):\n        if departure[j] < arrival[i]:\n            time.append(-1)\n            j += 1\n        else:\n            time.append(1)\n            i += 1\n    while j < len(departure):\n        time.append(-1)\n        j += 1\n    while i < len(arrival):\n        time.append(1)\n        i += 1\n    maxcount = 0\n    count = 0\n    for value in time:\n        count += value\n        if count > maxcount:\n            maxcount = count\n    if count > maxcount:\n        maxcount = count\n    return maxcount\n```", "code": "def minimum_platform(n, arrival, departure):\n    time = []\n    i, j = 0, 0\n    while i < len(arrival) and j < len(departure):\n        if departure[j] < arrival[i]:\n            time.append(-1)\n            j += 1\n        else:\n            time.append(1)\n            i += 1\n    while j < len(departure):\n        time.append(-1)\n        j += 1\n    while i < len(arrival):\n        time.append(1)\n        i += 1\n    maxcount = 0\n    count = 0\n    for value in time:\n        count += value\n        if count > maxcount:\n            maxcount = count\n    if count > maxcount:\n        maxcount = count\n    return maxcount", "entry_point": "minimum_platform", "testcase": ["assert minimum_platform(5,[900, 1100, 1235],[1000, 1200, 1240]) == 1", "assert minimum_platform(6,[900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000]) == 3", "assert minimum_platform(7,[200, 210, 300, 320, 350, 500, 510],[230, 340, 400, 420, 600, 700, 730]) == 3"]}
{"seq_id": 30066268948, "instruction": "Write a python function to find the number of divisors of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef num_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```", "code": "def num_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "entry_point": "num_divisors", "testcase": ["assert num_divisors(28) == 6", "assert num_divisors(10) == 4", "assert num_divisors(11) == 2"]}
{"seq_id": 30885476721, "instruction": "Write a python function to find the maximum value in a dictionary based on the values. If two or more values are the same and are the maximum, return the key of the first occurrence.", "output": "Here is the code to solve this problem: \n```python\ndef max_value(dic):\n    return max(dic, key=dic.get)\n```", "code": "def max_value(dic):\n    return max(dic, key=dic.get)", "entry_point": "max_value", "testcase": ["assert max_value({'x': 100, 'y': 100, 'z': 50}) == 'x'", "assert max_value({'m': 30, 'n': 20, 'o': 40}) == 'o'", "assert max_value({'a': 10, 'b': 20, 'c': 15}) == 'b'"]}
{"seq_id": 38218047489, "instruction": "Write a python function to find the Fibonacci number at the given position using matrix exponentiation.", "output": "Here is the code to solve this problem: \n```python\ndef multiply(F, M): \n    x = F[0][0] * M[0][0] + F[0][1] * M[1][0] \n    y = F[0][0] * M[0][1] + F[0][1] * M[1][1] \n    z = F[1][0] * M[0][0] + F[1][1] * M[1][0] \n    w = F[1][0] * M[0][1] + F[1][1] * M[1][1] \n  \n    F[0][0] = x \n    F[0][1] = y \n    F[1][0] = z \n    F[1][1] = w \n  \ndef power(F, n): \n    M = [[1, 1], [1, 0]] \n  \n    for _ in range(2, n+1): \n        multiply(F, M) \n  \ndef matrix_fibonacci(n): \n    F = [[1, 1], [1, 0]] \n    if n == 0: \n        return 0\n    power(F, n - 1) \n    return F[0][0]\n```", "code": "def multiply(F, M): \n    x = F[0][0] * M[0][0] + F[0][1] * M[1][0] \n    y = F[0][0] * M[0][1] + F[0][1] * M[1][1] \n    z = F[1][0] * M[0][0] + F[1][1] * M[1][0] \n    w = F[1][0] * M[0][1] + F[1][1] * M[1][1] \n  \n    F[0][0] = x \n    F[0][1] = y \n    F[1][0] = z \n    F[1][1] = w \n  \ndef power(F, n): \n    M = [[1, 1], [1, 0]] \n  \n    for _ in range(2, n+1): \n        multiply(F, M) \n  \ndef matrix_fibonacci(n): \n    F = [[1, 1], [1, 0]] \n    if n == 0: \n        return 0\n    power(F, n - 1) \n    return F[0][0]", "entry_point": "matrix_fibonacci", "testcase": ["assert matrix_fibonacci(0) == 0", "assert matrix_fibonacci(10) == 55", "assert matrix_fibonacci(1) == 1"]}
{"seq_id": 15529852640, "instruction": "Write a python function to find the maximum number of points that lie on the same straight line.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef max_points_on_line(points):\n    if not points:\n        return 0\n    ans = 1\n    for i in range(len(points) - 1):\n        start = Point(points[i][0], points[i][1])\n        samepoint = 1\n        dic = {'inf': 0}\n        for j in range(i + 1, len(points)):\n            end = Point(points[j][0], points[j][1])\n            if start.x == end.x and start.y == end.y:\n                samepoint += 1\n            elif start.x == end.x:\n                dic['inf'] += 1\n            else:\n                ydiff = start.y - end.y\n                xdiff = start.x - end.x\n                slope = float(ydiff) / xdiff\n                if slope in dic:\n                    dic[slope] += 1\n                else:\n                    dic[slope] = 1\n        ans = max(ans, max(dic.values()) + samepoint)\n    return ans\n```", "code": "from collections import defaultdict\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef max_points_on_line(points):\n    if not points:\n        return 0\n    ans = 1\n    for i in range(len(points) - 1):\n        start = Point(points[i][0], points[i][1])\n        samepoint = 1\n        dic = {'inf': 0}\n        for j in range(i + 1, len(points)):\n            end = Point(points[j][0], points[j][1])\n            if start.x == end.x and start.y == end.y:\n                samepoint += 1\n            elif start.x == end.x:\n                dic['inf'] += 1\n            else:\n                ydiff = start.y - end.y\n                xdiff = start.x - end.x\n                slope = float(ydiff) / xdiff\n                if slope in dic:\n                    dic[slope] += 1\n                else:\n                    dic[slope] = 1\n        ans = max(ans, max(dic.values()) + samepoint)\n    return ans", "entry_point": "max_points_on_line", "testcase": ["assert max_points_on_line([(1,1),(3,2),(5,3),(4,1),(2,3),(1,4)]) == 4", "assert max_points_on_line([(1,1),(2,2),(3,3)]) == 3", "assert max_points_on_line([(0,0),(1,1),(0,0)]) == 3"]}
{"seq_id": 17898195758, "instruction": "Write a python function to check if a given string can be formed by rotating another string.", "output": "Here is the code to solve this problem: \n```python\ndef is_rotated_string(A, B):\n    if A == B:\n        return 0\n    pushed = []\n    word = A\n    for _ in range(len(word)-1):\n        word_list = list(word)\n        word_list.insert(0, word_list.pop())\n        word = ''.join(word_list)\n        pushed.append(word)\n    if B in pushed : return 1\n    else: return -1\n```", "code": "def is_rotated_string(A, B):\n    if A == B:\n        return 0\n    pushed = []\n    word = A\n    for _ in range(len(word)-1):\n        word_list = list(word)\n        word_list.insert(0, word_list.pop())\n        word = ''.join(word_list)\n        pushed.append(word)\n    if B in pushed : return 1\n    else: return -1", "entry_point": "is_rotated_string", "testcase": ["assert is_rotated_string(\"afsefiaef\",\"fafsefiae\") == 1", "assert is_rotated_string(\"world\",\"rldwo\") == 1", "assert is_rotated_string(\"hello\",\"llohe\") == 1", "assert is_rotated_string(\"c++\",\"++c\") == 1", "assert is_rotated_string(\"python\",\"thonpy\") == 1", "assert is_rotated_string(\"ruby\",\"bury\") == -1"]}
{"seq_id": 29852326907, "instruction": "Write a python function to calculate the factorial of a given number using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)\n```", "code": "def fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)", "entry_point": "fact", "testcase": ["assert fact(5) == 120", "assert fact(0) == 1", "assert fact(3) == 6"]}
{"seq_id": 12157612719, "instruction": "Write a python function to find the number of valid parentheses strings that can be formed with the given number of pairs of parentheses.\n\nA parentheses string is considered valid if:\n- Every open parenthesis \"(\" is closed by a corresponding close parenthesis \")\".\n- Open parentheses are closed in the correct order.", "output": "Here is the code to solve this problem: \n```python\ndef countValidParentheses(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    \n    return dp[n]\n```", "code": "def countValidParentheses(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    \n    return dp[n]", "entry_point": "countValidParentheses", "testcase": ["assert countValidParentheses(4) == 14", "assert countValidParentheses(1) == 1", "assert countValidParentheses(3) == 5"]}
{"seq_id": 41579697733, "instruction": "Write a python function to find the first and last position of a given target value in a sorted array. If the target is not found, return [-1, -1].", "output": "Here is the code to solve this problem: \n```python\ndef find_target_positions(nums, target):\n    positions = [-1, -1]\n    try:\n        first_pos = nums.index(target)\n        positions[0] = first_pos\n        positions[1] = len(nums) - nums[::-1].index(target) - 1\n    except ValueError:\n        return positions\n    return positions\n```", "code": "def find_target_positions(nums, target):\n    positions = [-1, -1]\n    try:\n        first_pos = nums.index(target)\n        positions[0] = first_pos\n        positions[1] = len(nums) - nums[::-1].index(target) - 1\n    except ValueError:\n        return positions\n    return positions", "entry_point": "find_target_positions", "testcase": ["assert find_target_positions([5,7,7,8,8,10], 8) == [3, 4]", "assert find_target_positions([1,2,3,4,5,6], 1) == [0, 0]", "assert find_target_positions([2,3,4,5,6,7,8], 9) == [-1, -1]"]}
{"seq_id": 42602437298, "instruction": "Write a python function to find the length of the shortest, non-empty, contiguous subarray of nums with sum at least s. If there is no such subarray, return 0 instead.", "output": "Here is the code to solve this problem: \n```python\nfrom math import inf\nfrom typing import List\n\ndef min_sum_subarray(s: int, nums: List[int]) -> int:\n    min_len, j = inf, 0\n    acc = 0\n    for i in range(len(nums)):\n        acc = acc + nums[i]\n        while acc >= s:\n            min_len = min(min_len, i - j + 1)\n            acc = acc - nums[j]\n            j = j + 1\n    return min_len if min_len != inf else 0\n```", "code": "from math import inf\nfrom typing import List\n\ndef min_sum_subarray(s: int, nums: List[int]) -> int:\n    min_len, j = inf, 0\n    acc = 0\n    for i in range(len(nums)):\n        acc = acc + nums[i]\n        while acc >= s:\n            min_len = min(min_len, i - j + 1)\n            acc = acc - nums[j]\n            j = j + 1\n    return min_len if min_len != inf else 0", "entry_point": "min_sum_subarray", "testcase": ["assert min_sum_subarray(7, [2,3,1,2,4,3]) == 2", "assert min_sum_subarray(11, [1,1,1,1,1,1,1,1]) == 0", "assert min_sum_subarray(4, [1,4,4]) == 1"]}
{"seq_id": 4354333336, "instruction": "Write a python function that finds the number of times a given number appears in a list of numbers. The list is sorted in non-decreasing order.", "output": "Here is the code to solve this problem: \n```python\ndef countOccurrences(nums, target):\n    first = findFirst(nums, target)\n    if first == -1:\n        return 0\n    last = findLast(nums, target)\n    return last - first + 1\n\ndef findFirst(nums, target):\n    low = 0\n    high = len(nums) - 1\n    result = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            result = mid\n            high = mid - 1\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return result\n\ndef findLast(nums, target):\n    low = 0\n    high = len(nums) - 1\n    result = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            result = mid\n            low = mid + 1\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return result\n```", "code": "def countOccurrences(nums, target):\n    first = findFirst(nums, target)\n    if first == -1:\n        return 0\n    last = findLast(nums, target)\n    return last - first + 1\n\ndef findFirst(nums, target):\n    low = 0\n    high = len(nums) - 1\n    result = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            result = mid\n            high = mid - 1\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return result\n\ndef findLast(nums, target):\n    low = 0\n    high = len(nums) - 1\n    result = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            result = mid\n            low = mid + 1\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return result", "entry_point": "countOccurrences", "testcase": ["assert countOccurrences([1, 1, 2, 2, 2, 3, 4, 5, 5, 5, 5], 2) == 3", "assert countOccurrences([1, 2, 2, 2, 3, 4, 5], 2) == 3", "assert countOccurrences([1, 2, 3, 4, 5], 6) == 0"]}
{"seq_id": 35833563530, "instruction": "Write a python function to find the sum of all numbers divisible by 3 or 5 within a given range.", "output": "Here is the code to solve this problem: \n```python\ndef sum_divisible(n):\n  sum = 0\n  for i in range(n):\n    if i % 3 == 0 or i % 5 == 0:\n      sum += i\n  return sum\n```", "code": "def sum_divisible(n):\n  sum = 0\n  for i in range(n):\n    if i % 3 == 0 or i % 5 == 0:\n      sum += i\n  return sum", "entry_point": "sum_divisible", "testcase": ["assert sum_divisible(10) == 23", "assert sum_divisible(50) == 543", "assert sum_divisible(20) == 78"]}
{"seq_id": 18433963420, "instruction": "Write a function to find the maximum subarray sum in a circular array.", "output": "Here is the code to solve this problem: \n```python\ndef max_subarray_sum_circular(nums):\n    mn, mx = nums[0], nums[0]\n    cmn, cmx, s = 0, 0, 0\n    for num in nums:\n        cmn = min(cmn + num, num)\n        cmx = max(cmx + num, num)\n        mn = min(mn, cmn)\n        mx = max(mx, cmx)\n        s += num\n    if mx < 0:\n        return mx\n    return max(mx, s - mn)\n```", "code": "def max_subarray_sum_circular(nums):\n    mn, mx = nums[0], nums[0]\n    cmn, cmx, s = 0, 0, 0\n    for num in nums:\n        cmn = min(cmn + num, num)\n        cmx = max(cmx + num, num)\n        mn = min(mn, cmn)\n        mx = max(mx, cmx)\n        s += num\n    if mx < 0:\n        return mx\n    return max(mx, s - mn)", "entry_point": "max_subarray_sum_circular", "testcase": ["assert max_subarray_sum_circular([5, -3, 5])==10", "assert max_subarray_sum_circular([-3, -2, -3])==-2", "assert max_subarray_sum_circular([1, -2, 3, -2])==3"]}
{"seq_id": 27207782913, "instruction": "Write a function to check if a string has all unique characters.", "output": "Here is the code to solve this problem: \n```python\ndef is_unique(s):\n    bit_flag = 0\n    for ch in s:\n        x = ord(ch) - ord('a')\n        if x < 0 or x > 25:\n            raise ValueError(\"Input string must contain only lowercase letters.\")\n        if (bit_flag >> x) & 1 == 0:\n            bit_flag |= 1 << x\n        else:\n            return False\n    return True\n```", "code": "def is_unique(s):\n    bit_flag = 0\n    for ch in s:\n        x = ord(ch) - ord('a')\n        if x < 0 or x > 25:\n            raise ValueError(\"Input string must contain only lowercase letters.\")\n        if (bit_flag >> x) & 1 == 0:\n            bit_flag |= 1 << x\n        else:\n            return False\n    return True", "entry_point": "is_unique", "testcase": ["assert is_unique('aabbcc')==False", "assert is_unique('')==True", "assert is_unique('abcdefg')==True"]}
{"seq_id": 15950507391, "instruction": "Write a function to find whether a given string is a valid parentheses sequence. A valid parentheses sequence is defined as any sequence of '(' and ')' where each '(' is eventually closed with a corresponding ')' and vice versa.", "output": "Here is the code to solve this problem: \n```python\ndef valid_parentheses(sequence):\n    stack = []\n    for char in sequence:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n```", "code": "def valid_parentheses(sequence):\n    stack = []\n    for char in sequence:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "entry_point": "valid_parentheses", "testcase": ["assert valid_parentheses(\"(()\") == False", "assert valid_parentheses(\"(())\") == True", "assert valid_parentheses(\")(\") == False", "assert valid_parentheses(\"()()\") == True", "assert valid_parentheses(\"()\") == True"]}
{"seq_id": 23020489015, "instruction": "Write a Python function to find the length of the longest subsequence of equal elements in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef longest_equal_subsequence(arr):\n    if not arr:\n        return 0\n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n            \n    return max_length\n```", "code": "def longest_equal_subsequence(arr):\n    if not arr:\n        return 0\n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n            \n    return max_length", "entry_point": "longest_equal_subsequence", "testcase": ["assert longest_equal_subsequence([10, 10, 10, 10]) == 4", "assert longest_equal_subsequence([1, 2, 3, 4, 5]) == 1", "assert longest_equal_subsequence([5, 1, 1, 1, 2, 3, 3, 3, 3, 4]) == 4"]}
{"seq_id": 4120872763, "instruction": "Write a python function to find the missing number in an array of n integers, where the numbers range from 0 to n inclusive. Assume exactly one number is missing.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing_number(nums):\n    n = len(nums)\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(nums)\n    return total_sum - array_sum\n```", "code": "def find_missing_number(nums):\n    n = len(nums)\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(nums)\n    return total_sum - array_sum", "entry_point": "find_missing_number", "testcase": ["assert find_missing_number([9,6,4,2,3,5,7,0,1]) == 8", "assert find_missing_number([0, 1]) == 2", "assert find_missing_number([3, 0, 1]) == 2"]}
{"seq_id": 12236663180, "instruction": "Write a function to determine if a given linked list is a palindrome. A linked list is a palindrome if it reads the same backward as forward.", "output": "Here is the code to solve this problem: \n```python\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef create_linked_list(lst):\n    head = ListNode(lst[0])\n    current = head\n    for i in range(1, len(lst)):\n        current.next = ListNode(lst[i])\n        current = current.next\n    return head\n\ndef is_palindrome_linked_list(head):\n    values = []\n    while head:\n        values.append(head.val)\n        head = head.next\n    return values == values[::-1]\n```", "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef create_linked_list(lst):\n    head = ListNode(lst[0])\n    current = head\n    for i in range(1, len(lst)):\n        current.next = ListNode(lst[i])\n        current = current.next\n    return head\n\ndef is_palindrome_linked_list(head):\n    values = []\n    while head:\n        values.append(head.val)\n        head = head.next\n    return values == values[::-1]", "entry_point": "is_palindrome_linked_list", "testcase": ["assert is_palindrome_linked_list(create_linked_list([1, 2, 3, 4, 5])) == False", "assert is_palindrome_linked_list(create_linked_list([1, 2, 2, 1])) == True", "assert is_palindrome_linked_list(create_linked_list([1])) == True", "assert is_palindrome_linked_list(create_linked_list([1, 2, 3, 2, 1])) == True"]}
{"seq_id": 74180660580, "instruction": "Write a function to check if the given string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.", "output": "Here is the code to solve this problem: \n```python\ndef is_pal_perm(str1):\n  d = dict()\n  odd = 0\n  for i in str1:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  for v in d.values():\n    if v % 2 != 0:\n      odd += 1\n  if odd > 1:\n    return False\n  return True\n```", "code": "def is_pal_perm(str1):\n  d = dict()\n  odd = 0\n  for i in str1:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  for v in d.values():\n    if v % 2 != 0:\n      odd += 1\n  if odd > 1:\n    return False\n  return True", "entry_point": "is_pal_perm", "testcase": ["assert is_pal_perm('aab') == True", "assert is_pal_perm('carrace') == True", "assert is_pal_perm('carerac') == True", "assert is_pal_perm('aaabbbbcc') == True", "assert is_pal_perm('hello') == False"]}
{"seq_id": 74785416297, "instruction": "Write a function to find the sum of all nodes at a given level in a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef sum_of_level(root, level):\n    if root is None:\n        return 0\n    if level == 1:\n        return root.value\n    return sum_of_level(root.left, level-1) + sum_of_level(root.right, level-1)\n\n# Test cases\nassert sum_of_level(BinaryTree(1, BinaryTree(2), BinaryTree(3)), 1) == 1\nassert sum_of_level(BinaryTree(1, BinaryTree(2), BinaryTree(3)), 2) == 5\nassert sum_of_level(BinaryTree(1, BinaryTree(2, BinaryTree(4), BinaryTree(5)), BinaryTree(3)), 2) == 5\n```", "code": "class BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef sum_of_level(root, level):\n    if root is None:\n        return 0\n    if level == 1:\n        return root.value\n    return sum_of_level(root.left, level-1) + sum_of_level(root.right, level-1)\n\n# Test cases\nassert sum_of_level(BinaryTree(1, BinaryTree(2), BinaryTree(3)), 1) == 1\nassert sum_of_level(BinaryTree(1, BinaryTree(2), BinaryTree(3)), 2) == 5\nassert sum_of_level(BinaryTree(1, BinaryTree(2, BinaryTree(4), BinaryTree(5)), BinaryTree(3)), 2) == 5", "entry_point": "sum_of_level", "testcase": ["assert sum_of_level(BinaryTree(1, BinaryTree(2), BinaryTree(3)), 1) == 1", "assert sum_of_level(BinaryTree(1, BinaryTree(2), BinaryTree(3)), 2) == 5", "assert sum_of_level(BinaryTree(1, BinaryTree(2, BinaryTree(4), BinaryTree(5)), BinaryTree(3)), 2) == 5"]}
{"seq_id": 22787139857, "instruction": "Write a python function to check if a given number is a power of another number.", "output": "Here is the code to solve this problem: \n```python\ndef is_Power(a, b):\n    if a == 1:\n        return True\n    if a < 1 or (a % b != 0):\n        return False\n    return is_Power(a/b, b)\n```", "code": "def is_Power(a, b):\n    if a == 1:\n        return True\n    if a < 1 or (a % b != 0):\n        return False\n    return is_Power(a/b, b)", "entry_point": "is_Power", "testcase": ["assert is_Power(1, 2) == True", "assert is_Power(3, 2) == False", "assert is_Power(2, 2) == True", "assert is_Power(27, 3) == True", "assert is_Power(8, 2) == True", "assert is_Power(1, 3) == True"]}
{"seq_id": 42513860738, "instruction": "Write a function to find the maximum profit that can be achieved from a list of stock prices, given that you can only make one transaction.", "output": "Here is the code to solve this problem: \n```python\ndef max_profit(prices):\n    \"\"\"\n    Finds the maximum profit that can be achieved from a list of stock prices,\n    given that you can only make one transaction.\n    \n    :param prices: List of stock prices.\n    :return: Maximum profit that can be achieved.\n    \"\"\"\n    if not prices:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for price in prices:\n        min_price = min(min_price, price)\n        profit = price - min_price\n        max_profit = max(max_profit, profit)\n\n    return max_profit\n```", "code": "def max_profit(prices):\n    \"\"\"\n    Finds the maximum profit that can be achieved from a list of stock prices,\n    given that you can only make one transaction.\n    \n    :param prices: List of stock prices.\n    :return: Maximum profit that can be achieved.\n    \"\"\"\n    if not prices:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for price in prices:\n        min_price = min(min_price, price)\n        profit = price - min_price\n        max_profit = max(max_profit, profit)\n\n    return max_profit", "entry_point": "max_profit", "testcase": ["assert max_profit([1, 2]) == 1", "assert max_profit([7, 6, 4, 3, 1]) == 0", "assert max_profit([7, 1, 5, 3, 6, 4]) == 5"]}
{"seq_id": 72484904184, "instruction": "Write a python function to find the minimum number of coins that you need to make up a certain amount given a list of coin denominations. If it is not possible to make up that amount using the given denominations, return -1.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef coinChange(coins, amount):\n    coins.sort(reverse=True)\n    queue = deque([(amount, 0)])\n    visited = {amount}\n    \n    while queue:\n        curr_amount, curr_coins = queue.popleft()\n        \n        if curr_amount == 0:\n            return curr_coins\n        \n        for coin in coins:\n            next_amount = curr_amount - coin\n            if next_amount >= 0 and next_amount not in visited:\n                visited.add(next_amount)\n                queue.append((next_amount, curr_coins + 1))\n    \n    return -1\n```", "code": "from collections import deque\n\ndef coinChange(coins, amount):\n    coins.sort(reverse=True)\n    queue = deque([(amount, 0)])\n    visited = {amount}\n    \n    while queue:\n        curr_amount, curr_coins = queue.popleft()\n        \n        if curr_amount == 0:\n            return curr_coins\n        \n        for coin in coins:\n            next_amount = curr_amount - coin\n            if next_amount >= 0 and next_amount not in visited:\n                visited.add(next_amount)\n                queue.append((next_amount, curr_coins + 1))\n    \n    return -1", "entry_point": "coinChange", "testcase": ["assert coinChange([1, 2, 5], 11) == 3", "assert coinChange([2], 3) == -1", "assert coinChange([1], 0) == 0"]}
{"seq_id": 35211741655, "instruction": "Write a python function to find the largest rectangle containing only 1's in a binary matrix.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef largestRectangle(matrix):\n    if not matrix:\n        return 0\n\n    n = len(matrix)\n    m = len(matrix[0])\n    height = [0]*m\n    max_area = 0\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                height[j] += 1\n            else:\n                height[j] = 0\n\n        stack = deque()\n        area = 0\n        for j in range(m+1):\n            while stack and (j == m or height[stack[-1]] >= height[j]):\n                h = height[stack.pop()]\n                w = j if not stack else j - stack[-1] - 1\n                area = max(area, h * w)\n            stack.append(j)\n        max_area = max(max_area, area)\n\n    return max_area\n```", "code": "from collections import deque\n\ndef largestRectangle(matrix):\n    if not matrix:\n        return 0\n\n    n = len(matrix)\n    m = len(matrix[0])\n    height = [0]*m\n    max_area = 0\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                height[j] += 1\n            else:\n                height[j] = 0\n\n        stack = deque()\n        area = 0\n        for j in range(m+1):\n            while stack and (j == m or height[stack[-1]] >= height[j]):\n                h = height[stack.pop()]\n                w = j if not stack else j - stack[-1] - 1\n                area = max(area, h * w)\n            stack.append(j)\n        max_area = max(max_area, area)\n\n    return max_area", "entry_point": "largestRectangle", "testcase": ["assert largestRectangle([[0,0,1,0],[0,1,1,1],[1,1,1,1],[0,0,0,0]]) == 6", "assert largestRectangle([[0,0,0],[0,0,0],[0,0,0]]) == 0", "assert largestRectangle([[1,1,1],[1,1,1],[1,1,1]]) == 9"]}
{"seq_id": 72618049985, "instruction": "Write a python function to find the largest k integers from an array.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_k(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n```", "code": "def find_largest_k(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "entry_point": "find_largest_k", "testcase": ["assert find_largest_k([5, 4, 3, 2, 1], 3) == [5, 4, 3]", "assert find_largest_k([1, 2, 3, 4, 5], 2) == [5, 4]", "assert find_largest_k([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4) == [9, 6, 5, 5]"]}
{"seq_id": 30419638507, "instruction": "Write a function to find the total number of non-empty substrings that can be formed from a given string.", "output": "Here is the code to solve this problem: \n```python\ndef count_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n```", "code": "def count_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2", "entry_point": "count_substrings", "testcase": ["assert count_substrings(\"\") == 0", "assert count_substrings(\"abc\") == 6", "assert count_substrings(\"aaa\") == 6"]}
{"seq_id": 21254133471, "instruction": "Write a python function to find the maximum difference between two elements in a given array such that the larger element appears after the smaller number.", "output": "Here is the code to solve this problem: \n```python\ndef find_Max_Diff(arr, n):\n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n    for i in range(1, n):\n        if (arr[i] - min_element > max_diff):\n            max_diff = arr[i] - min_element\n        if (arr[i] < min_element):\n            min_element = arr[i]\n    return max_diff\n```", "code": "def find_Max_Diff(arr, n):\n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n    for i in range(1, n):\n        if (arr[i] - min_element > max_diff):\n            max_diff = arr[i] - min_element\n        if (arr[i] < min_element):\n            min_element = arr[i]\n    return max_diff", "entry_point": "find_Max_Diff", "testcase": ["assert find_Max_Diff([2, 3, 10, 6, 4, 8, 1], 7) == 8", "assert find_Max_Diff([10, 20, 30, 40, 50], 5) == 40", "assert find_Max_Diff([7, 9, 5, 6, 3, 2], 6) == 2"]}
{"seq_id": 40791588167, "instruction": "Write a function to check if a number is prime or not.", "output": "Here is the code to solve this problem: \n```python\ndef check_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```", "code": "def check_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "entry_point": "check_prime", "testcase": ["assert check_prime(1) == False", "assert check_prime(4) == False", "assert check_prime(61) == True", "assert check_prime(13441) == True", "assert check_prime(11) == True", "assert check_prime(101) == True", "assert check_prime(6) == False"]}
{"seq_id": 18046000319, "instruction": "Write a python function to find the sum of the largest subarray with a given sum. The function should return the sum of the subarray if found, otherwise return -1.", "output": "Here is the code to solve this problem: \n```python\ndef largest_subarray_sum(arr, given_sum):\n    current_sum = 0\n    max_sum = -1\n    start = 0\n\n    for i in range(len(arr)):\n        current_sum += arr[i]\n\n        # If current_sum is greater than given_sum, remove elements from the start\n        while current_sum > given_sum:\n            current_sum -= arr[start]\n            start += 1\n\n        # Update max_sum if the current_sum is greater than max_sum\n        if current_sum == given_sum:\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum\n```", "code": "def largest_subarray_sum(arr, given_sum):\n    current_sum = 0\n    max_sum = -1\n    start = 0\n\n    for i in range(len(arr)):\n        current_sum += arr[i]\n\n        # If current_sum is greater than given_sum, remove elements from the start\n        while current_sum > given_sum:\n            current_sum -= arr[start]\n            start += 1\n\n        # Update max_sum if the current_sum is greater than max_sum\n        if current_sum == given_sum:\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum", "entry_point": "largest_subarray_sum", "testcase": ["assert largest_subarray_sum([2, 3, -2, 5, -1], 6) == 6", "assert largest_subarray_sum([-1, -2, -3, -4], -1) == -1", "assert largest_subarray_sum([1, 2, 3, 4, 5], 9) == 9"]}
{"seq_id": 70402989158, "instruction": "Write a function that generates and returns the Fibonacci series up to a given number n.", "output": "Here is the code to solve this problem: \n```python\ndef fib_series(n):\n    fib = [0]\n    a, b = 0, 1\n    while b < n:\n        fib.append(b)\n        a, b = b, a+b\n    return fib\n```", "code": "def fib_series(n):\n    fib = [0]\n    a, b = 0, 1\n    while b < n:\n        fib.append(b)\n        a, b = b, a+b\n    return fib", "entry_point": "fib_series", "testcase": ["assert fib_series(10)==[0, 1, 1, 2, 3, 5, 8]", "assert fib_series(1)==[0]", "assert fib_series(20)==[0, 1, 1, 2, 3, 5, 8, 13]"]}
{"seq_id": 42602265138, "instruction": "Write a python function to find the k smallest elements in a list using a min heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef find_k_smallest(nums, k):\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(k)]\n```", "code": "import heapq\n\ndef find_k_smallest(nums, k):\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(k)]", "entry_point": "find_k_smallest", "testcase": ["assert find_k_smallest([10, 22, 5, 75, 65, 80], 2) == [5, 10]", "assert find_k_smallest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4) == [1, 1, 2, 3]", "assert find_k_smallest([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]"]}
{"seq_id": 39650716001, "instruction": "Write a function to reverse the order of words in a given sentence.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_sentence_order(sentence):\n    words = sentence.split()\n    reversed_sentence = ' '.join(reversed(words))\n    return reversed_sentence\n```", "code": "def reverse_sentence_order(sentence):\n    words = sentence.split()\n    reversed_sentence = ' '.join(reversed(words))\n    return reversed_sentence", "entry_point": "reverse_sentence_order", "testcase": ["assert reverse_sentence_order(\"Hello World\")==\"World Hello\"", "assert reverse_sentence_order(\"This is a test\")==\"test a is This\"", "assert reverse_sentence_order(\"I love Python\")==\"Python love I\""]}
{"seq_id": 75181561743, "instruction": "Write a python function to find the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef find_LongestSubstring(s):\n    char_set = set()\n    left = 0\n    max_length = 0\n\n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n```", "code": "def find_LongestSubstring(s):\n    char_set = set()\n    left = 0\n    max_length = 0\n\n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        max_length = max(max_length, right - left + 1)\n\n    return max_length", "entry_point": "find_LongestSubstring", "testcase": ["assert find_LongestSubstring(\"bbbbb\") == 1", "assert find_LongestSubstring(\"abcabcbb\") == 3", "assert find_LongestSubstring(\"pwwkew\") == 3"]}
{"seq_id": 29242446374, "instruction": "Write a python function to generate the nth row of Pascal's triangle.", "output": "Here is the code to solve this problem: \n```python\ndef pascals_triangle_row(n):\n    row = [1]\n    for i in range(1, n + 1):\n        row.append(row[i - 1] * (n - i + 1) // i)\n    return row\n```", "code": "def pascals_triangle_row(n):\n    row = [1]\n    for i in range(1, n + 1):\n        row.append(row[i - 1] * (n - i + 1) // i)\n    return row", "entry_point": "pascals_triangle_row", "testcase": ["assert pascals_triangle_row(2) == [1, 2, 1]", "assert pascals_triangle_row(3) == [1, 3, 3, 1]", "assert pascals_triangle_row(0) == [1]", "assert pascals_triangle_row(4) == [1, 4, 6, 4, 1]", "assert pascals_triangle_row(1) == [1, 1]", "assert pascals_triangle_row(5) == [1, 5, 10, 10, 5, 1]"]}
{"seq_id": 42424553009, "instruction": "Write a python function to find the maximum product of three numbers in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_three_nums(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])\n```", "code": "def max_product_three_nums(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])", "entry_point": "max_product_three_nums", "testcase": ["assert max_product_three_nums([-1, -2, -3, -4]) == -6", "assert max_product_three_nums([1, 2, 3, 4]) == 24", "assert max_product_three_nums([1, 10, 2, 6, 5, 3]) == 300"]}
{"seq_id": 72565044674, "instruction": "Write a function to calculate the number of unique pairs in an array that have a specific difference.\n\nExample 1:\nInput: arr = [1,2,2,1], k = 1\nOutput: 4\nExplanation: There are four pairs with difference 1: [1,2], [1,2], [2,1], and [2,1].\n\nExample 2:\nInput: arr = [1,3], k = 3\nOutput: 0\nExplanation: There are no pairs with difference 3.\n\nExample 3:\nInput: arr = [3,2,1,5,4], k = 2\nOutput: 3\nExplanation: There are three pairs with difference 2: [1,3], [2,4], and [3,5].\n\nConstraints:\n1 <= arr.length <= 1000\n0 <= arr[i] <= 1000\n0 <= k <= 1000", "output": "Here is the code to solve this problem: \n```python\ndef count_pairs_with_difference(arr, k):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num + k in freq:\n            count += freq[num + k]\n        if num - k in freq:\n            count += freq[num - k]\n        freq[num] = freq.get(num, 0) + 1\n    return count\n```", "code": "def count_pairs_with_difference(arr, k):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num + k in freq:\n            count += freq[num + k]\n        if num - k in freq:\n            count += freq[num - k]\n        freq[num] = freq.get(num, 0) + 1\n    return count", "entry_point": "count_pairs_with_difference", "testcase": ["assert count_pairs_with_difference([1,2,2,1], 1) == 4", "assert count_pairs_with_difference([3,2,1,5,4], 2) == 3", "assert count_pairs_with_difference([1,3], 3) == 0"]}
{"seq_id": 71447708188, "instruction": "Write a python function to find the longest subsequence of a given string where the characters are in alphabetical order.", "output": "Here is the code to solve this problem: \n```python\ndef longest_subsequence(s):\n    if not s:\n        return \"\"\n    \n    longest = [s[0]]\n    current = [s[0]]\n\n    for i in range(1, len(s)):\n        if s[i] >= current[-1]:\n            current.append(s[i])\n        else:\n            if len(current) > len(longest):\n                longest = current\n            current = [s[i]]\n    \n    if len(current) > len(longest):\n        longest = current\n\n    return \"\".join(longest)\n```", "code": "def longest_subsequence(s):\n    if not s:\n        return \"\"\n    \n    longest = [s[0]]\n    current = [s[0]]\n\n    for i in range(1, len(s)):\n        if s[i] >= current[-1]:\n            current.append(s[i])\n        else:\n            if len(current) > len(longest):\n                longest = current\n            current = [s[i]]\n    \n    if len(current) > len(longest):\n        longest = current\n\n    return \"\".join(longest)", "entry_point": "longest_subsequence", "testcase": ["assert longest_subsequence(\"zyx\") == \"z\"", "assert longest_subsequence(\"abcbcad\") == \"abc\"", "assert longest_subsequence(\"abcabcd\") == \"abcd\""]}
{"seq_id": 40431667750, "instruction": "Write a python function to find the number of ways to represent a number as the sum of 1, 3 and 4.", "output": "Here is the code to solve this problem: \n```python\ndef find_ways(n):\n    if n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    dp = [0] * (n + 1)\n    dp[1], dp[2], dp[3] = 1, 1, 2\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 3] + dp[i - 4]\n    return dp[n]\n```", "code": "def find_ways(n):\n    if n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    dp = [0] * (n + 1)\n    dp[1], dp[2], dp[3] = 1, 1, 2\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "entry_point": "find_ways", "testcase": ["assert find_ways(1) == 1", "assert find_ways(2) == 1", "assert find_ways(3) == 2", "assert find_ways(4) == 3"]}
{"seq_id": 12235043800, "instruction": "Write a function to replace each element in a list with the maximum value of the elements that come after it. If there are no elements after it, replace it with -1.", "output": "Here is the code to solve this problem: \n```python\ndef replace_with_max_after(nums):\n    if len(nums) == 1:\n        return [-1]\n    max_after = nums[-1]\n    for i in range(len(nums)-2, -1, -1):\n        temp = nums[i]\n        nums[i] = max_after\n        if temp > max_after:\n            max_after = temp\n    nums[-1] = -1\n    return nums\n```", "code": "def replace_with_max_after(nums):\n    if len(nums) == 1:\n        return [-1]\n    max_after = nums[-1]\n    for i in range(len(nums)-2, -1, -1):\n        temp = nums[i]\n        nums[i] = max_after\n        if temp > max_after:\n            max_after = temp\n    nums[-1] = -1\n    return nums", "entry_point": "replace_with_max_after", "testcase": ["assert replace_with_max_after([5, 8, 7, 6, 4, 3, 2, 1]) == [8, 7, 6, 4, 3, 2, 1, -1]", "assert replace_with_max_after([400]) == [-1]", "assert replace_with_max_after([17, 18, 5, 4, 6, 1]) == [18, 6, 6, 6, 1, -1]"]}
{"seq_id": 17842880363, "instruction": "Write a function to find the closest pair of points from a given list of points in a 2D plane. The function should return the Euclidean distance between the closest pair of points.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef closest_pair(points):\n    points.sort()\n    min_distance = float('inf')\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            dist = distance(points[i], points[j])\n            if dist < min_distance:\n                min_distance = dist\n    return min_distance\n```", "code": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef closest_pair(points):\n    points.sort()\n    min_distance = float('inf')\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            dist = distance(points[i], points[j])\n            if dist < min_distance:\n                min_distance = dist\n    return min_distance", "entry_point": "closest_pair", "testcase": ["assert closest_pair([(1,2), (3,4), (5,6), (7,8), (9,10)])==2.8284271247461903", "assert closest_pair([(1,1), (2,2), (3,3), (4,4), (5,5)])==1.4142135623730951", "assert closest_pair([(0,0), (1,1), (2,2), (3,3), (4,4)])==1.4142135623730951"]}
{"seq_id": 15378402579, "instruction": "Write a python function to find the largest rectangle containing only 1's in a binary matrix. The function should return the area of the rectangle.", "output": "Here is the code to solve this problem: \n```python\ndef largestRectangle(matrix):\n    if not matrix: return 0\n    m, n = len(matrix), len(matrix[0])\n    height = [0] * (n + 1)\n    max_area = 0\n    for i in range(m):\n        for j in range(n):\n            height[j] = height[j] + 1 if matrix[i][j] == 1 else 0\n        stack = [-1]\n        for j in range(n + 1):\n            while height[j] < height[stack[-1]]:\n                h = height[stack.pop()]\n                w = j - 1 - stack[-1]\n                max_area = max(max_area, h * w)\n            stack.append(j)\n    return max_area\n```", "code": "def largestRectangle(matrix):\n    if not matrix: return 0\n    m, n = len(matrix), len(matrix[0])\n    height = [0] * (n + 1)\n    max_area = 0\n    for i in range(m):\n        for j in range(n):\n            height[j] = height[j] + 1 if matrix[i][j] == 1 else 0\n        stack = [-1]\n        for j in range(n + 1):\n            while height[j] < height[stack[-1]]:\n                h = height[stack.pop()]\n                w = j - 1 - stack[-1]\n                max_area = max(max_area, h * w)\n            stack.append(j)\n    return max_area", "entry_point": "largestRectangle", "testcase": ["assert largestRectangle([[0, 1], [1, 1]]) == 2", "assert largestRectangle([[0, 0, 0], [0, 0, 0]]) == 0", "assert largestRectangle([[1, 0, 1], [0, 1, 1], [0, 1, 1]]) == 4"]}
{"seq_id": 8457560365, "instruction": "Write a function that finds the maximum capitalized profit you can achieve. You are given k (number of projects you can select), w (initial capital), profits (list of profits for each project), and capital (list of capital required to start each project). You can only select a project if you have enough capital to start it. Your goal is to maximize your capital after completing k projects. You can assume that you have enough time and resources to complete the selected projects.", "output": "Here is the code to solve this problem: \n```python\nfrom heapq import heappush, heappop\n\ndef findMaximizedCapital(k, w, profits, capital):\n    projects_info = sorted(list(zip(capital, profits)), key=lambda x: (x[0], x[1]))\n    heap = []\n    ind = 0\n    for _ in range(k):\n        while ind < len(projects_info) and projects_info[ind][0] <= w:\n            heappush(heap, -projects_info[ind][1])\n            ind += 1\n        if not heap:\n            break\n        w += -heappop(heap)\n    return w\n```", "code": "from heapq import heappush, heappop\n\ndef findMaximizedCapital(k, w, profits, capital):\n    projects_info = sorted(list(zip(capital, profits)), key=lambda x: (x[0], x[1]))\n    heap = []\n    ind = 0\n    for _ in range(k):\n        while ind < len(projects_info) and projects_info[ind][0] <= w:\n            heappush(heap, -projects_info[ind][1])\n            ind += 1\n        if not heap:\n            break\n        w += -heappop(heap)\n    return w", "entry_point": "findMaximizedCapital", "testcase": ["assert findMaximizedCapital(2, 0, [1,2,3], [0,1,1])==4", "assert findMaximizedCapital(3, 0, [1,2,3], [0,1,2])==6", "assert findMaximizedCapital(3, 0, [1,2,3], [0,1,1])==6"]}
{"seq_id": 30409554062, "instruction": "Write a python function to find the maximum sum of a continuous subarray of length K.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_sum(k, arr):\n    max_sum = sum(arr[:k])\n    current_sum = max_sum\n    for i in range(k, len(arr)):\n        current_sum = current_sum - arr[i-k] + arr[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def find_max_sum(k, arr):\n    max_sum = sum(arr[:k])\n    current_sum = max_sum\n    for i in range(k, len(arr)):\n        current_sum = current_sum - arr[i-k] + arr[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "find_max_sum", "testcase": ["assert find_max_sum(2, [1, 2, 3, 4]) == 7", "assert find_max_sum(3, [2, 1, 5, 1, 3, 2]) == 9", "assert find_max_sum(2, [2, 3, 4, 1, 5]) == 7"]}
{"seq_id": 75172251074, "instruction": "Write a function to calculate the area of a triangle given the lengths of its sides using Heron's formula. Heron's formula states that the area of a triangle whose sides have lengths a, b, and c is the square root of s(s - a)(s - b)(s - c), where s is the semi-perimeter of the triangle.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef calculate_triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n```", "code": "import math\n\ndef calculate_triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))", "entry_point": "calculate_triangle_area", "testcase": ["assert calculate_triangle_area(5, 5, 8) == 12", "assert calculate_triangle_area(3, 4, 5) == 6", "assert calculate_triangle_area(7, 8, 9) == 26.832815729997478"]}
{"seq_id": 10989567541, "instruction": "Write a function that finds the minimum difference between the sums of two subsets from a given array of integers.", "output": "Here is the code to solve this problem: \n```python\ndef min_diff_subsets(arr):\n    total_sum = sum(arr)\n    n = len(arr)\n    half_sum = total_sum // 2\n\n    dp = [0] * (half_sum + 1)\n    for i in range(n):\n        for j in range(half_sum, arr[i] - 1, -1):\n            dp[j] = max(dp[j], dp[j - arr[i]] + arr[i])\n\n    return total_sum - 2 * dp[half_sum]\n```", "code": "def min_diff_subsets(arr):\n    total_sum = sum(arr)\n    n = len(arr)\n    half_sum = total_sum // 2\n\n    dp = [0] * (half_sum + 1)\n    for i in range(n):\n        for j in range(half_sum, arr[i] - 1, -1):\n            dp[j] = max(dp[j], dp[j - arr[i]] + arr[i])\n\n    return total_sum - 2 * dp[half_sum]", "entry_point": "min_diff_subsets", "testcase": ["assert min_diff_subsets([1, 2, 3, 9]) == 3", "assert min_diff_subsets([3, 9, 7, 3]) == 2", "assert min_diff_subsets([1, 6, 11, 5]) == 1"]}
{"seq_id": 38901587691, "instruction": "Write a python function to find the shortest path in a given graph using Dijkstra's algorithm.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\n\ndef shortest_path_dijkstra(graph, source, destination):\n    n = len(graph)\n    dist = [float('inf')] * n\n    dist[source] = 0\n    pq = [(0, source)]\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d > dist[u]:\n            continue\n        for v in range(n):\n            if graph[u][v] > 0:\n                if dist[v] > dist[u] + graph[u][v]:\n                    dist[v] = dist[u] + graph[u][v]\n                    heapq.heappush(pq, (dist[v], v))\n    return dist[destination]\n```", "code": "import heapq\n\n\ndef shortest_path_dijkstra(graph, source, destination):\n    n = len(graph)\n    dist = [float('inf')] * n\n    dist[source] = 0\n    pq = [(0, source)]\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d > dist[u]:\n            continue\n        for v in range(n):\n            if graph[u][v] > 0:\n                if dist[v] > dist[u] + graph[u][v]:\n                    dist[v] = dist[u] + graph[u][v]\n                    heapq.heappush(pq, (dist[v], v))\n    return dist[destination]", "entry_point": "shortest_path_dijkstra", "testcase": ["assert shortest_path_dijkstra([[0, 2, 5, 0], [2, 0, 2, 1], [5, 2, 0, 1], [0, 1, 1, 0]], 0, 3) == 3", "assert shortest_path_dijkstra([[0, 10, 20, 0], [10, 0, 5, 1], [20, 5, 0, 2], [0, 1, 2, 0]], 0, 3) == 11", "assert shortest_path_dijkstra([[0, 1, 2, 3], [1, 0, 2, 1], [2, 2, 0, 1], [3, 1, 1, 0]], 0, 3) == 2"]}
{"seq_id": 34687090254, "instruction": "Write a python function to find the most frequent element in a list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_max_occurrences(lst):\n    count = Counter(lst)\n    return count.most_common(1)[0][0]\n```", "code": "from collections import Counter\n\ndef find_max_occurrences(lst):\n    count = Counter(lst)\n    return count.most_common(1)[0][0]", "entry_point": "find_max_occurrences", "testcase": ["assert find_max_occurrences([2, 3, 5, 7, 5, 2, 2]) == 2", "assert find_max_occurrences(['apple', 'banana', 'apple', 'orange', 'banana', 'banana']) == 'banana'", "assert find_max_occurrences([1, 2, 3, 2, 1, 1]) == 1"]}
{"seq_id": 4207788813, "instruction": "Write a Python function to convert a given string of digits and words into a numerical string. The function should replace all the words corresponding to digits (from 'zero' to 'nine') with their respective numerical values.", "output": "Here is the code to solve this problem: \n```python\ndef convert_string(s):\n    eng_words = ['zero','one','two','three','four','five','six','seven','eight','nine']\n    en_dict = {i:j for i,j in zip(eng_words, range(10))}\n    i = 0\n    answer = \"\"\n    while i < len(s):\n        tmp = ''\n        if s[i].isalpha():\n            while i < len(s) and s[i].isalpha() and tmp not in en_dict.keys():\n                tmp = tmp + s[i]\n                i += 1\n            answer = answer + str(en_dict[tmp])\n        else:\n            answer = answer + s[i]\n            i += 1\n    return answer\n```", "code": "def convert_string(s):\n    eng_words = ['zero','one','two','three','four','five','six','seven','eight','nine']\n    en_dict = {i:j for i,j in zip(eng_words, range(10))}\n    i = 0\n    answer = \"\"\n    while i < len(s):\n        tmp = ''\n        if s[i].isalpha():\n            while i < len(s) and s[i].isalpha() and tmp not in en_dict.keys():\n                tmp = tmp + s[i]\n                i += 1\n            answer = answer + str(en_dict[tmp])\n        else:\n            answer = answer + s[i]\n            i += 1\n    return answer", "entry_point": "convert_string", "testcase": ["assert convert_string(\"nineeightseven\") == \"987\"", "assert convert_string(\"foursix\") == \"46\"", "assert convert_string(\"onetwothree\") == \"123\""]}
{"seq_id": 38835919187, "instruction": "Write a python function that checks whether all elements in an array can be made equal by swapping adjacent elements any number of times. The function should return True if it is possible to make all elements equal, otherwise False.", "output": "Here is the code to solve this problem: \n```python\ndef canMakeEqual(arr):\n    first_element = arr[0]\n    for i in arr:\n        if i != first_element:\n            return False\n    return True\n```", "code": "def canMakeEqual(arr):\n    first_element = arr[0]\n    for i in arr:\n        if i != first_element:\n            return False\n    return True", "entry_point": "canMakeEqual", "testcase": ["assert canMakeEqual([2,2,2,2]) == True", "assert canMakeEqual([1,1,1]) == True", "assert canMakeEqual([1,2,1]) == False", "assert canMakeEqual([1,2,3,4,5]) == False"]}
{"seq_id": 18827374086, "instruction": "Write a function to calculate the Least Common Multiple (LCM) of two integers.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef least_common_multiple(a, b):\n  return abs(a*b) // math.gcd(a, b)\n```", "code": "import math\n\ndef least_common_multiple(a, b):\n  return abs(a*b) // math.gcd(a, b)", "entry_point": "least_common_multiple", "testcase": ["assert least_common_multiple(21, 6) == 42", "assert least_common_multiple(4, 6) == 12", "assert least_common_multiple(7, 5) == 35"]}
{"seq_id": 13672867878, "instruction": "Write a python function to find the missing number in a given list of numbers, which contains all numbers from 1 to n with one missing.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing_num(lst):\n    n = len(lst) + 1\n    total = n * (n + 1) // 2\n    sum_of_lst = sum(lst)\n    return total - sum_of_lst\n```", "code": "def find_missing_num(lst):\n    n = len(lst) + 1\n    total = n * (n + 1) // 2\n    sum_of_lst = sum(lst)\n    return total - sum_of_lst", "entry_point": "find_missing_num", "testcase": ["assert find_missing_num([1, 2, 3, 5]) == 4", "assert find_missing_num([1, 2, 4, 5, 6]) == 3", "assert find_missing_num([2, 3, 4, 5, 6]) == 1"]}
{"seq_id": 15304809915, "instruction": "Write a python function to calculate the sum of the digits of a factorial of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef sum_fact_digit(n) :\n    fact = 1\n    for i in range(1,n + 1) : \n        fact = fact * i \n    digit_sum = 0\n    while (fact > 0) :  \n        digit_sum += fact % 10\n        fact = fact // 10\n    return digit_sum\n```", "code": "def sum_fact_digit(n) :\n    fact = 1\n    for i in range(1,n + 1) : \n        fact = fact * i \n    digit_sum = 0\n    while (fact > 0) :  \n        digit_sum += fact % 10\n        fact = fact // 10\n    return digit_sum", "entry_point": "sum_fact_digit", "testcase": ["assert sum_fact_digit(10) == 27", "assert sum_fact_digit(5) == 3", "assert sum_fact_digit(7) == 9"]}
{"seq_id": 25395028422, "instruction": "Write a function that takes a list of integers as input and returns a new list with all the negative numbers moved to the beginning, all the positive numbers moved to the middle, and all the zeros moved to the end.", "output": "Here is the code to solve this problem: \n```python\ndef move_negative_positive_zero(arr, N):\n    negative = []\n    positive = []\n    zero = []\n    for i in range(N):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        elif arr[i] > 0:\n            positive.append(arr[i])\n        else:\n            zero.append(arr[i])\n    return negative + positive + zero\n```", "code": "def move_negative_positive_zero(arr, N):\n    negative = []\n    positive = []\n    zero = []\n    for i in range(N):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        elif arr[i] > 0:\n            positive.append(arr[i])\n        else:\n            zero.append(arr[i])\n    return negative + positive + zero", "entry_point": "move_negative_positive_zero", "testcase": ["assert move_negative_positive_zero([-1, 2, -3, 4, 0, -5, 6, 7, 0], 9) == [-1, -3, -5, 2, 4, 6, 7, 0, 0]", "assert move_negative_positive_zero([0, 1, -2, 3, -4, 5, -6, 7, -8], 9) == [-2, -4, -6, -8, 1, 3, 5, 7, 0]", "assert move_negative_positive_zero([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"]}
{"seq_id": 31773048955, "instruction": "Write a function to count the occurrences of each word in a given sentence.", "output": "Here is the code to solve this problem: \n```python\ndef word_count(sentence):\n    words = sentence.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n```", "code": "def word_count(sentence):\n    words = sentence.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict", "entry_point": "word_count", "testcase": ["assert word_count(\"One, two, three, four, five, six\") == {'One,': 1, 'two,': 1, 'three,': 1, 'four,': 1, 'five,': 1, 'six': 1}", "assert word_count(\"Python is fun, Python is easy, Python is powerful\") == {'Python': 3, 'is': 3, 'fun,': 1, 'easy,': 1, 'powerful': 1}", "assert word_count(\"Hello world, hello again\") == {'Hello': 1, 'world,': 1, 'hello': 1, 'again': 1}"]}
{"seq_id": 71342853311, "instruction": "Write a function to find how many times a given number can be expressed as the sum of consecutive positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef num_of_consecutive_sums(n):\n    count = 0\n    for start in range(1, n):\n        sum = 0\n        for next_num in range(start, n):\n            sum += next_num\n            if sum == n:\n                count += 1\n                break\n            elif sum > n:\n                break\n    return count + 1 # Adding 1 for the number itself\n```", "code": "def num_of_consecutive_sums(n):\n    count = 0\n    for start in range(1, n):\n        sum = 0\n        for next_num in range(start, n):\n            sum += next_num\n            if sum == n:\n                count += 1\n                break\n            elif sum > n:\n                break\n    return count + 1 # Adding 1 for the number itself", "entry_point": "num_of_consecutive_sums", "testcase": ["assert num_of_consecutive_sums(1) == 1 # 1 can be expressed as 1", "assert num_of_consecutive_sums(15) == 4 # 15 can be expressed as 7+8, 4+5+6, 1+2+3+4+5, 15", "assert num_of_consecutive_sums(9) == 3 # 9 can be expressed as 4+5, 2+3+4, 9"]}
{"seq_id": 20137409232, "instruction": "Write a function to check if a string is a valid IPv4 address.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_ipv4(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    return bool(re.match(pattern, ip))\n```", "code": "import re\n\ndef is_valid_ipv4(ip):\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    return bool(re.match(pattern, ip))", "entry_point": "is_valid_ipv4", "testcase": ["assert is_valid_ipv4(\"192.168.1.1\") == True", "assert is_valid_ipv4(\"192.168.1\") == False", "assert is_valid_ipv4(\"256.256.256.256\") == False"]}
{"seq_id": 29877524067, "instruction": "Write a function to multiply the contents of one list with corresponding index of other list.", "output": "Here is the code to solve this problem: \n```python\ndef multiply_elements(list1, list2):\n    result = [x * y for x, y in zip(list1, list2)]\n    return result\n```", "code": "def multiply_elements(list1, list2):\n    result = [x * y for x, y in zip(list1, list2)]\n    return result", "entry_point": "multiply_elements", "testcase": ["assert multiply_elements([2, 3, 4], [5, 6, 7]) == [10, 18, 28]", "assert multiply_elements([1, 4, 5], [2, 5, 10]) == [2, 20, 50]", "assert multiply_elements([1, 2, 3], [4, 5, 6]) == [4, 10, 18]"]}
{"seq_id": 74351520286, "instruction": "Write a function that reverses a string using a stack data structure.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_string_stack(s):\n    stack = []\n    for char in s:\n        stack.append(char)\n    result = \"\"\n    while stack:\n        result += stack.pop()\n    return result\n```", "code": "def reverse_string_stack(s):\n    stack = []\n    for char in s:\n        stack.append(char)\n    result = \"\"\n    while stack:\n        result += stack.pop()\n    return result", "entry_point": "reverse_string_stack", "testcase": ["assert reverse_string_stack(\"world\")==\"dlrow\"", "assert reverse_string_stack(\"python\")==\"nohtyp\"", "assert reverse_string_stack(\"hello\")==\"olleh\""]}
{"seq_id": 29188363030, "instruction": "Write a function to determine if a given binary tree is a valid binary search tree (BST).", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_bst(preorder):\n    def is_valid_bst_helper(preorder, lower=float('-inf'), upper=float('inf')):\n        if not preorder:\n            return True\n        root = preorder[0]\n        if root <= lower or root >= upper:\n            return False\n        i = 1\n        while i < len(preorder) and preorder[i] < root:\n            i += 1\n        return is_valid_bst_helper(preorder[1:i], lower, root) and is_valid_bst_helper(preorder[i:], root, upper)\n\n    return is_valid_bst_helper(preorder)\n\ndef main():\n    assert is_valid_bst([2,1,3]) == True\n    assert is_valid_bst([5,1,4,null,null,3,6]) == False\n\nif __name__ == '__main__':\n    main()\n```", "code": "def is_valid_bst(preorder):\n    def is_valid_bst_helper(preorder, lower=float('-inf'), upper=float('inf')):\n        if not preorder:\n            return True\n        root = preorder[0]\n        if root <= lower or root >= upper:\n            return False\n        i = 1\n        while i < len(preorder) and preorder[i] < root:\n            i += 1\n        return is_valid_bst_helper(preorder[1:i], lower, root) and is_valid_bst_helper(preorder[i:], root, upper)\n\n    return is_valid_bst_helper(preorder)\n\ndef main():\n    assert is_valid_bst([2,1,3]) == True\n    assert is_valid_bst([5,1,4,null,null,3,6]) == False\n\nif __name__ == '__main__':\n    main()", "entry_point": "is_valid_bst", "testcase": ["# Tree: [2,1,3]", "assert is_valid_bst([2,1,3]) == True", "#    1   3", "#      2", "#      1   4", "#        5", "#       / \\", "#     / \\", "#         / \\", "", "# Tree: [5,1,4,null,null,3,6]", "#        3   6"]}
{"seq_id": 9675962842, "instruction": "Write a python function to find the largest Fibonacci number that is also a perfect square less than or equal to a given number n.", "output": "Here is the code to solve this problem: \n```python\nfrom math import sqrt\n\ndef is_perfect_square(n):\n    return int(sqrt(n))**2 == n\n\ndef largest_fibonacci_square(n):\n    a, b = 1, 1\n    while b <= n:\n        if is_perfect_square(b):\n            largest_square = b\n        a, b = b, a + b\n    return largest_square\n```", "code": "from math import sqrt\n\ndef is_perfect_square(n):\n    return int(sqrt(n))**2 == n\n\ndef largest_fibonacci_square(n):\n    a, b = 1, 1\n    while b <= n:\n        if is_perfect_square(b):\n            largest_square = b\n        a, b = b, a + b\n    return largest_square", "entry_point": "largest_fibonacci_square", "testcase": ["assert largest_fibonacci_square(100000) == 144", "assert largest_fibonacci_square(1000) == 144", "assert largest_fibonacci_square(10000) == 144"]}
{"seq_id": 30362942074, "instruction": "Write a function to find the prime factors of a number.\n\nThe function should return a list of all prime factors of the given number, sorted in ascending order. Each prime factor should appear in the list as many times as it divides the number.", "output": "Here is the code to solve this problem: \n```python\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```", "code": "def prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "entry_point": "prime_factors", "testcase": ["assert prime_factors(100) == [2, 2, 5, 5]", "assert prime_factors(25) == [5, 5]", "assert prime_factors(8) == [2, 2, 2]", "assert prime_factors(70) == [2, 5, 7]"]}
{"seq_id": 7867971084, "instruction": "Write a python function to find the number of consecutive occurrences of a specific character in a string.", "output": "Here is the code to solve this problem: \n```python\ndef char_consecutive(string, char):\n    max_consecutive = 0\n    current_consecutive = 0\n    for i in string:\n        if i == char:\n            current_consecutive += 1\n            if current_consecutive > max_consecutive:\n                max_consecutive = current_consecutive\n        else:\n            current_consecutive = 0\n    return max_consecutive\n```", "code": "def char_consecutive(string, char):\n    max_consecutive = 0\n    current_consecutive = 0\n    for i in string:\n        if i == char:\n            current_consecutive += 1\n            if current_consecutive > max_consecutive:\n                max_consecutive = current_consecutive\n        else:\n            current_consecutive = 0\n    return max_consecutive", "entry_point": "char_consecutive", "testcase": ["assert char_consecutive(\"aaabbccc\", \"a\") == 3", "assert char_consecutive(\"aaabbccc\", \"c\") == 3", "assert char_consecutive(\"aaabbccc\", \"b\") == 2"]}
{"seq_id": 30546854203, "instruction": "Write a python function to find the minimum number of changes required to convert a given string into a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same backward as forward.", "output": "Here is the code to solve this problem: \n```python\ndef min_changes_to_palindrome(s):\n    left = 0\n    right = len(s) - 1\n    changes = 0\n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n```", "code": "def min_changes_to_palindrome(s):\n    left = 0\n    right = len(s) - 1\n    changes = 0\n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "entry_point": "min_changes_to_palindrome", "testcase": ["assert min_changes_to_palindrome(\"abc\") == 1", "assert min_changes_to_palindrome(\"abccba\") == 0", "assert min_changes_to_palindrome(\"abcde\") == 2"]}
{"seq_id": 35388031270, "instruction": "Write a python function to generate all possible subset sums of a given set of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef subsetSums(nums):\n    ret = [0]\n\n    def dfs(nums, index, path, ret):\n        for i in range(index, len(nums)):\n            ret.append(sum(path+[nums[i]]))\n            dfs(nums, i+1, path+[nums[i]], ret)\n\n    dfs(nums, 0, [], ret)\n    return sorted(list(set(ret)))\n```", "code": "def subsetSums(nums):\n    ret = [0]\n\n    def dfs(nums, index, path, ret):\n        for i in range(index, len(nums)):\n            ret.append(sum(path+[nums[i]]))\n            dfs(nums, i+1, path+[nums[i]], ret)\n\n    dfs(nums, 0, [], ret)\n    return sorted(list(set(ret)))", "entry_point": "subsetSums", "testcase": ["assert subsetSums([1, 2, 3]) == [0, 1, 2, 3, 4, 5, 6]", "assert subsetSums([2, 1, 3]) == [0, 1, 2, 3, 4, 5, 6]", "assert subsetSums([3, 1]) == [0, 1, 3, 4]"]}
{"seq_id": 40220042232, "instruction": "Write a function to find the maximum product subarray in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_subarray(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n```", "code": "def max_product_subarray(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result", "entry_point": "max_product_subarray", "testcase": ["assert max_product_subarray([2, 3, -2, 4]) == 6", "assert max_product_subarray([-2, 0, -1]) == 0", "assert max_product_subarray([-2, -3, -4]) == 12"]}
{"seq_id": 71572980685, "instruction": "Write a python function to find the third smallest number in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef third_smallest(lst):\n    if len(lst) < 3:\n        return 'List should have at least three unique elements'\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 3:\n        return 'List should have at least three unique elements'\n    unique_lst.sort()\n    return unique_lst[2]\n```", "code": "def third_smallest(lst):\n    if len(lst) < 3:\n        return 'List should have at least three unique elements'\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 3:\n        return 'List should have at least three unique elements'\n    unique_lst.sort()\n    return unique_lst[2]", "entry_point": "third_smallest", "testcase": ["assert third_smallest([1, 2, 3, 4, 5]) == 3", "assert third_smallest([5, 1, 4, 3, 2]) == 3", "assert third_smallest([1, 1]) == 'List should have at least three unique elements'"]}
{"seq_id": 72128912554, "instruction": "Write a python function to find the maximum number of overlapping intervals in a list of intervals.", "output": "Here is the code to solve this problem: \n```python\ndef max_Overlapping(intervals):\n    events = []\n    for start, end in intervals:\n        events.append((start, 'start'))\n        events.append((end, 'end'))\n    events.sort()\n    max_overlap = current_overlap = 0\n    for _, event_type in events:\n        if event_type == 'start':\n            current_overlap += 1\n            max_overlap = max(max_overlap, current_overlap)\n        else:\n            current_overlap -= 1\n    return max_overlap\n```", "code": "def max_Overlapping(intervals):\n    events = []\n    for start, end in intervals:\n        events.append((start, 'start'))\n        events.append((end, 'end'))\n    events.sort()\n    max_overlap = current_overlap = 0\n    for _, event_type in events:\n        if event_type == 'start':\n            current_overlap += 1\n            max_overlap = max(max_overlap, current_overlap)\n        else:\n            current_overlap -= 1\n    return max_overlap", "entry_point": "max_Overlapping", "testcase": ["assert max_Overlapping([(1, 3), (2, 4), (5, 6), (7, 9)]) == 2", "assert max_Overlapping([(1, 10), (2, 6), (3, 5), (7, 8)]) == 3", "assert max_Overlapping([(1, 2), (2, 3), (3, 4), (4, 5)]) == 1"]}
{"seq_id": 40685026417, "instruction": "Write a function that uses heapq to find the k smallest elements in a list.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef find_k_smallest(lst, k):\n    return heapq.nsmallest(k, lst)\n```", "code": "import heapq\n\ndef find_k_smallest(lst, k):\n    return heapq.nsmallest(k, lst)", "entry_point": "find_k_smallest", "testcase": ["assert find_k_smallest([1,2,3,4,5], 2) == [1, 2]", "assert find_k_smallest([5,3,6,9,4], 3) == [3, 4, 5]", "", "import heapq"]}
{"seq_id": 31117413625, "instruction": "Write a function to check if a string is a rotation of a substring within another string.", "output": "Here is the code to solve this problem: \n```python\ndef is_rotation_substring(text, potential_sub):\n    if len(potential_sub) > len(text):\n        return False\n    double_text = text + text\n    return potential_sub in double_text\n```", "code": "def is_rotation_substring(text, potential_sub):\n    if len(potential_sub) > len(text):\n        return False\n    double_text = text + text\n    return potential_sub in double_text", "entry_point": "is_rotation_substring", "testcase": ["assert is_rotation_substring(\"python\", \"thonpy\") == True", "assert is_rotation_substring(\"algorithm\", \"rithmalgo\") == True", "assert is_rotation_substring(\"python\", \"pythno\") == False", "assert is_rotation_substring(\"coding\", \"ingcod\") == True", "assert is_rotation_substring(\"example\", \"mpleexa\") == True", "assert is_rotation_substring(\"waterbottle\", \"erbottlewat\") == True"]}
{"seq_id": 23756509206, "instruction": "Write a python function to find the largest palindrome number that is a product of two numbers within a given range. The range is defined by two positive integers, start and end.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_palindrome(start, end):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    largest = 0\n    for i in range(end, start - 1, -1):\n        for j in range(i, start - 1, -1):\n            product = i * j\n            if product <= largest:\n                break\n            if is_palindrome(product):\n                largest = product\n    return largest\n```", "code": "def find_largest_palindrome(start, end):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    largest = 0\n    for i in range(end, start - 1, -1):\n        for j in range(i, start - 1, -1):\n            product = i * j\n            if product <= largest:\n                break\n            if is_palindrome(product):\n                largest = product\n    return largest", "entry_point": "find_largest_palindrome", "testcase": ["assert find_largest_palindrome(100, 999) == 906609", "assert find_largest_palindrome(1000, 9999) == 99000099", "assert find_largest_palindrome(10, 99) == 9009"]}
{"seq_id": 17272478666, "instruction": "Write a function to generate the nth row of Pascal's triangle.", "output": "Here is the code to solve this problem: \n```python\ndef pascal_row(n):\n    row = [1] * (n + 1)\n    for i in range(n + 1):\n        for j in range(i - 1, 0, -1):\n            row[j] += row[j - 1]\n    return row\n```", "code": "def pascal_row(n):\n    row = [1] * (n + 1)\n    for i in range(n + 1):\n        for j in range(i - 1, 0, -1):\n            row[j] += row[j - 1]\n    return row", "entry_point": "pascal_row", "testcase": ["assert pascal_row(3) == [1, 3, 3, 1]", "assert pascal_row(4) == [1, 4, 6, 4, 1]", "assert pascal_row(1) == [1, 1]", "assert pascal_row(0) == [1]"]}
{"seq_id": 33838075572, "instruction": "Write a function to find the minimum number of jumps needed to reach the end of an array from the first element.\n\nThe function should take a list of integers as input, where each element represents the maximum number of steps that can be jumped from that element. The function should return the minimum number of jumps needed to reach the last index.", "output": "Here is the code to solve this problem: \n```python\ndef jump(nums: list[int]) -> int:\n    n, ans, i = len(nums), 0, 0\n    if len(nums) < 2:\n        return 0\n    max_reach, step, jump = nums[0], nums[0], 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + nums[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return jump\n```", "code": "def jump(nums: list[int]) -> int:\n    n, ans, i = len(nums), 0, 0\n    if len(nums) < 2:\n        return 0\n    max_reach, step, jump = nums[0], nums[0], 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + nums[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return jump", "entry_point": "jump", "testcase": ["assert jump([10,9,8,7,6,5,4,3,2,1,0]) == 1", "assert jump([2,3,1,1,4]) == 2", "assert jump([1,1,1,1,1]) == 4"]}
{"seq_id": 38177696654, "instruction": "Develop a python function to find the k most frequent elements in a list of numbers.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\nimport heapq\n\ndef k_most_frequent(nums, k):\n    count = Counter(nums) # count the frequency of each element\n    return heapq.nlargest(k, count.keys(), key=count.get) # return the k most frequent elements\n```", "code": "from collections import Counter\nimport heapq\n\ndef k_most_frequent(nums, k):\n    count = Counter(nums) # count the frequency of each element\n    return heapq.nlargest(k, count.keys(), key=count.get) # return the k most frequent elements", "entry_point": "k_most_frequent", "testcase": ["assert k_most_frequent([4,1,2,2,3,3,3,4,4,4,4],2) == [4,3]", "assert k_most_frequent([1],1) == [1]", "assert k_most_frequent([1,1,1,2,2,3],2) == [1,2]"]}
{"seq_id": 41792248136, "instruction": "Write a python function to find the maximum number of bombs that can be detonated by setting off one bomb. A bomb can detonate other bombs if the distance between them is less than or equal to the radius of the bomb.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\nimport math\n\ndef maximum_bombs(bombs):\n    length = len(bombs)\n    ans = 0\n    graph = defaultdict(list)\n    \n    for index in range(length):\n        for ind in range(index + 1, length):\n            distance = math.sqrt((bombs[index][0]-bombs[ind][0])**2 + (bombs[index][1]-bombs[ind][1])**2)\n            \n            if bombs[index][2] >= distance:\n                graph[index].append(ind)\n            if bombs[ind][2] >= distance:\n                graph[ind].append(index)\n    \n    def dfs(node, visited):\n        for child in graph[node]:\n            if child not in visited:\n                visited.add(child)\n                dfs(child, visited)\n    \n    for i in range(length):\n        visited = set([i])\n        dfs(i, visited)\n        ans = max(ans, len(visited))\n                          \n    return ans\n```", "code": "from collections import defaultdict\nimport math\n\ndef maximum_bombs(bombs):\n    length = len(bombs)\n    ans = 0\n    graph = defaultdict(list)\n    \n    for index in range(length):\n        for ind in range(index + 1, length):\n            distance = math.sqrt((bombs[index][0]-bombs[ind][0])**2 + (bombs[index][1]-bombs[ind][1])**2)\n            \n            if bombs[index][2] >= distance:\n                graph[index].append(ind)\n            if bombs[ind][2] >= distance:\n                graph[ind].append(index)\n    \n    def dfs(node, visited):\n        for child in graph[node]:\n            if child not in visited:\n                visited.add(child)\n                dfs(child, visited)\n    \n    for i in range(length):\n        visited = set([i])\n        dfs(i, visited)\n        ans = max(ans, len(visited))\n                          \n    return ans", "entry_point": "maximum_bombs", "testcase": ["assert maximum_bombs([[2,1,3],[6,1,4]]) == 2", "assert maximum_bombs([[1,1,5],[10,10,5]]) == 1", "assert maximum_bombs([[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]) == 5"]}
{"seq_id": 7368571250, "instruction": "Write a function to find the minimum number of jumps required to reach the end of the array from the first position.", "output": "Here is the code to solve this problem: \n```python\ndef jump_search(arr):\n    n = len(arr)\n    step = arr[0]\n    maxReach = arr[0]\n    jump = 1\n    if n <= 1:\n        return 0\n    i = 1\n    while i < n-1:\n        if i + arr[i] > maxReach:\n            maxReach = i + arr[i]\n            jump += 1\n        i += 1\n        if maxReach >= n-1:\n            return jump\n    return -1\n```", "code": "def jump_search(arr):\n    n = len(arr)\n    step = arr[0]\n    maxReach = arr[0]\n    jump = 1\n    if n <= 1:\n        return 0\n    i = 1\n    while i < n-1:\n        if i + arr[i] > maxReach:\n            maxReach = i + arr[i]\n            jump += 1\n        i += 1\n        if maxReach >= n-1:\n            return jump\n    return -1", "entry_point": "jump_search", "testcase": ["assert jump_search([1,1,1,1,1])==4", "assert jump_search([10,9,8,7,6,5,4,3,2,1,0])==1", "assert jump_search([2,3,1,1,4])==2"]}
{"seq_id": 18735756439, "instruction": "Write a function that takes in a list of numbers and returns the sum of all numbers that are repeated consecutively in the list. If a number is repeated more than twice consecutively, only count it twice.\n\nFor example:\n- For the input [1,2,3,3,4,5,5,5], the function should return 16 (3+3+5+5).\n- For the input [1,1,2,2,3,3,4,4,5,5], the function should return 30 (1+1+2+2+3+3+4+4+5+5).\n- For the input [1,2,3,4,5], the function should return 0.", "output": "Here is the code to solve this problem: \n```python\ndef repeated_sum(nums):\n    if not nums:\n        return 0\n        \n    total_sum = 0\n    count = 1\n    \n    for i in range(1,len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n            if count == 2:\n                total_sum += nums[i] * 2\n        else:\n            count = 1\n            \n    return total_sum\n```", "code": "def repeated_sum(nums):\n    if not nums:\n        return 0\n        \n    total_sum = 0\n    count = 1\n    \n    for i in range(1,len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n            if count == 2:\n                total_sum += nums[i] * 2\n        else:\n            count = 1\n            \n    return total_sum", "entry_point": "repeated_sum", "testcase": ["assert repeated_sum([1,1,2,2,3,3,4,4,5,5]) == 30", "assert repeated_sum([1,2,3,4,5]) == 0", "assert repeated_sum([1,2,3,3,4,5,5,5]) == 16"]}
{"seq_id": 839027315, "instruction": "Write a function to split a string by a given delimiter and return a list of the split strings.", "output": "Here is the code to solve this problem: \n```python\ndef split_string(text, delimiter):\n    return text.split(delimiter)\n```", "code": "def split_string(text, delimiter):\n    return text.split(delimiter)", "entry_point": "split_string", "testcase": ["assert split_string('one,two,three', ',') == ['one', 'two', 'three']", "assert split_string('python:programming:language', ':') == ['python', 'programming', 'language']", "assert split_string('hello-world', '-') == ['hello', 'world']"]}
{"seq_id": 17944571603, "instruction": "Write a function to find the largest continuous subarray sum from a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_subarray_sum(nums):\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def largest_subarray_sum(nums):\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "largest_subarray_sum", "testcase": ["assert largest_subarray_sum([1])==1", "assert largest_subarray_sum([5,4,-1,7,8])==23", "assert largest_subarray_sum([-2,1,-3,4,-1,2,1,-5,4])==6"]}
{"seq_id": 26569247714, "instruction": "Write a function to find the largest number in a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef largest_number_in_binary_tree(tree_list):\n    def helper(node):\n        if node is None:\n            return float('-inf')\n        left_max = helper(node.left)\n        right_max = helper(node.right)\n        return max(node.val, left_max, right_max)\n    \n    root = TreeNode(tree_list[0])\n    queue = [root]\n    i = 1\n    while queue and i < len(tree_list):\n        node = queue.pop(0)\n        if tree_list[i] is not None:\n            node.left = TreeNode(tree_list[i])\n            queue.append(node.left)\n        i += 1\n        if i >= len(tree_list):\n            break\n        if tree_list[i] is not None:\n            node.right = TreeNode(tree_list[i])\n            queue.append(node.right)\n        i += 1\n    return helper(root)\n```", "code": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef largest_number_in_binary_tree(tree_list):\n    def helper(node):\n        if node is None:\n            return float('-inf')\n        left_max = helper(node.left)\n        right_max = helper(node.right)\n        return max(node.val, left_max, right_max)\n    \n    root = TreeNode(tree_list[0])\n    queue = [root]\n    i = 1\n    while queue and i < len(tree_list):\n        node = queue.pop(0)\n        if tree_list[i] is not None:\n            node.left = TreeNode(tree_list[i])\n            queue.append(node.left)\n        i += 1\n        if i >= len(tree_list):\n            break\n        if tree_list[i] is not None:\n            node.right = TreeNode(tree_list[i])\n            queue.append(node.right)\n        i += 1\n    return helper(root)", "entry_point": "largest_number_in_binary_tree", "testcase": ["assert largest_number_in_binary_tree([3,2,4,1,3,None,5]) == 5", "assert largest_number_in_binary_tree([5,3,7,2,4,None,8]) == 8", "assert largest_number_in_binary_tree([1,2,3]) == 3"]}
{"seq_id": 21292086917, "instruction": "Write a python function to find the maximum size of a square sub-matrix with all 1's in a binary matrix.", "output": "Here is the code to solve this problem: \n```python\ndef maxSquare(matrix):\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    max_side = 0\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_side = max(max_side, dp[i][j])\n    return max_side\n```", "code": "def maxSquare(matrix):\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    max_side = 0\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_side = max(max_side, dp[i][j])\n    return max_side", "entry_point": "maxSquare", "testcase": ["assert maxSquare([[0, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 1]]) == 3", "assert maxSquare([[1, 0, 1], [1, 1, 1], [0, 1, 1]]) == 2", "assert maxSquare([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0"]}
{"seq_id": 7211884040, "instruction": "Write a function to calculate the area of a triangle given the lengths of its three sides using Heron's formula.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n```", "code": "import math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area", "entry_point": "triangle_area", "testcase": ["assert triangle_area(3,4,5)==6.0", "assert triangle_area(7,8,9)==26.832815729997478", "assert triangle_area(10,10,10)==43.30127018922193"]}
{"seq_id": 33702978478, "instruction": "Write a python function to convert a given string into a list of characters, excluding any spaces and punctuation marks.", "output": "Here is the code to solve this problem: \n```python\nimport string\n\ndef string_to_list(s):\n    result = []\n    for c in s:\n        if c.isalnum():\n            result.append(c)\n    return result\n```", "code": "import string\n\ndef string_to_list(s):\n    result = []\n    for c in s:\n        if c.isalnum():\n            result.append(c)\n    return result", "entry_point": "string_to_list", "testcase": ["assert string_to_list(\"Python 3.8\") == ['P', 'y', 't', 'h', 'o', 'n', '3', '8']", "assert string_to_list(\"Hello, World!\") == ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']", "assert string_to_list(\"123,456.789!\") == ['1', '2', '3', '4', '5', '6', '7', '8', '9']"]}
{"seq_id": 42811694971, "instruction": "Write a function that takes a list of dates and returns the earliest date.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\n\ndef find_earliest_date(dates):\n    earliest_date = datetime.strptime(dates[0], \"%Y-%m-%d\")\n    for date in dates:\n        current_date = datetime.strptime(date, \"%Y-%m-%d\")\n        if current_date < earliest_date:\n            earliest_date = current_date\n    return earliest_date.strftime(\"%Y-%m-%d\")\n```", "code": "from datetime import datetime\n\ndef find_earliest_date(dates):\n    earliest_date = datetime.strptime(dates[0], \"%Y-%m-%d\")\n    for date in dates:\n        current_date = datetime.strptime(date, \"%Y-%m-%d\")\n        if current_date < earliest_date:\n            earliest_date = current_date\n    return earliest_date.strftime(\"%Y-%m-%d\")", "entry_point": "find_earliest_date", "testcase": ["assert find_earliest_date([\"2023-01-01\", \"2023-01-02\", \"2022-12-31\"]) == \"2022-12-31\"", "assert find_earliest_date([\"2023-01-15\", \"2023-01-14\", \"2023-01-16\"]) == \"2023-01-14\"", "assert find_earliest_date([\"2023-03-01\", \"2023-02-28\", \"2023-02-01\"]) == \"2023-02-01\""]}
{"seq_id": 21817641803, "instruction": "Write a function that takes a string as an input and returns a dictionary where the keys are the characters in the string and the values are the number of times each character appears in the string. Consider case sensitivity in your function.", "output": "Here is the code to solve this problem: \n```python\ndef character_frequency(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n```", "code": "def character_frequency(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency", "entry_point": "character_frequency", "testcase": ["assert character_frequency('hello') == {'h': 1, 'e': 1, 'l': 2, 'o': 1}", "assert character_frequency('Mississippi') == {'M': 1, 'i': 4, 's': 4, 'p': 2}", "assert character_frequency('Live') != {'l': 1, 'i': 1, 'v': 1, 'e': 1}, 'Live and live should be treated differently due to case sensitivity'"]}
{"seq_id": 22239820611, "instruction": "Write a python function to find the nth Catalan number. The nth Catalan number is given by the formula: C(n) = (2n)! / ((n+1)! * n!). The Catalan numbers are a sequence of natural numbers that have many applications in combinatorial mathematics, including the number of correct bracket sequences of length 2n, the number of rooted binary trees with n+1 leaves, and the number of ways to completely parenthesize n+1 factors.", "output": "Here is the code to solve this problem: \n```python\ndef get_catalan(n):\n    if n <= 1:\n        return 1\n    catalan = [0 for _ in range(n+1)]\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]\n```", "code": "def get_catalan(n):\n    if n <= 1:\n        return 1\n    catalan = [0 for _ in range(n+1)]\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]", "entry_point": "get_catalan", "testcase": ["assert get_catalan(0) == 1", "assert get_catalan(4) == 14", "assert get_catalan(3) == 5", "assert get_catalan(2) == 2", "assert get_catalan(1) == 1"]}
{"seq_id": 40103710680, "instruction": "Write a function to convert a given decimal number to its equivalent negative base-2 representation as a string.", "output": "Here is the code to solve this problem: \n```python\ndef convert_to_negabinary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        return \"-\" + convert_to_negabinary(-n)\n    digits = []\n    while n != 0:\n        n, remainder = divmod(n, -2)\n        if remainder < 0:\n            n, remainder = n + 1, remainder + 2\n        digits.append(str(remainder))\n    return \"\".join(digits[::-1])\n```", "code": "def convert_to_negabinary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        return \"-\" + convert_to_negabinary(-n)\n    digits = []\n    while n != 0:\n        n, remainder = divmod(n, -2)\n        if remainder < 0:\n            n, remainder = n + 1, remainder + 2\n        digits.append(str(remainder))\n    return \"\".join(digits[::-1])", "entry_point": "convert_to_negabinary", "testcase": ["assert convert_to_negabinary(2) == \"110\"", "assert convert_to_negabinary(4) == \"100\"", "assert convert_to_negabinary(3) == \"111\""]}
{"seq_id": 23882219400, "instruction": "Write a function to find the LARGEST EVEN NUMBER in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_even(lst):\n    even_numbers = [num for num in lst if num % 2 == 0]\n    if even_numbers:\n        return max(even_numbers)\n    else:\n        return None\n```", "code": "def find_largest_even(lst):\n    even_numbers = [num for num in lst if num % 2 == 0]\n    if even_numbers:\n        return max(even_numbers)\n    else:\n        return None", "entry_point": "find_largest_even", "testcase": ["assert find_largest_even([3, 5, 2, 8, 9, 10]) == 10", "assert find_largest_even([1, 3, 5]) == None", "assert find_largest_even([2, 4, 6, 8]) == 8"]}
{"seq_id": 41364285025, "instruction": "Write a function to convert an integer to a Roman numeral.", "output": "Here is the code to solve this problem: \n```python\ndef intToRoman(num: int) -> str:\n    roman_numerals = [\n        (1000, \"M\"),\n        (900, \"CM\"),\n        (500, \"D\"),\n        (400, \"CD\"),\n        (100, \"C\"),\n        (90, \"XC\"),\n        (50, \"L\"),\n        (40, \"XL\"),\n        (10, \"X\"),\n        (9, \"IX\"),\n        (5, \"V\"),\n        (4, \"IV\"),\n        (1, \"I\"),\n    ]\n    result = \"\"\n    for value, numeral in roman_numerals:\n        while num >= value:\n            result += numeral\n            num -= value\n    return result\n```", "code": "def intToRoman(num: int) -> str:\n    roman_numerals = [\n        (1000, \"M\"),\n        (900, \"CM\"),\n        (500, \"D\"),\n        (400, \"CD\"),\n        (100, \"C\"),\n        (90, \"XC\"),\n        (50, \"L\"),\n        (40, \"XL\"),\n        (10, \"X\"),\n        (9, \"IX\"),\n        (5, \"V\"),\n        (4, \"IV\"),\n        (1, \"I\"),\n    ]\n    result = \"\"\n    for value, numeral in roman_numerals:\n        while num >= value:\n            result += numeral\n            num -= value\n    return result", "entry_point": "intToRoman", "testcase": ["assert intToRoman(9)== \"IX\"", "assert intToRoman(3)== \"III\"", "assert intToRoman(58)== \"LVIII\"", "assert intToRoman(1994)== \"MCMXCIV\"", "assert intToRoman(4)== \"IV\""]}
{"seq_id": 74414916888, "instruction": "Write a python function to check if a given string is a valid HTML tag.", "output": "Here is the code to solve this problem: \n```python\ndef isValidHTMLTag(s: str) -> bool:\n    stack = []\n    i = 0\n    while i < len(s):\n        if s[i] == '<':\n            if i+1 < len(s) and s[i+1] == '/':\n                if len(stack) == 0:\n                    return False\n                if stack.pop() != s[i+2:s.index('>',i)]:\n                    return False\n                i = s.index('>',i) + 1\n            else:\n                stack.append(s[i+1:s.index('>',i)])\n                i = s.index('>',i) + 1\n        else:\n            i+=1\n    return len(stack) == 0\n```", "code": "def isValidHTMLTag(s: str) -> bool:\n    stack = []\n    i = 0\n    while i < len(s):\n        if s[i] == '<':\n            if i+1 < len(s) and s[i+1] == '/':\n                if len(stack) == 0:\n                    return False\n                if stack.pop() != s[i+2:s.index('>',i)]:\n                    return False\n                i = s.index('>',i) + 1\n            else:\n                stack.append(s[i+1:s.index('>',i)])\n                i = s.index('>',i) + 1\n        else:\n            i+=1\n    return len(stack) == 0", "entry_point": "isValidHTMLTag", "testcase": ["assert isValidHTMLTag(\"<div><span></span></div>\") == True", "assert isValidHTMLTag(\"<div><div></div>\") == False", "assert isValidHTMLTag(\"<div><span>\") == False", "assert isValidHTMLTag(\"<div>\") == False", "assert isValidHTMLTag(\"<div></div>\") == True"]}
{"seq_id": 74188162317, "instruction": "Write a python function to find the number of different ways to add and/or subtract the given list of numbers such that their sum equals the target.", "output": "Here is the code to solve this problem: \n```python\nfrom functools import lru_cache\n\ndef find_target_ways(nums, target):\n    @lru_cache(maxsize=None)\n    def dfs(index, sum_):\n        if index == len(nums):\n            return 1 if sum_ == target else 0\n        return dfs(index + 1, sum_ + nums[index]) + dfs(index + 1, sum_ - nums[index])\n    return dfs(0, 0)\n```", "code": "from functools import lru_cache\n\ndef find_target_ways(nums, target):\n    @lru_cache(maxsize=None)\n    def dfs(index, sum_):\n        if index == len(nums):\n            return 1 if sum_ == target else 0\n        return dfs(index + 1, sum_ + nums[index]) + dfs(index + 1, sum_ - nums[index])\n    return dfs(0, 0)", "entry_point": "find_target_ways", "testcase": ["assert find_target_ways([1, 2, 3], 0) == 2", "assert find_target_ways([1], 1) == 1", "assert find_target_ways([1, 1, 1, 1, 1], 3) == 5"]}
{"seq_id": 5213798513, "instruction": "Write a function to find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\ndef findKthLargest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    for _ in range(len(nums) - k):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\n```", "code": "import heapq\ndef findKthLargest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    for _ in range(len(nums) - k):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)", "entry_point": "findKthLargest", "testcase": ["assert findKthLargest([3,2,1,5,6,4], 2)==5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 1)==6", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4)==4"]}
{"seq_id": 42091708632, "instruction": "Write a function that calculates the Lowest Common Multiple (LCM) of a list of integers.", "output": "Here is the code to solve this problem: \n```python\nfrom math import gcd\n\ndef lcm(numbers):\n    def lcm_pair(a, b):\n        return a * b // gcd(a, b)\n    result = numbers[0]\n    for num in numbers[1:]:\n        result = lcm_pair(result, num)\n    return result\n\nprint(lcm([2, 6, 8, 14]))\nprint(lcm([1, 2, 3]))\nprint(lcm([10, 15, 20, 25]))\n```", "code": "from math import gcd\n\ndef lcm(numbers):\n    def lcm_pair(a, b):\n        return a * b // gcd(a, b)\n    result = numbers[0]\n    for num in numbers[1:]:\n        result = lcm_pair(result, num)\n    return result\n\nprint(lcm([2, 6, 8, 14]))\nprint(lcm([1, 2, 3]))\nprint(lcm([10, 15, 20, 25]))", "entry_point": "lcm", "testcase": ["assert lcm([10, 15, 20, 25]) == 300", "assert lcm([2, 6, 8, 14]) == 168", "assert lcm([1, 2, 3]) == 6"]}
{"seq_id": 9948892429, "instruction": "Write a python function to convert an integer to binary using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef int_to_bin(n):\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        return int_to_bin(n//2) + str(n%2)\n```", "code": "def int_to_bin(n):\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        return int_to_bin(n//2) + str(n%2)", "entry_point": "int_to_bin", "testcase": ["assert int_to_bin(255) == '11111111'", "assert int_to_bin(5) == '101'", "assert int_to_bin(10) == '1010'"]}
{"seq_id": 4568279427, "instruction": "Create a python function that identifies the number of unique substrings in a given string. A unique substring is one that does not repeat within the string.", "output": "Here is the code to solve this problem: \n```python\ndef unique_substrings(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return len(substrings)\n```", "code": "def unique_substrings(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return len(substrings)", "entry_point": "unique_substrings", "testcase": ["assert unique_substrings(\"abc\") == 6", "assert unique_substrings(\"aaa\") == 3", "assert unique_substrings(\"abab\") == 7"]}
{"seq_id": 13090828255, "instruction": "Write a function to calculate the total cost of a list of items with their quantity and price. The function should return the total cost as a float.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_total_cost(items):\n    total_cost = 0.0\n    for item in items:\n        total_cost += item[1] * item[2]\n    return total_cost\n```", "code": "def calculate_total_cost(items):\n    total_cost = 0.0\n    for item in items:\n        total_cost += item[1] * item[2]\n    return total_cost", "entry_point": "calculate_total_cost", "testcase": ["assert calculate_total_cost([(\"bread\", 1, 2.0), (\"milk\", 2, 1.5)]) == 5.0", "assert calculate_total_cost([(\"mango\", 1, 1.0), (\"pineapple\", 3, 2.0)]) == 7.0", "assert calculate_total_cost([(\"apple\", 2, 0.5), (\"banana\", 5, 0.3)]) == 2.5"]}
{"seq_id": 72807772105, "instruction": "Write a function to remove all consecutive repeating characters in a string.", "output": "Here is the code to solve this problem: \n```python\ndef remove_consecutive(str1):\n    if len(str1) <= 1:\n        return str1\n\n    result = [str1[0]]\n    for char in str1[1:]:\n        if char != result[-1]:\n            result.append(char)\n    return ''.join(result)\n```", "code": "def remove_consecutive(str1):\n    if len(str1) <= 1:\n        return str1\n\n    result = [str1[0]]\n    for char in str1[1:]:\n        if char != result[-1]:\n            result.append(char)\n    return ''.join(result)", "entry_point": "remove_consecutive", "testcase": ["assert remove_consecutive('aabccba') == 'abcba'", "assert remove_consecutive('aabbcc') == 'abc'", "assert remove_consecutive('abc') == 'abc'"]}
{"seq_id": 21291965867, "instruction": "Write a function to find the kth largest element in an unsorted list using a min heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef kth_largest(nums, k):\n    H = []\n    for num in nums:\n        heapq.heappush(H, num)\n        if len(H) > k:\n            heapq.heappop(H)\n    return heapq.heappop(H)\n```", "code": "import heapq\n\ndef kth_largest(nums, k):\n    H = []\n    for num in nums:\n        heapq.heappush(H, num)\n        if len(H) > k:\n            heapq.heappop(H)\n    return heapq.heappop(H)", "entry_point": "kth_largest", "testcase": ["assert kth_largest([3,2,1,5,6,4], 2) == 5", "assert kth_largest([1,2,3,4,5], 3) == 3", "assert kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4"]}
{"seq_id": 18158989045, "instruction": "A python function is required to check whether a given string is a valid email or not. An email is valid if it contains only one '@' symbol and only one '.' symbol after '@'. Provide test cases to validate your code.", "output": "Here is the code to solve this problem: \n```python\ndef valid_email(email):\n    at = 0\n    dot = 0\n    for i, char in enumerate(email):\n        if char == '@':\n            at += 1\n            if at > 1:\n                return False\n        elif char == '.':\n            dot += 1\n            if dot > 1 or (i == 0 or i == len(email)-1):\n                return False\n            if email[i-1] == '@':\n                return False\n    if at == 1 and dot == 1:\n        return True\n    else:\n        return False\n```", "code": "def valid_email(email):\n    at = 0\n    dot = 0\n    for i, char in enumerate(email):\n        if char == '@':\n            at += 1\n            if at > 1:\n                return False\n        elif char == '.':\n            dot += 1\n            if dot > 1 or (i == 0 or i == len(email)-1):\n                return False\n            if email[i-1] == '@':\n                return False\n    if at == 1 and dot == 1:\n        return True\n    else:\n        return False", "entry_point": "valid_email", "testcase": ["assert valid_email(\"abc@.com\") == False", "assert valid_email(\"abc@example@com\") == False", "assert valid_email(\"abc@example\") == False", "assert valid_email(\"abc@.example.com\") == False", "assert valid_email(\"abc@example.com\") == True", "assert valid_email(\"abc@example.com.\") == False", "assert valid_email(\"abc@example..com\") == False"]}
{"seq_id": 30843464746, "instruction": "Write a Python function that checks if a specific sequence of numbers is possible given an initial value, a list of operations, and a target value.\n\nYou start with an initial value 'S'. You can perform a series of operations defined in the list 'A' which are added to the current value. The function should return True if it is possible to reach the target value 'X' at any point during the operations, otherwise it should return False.", "output": "Here is the code to solve this problem: \n```python\ndef is_possible_sequence(S, N, X, A):\n    current = S\n    idx = N\n    for i in range(N):\n        A[i] = current + A[i]\n        current += A[i]\n        if current > X:\n            idx = i\n            break\n    while X >= 0 and idx >= 0:\n        if X >= A[idx]:\n            X -= A[idx]\n        if X == 0 or X - S == 0:\n            return True\n        idx -= 1    \n    return False\n```", "code": "def is_possible_sequence(S, N, X, A):\n    current = S\n    idx = N\n    for i in range(N):\n        A[i] = current + A[i]\n        current += A[i]\n        if current > X:\n            idx = i\n            break\n    while X >= 0 and idx >= 0:\n        if X >= A[idx]:\n            X -= A[idx]\n        if X == 0 or X - S == 0:\n            return True\n        idx -= 1    \n    return False", "entry_point": "is_possible_sequence", "testcase": ["assert is_possible_sequence(1, 5, 10, [2, 3, 5, 1, 2]) == True", "assert is_possible_sequence(5, 2, 15, [9, 1]) == False", "assert is_possible_sequence(0, 3, 15, [5, 5, 5]) == True"]}
{"seq_id": 72903955864, "instruction": "Write a python function to find the smallest number that contains all the digits of a given number exactly once.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef smallest_Number(n):\n    digits = [int(d) for d in str(n)]\n    smallest = float('inf')\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num < smallest and sorted(str(num)) == sorted(str(n)):\n            smallest = num\n    return smallest\n```", "code": "from itertools import permutations\n\ndef smallest_Number(n):\n    digits = [int(d) for d in str(n)]\n    smallest = float('inf')\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num < smallest and sorted(str(num)) == sorted(str(n)):\n            smallest = num\n    return smallest", "entry_point": "smallest_Number", "testcase": ["assert smallest_Number(123) == 123", "assert smallest_Number(321) == 123", "assert smallest_Number(4321) == 1234"]}
{"seq_id": 71081585216, "instruction": "Write a python function to find the number of unique paths in a grid from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef unique_Paths(m, n):\n    dp = [[1]*n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]\n```", "code": "def unique_Paths(m, n):\n    dp = [[1]*n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]", "entry_point": "unique_Paths", "testcase": ["assert unique_Paths(3, 2) == 3", "assert unique_Paths(7, 3) == 28", "assert unique_Paths(3, 3) == 6"]}
{"seq_id": 30092814691, "instruction": "Write a python function to find the fibonacci series up to a given number.", "output": "Here is the code to solve this problem: \n```python\ndef find_fibonacci(n):\n    fibonacci = [0]\n    a, b = 0, 1\n    while b < n:\n        fibonacci.append(b)\n        a, b = b, a + b\n    return fibonacci\n```", "code": "def find_fibonacci(n):\n    fibonacci = [0]\n    a, b = 0, 1\n    while b < n:\n        fibonacci.append(b)\n        a, b = b, a + b\n    return fibonacci", "entry_point": "find_fibonacci", "testcase": ["assert find_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]", "assert find_fibonacci(1) == [0]", "assert find_fibonacci(20) == [0, 1, 1, 2, 3, 5, 8, 13]"]}
{"seq_id": 13455768101, "instruction": "Write a function to find the cube root of a number using binary search.", "output": "Here is the code to solve this problem: \n```python\ndef cube_root(n: int) -> int:\n    \"\"\" Time complexity: O(log N).\n        Space complexity: O(1).\n    \"\"\"\n    # 0 and 1\n    if n < 2:\n        return n\n\n    # use modification of binary search\n    low = 0\n    high = n\n    while low <= high:\n        middle = low + (high - low) // 2\n        if middle * middle * middle == n:\n            return middle\n        elif middle * middle * middle < n:\n            low = middle + 1\n        else:\n            high = middle - 1\n    return high\n```", "code": "def cube_root(n: int) -> int:\n    \"\"\" Time complexity: O(log N).\n        Space complexity: O(1).\n    \"\"\"\n    # 0 and 1\n    if n < 2:\n        return n\n\n    # use modification of binary search\n    low = 0\n    high = n\n    while low <= high:\n        middle = low + (high - low) // 2\n        if middle * middle * middle == n:\n            return middle\n        elif middle * middle * middle < n:\n            low = middle + 1\n        else:\n            high = middle - 1\n    return high", "entry_point": "cube_root", "testcase": ["assert cube_root(27) == 3", "assert cube_root(125) == 5", "assert cube_root(64) == 4"]}
{"seq_id": 4541134594, "instruction": "Given two lists `arr1` and `arr2`, write a function `relative_sort` to sort `arr1` based on the order of elements in `arr2`. Elements in `arr1` that are not present in `arr2` should be placed at the end of the sorted list in ascending order.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef relative_sort(arr1, arr2):\n    if not arr1 or not arr2:\n        return arr1\n\n    counter = Counter(arr1)\n    result = []\n    for num in arr2:\n        if num in counter:\n            result.extend([num] * counter[num])\n            del counter[num]\n\n    if counter:\n        rest = sorted(counter.elements())\n        result.extend(rest)\n\n    return result\n```", "code": "from collections import Counter\n\ndef relative_sort(arr1, arr2):\n    if not arr1 or not arr2:\n        return arr1\n\n    counter = Counter(arr1)\n    result = []\n    for num in arr2:\n        if num in counter:\n            result.extend([num] * counter[num])\n            del counter[num]\n\n    if counter:\n        rest = sorted(counter.elements())\n        result.extend(rest)\n\n    return result", "entry_point": "relative_sort", "testcase": ["assert relative_sort([2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19], [2, 1, 4, 3, 9, 6]) == [2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19]", "assert relative_sort([10, 20, 30, 40, 50], [20, 30, 50, 10]) == [20, 30, 50, 10, 40]", "assert relative_sort([28, 6, 22, 8, 44, 17], [22, 28, 8, 6]) == [22, 28, 8, 6, 17, 44]"]}
{"seq_id": 19059754397, "instruction": "Write a python function to find the number of ways to reach the last cell of a grid from the first cell using only valid moves (right and down).", "output": "Here is the code to solve this problem: \n```python\ndef numberOfWays(m, n):\n    if m == 1 or n == 1:\n        return 1\n\n    grid = [[0] * n for _ in range(m)]\n    for i in range(m):\n        grid[i][0] = 1\n    for j in range(n):\n        grid[0][j] = 1\n\n    for i in range(1, m):\n        for j in range(1, n):\n            grid[i][j] = grid[i-1][j] + grid[i][j-1]\n\n    return grid[m-1][n-1]\n```", "code": "def numberOfWays(m, n):\n    if m == 1 or n == 1:\n        return 1\n\n    grid = [[0] * n for _ in range(m)]\n    for i in range(m):\n        grid[i][0] = 1\n    for j in range(n):\n        grid[0][j] = 1\n\n    for i in range(1, m):\n        for j in range(1, n):\n            grid[i][j] = grid[i-1][j] + grid[i][j-1]\n\n    return grid[m-1][n-1]", "entry_point": "numberOfWays", "testcase": ["assert numberOfWays(3, 3) == 6", "assert numberOfWays(4, 4) == 20", "assert numberOfWays(2, 2) == 2"]}
{"seq_id": 31906430991, "instruction": "Write a python function to find the number of ways to decode a message encoded using the following mapping:\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n\nA message containing letters from A-Z is encoded to numbers using the above mapping. Given a non-empty string containing only digits, determine the total number of ways to decode it.", "output": "Here is the code to solve this problem: \n```python\ndef decode_variations(s):\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        if 10 <= int(s[i-2:i]) <= 26 and s[i-1] != '0':\n            dp[i] = dp[i-1] + dp[i-2]\n        elif 10 <= int(s[i-2:i]) <= 26:\n            dp[i] = dp[i-2]\n        elif s[i-1] != '0':\n            dp[i] = dp[i-1]\n        else:\n            return 0\n    return dp[n]\n```", "code": "def decode_variations(s):\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        if 10 <= int(s[i-2:i]) <= 26 and s[i-1] != '0':\n            dp[i] = dp[i-1] + dp[i-2]\n        elif 10 <= int(s[i-2:i]) <= 26:\n            dp[i] = dp[i-2]\n        elif s[i-1] != '0':\n            dp[i] = dp[i-1]\n        else:\n            return 0\n    return dp[n]", "entry_point": "decode_variations", "testcase": ["assert decode_variations('12') == 2", "assert decode_variations('226') == 3", "assert decode_variations('06') == 0"]}
{"seq_id": 30024323168, "instruction": "Write a python function to find the maximum rectangle that can be formed within a given binary matrix.\nThe function should return the area of the rectangle.", "output": "Here is the code to solve this problem: \n```python\ndef maxRectangle(matrix):\n    if not matrix:\n        return 0\n\n    m, n = len(matrix), len(matrix[0])\n    height = [0] * (n + 1)\n    maxArea = 0\n\n    for i in range(m):\n        for j in range(n):\n            height[j] = height[j] + 1 if matrix[i][j] == 1 else 0\n\n        stack = [-1]\n        for j in range(n + 1):\n            while height[j] < height[stack[-1]]:\n                h = height[stack.pop()]\n                w = j - 1 - stack[-1]\n                maxArea = max(maxArea, h * w)\n            stack.append(j)\n    return maxArea\n```", "code": "def maxRectangle(matrix):\n    if not matrix:\n        return 0\n\n    m, n = len(matrix), len(matrix[0])\n    height = [0] * (n + 1)\n    maxArea = 0\n\n    for i in range(m):\n        for j in range(n):\n            height[j] = height[j] + 1 if matrix[i][j] == 1 else 0\n\n        stack = [-1]\n        for j in range(n + 1):\n            while height[j] < height[stack[-1]]:\n                h = height[stack.pop()]\n                w = j - 1 - stack[-1]\n                maxArea = max(maxArea, h * w)\n            stack.append(j)\n    return maxArea", "entry_point": "maxRectangle", "testcase": ["assert maxRectangle([[1]]) == 1", "assert maxRectangle([[0]]) == 0", "assert maxRectangle([[1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0]]) == 6"]}
{"seq_id": 18688157142, "instruction": "Write a python function to find the length of the shortest contiguous subarray with sum at least k.", "output": "Here is the code to solve this problem: \n```python\ndef shortest_subarray_length(k, nums):\n    if len(nums) == 0:\n        return 0\n    \n    min_length, length = len(nums) + 1, len(nums)\n    start, end = 0, 0\n    current_sum = 0\n    \n    while end < length:\n        \n        while end < length and current_sum < k:\n            current_sum += nums[end]\n            end += 1\n        \n        while start < length and current_sum >= k:\n            if end - start < min_length:\n                min_length = end - start\n            \n            current_sum -= nums[start]\n            start += 1\n    \n    if min_length == len(nums) + 1:\n        return 0\n    \n    return min_length\n```", "code": "def shortest_subarray_length(k, nums):\n    if len(nums) == 0:\n        return 0\n    \n    min_length, length = len(nums) + 1, len(nums)\n    start, end = 0, 0\n    current_sum = 0\n    \n    while end < length:\n        \n        while end < length and current_sum < k:\n            current_sum += nums[end]\n            end += 1\n        \n        while start < length and current_sum >= k:\n            if end - start < min_length:\n                min_length = end - start\n            \n            current_sum -= nums[start]\n            start += 1\n    \n    if min_length == len(nums) + 1:\n        return 0\n    \n    return min_length", "entry_point": "shortest_subarray_length", "testcase": ["assert shortest_subarray_length(7, [2,3,1,2,4,3]) == 2", "assert shortest_subarray_length(4, [1,4,4]) == 1", "assert shortest_subarray_length(11, [1,1,1,1,1,1,1,1]) == 0"]}
{"seq_id": 43149435824, "instruction": "Write a function that takes a list of strings representing floating point numbers and returns a list of rounded integers.", "output": "Here is the code to solve this problem: \n```python\ndef round_floats(float_strings):\n    return [round(float(num)) for num in float_strings]\n```", "code": "def round_floats(float_strings):\n    return [round(float(num)) for num in float_strings]", "entry_point": "round_floats", "testcase": ["assert round_floats([\"12.3\", \"4.56\", \"78.9\", \"1.234\"]) == [12, 5, 79, 1]", "assert round_floats([\"3.1415\", \"2.718\", \"1.618\", \"0.0\"]) == [3, 3, 2, 0]", "assert round_floats([\"-2.5\", \"3.3\", \"0.1\", \"-7.89\"]) == [-2, 3, 0, -8]"]}
{"seq_id": 18646682059, "instruction": "Create a function that takes a list of integers as input and returns a list of these integers sorted in ascending order using the QuickSort algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef quick_sort(array):\n    if len(array) <= 1:\n        return array\n    else:\n        pivot = array.pop()\n\n    items_greater = []\n    items_lower = []\n\n    for item in array:\n        if item > pivot:\n            items_greater.append(item)\n\n        else:\n            items_lower.append(item)\n\n    return quick_sort(items_lower) + [pivot] + quick_sort(items_greater)\n```", "code": "def quick_sort(array):\n    if len(array) <= 1:\n        return array\n    else:\n        pivot = array.pop()\n\n    items_greater = []\n    items_lower = []\n\n    for item in array:\n        if item > pivot:\n            items_greater.append(item)\n\n        else:\n            items_lower.append(item)\n\n    return quick_sort(items_lower) + [pivot] + quick_sort(items_greater)", "entry_point": "quick_sort", "testcase": ["assert quick_sort([3,6,8,10,1,2,1]) == [1,1,2,3,6,8,10]", "assert quick_sort([7,10,5,3,1,9,2]) == [1,2,3,5,7,9,10]", "assert quick_sort([15,22,13,27,12,10,2]) == [2,10,12,13,15,22,27]"]}
{"seq_id": 35455400024, "instruction": "Write a function to find the intersection of elements of the given tuples.", "output": "Here is the code to solve this problem: \n```python\ndef intersection_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res)\n```", "code": "def intersection_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res)", "entry_point": "intersection_elements", "testcase": ["assert intersection_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (13,)", "assert intersection_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (3, 4)", "assert intersection_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (4, 5)"]}
{"seq_id": 21067203615, "instruction": "Write a function to find the volume of a cylinder.", "output": "Here is the code to solve this problem: \n```python\nimport math\ndef volume_cylinder(radius, height):\n  volume= math.pi * radius * radius * height\n  return round(volume,2)\n```", "code": "import math\ndef volume_cylinder(radius, height):\n  volume= math.pi * radius * radius * height\n  return round(volume,2)", "entry_point": "volume_cylinder", "testcase": ["assert volume_cylinder(3,6)==169.65", "assert volume_cylinder(5,10)==785.4", "assert volume_cylinder(10,5)==1570.8"]}
{"seq_id": 34851189389, "instruction": "Write a python function to find the smallest positive integer that is missing from the given unsorted array.", "output": "Here is the code to solve this problem: \n```python\ndef findMissing(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1\n```", "code": "def findMissing(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1", "entry_point": "findMissing", "testcase": ["assert findMissing([3, 4, -1, 1]) == 2", "assert findMissing([1, 2, 0]) == 3", "assert findMissing([7, 8, 9, 11, 12]) == 1"]}
{"seq_id": 38086112426, "instruction": "Write a python function to find the kth largest element in a given list of integers. The function should return the kth largest element. Assume that the list may contain duplicates and the kth largest element may not be unique.", "output": "Here is the code to solve this problem: \n```python\ndef find_kth_largest_element(nums, k):\n    nums.sort(reverse=True)\n    return nums[k-1]\n```", "code": "def find_kth_largest_element(nums, k):\n    nums.sort(reverse=True)\n    return nums[k-1]", "entry_point": "find_kth_largest_element", "testcase": ["assert find_kth_largest_element([3,2,3,1,2,4,5,5,6], 4) == 4", "assert find_kth_largest_element([3,2,1,5,6,4], 2) == 5", "assert find_kth_largest_element([7,6,5,4,3,2,1], 3) == 5"]}
{"seq_id": 30388993085, "instruction": "Write a function to generate all possible permutations of a given list of items.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations as perm\n\ndef permutations(items):\n    return [list(i) for i in perm(items)]\n```", "code": "from itertools import permutations as perm\n\ndef permutations(items):\n    return [list(i) for i in perm(items)]", "entry_point": "permutations", "testcase": ["assert permutations([1,2,3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "assert permutations(['a','b','c']) == [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]", "assert permutations([1]) == [[1]]"]}
{"seq_id": 24485467682, "instruction": "Write a function to find the maximum product of a subarray within a given integer array.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_subarray(nums):\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n```", "code": "def max_product_subarray(nums):\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result", "entry_point": "max_product_subarray", "testcase": ["assert max_product_subarray([-2, 3, -4]) == 24", "assert max_product_subarray([-2, 0, -1]) == 0", "assert max_product_subarray([2, 3, -2, 4]) == 6"]}
{"seq_id": 28494528847, "instruction": "Write a function to count the number of times a specific value appears in a list.", "output": "Here is the code to solve this problem: \n```python\ndef count_value(lst, value):\n    count = 0\n    for v in lst:\n        if v == value:\n            count += 1\n    return count\n```", "code": "def count_value(lst, value):\n    count = 0\n    for v in lst:\n        if v == value:\n            count += 1\n    return count", "entry_point": "count_value", "testcase": ["assert count_value([1, 2, 3, 4, 2, 2], 2) == 3", "assert count_value([5, 5, 5, 5, 5], 5) == 5", "assert count_value([1, 2, 3, 4, 5], 6) == 0"]}
{"seq_id": 3987519645, "instruction": "Write a function to find the number of binary strings of length N without consecutive 1s.", "output": "Here is the code to solve this problem: \n```python\ndef count_binary_strings(N):\n    a = b = 1\n    for i in range(2, N + 1):\n        temp = a + b\n        a = b\n        b = temp\n    return a + b\n```", "code": "def count_binary_strings(N):\n    a = b = 1\n    for i in range(2, N + 1):\n        temp = a + b\n        a = b\n        b = temp\n    return a + b", "entry_point": "count_binary_strings", "testcase": ["assert count_binary_strings(2) == 3", "assert count_binary_strings(4) == 8", "assert count_binary_strings(3) == 5"]}
{"seq_id": 26230534992, "instruction": "Write a function to find the median of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef median_sorted_arrays(nums1, nums2):\n    nums3 = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            nums3.append(nums1[i])\n            i += 1\n        else:\n            nums3.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        nums3.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        nums3.append(nums2[j])\n        j += 1\n    n = len(nums3)\n    if n % 2 == 0:\n        return (nums3[n // 2 - 1] + nums3[n // 2]) / 2\n    else:\n        return nums3[n // 2]\n```", "code": "def median_sorted_arrays(nums1, nums2):\n    nums3 = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            nums3.append(nums1[i])\n            i += 1\n        else:\n            nums3.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        nums3.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        nums3.append(nums2[j])\n        j += 1\n    n = len(nums3)\n    if n % 2 == 0:\n        return (nums3[n // 2 - 1] + nums3[n // 2]) / 2\n    else:\n        return nums3[n // 2]", "entry_point": "median_sorted_arrays", "testcase": ["assert median_sorted_arrays([1, 2], [3, 4])==2.5", "assert median_sorted_arrays([1, 3], [2])==2.0", "assert median_sorted_arrays([1, 3], [2, 7])==2.5"]}
{"seq_id": 29608398777, "instruction": "Write a python function to calculate the total number of jumps to reach the end of the array where each element represents the max jump length.", "output": "Here is the code to solve this problem: \n```python\ndef count_jumps(arr):\n    if len(arr) == 1: return 0\n    res = 0\n    cover = 0\n    far = 0\n\n    for i in range(len(arr)):\n        if i + arr[i] > far:\n            far = i + arr[i]\n        if i == cover:\n            res += 1\n            cover = far\n            if cover >= len(arr) - 1:\n                break\n    return res\n```", "code": "def count_jumps(arr):\n    if len(arr) == 1: return 0\n    res = 0\n    cover = 0\n    far = 0\n\n    for i in range(len(arr)):\n        if i + arr[i] > far:\n            far = i + arr[i]\n        if i == cover:\n            res += 1\n            cover = far\n            if cover >= len(arr) - 1:\n                break\n    return res", "entry_point": "count_jumps", "testcase": ["assert count_jumps([2,3,1,1,4]) == 2", "assert count_jumps([1,1,1,1,1]) == 4", "assert count_jumps([10,9,8,7,6,5,4,3,2,1,0]) == 1"]}
{"seq_id": 6773353665, "instruction": "Write a python function to find the maximum score you can get by concatenating words from a list. Each letter has a score associated with it. You can use each letter in the letters list multiple times. The score for a word is the sum of the scores of letters used to form the word. If a word cannot be formed using the given letters, it should not be considered for the score.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef max_score(words, letters, score):\n    supplies = Counter(letters)\n\n    def dfs(i, supplies):\n        if i >= len(words):\n            return 0\n        word = words[i]\n        word_count = Counter(word)\n        if any(word_count[ch] > supplies[ch] for ch in word_count):\n            return dfs(i + 1, supplies)\n        pick = dfs(i + 1, supplies - word_count) + sum(score[ord(ch) - ord('a')] for ch in word)\n        no_pick = dfs(i + 1, supplies)\n        return max(pick, no_pick)\n\n    return dfs(0, supplies)\n```", "code": "from collections import Counter\n\ndef max_score(words, letters, score):\n    supplies = Counter(letters)\n\n    def dfs(i, supplies):\n        if i >= len(words):\n            return 0\n        word = words[i]\n        word_count = Counter(word)\n        if any(word_count[ch] > supplies[ch] for ch in word_count):\n            return dfs(i + 1, supplies)\n        pick = dfs(i + 1, supplies - word_count) + sum(score[ord(ch) - ord('a')] for ch in word)\n        no_pick = dfs(i + 1, supplies)\n        return max(pick, no_pick)\n\n    return dfs(0, supplies)", "entry_point": "max_score", "testcase": ["assert max_score([\"dog\",\"cat\",\"dad\",\"good\"], [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]) == 23", "assert max_score([\"leetcode\"], [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]) == 0", "assert max_score([\"xxxz\",\"ax\",\"bx\",\"cx\"], [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]) == 27"]}
{"seq_id": 39808632361, "instruction": "Write a function that takes two sorted integer arrays and an integer k, and returns the k smallest sums of pairs where one element is from the first array and the other is from the second array.", "output": "Here is the code to solve this problem: \n```python\nfrom heapq import heappush, heappop\ndef k_smallest_pairs(nums1, nums2, k):\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    k_pairs = []\n    while k > 0 and min_heap:\n        _, index_nums1, index_nums2 = heappop(min_heap)\n        k_pairs.append([nums1[index_nums1], nums2[index_nums2]])\n        \n        if index_nums2 + 1 < len(nums2):\n            new_candidate = nums1[index_nums1] + nums2[index_nums2 + 1]\n            heappush(min_heap, (new_candidate, index_nums1, index_nums2 + 1))\n            \n        k -= 1\n        \n    return k_pairs\n```", "code": "from heapq import heappush, heappop\ndef k_smallest_pairs(nums1, nums2, k):\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    k_pairs = []\n    while k > 0 and min_heap:\n        _, index_nums1, index_nums2 = heappop(min_heap)\n        k_pairs.append([nums1[index_nums1], nums2[index_nums2]])\n        \n        if index_nums2 + 1 < len(nums2):\n            new_candidate = nums1[index_nums1] + nums2[index_nums2 + 1]\n            heappush(min_heap, (new_candidate, index_nums1, index_nums2 + 1))\n            \n        k -= 1\n        \n    return k_pairs", "entry_point": "k_smallest_pairs", "testcase": ["assert k_smallest_pairs([1,2], [3], 3) == [[1, 3], [2, 3]]", "assert k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert k_smallest_pairs([1,1,2], [1,2,3], 2) == [[1, 1], [1, 1]]"]}
{"seq_id": 17190932481, "instruction": "Write a function to find the maximum number of overlapping intervals at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef max_overlapping_intervals(intervals):\n    starts = []\n    ends = []\n    for interval in intervals:\n        starts.append(interval[0])\n        ends.append(interval[1])\n    starts.sort()\n    ends.sort()\n    active_intervals = 0\n    max_intervals = 0\n    i, j = 0, 0\n    while i < len(starts) and j < len(ends):\n        if starts[i] < ends[j]:\n            active_intervals += 1\n            max_intervals = max(max_intervals, active_intervals)\n            i += 1\n        else:\n            active_intervals -= 1\n            j += 1\n    return max_intervals\n```", "code": "def max_overlapping_intervals(intervals):\n    starts = []\n    ends = []\n    for interval in intervals:\n        starts.append(interval[0])\n        ends.append(interval[1])\n    starts.sort()\n    ends.sort()\n    active_intervals = 0\n    max_intervals = 0\n    i, j = 0, 0\n    while i < len(starts) and j < len(ends):\n        if starts[i] < ends[j]:\n            active_intervals += 1\n            max_intervals = max(max_intervals, active_intervals)\n            i += 1\n        else:\n            active_intervals -= 1\n            j += 1\n    return max_intervals", "entry_point": "max_overlapping_intervals", "testcase": ["assert max_overlapping_intervals([(1, 3), (2, 4), (2, 4), (3, 6)]) == 3", "assert max_overlapping_intervals([(1, 2), (2, 3), (3, 4)]) == 1", "assert max_overlapping_intervals([(1, 3), (5, 8)]) == 1"]}
{"seq_id": 37648519964, "instruction": "Write a function that returns the kth largest element in an array. Note that it is the kth largest element in the sorted order, not the kth distinct element.", "output": "Here is the code to solve this problem: \n```python\ndef find_kth_largest(nums, k):\n    nums.sort()\n    return nums[-k]\n\n\nprint(find_kth_largest([3,2,1,5,6,4], 2))\n# 5\nprint(find_kth_largest([3,2,3,1,2,4,5,5,6], 4))\n# 4\nprint(find_kth_largest([1], 1))\n# 1\n```", "code": "def find_kth_largest(nums, k):\n    nums.sort()\n    return nums[-k]\n\n\nprint(find_kth_largest([3,2,1,5,6,4], 2))\n# 5\nprint(find_kth_largest([3,2,3,1,2,4,5,5,6], 4))\n# 4\nprint(find_kth_largest([1], 1))\n# 1", "entry_point": "find_kth_largest", "testcase": ["assert find_kth_largest([1], 1) == 1", "assert find_kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert find_kth_largest([3,2,1,5,6,4], 2) == 5"]}
{"seq_id": 525006924, "instruction": "Write a function to find two numbers in a sorted array that add up to a specific target number. If there are multiple pairs, return the pair with the smallest product. If there are negative numbers in the array, return the pair with the smallest absolute product. If no such pair exists, return an empty list.", "output": "Here is the code to solve this problem: \n```python\ndef two_sum_sorted(nums, target):\n    left, right = 0, len(nums) - 1\n    min_product = float('inf')\n    result = []\n\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            if nums[left] * nums[right] < min_product:\n                min_product = nums[left] * nums[right]\n                result = [nums[left], nums[right]]\n            left += 1\n            right -= 1\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n\n    return result\n```", "code": "def two_sum_sorted(nums, target):\n    left, right = 0, len(nums) - 1\n    min_product = float('inf')\n    result = []\n\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            if nums[left] * nums[right] < min_product:\n                min_product = nums[left] * nums[right]\n                result = [nums[left], nums[right]]\n            left += 1\n            right -= 1\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n\n    return result", "entry_point": "two_sum_sorted", "testcase": ["assert two_sum_sorted([2, 7, 11, 15], 9) == [2, 7]", "assert two_sum_sorted([10, 26, 30, 31, 47, 60], 40) == [10, 30]", "assert two_sum_sorted([1, 2, 3], 7) == []"]}
{"seq_id": 73132380139, "instruction": "Write a function to find the sum of all divisors of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n```", "code": "def sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum", "entry_point": "sum_of_divisors", "testcase": ["assert sum_of_divisors(12) == 16", "assert sum_of_divisors(28) == 28", "assert sum_of_divisors(10) == 8"]}
{"seq_id": 24067015298, "instruction": "Write a function to calculate the smallest distance between each point in a list of points and return the total sum of these minimum distances. The function should use a minimum spanning tree algorithm to find the optimal solution.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef min_distance_points(points):\n    m = len(points)\n    distances = [[0]*m for _ in range(m)]\n\n    if m < 2:\n        return 0\n\n    for i, p in enumerate(points):\n        for j in range(i+1, m):\n            d = abs(p[0]-points[j][0]) + abs(p[1]-points[j][1])\n            distances[i][j] = d\n            distances[j][i] = d\n\n    visited = set()\n    distance = [float('inf')]*m\n    ans = 0\n    curr = 0\n    visited.add(0)\n\n    while len(visited) < m:\n        for i, d in enumerate(distances[curr]):\n            distance[i] = min(distance[i], d)\n        sel, lo = None, float('inf')\n        for i, d in enumerate(distance):\n            if d < lo and i not in visited:\n                sel = i\n                lo = d\n        curr = sel\n        ans += lo\n        visited.add(curr)\n\n    return ans\n```", "code": "import heapq\n\ndef min_distance_points(points):\n    m = len(points)\n    distances = [[0]*m for _ in range(m)]\n\n    if m < 2:\n        return 0\n\n    for i, p in enumerate(points):\n        for j in range(i+1, m):\n            d = abs(p[0]-points[j][0]) + abs(p[1]-points[j][1])\n            distances[i][j] = d\n            distances[j][i] = d\n\n    visited = set()\n    distance = [float('inf')]*m\n    ans = 0\n    curr = 0\n    visited.add(0)\n\n    while len(visited) < m:\n        for i, d in enumerate(distances[curr]):\n            distance[i] = min(distance[i], d)\n        sel, lo = None, float('inf')\n        for i, d in enumerate(distance):\n            if d < lo and i not in visited:\n                sel = i\n                lo = d\n        curr = sel\n        ans += lo\n        visited.add(curr)\n\n    return ans", "entry_point": "min_distance_points", "testcase": ["assert min_distance_points([[3,12],[-2,5],[-4,1]]) == 18", "assert min_distance_points([[0,0],[2,2],[3,10],[5,2],[7,0]]) == 20", "assert min_distance_points([[0,0],[1,1],[1,0],[-1,1]]) == 4"]}
{"seq_id": 23065933400, "instruction": "Write a python function that implements the binary search algorithm to find an element in a sorted list.", "output": "Here is the code to solve this problem: \n```python\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n\n        mid = (high + low) // 2\n\n        # If x is greater, ignore left half\n        if arr[mid] < x:\n            low = mid + 1\n\n        # If x is smaller, ignore right half\n        elif arr[mid] > x:\n            high = mid - 1\n\n        # x is present at mid\n        else:\n            return True\n\n    # If we reach here, then the element was not present\n    return False\n```", "code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n\n        mid = (high + low) // 2\n\n        # If x is greater, ignore left half\n        if arr[mid] < x:\n            low = mid + 1\n\n        # If x is smaller, ignore right half\n        elif arr[mid] > x:\n            high = mid - 1\n\n        # x is present at mid\n        else:\n            return True\n\n    # If we reach here, then the element was not present\n    return False", "entry_point": "binary_search", "testcase": ["assert binary_search([1, 2, 3, 4, 5], 3) == True", "assert binary_search([1, 2, 3, 4, 5], 6) == False", "assert binary_search([10, 20, 30, 40, 50], 40) == True", "assert binary_search([10, 20, 30, 40, 50], 25) == False"]}
{"seq_id": 27838539979, "instruction": "Write a function that takes a string and returns the number of occurrences of each word in the string, ignoring case and punctuation. The function should return a dictionary where the keys are the words and the values are the counts.", "output": "Here is the code to solve this problem: \n```python\nimport re\nfrom collections import Counter\n\ndef word_count(text):\n    words = re.findall(r'\\w+', text.lower())\n    return dict(Counter(words))\n```", "code": "import re\nfrom collections import Counter\n\ndef word_count(text):\n    words = re.findall(r'\\w+', text.lower())\n    return dict(Counter(words))", "entry_point": "word_count", "testcase": ["assert word_count(\"One fish, two fish, red fish, blue fish.\") == {'one': 1, 'fish': 4, 'two': 1, 'red': 1, 'blue': 1}", "assert word_count(\"This is a test. This is only a test.\") == {'this': 2, 'is': 2, 'a': 2, 'test': 2, 'only': 1}", "assert word_count(\"Hello world! Hello.\") == {'hello': 2, 'world': 1}"]}
{"seq_id": 36993346689, "instruction": "Write a python function to find the smallest number evenly divisible by all numbers from 1 to n.", "output": "Here is the code to solve this problem: \n```python\ndef divisible_number(n):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        lcm = (x*y)//gcd(x,y)\n        return lcm\n\n    num = 1\n    for i in range(1, n + 1):\n        num = lcm(num, i)\n    return num\n```", "code": "def divisible_number(n):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        lcm = (x*y)//gcd(x,y)\n        return lcm\n\n    num = 1\n    for i in range(1, n + 1):\n        num = lcm(num, i)\n    return num", "entry_point": "divisible_number", "testcase": ["assert divisible_number(20) == 232792560", "assert divisible_number(10) == 2520", "assert divisible_number(15) == 360360"]}
{"seq_id": 30075146819, "instruction": "Write a python function to count the number of times a given sublist appears in a list.", "output": "Here is the code to solve this problem: \n```python\ndef count_sublist(lst, sublist):\n    count = 0\n    sublen = len(sublist)\n    for i in range(len(lst)):\n        if lst[i:i+sublen] == sublist:\n            count += 1\n    return count\n```", "code": "def count_sublist(lst, sublist):\n    count = 0\n    sublen = len(sublist)\n    for i in range(len(lst)):\n        if lst[i:i+sublen] == sublist:\n            count += 1\n    return count", "entry_point": "count_sublist", "testcase": ["assert count_sublist([1,2,3,4,5,1,2,3,1,2,3], [1,2,3]) == 3", "assert count_sublist(['a','b','c','d','e','f','g','a','b','c','a','b','c','d','e'], ['a','b','c']) == 3", "assert count_sublist([1,2,3,4,5,1,2,3,1,2,3], [1,2,4]) == 0"]}
{"seq_id": 24848863225, "instruction": "Write a function to find the minimum height trees (MHTs) in a given undirected graph. A MHT is a tree in which the distance from the root to the furthest leaf is minimized. The function should return a list of all possible roots of MHTs, in any order.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict, deque\n\ndef find_min_height_trees(n, edges):\n    graph = defaultdict(set)\n    edge_count = [0] * n\n    \n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n        edge_count[a] += 1\n        edge_count[b] += 1\n    \n    leaves_queue = deque()\n    for node, edge in enumerate(edge_count):\n        if edge == 1:\n            leaves_queue.append(node)\n    \n    while leaves_queue:\n        if len(graph) <= 2:\n            break\n        for k in range(len(leaves_queue)):\n            cur = leaves_queue.popleft()\n            parent = graph[cur].pop()\n            graph.pop(cur)\n            graph[parent].remove(cur)\n            edge_count[parent] -= 1\n\n            if edge_count[parent] == 1:\n                leaves_queue.append(parent)\n            \n    return list(graph.keys()) if graph else [0]\n```", "code": "from collections import defaultdict, deque\n\ndef find_min_height_trees(n, edges):\n    graph = defaultdict(set)\n    edge_count = [0] * n\n    \n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n        edge_count[a] += 1\n        edge_count[b] += 1\n    \n    leaves_queue = deque()\n    for node, edge in enumerate(edge_count):\n        if edge == 1:\n            leaves_queue.append(node)\n    \n    while leaves_queue:\n        if len(graph) <= 2:\n            break\n        for k in range(len(leaves_queue)):\n            cur = leaves_queue.popleft()\n            parent = graph[cur].pop()\n            graph.pop(cur)\n            graph[parent].remove(cur)\n            edge_count[parent] -= 1\n\n            if edge_count[parent] == 1:\n                leaves_queue.append(parent)\n            \n    return list(graph.keys()) if graph else [0]", "entry_point": "find_min_height_trees", "testcase": ["assert find_min_height_trees(4, [[1, 0], [1, 2], [1, 3]]) == [1]", "assert find_min_height_trees(2, [[0, 1]]) == [0, 1]", "assert find_min_height_trees(6, [[3, 0], [3, 1], [3, 2], [3, 4], [5, 4]]) == [3, 4]"]}
{"seq_id": 18827376776, "instruction": "Write a python function to generate all possible permutations of a given list of items.", "output": "Here is the code to solve this problem: \n```python\ndef permutation(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n\n    l = []\n    for i in range(len(lst)):\n        m = lst[i]\n\n        remLst = lst[:i] + lst[i+1:]\n\n        for p in permutation(remLst):\n            l.append([m] + p)\n    return l\n```", "code": "def permutation(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n\n    l = []\n    for i in range(len(lst)):\n        m = lst[i]\n\n        remLst = lst[:i] + lst[i+1:]\n\n        for p in permutation(remLst):\n            l.append([m] + p)\n    return l", "entry_point": "permutation", "testcase": ["assert permutation(['a', 'b', 'c']) == [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]", "assert permutation([1,2,3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "assert permutation([1]) == [[1]]"]}
{"seq_id": 40123624030, "instruction": "Write a function to calculate the minimum number of lines needed to represent a stock price chart using the given stock prices. A line is defined as a straight line connecting two consecutive stock prices that have the same slope. If the slope changes, a new line is needed.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\nfrom decimal import Decimal\n\ndef minimum_lines(stock_prices: List[List[int]]) -> int:\n    if not stock_prices:\n        return 0\n    stock_prices.sort(key=lambda x: x[0])\n    if len(stock_prices) == 1:\n        return 0\n    if len(stock_prices) == 2:\n        return 1\n    res = 1\n    pre = Decimal(stock_prices[1][1] - stock_prices[0][1]) / Decimal(stock_prices[1][0] - stock_prices[0][0])\n    for i in range(2, len(stock_prices)):\n        val = Decimal(stock_prices[i][1] - stock_prices[i-1][1]) / Decimal(stock_prices[i][0] - stock_prices[i-1][0])\n        if val == pre:\n            continue\n        else:\n            pre = val\n            res += 1\n    return res\n```", "code": "from typing import List\nfrom decimal import Decimal\n\ndef minimum_lines(stock_prices: List[List[int]]) -> int:\n    if not stock_prices:\n        return 0\n    stock_prices.sort(key=lambda x: x[0])\n    if len(stock_prices) == 1:\n        return 0\n    if len(stock_prices) == 2:\n        return 1\n    res = 1\n    pre = Decimal(stock_prices[1][1] - stock_prices[0][1]) / Decimal(stock_prices[1][0] - stock_prices[0][0])\n    for i in range(2, len(stock_prices)):\n        val = Decimal(stock_prices[i][1] - stock_prices[i-1][1]) / Decimal(stock_prices[i][0] - stock_prices[i-1][0])\n        if val == pre:\n            continue\n        else:\n            pre = val\n            res += 1\n    return res", "entry_point": "minimum_lines", "testcase": ["assert minimum_lines([[1, 2], [2, 3], [3, 5]]) == 2", "assert minimum_lines([[1, 2], [2, 3], [3, 4]]) == 1", "assert minimum_lines([[1, 2], [2, 3]]) == 1", "assert minimum_lines([[1, 2]]) == 0", "assert minimum_lines([]) == 0"]}
{"seq_id": 34908942416, "instruction": "Write a function that takes a list of integers and returns the length of the longest subarray that sums to a given target.", "output": "Here is the code to solve this problem: \n```python\ndef longest_subarray_sum(nums, target):\n    max_length = 0\n    current_sum = 0\n    start = 0\n    sum_dict = {0: -1}\n    \n    for end in range(len(nums)):\n        current_sum += nums[end]\n        if current_sum not in sum_dict:\n            sum_dict[current_sum] = end\n        if current_sum - target in sum_dict:\n            max_length = max(max_length, end - sum_dict[current_sum - target])\n    \n    return max_length\n```", "code": "def longest_subarray_sum(nums, target):\n    max_length = 0\n    current_sum = 0\n    start = 0\n    sum_dict = {0: -1}\n    \n    for end in range(len(nums)):\n        current_sum += nums[end]\n        if current_sum not in sum_dict:\n            sum_dict[current_sum] = end\n        if current_sum - target in sum_dict:\n            max_length = max(max_length, end - sum_dict[current_sum - target])\n    \n    return max_length", "entry_point": "longest_subarray_sum", "testcase": ["assert longest_subarray_sum([1, -1, 5, -2, 3], 3) == 4", "assert longest_subarray_sum([-2, -1, 2, 1], 1) == 2", "assert longest_subarray_sum([1, 2, 3, 4, 5], 15) == 5"]}
{"seq_id": 71856244569, "instruction": "Write a python function to find the smallest subarray length with a sum greater than or equal to the target. If no such subarray exists, return 0.", "output": "Here is the code to solve this problem: \n```python\ndef min_size_subarray_sum(target, nums):\n    n = len(nums)\n    min_len = float('inf')\n    left = 0\n    current_sum = 0\n\n    for right in range(n):\n        current_sum += nums[right]\n        while current_sum >= target:\n            min_len = min(min_len, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n\n    return min_len if min_len != float('inf') else 0\n```", "code": "def min_size_subarray_sum(target, nums):\n    n = len(nums)\n    min_len = float('inf')\n    left = 0\n    current_sum = 0\n\n    for right in range(n):\n        current_sum += nums[right]\n        while current_sum >= target:\n            min_len = min(min_len, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n\n    return min_len if min_len != float('inf') else 0", "entry_point": "min_size_subarray_sum", "testcase": ["assert min_size_subarray_sum(7, [2, 3, 1, 2, 4, 3]) == 2", "assert min_size_subarray_sum(4, [1, 2, 4]) == 1", "assert min_size_subarray_sum(11, [1, 2, 3, 4, 5]) == 3", "assert min_size_subarray_sum(4, [4, 2, 1]) == 1", "assert min_size_subarray_sum(11, [1, 1, 1, 1, 1, 1, 1, 1]) == 0"]}
{"seq_id": 5362517544, "instruction": "Write a function to calculate the Fibonacci sequence up to a certain number of terms.", "output": "Here is the code to solve this problem: \n```python\ndef fib_seq(n):\n    fib = [0, 1]\n    if n <= 2:\n        return fib[:n]\n    else:\n        for i in range(2, n):\n            fib.append(fib[-1] + fib[-2])\n        return fib\n```", "code": "def fib_seq(n):\n    fib = [0, 1]\n    if n <= 2:\n        return fib[:n]\n    else:\n        for i in range(2, n):\n            fib.append(fib[-1] + fib[-2])\n        return fib", "entry_point": "fib_seq", "testcase": ["assert fib_seq(1)==[0]", "assert fib_seq(5)==[0, 1, 1, 2, 3]", "assert fib_seq(10)==[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"]}
{"seq_id": 31632264456, "instruction": "Write a function to generate all possible permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef permutations(string):\n    if len(string) == 1:\n        return [string]\n\n    perm_list = [] \n    for a in string: \n        rem_string = string.replace(a,'')\n        for p in permutations(rem_string):\n            perm_list.append(a + p)\n    return perm_list\n```", "code": "def permutations(string):\n    if len(string) == 1:\n        return [string]\n\n    perm_list = [] \n    for a in string: \n        rem_string = string.replace(a,'')\n        for p in permutations(rem_string):\n            perm_list.append(a + p)\n    return perm_list", "entry_point": "permutations", "testcase": ["assert permutations(\"abc\") == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']", "assert permutations(\"ab\") == ['ab', 'ba']", "assert permutations(\"a\") == ['a']"]}
{"seq_id": 34712191540, "instruction": "Write a python function to find the minimum eating speed for a given list of bananas that can be eaten within a given number of hours. The function should return an integer representing the minimum eating speed.", "output": "Here is the code to solve this problem: \n```python\nfrom bisect import bisect_left\nfrom typing import List\n\nclass Solution:\n    def min_eating_speed(self, piles: List[int], h: int) -> int:\n        if len(piles) == h:\n            return max(piles)\n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) // 2\n            total_hours = sum((p + mid - 1) // mid for p in piles)\n            if total_hours > h:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n\ndef min_eating_speed(piles, h):\n    return Solution().min_eating_speed(piles, h)\n```", "code": "from bisect import bisect_left\nfrom typing import List\n\nclass Solution:\n    def min_eating_speed(self, piles: List[int], h: int) -> int:\n        if len(piles) == h:\n            return max(piles)\n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) // 2\n            total_hours = sum((p + mid - 1) // mid for p in piles)\n            if total_hours > h:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n\ndef min_eating_speed(piles, h):\n    return Solution().min_eating_speed(piles, h)", "entry_point": "min_eating_speed", "testcase": ["assert min_eating_speed([30, 11, 23, 4, 20], 5) == 30", "assert min_eating_speed([30, 11, 23, 4, 20], 6) == 23", "assert min_eating_speed([3, 6, 7, 11], 8) == 4"]}
{"seq_id": 71960354707, "instruction": "Write a python function to find the smallest prime number greater than a given number.", "output": "Here is the code to solve this problem: \n```python\ndef next_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n\n    prime = n\n    found = False\n    while not found:\n        prime += 1\n        if is_prime(prime):\n            found = True\n    return prime\n```", "code": "def next_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n\n    prime = n\n    found = False\n    while not found:\n        prime += 1\n        if is_prime(prime):\n            found = True\n    return prime", "entry_point": "next_prime", "testcase": ["assert next_prime(10) == 11", "assert next_prime(17) == 19", "assert next_prime(14) == 17"]}
{"seq_id": 12283908078, "instruction": "Write a function to find the largest sum possible after negating 'K' smallest elements in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\nimport heapq\n\n\ndef largest_sum_after_k_negations(A: List[int], K: int) -> int:\n    heapq.heapify(A)\n    for _k in range(0, K):\n        el = heapq.heappop(A)\n        heapq.heappush(A, el * -1)\n    return sum(A)\n```", "code": "from typing import List\nimport heapq\n\n\ndef largest_sum_after_k_negations(A: List[int], K: int) -> int:\n    heapq.heapify(A)\n    for _k in range(0, K):\n        el = heapq.heappop(A)\n        heapq.heappush(A, el * -1)\n    return sum(A)", "entry_point": "largest_sum_after_k_negations", "testcase": ["assert largest_sum_after_k_negations([2, -3, -1, 5, -4], 2) == 13", "assert largest_sum_after_k_negations([4, 2, 3], 1) == 5", "assert largest_sum_after_k_negations([3, -1, 0, 2], 3) == 6"]}
{"seq_id": 15119173594, "instruction": "Write a Python function that utilizes the PriorityHeap class provided to implement a function that returns the k largest elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef k_largest(arr, k):\n    heap = PriorityHeap()\n    for num in arr:\n        heap.push(num)\n        if heap.length() > k:\n            heap.pop()\n    result = []\n    while heap.length() > 0:\n        result.append(heap.pop())\n    return result[::-1]  # Reverse the list to get the correct order\n```", "code": "def k_largest(arr, k):\n    heap = PriorityHeap()\n    for num in arr:\n        heap.push(num)\n        if heap.length() > k:\n            heap.pop()\n    result = []\n    while heap.length() > 0:\n        result.append(heap.pop())\n    return result[::-1]  # Reverse the list to get the correct order", "entry_point": "k_largest", "testcase": ["    assert k_largest([1, 3, 5, 7, 9], 2) == [7, 9]", "    assert k_largest([5, 7, 8, 9, 10], 5) == [5, 7, 8, 9, 10]", "    assert k_largest([10, 6, 11, 2, 14, 4, 16, 8, 19, 20], 3) == [16, 19, 20]"]}
{"seq_id": 14844219991, "instruction": "Write a python function to find the highest product you can get from three of the integers from a given list.", "output": "Here is the code to solve this problem: \n```python\ndef three_max_product(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n```", "code": "def three_max_product(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])", "entry_point": "three_max_product", "testcase": ["assert three_max_product([1, 2, 3, 4]) == 24", "assert three_max_product([1, 2, 3]) == 6", "assert three_max_product([-1, -2, -3, 1]) == 6"]}
{"seq_id": 17542375683, "instruction": "Write a python function to find the largest palindrome made from the product of two n-digit numbers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_Palindrome(n):\n    max_num = 10**n - 1\n    min_num = 10**(n-1)\n    max_palindrome = 0\n    for i in range(max_num, min_num-1, -1):\n        for j in range(i, min_num-1, -1):\n            product = i * j\n            if product <= max_palindrome:\n                break\n            if str(product) == str(product)[::-1]:\n                max_palindrome = product\n    return max_palindrome\n```", "code": "def largest_Palindrome(n):\n    max_num = 10**n - 1\n    min_num = 10**(n-1)\n    max_palindrome = 0\n    for i in range(max_num, min_num-1, -1):\n        for j in range(i, min_num-1, -1):\n            product = i * j\n            if product <= max_palindrome:\n                break\n            if str(product) == str(product)[::-1]:\n                max_palindrome = product\n    return max_palindrome", "entry_point": "largest_Palindrome", "testcase": ["assert largest_Palindrome(2) == 9009", "assert largest_Palindrome(1) == 9", "assert largest_Palindrome(3) == 906609"]}
{"seq_id": 4317207255, "instruction": "Write a function to find the minimum number of moves required to make all elements of an array equal by incrementing or decrementing adjacent elements.", "output": "Here is the code to solve this problem: \n```python\ndef min_moves_to_equal(nums):\n    median = sorted(nums)[len(nums) // 2]\n    return sum(abs(num - median) for num in nums)\n```", "code": "def min_moves_to_equal(nums):\n    median = sorted(nums)[len(nums) // 2]\n    return sum(abs(num - median) for num in nums)", "entry_point": "min_moves_to_equal", "testcase": ["assert min_moves_to_equal([1, 2, 3]) == 2", "assert min_moves_to_equal([1, 10, 2, 9]) == 16", "assert min_moves_to_equal([1, 0, 0, 8, 6]) == 14"]}
{"seq_id": 14310777028, "instruction": "Write a function to count the number of anagram substrings of a given string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef anagram_substring_count(s, p):\n    p_count = Counter(p)\n    s_count = Counter(s[:len(p)-1])\n    res = 0\n\n    for i in range(len(p)-1, len(s)):\n        s_count[s[i]] += 1   # add current symbol\n        if s_count == p_count:\n            res += 1\n        s_count[s[i-len(p)+1]] -= 1   # remove the oldest symbol\n        if s_count[s[i-len(p)+1]] == 0:\n            del s_count[s[i-len(p)+1]]\n\n    return res\n```", "code": "from collections import Counter\n\ndef anagram_substring_count(s, p):\n    p_count = Counter(p)\n    s_count = Counter(s[:len(p)-1])\n    res = 0\n\n    for i in range(len(p)-1, len(s)):\n        s_count[s[i]] += 1   # add current symbol\n        if s_count == p_count:\n            res += 1\n        s_count[s[i-len(p)+1]] -= 1   # remove the oldest symbol\n        if s_count[s[i-len(p)+1]] == 0:\n            del s_count[s[i-len(p)+1]]\n\n    return res", "entry_point": "anagram_substring_count", "testcase": ["assert anagram_substring_count(\"abab\",\"ab\")==3", "assert anagram_substring_count(\"aba\",\"a\")==2", "assert anagram_substring_count(\"abcde\",\"cde\")==1"]}
{"seq_id": 5275387277, "instruction": "Write a function to find the number of times a given number appears in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef count_num_occurrence(list_nums, num):\n    return list_nums.count(num)\n```", "code": "def count_num_occurrence(list_nums, num):\n    return list_nums.count(num)", "entry_point": "count_num_occurrence", "testcase": ["assert count_num_occurrence([1,2,3,4,5,6,7,8,9], 5) == 1", "assert count_num_occurrence([1,2,3,4,5,1,1,1,2,3], 1) == 4", "assert count_num_occurrence([1,1,1,1,1,1,1,1,1], 1) == 9"]}
{"seq_id": 37286594228, "instruction": "Write a function to find the sum of all the elements in a list that are located at odd indices.", "output": "Here is the code to solve this problem: \n```python\ndef sum_odd_index(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total\n```", "code": "def sum_odd_index(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total", "entry_point": "sum_odd_index", "testcase": ["assert sum_odd_index([10, 20, 30, 40, 50]) == 60", "assert sum_odd_index([1, 2, 3, 4, 5]) == 6", "assert sum_odd_index([-1, -2, -3, -4, -5]) == -6"]}
{"seq_id": 15351130930, "instruction": "Write a python function to count the number of unique binary search trees (BSTs) that store values 1...n.\n\nA BST is a binary tree that satisfies the following properties:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.", "output": "Here is the code to solve this problem: \n```python\ndef count_BST(n):\n    if n == 0:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n```", "code": "def count_BST(n):\n    if n == 0:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]", "entry_point": "count_BST", "testcase": ["assert count_BST(4) == 14", "assert count_BST(3) == 5", "assert count_BST(5) == 42"]}
{"seq_id": 73334432826, "instruction": "Write a function that takes a string representing a polynomial and returns it in a simplified form. The polynomial will be in the form of \"3x + 2 + x\", where \"x\" is the variable and the numbers are the coefficients.\n\nThe function should simplify the polynomial by combining like terms and removing any unnecessary \"+ 0\" or \"+ 1x\" parts. If there are no coefficients left, it should return \"0\".", "output": "Here is the code to solve this problem: \n```python\ndef simplify_polynomial(polynomial):\n    cnt = 0\n    num = 0\n    \n    for i in polynomial.split():\n        if 'x' in i:\n            if len(i) > 1:\n                i = i.replace('x', '')\n                cnt += int(i)\n            else:\n                cnt += 1\n        elif i.isnumeric():\n            num += int(i)\n\n    return (\"{}x\".format(cnt if cnt > 1 else \"\") if cnt > 0 else \"\") + (\" + \" if cnt > 0 and num > 0 else \"\") + (\"{}\".format(num) if num > 0 else \"0\")\n```", "code": "def simplify_polynomial(polynomial):\n    cnt = 0\n    num = 0\n    \n    for i in polynomial.split():\n        if 'x' in i:\n            if len(i) > 1:\n                i = i.replace('x', '')\n                cnt += int(i)\n            else:\n                cnt += 1\n        elif i.isnumeric():\n            num += int(i)\n\n    return (\"{}x\".format(cnt if cnt > 1 else \"\") if cnt > 0 else \"\") + (\" + \" if cnt > 0 and num > 0 else \"\") + (\"{}\".format(num) if num > 0 else \"0\")", "entry_point": "simplify_polynomial", "testcase": ["assert simplify_polynomial(\"3x + 2 + x\") == \"4x + 2\"", "assert simplify_polynomial(\"x + 1x + 2x + 3\") == \"4x + 3\"", "assert simplify_polynomial(\"0\") == \"0\"", "assert simplify_polynomial(\"3x + 2 + 2x + 1\") == \"5x + 3\""]}
{"seq_id": 14055342646, "instruction": "Write a python function to find the number of unique elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef unique_count(lst):\n    unique_set = set(lst)\n    return len(unique_set)\n```", "code": "def unique_count(lst):\n    unique_set = set(lst)\n    return len(unique_set)", "entry_point": "unique_count", "testcase": ["assert unique_count([1, 2, 3, 1, 2, 3, 4, 5]) == 5", "assert unique_count([1, 2, 3, 4, 5]) == 5", "assert unique_count(['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e']) == 5"]}
{"seq_id": 25544395878, "instruction": "Write a Python function to check if a given string can be a valid palindrome by removing at most one character.", "output": "Here is the code to solve this problem: \n```python\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef valid_palindrome(s: str) -> bool:\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            one, two = s[left:right], s[left + 1:right + 1]\n            return is_palindrome(one) or is_palindrome(two)\n        left, right = left + 1, right - 1\n    return True\n```", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef valid_palindrome(s: str) -> bool:\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            one, two = s[left:right], s[left + 1:right + 1]\n            return is_palindrome(one) or is_palindrome(two)\n        left, right = left + 1, right - 1\n    return True", "entry_point": "valid_palindrome", "testcase": ["assert valid_palindrome(\"aba\") == True", "assert valid_palindrome(\"abc\") == False", "assert valid_palindrome(\"abca\") == True", "assert valid_palindrome(\"abccba\") == True", "assert valid_palindrome(\"abcda\") == False", "assert valid_palindrome(\"abcba\") == True"]}
{"seq_id": 38666260559, "instruction": "Write a function that checks if it's possible to make the target number using given numbers through addition or subtraction.", "output": "Here is the code to solve this problem: \n```python\ndef target_possible(numbers, target):\n    def func(n, s):\n        if n == len(numbers):\n            return s == target\n        return func(n + 1, s + numbers[n]) or func(n + 1, s - numbers[n])\n    return func(0, 0)\n```", "code": "def target_possible(numbers, target):\n    def func(n, s):\n        if n == len(numbers):\n            return s == target\n        return func(n + 1, s + numbers[n]) or func(n + 1, s - numbers[n])\n    return func(0, 0)", "entry_point": "target_possible", "testcase": ["assert target_possible([4,1,2,1], 4) == True", "assert target_possible([4,4,1,1], 3) == False", "assert target_possible([1,1,1,1,1], 3) == True"]}
{"seq_id": 30349903347, "instruction": "Write a function to find the first non-repeated character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef first_non_repeated_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None\n```", "code": "def first_non_repeated_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None", "entry_point": "first_non_repeated_character", "testcase": ["assert first_non_repeated_character(\"aabbccddeef\") == 'f'", "assert first_non_repeated_character(\"google\") == 'l'", "assert first_non_repeated_character(\"python\") == 'p'"]}
{"seq_id": 19065076875, "instruction": "Write a function to calculate the number of unique binary search trees (BSTs) that store values 1...n.", "output": "Here is the code to solve this problem: \n```python\ndef num_trees(n):\n    if n == 0:\n        return 1\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = 0\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n```", "code": "def num_trees(n):\n    if n == 0:\n        return 1\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = 0\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]", "entry_point": "num_trees", "testcase": ["assert num_trees(1) == 1", "assert num_trees(3) == 5", "assert num_trees(4) == 14"]}
{"seq_id": 41164684104, "instruction": "Write a python function that checks if a given graph represented by an adjacency matrix is a complete graph. A complete graph is a simple undirected graph in which every pair of distinct vertices is connected by a unique edge.", "output": "Here is the code to solve this problem: \n```python\ndef is_complete_graph(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 1:\n                return False\n    return True\n```", "code": "def is_complete_graph(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 1:\n                return False\n    return True", "entry_point": "is_complete_graph", "testcase": ["assert is_complete_graph([[0, 1], [1, 0]]) == True", "assert is_complete_graph([[0, 1, 1], [1, 0, 0], [1, 0, 0]]) == False", "assert is_complete_graph([[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]]) == True"]}
{"seq_id": 19805916387, "instruction": "Write a function to find the longest increasing subsequence in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef ci(A, l, r, k):\n    while r-l > 1:\n        mid = (l + r) // 2\n        if A[mid] >= k:\n            r = mid\n        else:\n            l = mid\n    return r\n\ndef longest_increasing_subsequence(a):\n    n = len(a)\n    t = [0 for _ in range(n + 1)]\n    t[0] = a[0]\n    l = 1\n    for i in range(1, n):\n        if a[i] < t[0]:\n            t[0] = a[i]\n        elif a[i] > t[l - 1]:\n            t[l] = a[i]\n            l += 1\n        else:\n            x = ci(t, -1, l - 1, a[i])\n            t[x] = a[i]\n    return l\n\nprint(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]))\nprint(longest_increasing_subsequence([0, 1, 0, 3, 2, 3]))\nprint(longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]))\n```", "code": "def ci(A, l, r, k):\n    while r-l > 1:\n        mid = (l + r) // 2\n        if A[mid] >= k:\n            r = mid\n        else:\n            l = mid\n    return r\n\ndef longest_increasing_subsequence(a):\n    n = len(a)\n    t = [0 for _ in range(n + 1)]\n    t[0] = a[0]\n    l = 1\n    for i in range(1, n):\n        if a[i] < t[0]:\n            t[0] = a[i]\n        elif a[i] > t[l - 1]:\n            t[l] = a[i]\n            l += 1\n        else:\n            x = ci(t, -1, l - 1, a[i])\n            t[x] = a[i]\n    return l\n\nprint(longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]))\nprint(longest_increasing_subsequence([0, 1, 0, 3, 2, 3]))\nprint(longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]))", "entry_point": "longest_increasing_subsequence", "testcase": ["assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1", "assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4", "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4"]}
{"seq_id": 72679329526, "instruction": "Write a python function to find the count of possible ways to reach a target sum using given denominations of coins.", "output": "Here is the code to solve this problem: \n```python\ndef coin_combinations(denominations, target):\n    dp = [0]*(target + 1)\n    dp[0] = 1\n    for coin in denominations:\n        for x in range(coin, target + 1):\n            dp[x] += dp[x - coin]\n    return dp[target]\n```", "code": "def coin_combinations(denominations, target):\n    dp = [0]*(target + 1)\n    dp[0] = 1\n    for coin in denominations:\n        for x in range(coin, target + 1):\n            dp[x] += dp[x - coin]\n    return dp[target]", "entry_point": "coin_combinations", "testcase": ["assert coin_combinations([1, 2, 3], 4) == 4", "assert coin_combinations([2, 5, 3], 10) == 4", "assert coin_combinations([1, 5, 10, 25], 100) == 242"]}
{"seq_id": 37816541281, "instruction": "Write a function to find all the anagrams of a given word in a sentence.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_anagrams_in_sentence(word, sentence):\n    word_count = Counter(word)\n    words = sentence.split()\n    anagrams = []\n    for w in words:\n        if Counter(w) == word_count:\n            anagrams.append(w)\n    return anagrams\n```", "code": "from collections import Counter\n\ndef find_anagrams_in_sentence(word, sentence):\n    word_count = Counter(word)\n    words = sentence.split()\n    anagrams = []\n    for w in words:\n        if Counter(w) == word_count:\n            anagrams.append(w)\n    return anagrams", "entry_point": "find_anagrams_in_sentence", "testcase": ["assert find_anagrams_in_sentence('act', 'The rat in the hat sat on the mat.') == []", "assert find_anagrams_in_sentence('rat', 'The big dog ran fast.') == []", "assert find_anagrams_in_sentence('act', 'The cat in the hat sat on the mat.') == ['cat']", "assert find_anagrams_in_sentence('tac', 'The cat in the hat sat on the mat.') == ['cat']"]}
{"seq_id": 23795370450, "instruction": "Write a function to find the largest rectangle containing only 1's in a binary matrix.", "output": "Here is the code to solve this problem: \n```python\ndef largest_rectangle(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    left = [0] * n\n    right = [n] * n\n    height = [0] * n\n    max_area = 0\n    for i in range(m):\n        cur_left, cur_right = 0, n\n        for j in range(n):\n            if matrix[i][j] == 1:\n                height[j] += 1\n                left[j] = max(left[j], cur_left)\n            else:\n                height[j] = 0\n                left[j] = 0\n                cur_left = j + 1\n        for j in range(n-1, -1, -1):\n            if matrix[i][j] == 1:\n                right[j] = min(right[j], cur_right)\n            else:\n                right[j] = n\n                cur_right = j\n            max_area = max(max_area, height[j] * (right[j] - left[j]))\n    return max_area\n```", "code": "def largest_rectangle(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    left = [0] * n\n    right = [n] * n\n    height = [0] * n\n    max_area = 0\n    for i in range(m):\n        cur_left, cur_right = 0, n\n        for j in range(n):\n            if matrix[i][j] == 1:\n                height[j] += 1\n                left[j] = max(left[j], cur_left)\n            else:\n                height[j] = 0\n                left[j] = 0\n                cur_left = j + 1\n        for j in range(n-1, -1, -1):\n            if matrix[i][j] == 1:\n                right[j] = min(right[j], cur_right)\n            else:\n                right[j] = n\n                cur_right = j\n            max_area = max(max_area, height[j] * (right[j] - left[j]))\n    return max_area", "entry_point": "largest_rectangle", "testcase": ["assert largest_rectangle([[1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0]])==6", "assert largest_rectangle([[0, 1], [1, 1]])==2", "assert largest_rectangle([[0]])==0"]}
{"seq_id": 1212736942, "instruction": "Write a function to capitalize the first letter of each word in a string.", "output": "Here is the code to solve this problem: \n```python\ndef capitalize_words(s):\n    answer = ''\n    s = s.lower()\n    s = list(s)\n    for i,s_char in enumerate(s):\n        if i == 0:\n            s[i] = s[i].upper()\n        elif s_char == ' ':\n            s[i+1] = s[i+1].upper()\n    return answer.join(s).replace(\"  \", \" \").strip()\n```", "code": "def capitalize_words(s):\n    answer = ''\n    s = s.lower()\n    s = list(s)\n    for i,s_char in enumerate(s):\n        if i == 0:\n            s[i] = s[i].upper()\n        elif s_char == ' ':\n            s[i+1] = s[i+1].upper()\n    return answer.join(s).replace(\"  \", \" \").strip()", "entry_point": "capitalize_words", "testcase": ["assert capitalize_words(\"hello world\") == \"Hello World\"", "assert capitalize_words(\"python programming\") == \"Python Programming\"", "assert capitalize_words(\"3people unFollowed me\") == \"3people Unfollowed Me\""]}
{"seq_id": 4138982841, "instruction": "Write a function that takes a string as input and returns the string with all non-alphabetic characters removed and the remaining characters in reverse order.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_and_remove_non_alpha(s: str) -> str:\n    alpha_str = \"\"\n    for char in s:\n        if char.isalpha():\n            alpha_str += char\n    return alpha_str[::-1]\n```", "code": "def reverse_and_remove_non_alpha(s: str) -> str:\n    alpha_str = \"\"\n    for char in s:\n        if char.isalpha():\n            alpha_str += char\n    return alpha_str[::-1]", "entry_point": "reverse_and_remove_non_alpha", "testcase": ["assert reverse_and_remove_non_alpha(\"123ABCabc!\") == \"cbaCBA\"", "assert reverse_and_remove_non_alpha(\"1234567890\") == \"\"", "assert reverse_and_remove_non_alpha(\"Hello, World!\") == \"dlroWolleH\"", "assert reverse_and_remove_non_alpha(\"Python 3.8\") == \"nohtyP\""]}
{"seq_id": 70444785076, "instruction": "Write a function to find the length of the longest common subsequence (LCS) between two strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_subseq(X, Y): \n    m = len(X)\n    n = len(Y)\n    L = [[None]*(n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n```", "code": "def longest_common_subseq(X, Y): \n    m = len(X)\n    n = len(Y)\n    L = [[None]*(n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]", "entry_point": "longest_common_subseq", "testcase": ["assert longest_common_subseq(\"XMJYAUZ\", \"MZJAWXU\") == 4", "assert longest_common_subseq(\"ABCBDAB\", \"BDCAB\") == 4", "assert longest_common_subseq(\"AGGTAB\", \"GXTXAYB\") == 4"]}
{"seq_id": 36453599643, "instruction": "Write a python function that finds the smallest subarray with a given sum. Implement the function `min_length_subarray` that takes a list of integers `arr` and an integer `target_sum` as inputs, and returns the length of the smallest subarray whose sum is greater than or equal to `target_sum`. If no such subarray exists, return 0.", "output": "Here is the code to solve this problem: \n```python\ndef min_length_subarray(arr, target_sum):\n    n = len(arr)\n    min_len = float('inf')\n    start, curr_sum = 0, 0\n    for end in range(n):\n        curr_sum += arr[end]\n        while curr_sum >= target_sum:\n            min_len = min(min_len, end - start + 1)\n            curr_sum -= arr[start]\n            start += 1\n    return min_len if min_len != float('inf') else 0\n```", "code": "def min_length_subarray(arr, target_sum):\n    n = len(arr)\n    min_len = float('inf')\n    start, curr_sum = 0, 0\n    for end in range(n):\n        curr_sum += arr[end]\n        while curr_sum >= target_sum:\n            min_len = min(min_len, end - start + 1)\n            curr_sum -= arr[start]\n            start += 1\n    return min_len if min_len != float('inf') else 0", "entry_point": "min_length_subarray", "testcase": ["assert min_length_subarray([1, 2, 3, 4, 5], 11) == 3", "assert min_length_subarray([1, 10, 5, 2, 7], 9) == 1", "assert min_length_subarray([1, 2, 3, 4, 5], 100) == 0", "assert min_length_subarray([2, 1, 5, 2, 3, 2], 7) == 2"]}
{"seq_id": 29720516175, "instruction": "Write a python function to find the first non-repeated character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef find_first_non_repeated(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None\n```", "code": "def find_first_non_repeated(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None", "entry_point": "find_first_non_repeated", "testcase": ["assert find_first_non_repeated('abcd') == 'a'", "assert find_first_non_repeated('geeksforgeeks') == 'f'", "assert find_first_non_repeated('aabbcc') == None"]}
{"seq_id": 32643042368, "instruction": "Write a python function to find the maximum frequency of an element in a list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef max_frequency(xs):\n  freqs = Counter(xs)\n  max_freq = max(freqs.values())\n  return [x for x, freq in freqs.items() if freq == max_freq][0]\n```", "code": "from collections import Counter\n\ndef max_frequency(xs):\n  freqs = Counter(xs)\n  max_freq = max(freqs.values())\n  return [x for x, freq in freqs.items() if freq == max_freq][0]", "entry_point": "max_frequency", "testcase": ["assert max_frequency([10, 20, 10, 30, 10]) == 10", "assert max_frequency([1, 2, 2, 3, 3, 3]) == 3", "assert max_frequency(['a', 'b', 'a', 'c', 'a']) == 'a'"]}
{"seq_id": 15907221968, "instruction": "Write a function to find the smallest possible maximum value of an array after performing a series of operations on the array. In each operation, you can choose an index i (1 <= i < n) where nums[i] > 0, and then decrease nums[i] by 1 while increasing nums[i - 1] by 1. The function should return the minimum possible maximum value of the array after performing any number of these operations.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import accumulate\nimport math\n\ndef minimize_max(nums):\n    n = len(nums)\n    pre_sum = [0] + list(accumulate(nums))\n    max_val = max(math.ceil(pre_sum[i] / i) for i in range(1, n + 1))\n    return max_val\n```", "code": "from itertools import accumulate\nimport math\n\ndef minimize_max(nums):\n    n = len(nums)\n    pre_sum = [0] + list(accumulate(nums))\n    max_val = max(math.ceil(pre_sum[i] / i) for i in range(1, n + 1))\n    return max_val", "entry_point": "minimize_max", "testcase": ["assert minimize_max([10, 1]) == 10", "assert minimize_max([3, 7, 1, 6]) == 5", "assert minimize_max([4, 7, 2, 2, 9, 19, 16, 0, 3, 15]) == 9"]}
{"seq_id": 36052048468, "instruction": "Write a python function to convert a binary number to a decimal number.", "output": "Here is the code to solve this problem: \n```python\ndef bin_to_dec(binary):\n    binary = str(binary)[::-1]\n    dec = 0\n    for i in range(len(binary)):\n        dec += int(binary[i])*(2**i)\n    return dec\n```", "code": "def bin_to_dec(binary):\n    binary = str(binary)[::-1]\n    dec = 0\n    for i in range(len(binary)):\n        dec += int(binary[i])*(2**i)\n    return dec", "entry_point": "bin_to_dec", "testcase": ["assert bin_to_dec(\"1011\") == 11", "assert bin_to_dec(\"1001\") == 9", "assert bin_to_dec(\"101\") == 5"]}
{"seq_id": 4653279761, "instruction": "Write a function to find the minimum effort required to travel through a grid where each cell represents the height of the land at that point. The effort required to travel from one cell to another is the absolute difference in height between the two cells. The path can move in four directions: up, down, left, and right.", "output": "Here is the code to solve this problem: \n```python\nfrom heapq import heappush, heappop\n\ndef minimum_effort(heights):\n    ROWS = len(heights)\n    COLS = len(heights[0])\n    diff = [[float(\"inf\")] * COLS for _ in range(ROWS)]\n    diff[0][0] = 0\n    visited = [[False] * COLS for _ in range(ROWS)]\n    queue = [(0, 0, 0)] # diff, x, y\n    while queue:\n        dif, x, y = heappop(queue)\n        visited[x][y] = True\n        for dx, dy in [[0, 1], [1, 0], [0, -1], [-1, 0]]:\n            adj_x = x + dx\n            adj_y = y + dy\n            if 0 <= adj_x < ROWS and 0 <= adj_y < COLS and not visited[adj_x][adj_y]:\n                cur_dif = abs(heights[adj_x][adj_y] - heights[x][y])\n                max_dif = max(cur_dif, diff[x][y])\n                if diff[adj_x][adj_y] > max_dif:\n                    diff[adj_x][adj_y] = max_dif\n                    heappush(queue, (max_dif, adj_x, adj_y))\n    return diff[-1][-1]\n```", "code": "from heapq import heappush, heappop\n\ndef minimum_effort(heights):\n    ROWS = len(heights)\n    COLS = len(heights[0])\n    diff = [[float(\"inf\")] * COLS for _ in range(ROWS)]\n    diff[0][0] = 0\n    visited = [[False] * COLS for _ in range(ROWS)]\n    queue = [(0, 0, 0)] # diff, x, y\n    while queue:\n        dif, x, y = heappop(queue)\n        visited[x][y] = True\n        for dx, dy in [[0, 1], [1, 0], [0, -1], [-1, 0]]:\n            adj_x = x + dx\n            adj_y = y + dy\n            if 0 <= adj_x < ROWS and 0 <= adj_y < COLS and not visited[adj_x][adj_y]:\n                cur_dif = abs(heights[adj_x][adj_y] - heights[x][y])\n                max_dif = max(cur_dif, diff[x][y])\n                if diff[adj_x][adj_y] > max_dif:\n                    diff[adj_x][adj_y] = max_dif\n                    heappush(queue, (max_dif, adj_x, adj_y))\n    return diff[-1][-1]", "entry_point": "minimum_effort", "testcase": ["assert minimum_effort([[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]])==0", "assert minimum_effort([[1,2,3],[3,8,4],[5,3,5]])==1", "assert minimum_effort([[1,2,2],[3,8,2],[5,3,5]])==2"]}
{"seq_id": 74733537850, "instruction": "Write a function to find the maximum height of a binary tree. The height of a binary tree is the number of edges between the tree's root and its furthest leaf.", "output": "Here is the code to solve this problem: \n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = max_height(root.left)\n        right_height = max_height(root.right)\n        return max(left_height, right_height) + 1\n\n# Creating a binary tree\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\n\n# Testing the function\nassert max_height(root) == 3\n```", "code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = max_height(root.left)\n        right_height = max_height(root.right)\n        return max(left_height, right_height) + 1\n\n# Creating a binary tree\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\n\n# Testing the function\nassert max_height(root) == 3", "entry_point": "max_height", "testcase": ["", "# A tree node structure", "# Function to find the maximum height of a binary tree", "# Creating a binary tree", "", "root.left.right = Node(5)", "assert max_height(root) == 3", "root.left = Node(2)", "# Testing the function", "root = Node(1)", "root.left.left = Node(4)", "root.right = Node(3)", ""]}
{"seq_id": 8357804541, "instruction": "Write a Python function to find the minimum distance between the same elements in a list. If there are no repeating elements, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef find_min_distance(arr):\n    min_distance = float('inf')\n    indices = {}\n\n    for idx, val in enumerate(arr):\n        if val in indices:\n            min_distance = min(min_distance, idx - indices[val])\n        indices[val] = idx\n\n    return min_distance if min_distance != float('inf') else -1\n```", "code": "def find_min_distance(arr):\n    min_distance = float('inf')\n    indices = {}\n\n    for idx, val in enumerate(arr):\n        if val in indices:\n            min_distance = min(min_distance, idx - indices[val])\n        indices[val] = idx\n\n    return min_distance if min_distance != float('inf') else -1", "entry_point": "find_min_distance", "testcase": ["assert find_min_distance([1, 2, 1, 3, 2, 2]) == 1", "assert find_min_distance([1, 2, 3]) == -1", "assert find_min_distance([3, 5, 3, 2, 4, 5]) == 2"]}
{"seq_id": 34791802820, "instruction": "Write a function to find the number of ways a given number can be expressed as the sum of consecutive positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef consecutive_sum_ways(n):\n    count = 0\n    for i in range(1, n):\n        sum = 0\n        while sum < n:\n            sum += i\n            i += 1\n        if sum == n:\n            count += 1\n    return count\n```", "code": "def consecutive_sum_ways(n):\n    count = 0\n    for i in range(1, n):\n        sum = 0\n        while sum < n:\n            sum += i\n            i += 1\n        if sum == n:\n            count += 1\n    return count", "entry_point": "consecutive_sum_ways", "testcase": ["assert consecutive_sum_ways(15)==3", "assert consecutive_sum_ways(9)==2", "assert consecutive_sum_ways(1)==0"]}
{"seq_id": 10167300233, "instruction": "Write a python function to find the longest common subsequence (LCS) of two strings using dynamic programming.", "output": "Here is the code to solve this problem: \n```python\ndef find_LCS(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    return L[m][n]\n```", "code": "def find_LCS(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    return L[m][n]", "entry_point": "find_LCS", "testcase": ["assert find_LCS(\"ABCBDAB\", \"BDCAB\") == 4", "assert find_LCS(\"AGGTAB\", \"GXTXAYB\") == 4", "assert find_LCS(\"XMJYAUZ\", \"MZJAWXU\") == 4"]}
{"seq_id": 7867525691, "instruction": "Write a function to find the longest duplicate substring in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_duplicate_substring(s):\n    def search(mid, shift):\n        h = (1 << (mid * 8)) % shift\n        cur = 0\n        for i in range(mid):\n            cur = (cur << 8) + ord(s[i]) - 96\n            cur %= shift\n        seen = {cur}\n        for i in range(1, len(s) - mid + 1):\n            cur = (cur * 256 - h * (ord(s[i - 1]) - 96) + ord(s[i + mid - 1]) - 96) % shift\n            if cur in seen:\n                return i\n            seen.add(cur)\n        return -1\n\n    low, high = 0, len(s) - 1\n    shift = (1 << 32) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        pos = search(mid, shift)\n        if pos != -1:\n            low = mid + 1\n            pos_start = pos\n        else:\n            high = mid - 1\n    return s[pos_start:pos_start + low - 1]\n```", "code": "def longest_duplicate_substring(s):\n    def search(mid, shift):\n        h = (1 << (mid * 8)) % shift\n        cur = 0\n        for i in range(mid):\n            cur = (cur << 8) + ord(s[i]) - 96\n            cur %= shift\n        seen = {cur}\n        for i in range(1, len(s) - mid + 1):\n            cur = (cur * 256 - h * (ord(s[i - 1]) - 96) + ord(s[i + mid - 1]) - 96) % shift\n            if cur in seen:\n                return i\n            seen.add(cur)\n        return -1\n\n    low, high = 0, len(s) - 1\n    shift = (1 << 32) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        pos = search(mid, shift)\n        if pos != -1:\n            low = mid + 1\n            pos_start = pos\n        else:\n            high = mid - 1\n    return s[pos_start:pos_start + low - 1]", "entry_point": "longest_duplicate_substring", "testcase": ["assert longest_duplicate_substring(\"abcd\") == \"\"", "assert longest_duplicate_substring(\"banana\") == \"ana\"", "assert longest_duplicate_substring(\"aabcaabdaab\") == \"aab\""]}
{"seq_id": 2246548631, "instruction": "Write a function to find the sum of the elements on the primary and secondary diagonals of a square matrix.", "output": "Here is the code to solve this problem: \n```python\ndef diagonal_sum(mat):\n    s=set()\n    for i in range(0,len(mat)):\n        s.add((i,i))\n        s.add((i,len(mat)-(i+1)))\n    tot=0\n    for coords in s:\n        x=coords[0]\n        y=coords[1]\n        tot=tot+mat[x][y]\n    return tot\n```", "code": "def diagonal_sum(mat):\n    s=set()\n    for i in range(0,len(mat)):\n        s.add((i,i))\n        s.add((i,len(mat)-(i+1)))\n    tot=0\n    for coords in s:\n        x=coords[0]\n        y=coords[1]\n        tot=tot+mat[x][y]\n    return tot", "entry_point": "diagonal_sum", "testcase": ["assert diagonal_sum([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 8", "assert diagonal_sum([[5]]) == 5", "assert diagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 25"]}
{"seq_id": 70896872823, "instruction": "Write a python function to print all the leaf nodes of a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef leaf_nodes(root):\n    result = []\n\n    def dfs(current_node):\n        if current_node:\n            if not current_node.left and not current_node.right:\n                result.append(current_node.val)\n            dfs(current_node.left)\n            dfs(current_node.right)\n\n    dfs(root)\n    return result\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef leaf_nodes(root):\n    result = []\n\n    def dfs(current_node):\n        if current_node:\n            if not current_node.left and not current_node.right:\n                result.append(current_node.val)\n            dfs(current_node.left)\n            dfs(current_node.right)\n\n    dfs(root)\n    return result", "entry_point": "leaf_nodes", "testcase": ["assert leaf_nodes(TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5))) == [3, 4, 5]", "assert leaf_nodes(TreeNode(1, TreeNode(2, TreeNode(3), TreeNode(4)), TreeNode(5, TreeNode(6), TreeNode(7)))) == [3, 4, 6, 7]", "assert leaf_nodes(TreeNode(1, TreeNode(2), TreeNode(3))) == [2, 3]"]}
{"seq_id": 19808653704, "instruction": "Write a function to check if a given binary tree is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_valid_bst(root: TreeNode) -> bool:\n    def validate(node, low=-float('inf'), high=float('inf')):\n        if not node:\n            return True\n\n        if not (low < node.val < high):\n            return False\n\n        return (validate(node.right, node.val, high) and\n                validate(node.left, low, node.val))\n\n    return validate(root)\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_valid_bst(root: TreeNode) -> bool:\n    def validate(node, low=-float('inf'), high=float('inf')):\n        if not node:\n            return True\n\n        if not (low < node.val < high):\n            return False\n\n        return (validate(node.right, node.val, high) and\n                validate(node.left, low, node.val))\n\n    return validate(root)", "entry_point": "is_valid_bst", "testcase": ["assert is_valid_bst(TreeNode(2, TreeNode(1), TreeNode(3))) == True", "assert is_valid_bst(TreeNode(10, TreeNode(5, TreeNode(2), TreeNode(7)), TreeNode(15))) == True", "assert is_valid_bst(TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))) == False"]}
{"seq_id": 30855581555, "instruction": "Write a function to convert a given string to uppercase without using the built-in `upper()` function.", "output": "Here is the code to solve this problem: \n```python\ndef string_to_uppercase(s):\n    uppercase_string = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            uppercase_string += chr(ord(char) - 32)\n        else:\n            uppercase_string += char\n    return uppercase_string\n```", "code": "def string_to_uppercase(s):\n    uppercase_string = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            uppercase_string += chr(ord(char) - 32)\n        else:\n            uppercase_string += char\n    return uppercase_string", "entry_point": "string_to_uppercase", "testcase": ["assert string_to_uppercase('hello') == 'HELLO'", "assert string_to_uppercase('python') == 'PYTHON'", "assert string_to_uppercase('world') == 'WORLD'"]}
{"seq_id": 35416216079, "instruction": "Write a python function to find the number of unique binary search trees (BSTs) that store values 1...n.", "output": "Here is the code to solve this problem: \n```python\ndef numTrees(n):\n    if n <= 1:\n        return 1\n    total = 0\n    for i in range(1, n + 1):\n        left = numTrees(i - 1)\n        right = numTrees(n - i)\n        total += left * right\n    return total\n```", "code": "def numTrees(n):\n    if n <= 1:\n        return 1\n    total = 0\n    for i in range(1, n + 1):\n        left = numTrees(i - 1)\n        right = numTrees(n - i)\n        total += left * right\n    return total", "entry_point": "numTrees", "testcase": ["assert numTrees(3) == 5", "assert numTrees(4) == 14", "assert numTrees(5) == 42"]}
{"seq_id": 27264257113, "instruction": "Write a python function to find the number of days between two given dates.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\n\ndef days_between(date1, date2):\n    d1 = datetime.strptime(date1, \"%Y-%m-%d\")\n    d2 = datetime.strptime(date2, \"%Y-%m-%d\")\n    return abs((d2 - d1).days)\n```", "code": "from datetime import datetime\n\ndef days_between(date1, date2):\n    d1 = datetime.strptime(date1, \"%Y-%m-%d\")\n    d2 = datetime.strptime(date2, \"%Y-%m-%d\")\n    return abs((d2 - d1).days)", "entry_point": "days_between", "testcase": ["assert days_between(\"2021-01-01\", \"2022-01-01\") == 365", "assert days_between(\"2022-01-01\", \"2022-01-10\") == 9", "assert days_between(\"2022-01-01\", \"2022-02-01\") == 31"]}
{"seq_id": 18071074328, "instruction": "Write a python function to find the nth smallest element in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef nth_smallest(lst, n):\n    return sorted(lst)[n-1]\n```", "code": "def nth_smallest(lst, n):\n    return sorted(lst)[n-1]", "entry_point": "nth_smallest", "testcase": ["assert nth_smallest([7, 5, 3, 1, 2, 4, 6], 3) == 3", "assert nth_smallest([1, 2, 3, 4, 5, 6], 2) == 2", "assert nth_smallest([9, 8, 7, 6, 5], 1) == 5"]}
{"seq_id": 4100465890, "instruction": "Write a function that takes an integer as input and returns the number of positive divisors of that integer.", "output": "Here is the code to solve this problem: \n```python\ndef count_divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n```", "code": "def count_divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count", "entry_point": "count_divisors", "testcase": ["assert count_divisors(1) == 1", "assert count_divisors(6) == 4", "assert count_divisors(28) == 6"]}
{"seq_id": 30194517269, "instruction": "Write a python function to find the number of unique characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef unique_chars_count(str1):\n  return len(set(str1))\n```", "code": "def unique_chars_count(str1):\n  return len(set(str1))", "entry_point": "unique_chars_count", "testcase": ["assert unique_chars_count(\"123123\") == 3", "assert unique_chars_count(\"Hello World\") == 8", "assert unique_chars_count(\"abcabc\") == 3"]}
{"seq_id": 37338712695, "instruction": "Write a python function to find the number of times a given number appears in a sorted array using binary search.", "output": "Here is the code to solve this problem: \n```python\ndef binary_search_count(nums, target):\n    def find_left(nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def find_right(nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n\n    left_index = find_left(nums, target)\n    right_index = find_right(nums, target)\n    return right_index - left_index + 1 if left_index <= right_index else 0\n```", "code": "def binary_search_count(nums, target):\n    def find_left(nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def find_right(nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n\n    left_index = find_left(nums, target)\n    right_index = find_right(nums, target)\n    return right_index - left_index + 1 if left_index <= right_index else 0", "entry_point": "binary_search_count", "testcase": ["assert binary_search_count([1,2,3,4,5], 6) == 0", "assert binary_search_count([1,2,2,2,3,4], 2) == 3", "assert binary_search_count([1,1,1,1,1,1,1], 1) == 7"]}
{"seq_id": 12243314320, "instruction": "Write a function to find the level of a given value in a binary search tree.", "output": "Here is the code to solve this problem: \n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef insert(root, value):\n    if root is None:\n        return Node(value)\n    else:\n        if value < root.value:\n            root.left = insert(root.left, value)\n        else:\n            root.right = insert(root.right, value)\n    return root\n\ndef find_level_in_bst(arr, target):\n    root = Node(arr[0])\n    for value in arr[1:]:\n        insert(root, value)\n\n    level = 0\n    queue = [(root, level)]\n    while queue:\n        node, level = queue.pop(0)\n        if node.value == target:\n            return level + 1\n        if node.left:\n            queue.append((node.left, level + 1))\n        if node.right:\n            queue.append((node.right, level + 1))\n    return -1\n```", "code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef insert(root, value):\n    if root is None:\n        return Node(value)\n    else:\n        if value < root.value:\n            root.left = insert(root.left, value)\n        else:\n            root.right = insert(root.right, value)\n    return root\n\ndef find_level_in_bst(arr, target):\n    root = Node(arr[0])\n    for value in arr[1:]:\n        insert(root, value)\n\n    level = 0\n    queue = [(root, level)]\n    while queue:\n        node, level = queue.pop(0)\n        if node.value == target:\n            return level + 1\n        if node.left:\n            queue.append((node.left, level + 1))\n        if node.right:\n            queue.append((node.right, level + 1))\n    return -1", "entry_point": "find_level_in_bst", "testcase": ["assert find_level_in_bst([10, 5, 15, 2, 7, 12, 20], 15) == 2", "assert find_level_in_bst([10, 5, 15, 2, 7, 12, 20], 25) == -1", "assert find_level_in_bst([10, 5, 15, 2, 7, 12, 20], 2) == 3"]}
{"seq_id": 40713134224, "instruction": "Write a function to check if a string is a palindrome, ignoring case, spaces, and punctuation.\n\nA palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_palindrome(s):\n    s = re.sub(r'[^A-Za-z0-9]', '', s).lower()\n    return s == s[::-1]\n```", "code": "import re\n\ndef is_palindrome(s):\n    s = re.sub(r'[^A-Za-z0-9]', '', s).lower()\n    return s == s[::-1]", "entry_point": "is_palindrome", "testcase": ["assert is_palindrome(\"Madam, in Eden, I'm Adam.\") == True", "assert is_palindrome(\"Was it a car or a cat I saw?\") == True", "assert is_palindrome(\"No lemon, no melon\") == True", "assert is_palindrome(\"race a car\") == False", "assert is_palindrome(\"A man, a plan, a canal: Panama\") == True"]}
{"seq_id": 28948891248, "instruction": "Write a function which accepts an arbitrary list of numbers and returns a dictionary with the frequency of each number in the list.", "output": "Here is the code to solve this problem: \n```python\ndef number_frequency(numbers):\n    freq_dict = {}\n    for num in numbers:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n```", "code": "def number_frequency(numbers):\n    freq_dict = {}\n    for num in numbers:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict", "entry_point": "number_frequency", "testcase": ["assert number_frequency([1, 2, 3, 2, 3, 3, 4, 4, 5]) == {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}", "assert number_frequency([2, 3, 2, 4, 5, 3, 6, 7, 8, 9, 9]) == {2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 2}", "assert number_frequency([1, 1, 1, 1, 1, 1, 1]) == {1: 7}"]}
{"seq_id": 43092871851, "instruction": "Write a python function to find the smallest positive number from the given list.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_pos(list1): \n    min = list1[0] \n    for x in list1: \n        if x > 0 and x < min: \n             min = x  \n    return min\n```", "code": "def smallest_pos(list1): \n    min = list1[0] \n    for x in list1: \n        if x > 0 and x < min: \n             min = x  \n    return min", "entry_point": "smallest_pos", "testcase": ["assert smallest_pos([1,2,3,-8,-9]) == 1", "assert smallest_pos([1,2,3,-4,-6]) == 1", "assert smallest_pos([10,20,30,40,-50]) == 10"]}
{"seq_id": 27019924005, "instruction": "Write a function to find the median of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef find_median(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        return nums[len(nums)//2]\n```", "code": "def find_median(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        return nums[len(nums)//2]", "entry_point": "find_median", "testcase": ["assert find_median([1, 3], [2]) == 2.0", "assert find_median([2], []) == 2.0", "assert find_median([], [1]) == 1.0", "assert find_median([0, 0], [0, 0]) == 0.0", "assert find_median([1, 2], [3, 4]) == 2.5"]}
{"seq_id": 25272663912, "instruction": "Write a function to calculate the number of positive, negative, and zero elements in a given array.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_elements(arr):\n    positive = 0\n    negative = 0\n    zero = 0\n    for num in arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        else:\n            zero += 1\n    return (positive, negative, zero)\n```", "code": "def calculate_elements(arr):\n    positive = 0\n    negative = 0\n    zero = 0\n    for num in arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        else:\n            zero += 1\n    return (positive, negative, zero)", "entry_point": "calculate_elements", "testcase": ["assert calculate_elements([1, -2, 3, 0, -5, 6, 0]) == (3, 2, 2)", "assert calculate_elements([-1, -2, -3, -4, -5]) == (0, 5, 0)", "assert calculate_elements([1, 2, 3, 4, 5]) == (5, 0, 0)"]}
{"seq_id": 27612370799, "instruction": "Write a Python function to find the number of unique pairs in a given list of integers that add up to a specific target sum. The function should consider only unique pairs, meaning that if the pair (a, b) is counted, then (b, a) should not be counted again.", "output": "Here is the code to solve this problem: \n```python\ndef unique_pair_sum(nums, target):\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    seen_pairs = set()\n    unique_pairs = 0\n    \n    while left < right:\n        current_sum = nums[left] + nums[right]\n        \n        if current_sum == target:\n            pair = (nums[left], nums[right])\n            if pair not in seen_pairs:\n                unique_pairs += 1\n                seen_pairs.add(pair)\n            left += 1\n            right -= 1\n            \n            # Skip duplicates\n            while left < right and nums[left] == nums[left - 1]:\n                left += 1\n            while left < right and nums[right] == nums[right + 1]:\n                right -= 1\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n            \n    return unique_pairs\n```", "code": "def unique_pair_sum(nums, target):\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    seen_pairs = set()\n    unique_pairs = 0\n    \n    while left < right:\n        current_sum = nums[left] + nums[right]\n        \n        if current_sum == target:\n            pair = (nums[left], nums[right])\n            if pair not in seen_pairs:\n                unique_pairs += 1\n                seen_pairs.add(pair)\n            left += 1\n            right -= 1\n            \n            # Skip duplicates\n            while left < right and nums[left] == nums[left - 1]:\n                left += 1\n            while left < right and nums[right] == nums[right + 1]:\n                right -= 1\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n            \n    return unique_pairs", "entry_point": "unique_pair_sum", "testcase": ["assert unique_pair_sum([1, 3, 2, 2, 3, 4], 5) == 2", "assert unique_pair_sum([1, 5, 7, -1], 6) == 2", "assert unique_pair_sum([1, 1, 1, 1], 2) == 1"]}
{"seq_id": 37286667773, "instruction": "Write a python function to find the number of unique substrings of a given string that are palindromes.", "output": "Here is the code to solve this problem: \n```python\ndef count_palindromic_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        # Odd length palindromes\n        total_count += expand_around_center(i, i)\n        # Even length palindromes\n        total_count += expand_around_center(i, i + 1)\n    return total_count\n```", "code": "def count_palindromic_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        # Odd length palindromes\n        total_count += expand_around_center(i, i)\n        # Even length palindromes\n        total_count += expand_around_center(i, i + 1)\n    return total_count", "entry_point": "count_palindromic_substrings", "testcase": ["assert count_palindromic_substrings(\"abc\") == 3", "assert count_palindromic_substrings(\"aaa\") == 6", "assert count_palindromic_substrings(\"racecar\") == 10"]}
{"seq_id": 42879327594, "instruction": "Write a function to find the largest prime factor of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n```", "code": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "entry_point": "largest_prime_factor", "testcase": ["assert largest_prime_factor(600851475143) == 6857", "assert largest_prime_factor(2048) == 2", "assert largest_prime_factor(13195) == 29"]}
{"seq_id": 11145958593, "instruction": "Write a function that checks if a given string matches any of the regular expressions in a provided list. The function should return True if the string matches at least one of the regular expressions, and False otherwise.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef match_any_regex(strings, regexes):\n    for string in strings:\n        for regex in regexes:\n            if re.match(regex, string):\n                return True\n    return False\n```", "code": "import re\n\ndef match_any_regex(strings, regexes):\n    for string in strings:\n        for regex in regexes:\n            if re.match(regex, string):\n                return True\n    return False", "entry_point": "match_any_regex", "testcase": ["assert match_any_regex(['abc', 'def'], ['a.*', '.*ef']) == True", "assert match_any_regex(['hello', 'world'], ['.*o.*', '.*e.*']) == True", "assert match_any_regex(['test', 'string'], ['.*a.*', '.*z.*']) == False", "assert match_any_regex(['example', 'text'], ['.*x.*', '.*t.*']) == True"]}
{"seq_id": 40710153704, "instruction": "Write a function to find the longest palindrome substring in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_palindrome(s):\n    if len(s) == 0:\n        return \"\"\n    max_length = 1\n    start = 0\n    for i in range(len(s)):\n        if i - max_length >= 1 and s[i - max_length - 1: i + 1] == s[i - max_length - 1: i + 1][::-1]:\n            start = i - max_length - 1\n            max_length += 2\n            continue\n        if i - max_length >= 0 and s[i - max_length: i + 1] == s[i - max_length: i + 1][::-1]:\n            start = i - max_length\n            max_length += 1\n    return s[start: start + max_length]\n```", "code": "def find_longest_palindrome(s):\n    if len(s) == 0:\n        return \"\"\n    max_length = 1\n    start = 0\n    for i in range(len(s)):\n        if i - max_length >= 1 and s[i - max_length - 1: i + 1] == s[i - max_length - 1: i + 1][::-1]:\n            start = i - max_length - 1\n            max_length += 2\n            continue\n        if i - max_length >= 0 and s[i - max_length: i + 1] == s[i - max_length: i + 1][::-1]:\n            start = i - max_length\n            max_length += 1\n    return s[start: start + max_length]", "entry_point": "find_longest_palindrome", "testcase": ["assert find_longest_palindrome(\"ac\") == \"a\"", "assert find_longest_palindrome(\"a\") == \"a\"", "assert find_longest_palindrome(\"cbbd\") == \"bb\"", "assert find_longest_palindrome(\"babad\") == \"bab\""]}
{"seq_id": 22958302983, "instruction": "Write a function to generate all possible n-grams of a given string. An n-gram is a contiguous sequence of n items from a given sample of text or speech. For this problem, an item is a character.", "output": "Here is the code to solve this problem: \n```python\ndef generate_n_grams(s, n):\n    return [s[i:i+n] for i in range(len(s) - n + 1)]\n```", "code": "def generate_n_grams(s, n):\n    return [s[i:i+n] for i in range(len(s) - n + 1)]", "entry_point": "generate_n_grams", "testcase": ["assert generate_n_grams('abc', 2) == ['ab', 'bc']", "assert generate_n_grams('def', 3) == ['def']", "assert generate_n_grams('ghi', 1) == ['g', 'h', 'i']"]}
{"seq_id": 72617758145, "instruction": "Write a python function to find the most common word in a given paragraph. The function should ignore case sensitivity, punctuation, and exclude any banned words.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\nimport re\n\ndef mostCommonWord(paragraph: str, banned: list[str]) -> str:\n    counts = Counter()\n    banned_words = set(banned)\n\n    words = re.findall(r'\\w+', paragraph.lower())\n    for word in words:\n        if word not in banned_words:\n            counts[word] += 1\n    return max(counts.items(), key=lambda p: p[1])[0]\n```", "code": "from collections import Counter\nimport re\n\ndef mostCommonWord(paragraph: str, banned: list[str]) -> str:\n    counts = Counter()\n    banned_words = set(banned)\n\n    words = re.findall(r'\\w+', paragraph.lower())\n    for word in words:\n        if word not in banned_words:\n            counts[word] += 1\n    return max(counts.items(), key=lambda p: p[1])[0]", "entry_point": "mostCommonWord", "testcase": ["assert mostCommonWord(\"Hello world, hello everyone. Hello, hello, hello!\", [\"hello\"]) == \"world\"", "assert mostCommonWord(\"a.\", []) == \"a\"", "assert mostCommonWord(\"Bob hit a ball, the hit BALL flew far after it was hit.\", [\"hit\"]) == \"ball\""]}
{"seq_id": 23794165330, "instruction": "Write a function that takes an array of integers and returns a new array where each element is the number of smaller elements to the right of that element in the original input array.", "output": "Here is the code to solve this problem: \n```python\ndef countSmaller(nums):\n    def merge_sort(enum):\n        half = len(enum) // 2\n        if half:\n            left, right = merge_sort(enum[:half]), merge_sort(enum[half:])\n            for i in range(len(enum))[::-1]:\n                if not right or left and left[-1][1] > right[-1][1]:\n                    smaller[left[-1][0]] += len(right)\n                    enum[i] = left.pop()\n                else:\n                    enum[i] = right.pop()\n        return enum\n\n    smaller = [0] * len(nums)\n    merge_sort(list(enumerate(nums)))\n    return smaller\n```", "code": "def countSmaller(nums):\n    def merge_sort(enum):\n        half = len(enum) // 2\n        if half:\n            left, right = merge_sort(enum[:half]), merge_sort(enum[half:])\n            for i in range(len(enum))[::-1]:\n                if not right or left and left[-1][1] > right[-1][1]:\n                    smaller[left[-1][0]] += len(right)\n                    enum[i] = left.pop()\n                else:\n                    enum[i] = right.pop()\n        return enum\n\n    smaller = [0] * len(nums)\n    merge_sort(list(enumerate(nums)))\n    return smaller", "entry_point": "countSmaller", "testcase": ["assert countSmaller([5, 2, 6, 1]) == [2, 1, 1, 0]", "assert countSmaller([0, 1, 0]) == [0, 1, 0]", "assert countSmaller([-1, -1]) == [0, 0]", "assert countSmaller([-1]) == [0]"]}
{"seq_id": 39636220247, "instruction": "Write a python function to validate a given password based on the following criteria:\n1. The password should be between 6 and 16 characters long.\n2. The password should contain at least one lowercase character, one uppercase character, one digit, and one special character.\n3. The password should not contain any spaces.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef password_validation(password):\n    if len(password) < 6 or len(password) > 16:\n        return False\n    if not re.search(\"[a-z]\", password):\n        return False\n    if not re.search(\"[A-Z]\", password):\n        return False\n    if not re.search(\"[0-9]\", password):\n        return False\n    if not re.search(\"[_@$]\", password):\n        return False\n    if re.search(\"\\s\", password):\n        return False\n    return True\n```", "code": "import re\n\ndef password_validation(password):\n    if len(password) < 6 or len(password) > 16:\n        return False\n    if not re.search(\"[a-z]\", password):\n        return False\n    if not re.search(\"[A-Z]\", password):\n        return False\n    if not re.search(\"[0-9]\", password):\n        return False\n    if not re.search(\"[_@$]\", password):\n        return False\n    if re.search(\"\\s\", password):\n        return False\n    return True", "entry_point": "password_validation", "testcase": ["assert password_validation('pass') == False", "assert password_validation('Pa$$word123') == True", "assert password_validation('Password123') == False", "assert password_validation('Pa$$w0rd') == True"]}
{"seq_id": 35203533559, "instruction": "Write a function to find the number of distinct words in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef distinct_words(s):\n    words = s.split()\n    return len(set(words))\n```", "code": "def distinct_words(s):\n    words = s.split()\n    return len(set(words))", "entry_point": "distinct_words", "testcase": ["assert distinct_words(\"Hello world world\") == 2", "assert distinct_words(\"Python is awesome awesome\") == 3", "assert distinct_words(\"I love coding coding\") == 3"]}
{"seq_id": 7792209743, "instruction": "Write a function to find if a given number is a power of a another given number.", "output": "Here is the code to solve this problem: \n```python\ndef is_power(n, p):\n    if n == 1:\n        return p == 1\n    power = 1\n    while power < n:\n        power *= p\n    return power == n\n```", "code": "def is_power(n, p):\n    if n == 1:\n        return p == 1\n    power = 1\n    while power < n:\n        power *= p\n    return power == n", "entry_point": "is_power", "testcase": ["assert is_power(2, 2) == True", "assert is_power(3, 2) == False", "assert is_power(5, 3) == False", "assert is_power(8, 2) == True"]}
{"seq_id": 29502969776, "instruction": "Write a function to convert temperatures from Fahrenheit to Celsius and vice versa.", "output": "Here is the code to solve this problem: \n```python\ndef convert_temperature(unit, temperature):\n  if unit == 'C':\n    return (temperature * 9/5) + 32\n  elif unit == 'F':\n    return (temperature - 32) * 5/9\n```", "code": "def convert_temperature(unit, temperature):\n  if unit == 'C':\n    return (temperature * 9/5) + 32\n  elif unit == 'F':\n    return (temperature - 32) * 5/9", "entry_point": "convert_temperature", "testcase": ["assert convert_temperature('F', 100) == 37.77777777777778", "assert convert_temperature('F', 32) == 0.0", "assert convert_temperature('C', 0) == 32.0"]}
{"seq_id": 21316583477, "instruction": "Write a python function to find the largest possible square sub-matrix with all 1s in a binary matrix of size n x m.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_square(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    dp = [[0] * m for _ in range(n)]\n    max_square = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_square = max(max_square, dp[i][j])\n    return max_square ** 2\n```", "code": "def find_largest_square(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    dp = [[0] * m for _ in range(n)]\n    max_square = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_square = max(max_square, dp[i][j])\n    return max_square ** 2", "entry_point": "find_largest_square", "testcase": ["assert find_largest_square([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 9", "assert find_largest_square([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert find_largest_square([[1, 0, 1], [0, 1, 1], [1, 1, 1]]) == 4"]}
{"seq_id": 23657064873, "instruction": "Write a function that generates all unique permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef string_permutations(s):\n    return list(map(\"\".join, permutations(s)))\n```", "code": "from itertools import permutations\n\ndef string_permutations(s):\n    return list(map(\"\".join, permutations(s)))", "entry_point": "string_permutations", "testcase": ["assert string_permutations(\"abc\") == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']", "assert string_permutations(\"abcd\") == ['abcd', 'abdc', 'acbd', 'acdb', 'adbc', 'adcb', 'bacd', 'badc', 'bcad', 'bcda', 'bdac', 'bdca', 'cabd', 'cadb', 'cbad', 'cbda', 'cdab', 'cdba', 'dabc', 'dacb', 'dbac', 'dbca', 'dcab', 'dcba']", "assert string_permutations(\"a\") == ['a']"]}
{"seq_id": 24413852413, "instruction": "Write a function that will check if a given string is a valid floating-point number. The string can include digits, a single decimal point, and a sign (+ or -) at the beginning. It should not include any other characters.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_float(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n```", "code": "def is_valid_float(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False", "entry_point": "is_valid_float", "testcase": ["assert is_valid_float(\".456\") == True", "assert is_valid_float(\"123.\") == True", "assert is_valid_float(\"123.456\") == True", "assert is_valid_float(\"123.456.789\") == False", "assert is_valid_float(\"-123.456\") == True", "assert is_valid_float(\"abc\") == False", "assert is_valid_float(\"123.\") == True", "assert is_valid_float(\"+.456\") == True"]}
{"seq_id": 38022075280, "instruction": "Write a function that converts a given number into its English words representation. The function should handle numbers up to 999,999,999,999 (one billion, nine hundred ninety-nine million, nine hundred ninety-nine thousand, nine hundred ninety-nine).", "output": "Here is the code to solve this problem: \n```python\ndef number_to_words(num):\n    def one(num):\n        switcher = {\n            1: 'one',\n            2: 'two',\n            3: 'three',\n            4: 'four',\n            5: 'five',\n            6: 'six',\n            7: 'seven',\n            8: 'eight',\n            9: 'nine'\n        }\n        return switcher.get(num)\n\n    def two_less_20(num):\n        switcher = {\n            10: 'ten',\n            11: 'eleven',\n            12: 'twelve',\n            13: 'thirteen',\n            14: 'fourteen',\n            15: 'fifteen',\n            16: 'sixteen',\n            17: 'seventeen',\n            18: 'eighteen',\n            19: 'nineteen'\n        }\n        return switcher.get(num)\n\n    def ten(num):\n        switcher = {\n            2: 'twenty',\n            3: 'thirty',\n            4: 'forty',\n            5: 'fifty',\n            6: 'sixty',\n            7: 'seventy',\n            8: 'eighty',\n            9: 'ninety'\n        }\n        return switcher.get(num)\n\n    def two(num):\n        if not num:\n            return ''\n        elif num < 10:\n            return one(num)\n        elif num < 20:\n            return two_less_20(num)\n        else:\n            tenner = num // 10\n            rest = num - tenner * 10\n            return ten(tenner) + ' ' + one(rest) if rest else ten(tenner)\n\n    def three(num):\n        hundred = num // 100\n        rest = num - hundred * 100\n        if hundred and rest:\n            return one(hundred) + ' hundred ' + two(rest)\n        elif not hundred and rest:\n            return two(rest)\n        elif hundred and not rest:\n            return one(hundred) + ' hundred'\n\n    billion = num // 1000000000\n    million = (num - billion * 1000000000) // 1000000\n    thousand = (num - billion * 1000000000 - million * 1000000) // 1000\n    remainder = num - billion * 1000000000 - million * 1000000 - thousand * 1000\n\n    result = ''\n    if billion:\n        result += three(billion) + ' billion'\n    if million:\n        result += ' ' if result else ''\n        result += three(million) + ' million'\n    if thousand:\n        result += ' ' if result else ''\n        result += three(thousand) + ' thousand'\n    if remainder:\n        result += ' ' if result else ''\n        result += three(remainder)\n    return result.strip()\n```", "code": "def number_to_words(num):\n    def one(num):\n        switcher = {\n            1: 'one',\n            2: 'two',\n            3: 'three',\n            4: 'four',\n            5: 'five',\n            6: 'six',\n            7: 'seven',\n            8: 'eight',\n            9: 'nine'\n        }\n        return switcher.get(num)\n\n    def two_less_20(num):\n        switcher = {\n            10: 'ten',\n            11: 'eleven',\n            12: 'twelve',\n            13: 'thirteen',\n            14: 'fourteen',\n            15: 'fifteen',\n            16: 'sixteen',\n            17: 'seventeen',\n            18: 'eighteen',\n            19: 'nineteen'\n        }\n        return switcher.get(num)\n\n    def ten(num):\n        switcher = {\n            2: 'twenty',\n            3: 'thirty',\n            4: 'forty',\n            5: 'fifty',\n            6: 'sixty',\n            7: 'seventy',\n            8: 'eighty',\n            9: 'ninety'\n        }\n        return switcher.get(num)\n\n    def two(num):\n        if not num:\n            return ''\n        elif num < 10:\n            return one(num)\n        elif num < 20:\n            return two_less_20(num)\n        else:\n            tenner = num // 10\n            rest = num - tenner * 10\n            return ten(tenner) + ' ' + one(rest) if rest else ten(tenner)\n\n    def three(num):\n        hundred = num // 100\n        rest = num - hundred * 100\n        if hundred and rest:\n            return one(hundred) + ' hundred ' + two(rest)\n        elif not hundred and rest:\n            return two(rest)\n        elif hundred and not rest:\n            return one(hundred) + ' hundred'\n\n    billion = num // 1000000000\n    million = (num - billion * 1000000000) // 1000000\n    thousand = (num - billion * 1000000000 - million * 1000000) // 1000\n    remainder = num - billion * 1000000000 - million * 1000000 - thousand * 1000\n\n    result = ''\n    if billion:\n        result += three(billion) + ' billion'\n    if million:\n        result += ' ' if result else ''\n        result += three(million) + ' million'\n    if thousand:\n        result += ' ' if result else ''\n        result += three(thousand) + ' thousand'\n    if remainder:\n        result += ' ' if result else ''\n        result += three(remainder)\n    return result.strip()", "entry_point": "number_to_words", "testcase": ["assert number_to_words(123) == \"one hundred twenty three\"", "assert number_to_words(1234567) == \"one million two hundred thirty four thousand five hundred sixty seven\"", "assert number_to_words(12345) == \"twelve thousand three hundred forty five\"", "assert number_to_words(1234567890) == \"one billion two hundred thirty four million five hundred sixty seven thousand eight hundred ninety\"", "assert number_to_words(999999999999) == \"nine hundred ninety nine billion nine hundred ninety nine million nine hundred ninety nine thousand nine hundred ninety nine\""]}
{"seq_id": 36001586851, "instruction": "Write a function to find the maximum element in every sliding window of size k in the given array.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef maxSlidingWindow(nums, k):\n    d = deque()\n    out = []\n    for i, n in enumerate(nums):\n        while d and nums[d[-1]] < n:\n            d.pop()\n        d += i,\n        if d[0] == i - k:\n            d.popleft()\n        if i >= k - 1:\n            out += nums[d[0]],\n    return out\n```", "code": "from collections import deque\n\ndef maxSlidingWindow(nums, k):\n    d = deque()\n    out = []\n    for i, n in enumerate(nums):\n        while d and nums[d[-1]] < n:\n            d.pop()\n        d += i,\n        if d[0] == i - k:\n            d.popleft()\n        if i >= k - 1:\n            out += nums[d[0]],\n    return out", "entry_point": "maxSlidingWindow", "testcase": ["assert maxSlidingWindow([12,1,78,90,57,23,56], 3) == [78,90,90,90,57]", "assert maxSlidingWindow([1,2,3,4,5,6,7,8,9], 4) == [4,5,6,7,8,9]", "assert maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3) == [3,3,5,5,6,7]"]}
{"seq_id": 20020951526, "instruction": "Write a python function to find the maximum element in a list using binary search algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef binary_search_max(arr):\n    low, high = 0, len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]\n```", "code": "def binary_search_max(arr):\n    low, high = 0, len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]", "entry_point": "binary_search_max", "testcase": ["assert binary_search_max([1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 10000", "assert binary_search_max([1, 3, 5, 7, 9, 11, 13, 15]) == 15", "assert binary_search_max([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 100"]}
{"seq_id": 18954897836, "instruction": "Write a python function to find the number of ways to express n as a sum of 1, 3, and 4.", "output": "Here is the code to solve this problem: \n```python\ndef waysToSum(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return waysToSum(n-1) + waysToSum(n-3) + waysToSum(n-4)\n\n# Optimized solution using dynamic programming\ndef waysToSum_dp(n):\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] += dp[i-1] if i-1 >= 0 else 0\n        dp[i] += dp[i-3] if i-3 >= 0 else 0\n        dp[i] += dp[i-4] if i-4 >= 0 else 0\n    return dp[n]\n```", "code": "def waysToSum(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return waysToSum(n-1) + waysToSum(n-3) + waysToSum(n-4)\n\n# Optimized solution using dynamic programming\ndef waysToSum_dp(n):\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] += dp[i-1] if i-1 >= 0 else 0\n        dp[i] += dp[i-3] if i-3 >= 0 else 0\n        dp[i] += dp[i-4] if i-4 >= 0 else 0\n    return dp[n]", "entry_point": "waysToSum", "testcase": ["assert waysToSum(2) == 1", "assert waysToSum(1) == 1", "assert waysToSum(3) == 2"]}
{"seq_id": 8560865079, "instruction": "Write a function to find the number of times a sorted array needs to be rotated to be in its original order. The array might have duplicate elements.", "output": "Here is the code to solve this problem: \n```python\ndef find_rotate_count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == min(arr):\n            return i\n    return 0\n```", "code": "def find_rotate_count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == min(arr):\n            return i\n    return 0", "entry_point": "find_rotate_count", "testcase": ["assert find_rotate_count([3, 4, 5, 1, 2]) == 3", "assert find_rotate_count([1, 1, 1, 1, 1]) == 0", "assert find_rotate_count([3, 1, 3, 3, 4]) == 1", "assert find_rotate_count([2, 2, 2, 0, 1]) == 3", "assert find_rotate_count([1, 2, 3, 4, 5]) == 0"]}
{"seq_id": 19779758902, "instruction": "Write a python function that converts a given sentence into Pig Latin. Pig Latin is a language game where you move the first letter of the word to the end and add \"ay\". If the word starts with a vowel, you just add \"way\" to the end.", "output": "Here is the code to solve this problem: \n```python\ndef pig_latin(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        if word[0] in vowels:\n            result.append(word + 'way')\n        else:\n            result.append(word[1:] + word[0] + 'ay')\n\n    return ' '.join(result)\n```", "code": "def pig_latin(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        if word[0] in vowels:\n            result.append(word + 'way')\n        else:\n            result.append(word[1:] + word[0] + 'ay')\n\n    return ' '.join(result)", "entry_point": "pig_latin", "testcase": ["assert pig_latin(\"apple\") == \"appleway\"", "assert pig_latin(\"hello\") == \"ellohay\"", "assert pig_latin(\"algorithm\") == \"algorithmway\""]}
{"seq_id": 5361493688, "instruction": "Write a python function to find if a given sequence can be obtained from a stack sequence by performing push and pop operations in a specific order.", "output": "Here is the code to solve this problem: \n```python\ndef is_stack_sequence(pushed, popped):\n    \"\"\"\n    Check if the popped sequence can be obtained from the pushed sequence\n    by performing push and pop operations on a stack.\n    \n    :param pushed: List[int]. The sequence of elements pushed into the stack.\n    :param popped: List[int]. The sequence of elements popped from the stack.\n    :return: bool. True if the popped sequence can be obtained, False otherwise.\n    \"\"\"\n    stack = []\n    j = 0\n    for x in pushed:\n        stack.append(x)\n        while stack and stack[-1] == popped[j]:\n            stack.pop()\n            j += 1\n    return len(stack) == 0\n```", "code": "def is_stack_sequence(pushed, popped):\n    \"\"\"\n    Check if the popped sequence can be obtained from the pushed sequence\n    by performing push and pop operations on a stack.\n    \n    :param pushed: List[int]. The sequence of elements pushed into the stack.\n    :param popped: List[int]. The sequence of elements popped from the stack.\n    :return: bool. True if the popped sequence can be obtained, False otherwise.\n    \"\"\"\n    stack = []\n    j = 0\n    for x in pushed:\n        stack.append(x)\n        while stack and stack[-1] == popped[j]:\n            stack.pop()\n            j += 1\n    return len(stack) == 0", "entry_point": "is_stack_sequence", "testcase": ["assert is_stack_sequence([1, 2, 3], [3, 1, 2]) == False", "assert is_stack_sequence([1, 2, 3], [2, 3, 1]) == True", "assert is_stack_sequence([1, 2, 3], [3, 2, 1]) == True"]}
{"seq_id": 32706231241, "instruction": "Write a function to find the three numbers in the given list that add up to the target sum. Return the sum of these three numbers. If no such triplet exists, return the sum of the closest possible triplet to the target sum.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef find_three_sum(nums: List[int], target: int) -> int:\n    nums.sort()\n    n = len(nums)\n    closest_sum = float('inf')\n    for i in range(n):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if abs(target - current_sum) < abs(target - closest_sum):\n                closest_sum = current_sum\n            if current_sum < target:\n                left += 1\n            elif current_sum > target:\n                right -= 1\n            else:\n                return current_sum\n    return closest_sum\n```", "code": "from typing import List\n\ndef find_three_sum(nums: List[int], target: int) -> int:\n    nums.sort()\n    n = len(nums)\n    closest_sum = float('inf')\n    for i in range(n):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if abs(target - current_sum) < abs(target - closest_sum):\n                closest_sum = current_sum\n            if current_sum < target:\n                left += 1\n            elif current_sum > target:\n                right -= 1\n            else:\n                return current_sum\n    return closest_sum", "entry_point": "find_three_sum", "testcase": ["assert find_three_sum([0, 0, 0], 0) == 0", "assert find_three_sum([-1, 2, 1, -4], 1) == 2", "assert find_three_sum([1, 1, -1, -1, 3], -1) == -1", "assert find_three_sum([1, 2, 3, 4, 5], 12) == 12"]}
{"seq_id": 29606462686, "instruction": "Write a function to find the number of islands in a given grid. An island is formed by connected 1's (representing land) and is surrounded by water. Assume all four edges of the grid are surrounded by water.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef count_islands(grid: List[List[int]]) -> int:\n    def dfs(r, c):\n        if r < 0 or r >= len(grid) or c < 0 or c >= len(grid[0]) or grid[r][c] == 0:\n            return\n        grid[r][c] = 0\n        dfs(r+1, c)\n        dfs(r-1, c)\n        dfs(r, c+1)\n        dfs(r, c-1)\n\n    count = 0\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            if grid[r][c] == 1:\n                dfs(r, c)\n                count += 1\n    return count\n```", "code": "from typing import List\n\ndef count_islands(grid: List[List[int]]) -> int:\n    def dfs(r, c):\n        if r < 0 or r >= len(grid) or c < 0 or c >= len(grid[0]) or grid[r][c] == 0:\n            return\n        grid[r][c] = 0\n        dfs(r+1, c)\n        dfs(r-1, c)\n        dfs(r, c+1)\n        dfs(r, c-1)\n\n    count = 0\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            if grid[r][c] == 1:\n                dfs(r, c)\n                count += 1\n    return count", "entry_point": "count_islands", "testcase": ["assert count_islands([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 1]]) == 4", "assert count_islands([[1, 1, 0], [1, 1, 0], [0, 0, 1]]) == 2", "assert count_islands([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]) == 3"]}
{"seq_id": 72852422848, "instruction": "Write a function that verifies if a given password is considered strong. A strong password is defined as one that fulfills the following criteria:\n1. It has at least 8 characters and at most 20 characters.\n2. It contains at least one lowercase letter, one uppercase letter, and one digit.\n3. It does not contain the word 'password' in any case.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_strong_password(password):\n    if len(password) < 8 or len(password) > 20:\n        return False\n    if 'password' in password.lower():\n        return False\n    if not re.search(\"[a-z]\", password):\n        return False\n    if not re.search(\"[A-Z]\", password):\n        return False\n    if not re.search(\"[0-9]\", password):\n        return False\n    return True\n```", "code": "import re\n\ndef is_strong_password(password):\n    if len(password) < 8 or len(password) > 20:\n        return False\n    if 'password' in password.lower():\n        return False\n    if not re.search(\"[a-z]\", password):\n        return False\n    if not re.search(\"[A-Z]\", password):\n        return False\n    if not re.search(\"[0-9]\", password):\n        return False\n    return True", "entry_point": "is_strong_password", "testcase": ["assert is_strong_password(\"passW0rd\") == True", "assert is_strong_password(\"Password123\") == False", "assert is_strong_password(\"pass\") == False", "assert is_strong_password(\"Abcdefghijklmnop12\") == True", "assert is_strong_password(\"paSsWoRd\") == False", "assert is_strong_password(\"12345678\") == False", "assert is_strong_password(\"PaSsWoRd123\") == False", "assert is_strong_password(\"A1B2C3D4E5F6G7\") == False", "assert is_strong_password(\"paSsW0rd\") == True"]}
{"seq_id": 21270086021, "instruction": "Write a function to check if a binary tree is balanced. A binary tree is balanced if the height of the two subtrees of any node never differ by more than one.", "output": "Here is the code to solve this problem: \n```python\nclass Node:\n    def __init__(self, val, l=None, r=None):\n        self.val = val\n        self.l = l\n        self.r = r\n\ndef get():\n    n4 = Node(4)\n    n5 = Node(5)\n\n    n2 = Node(2)\n    n3 = Node(3, n4, n5)\n\n    n1 = Node(1, n2, n3)\n    return n1\n\ndef get2():\n    n6 = Node(6)\n    n7 = Node(7)\n\n    n4 = Node(4, n6, n7)\n    n5 = Node(5)\n\n    n2 = Node(2, n4, n5)\n    n3 = Node(3)\n\n    n1 = Node(1, n2, n3)\n    return n1\n\ndef is_balanced_tree(node):\n    if node is None:\n        return True\n\n    left_height = get_height(node.l)\n    right_height = get_height(node.r)\n\n    if abs(left_height - right_height) > 1:\n        return False\n\n    return is_balanced_tree(node.l) and is_balanced_tree(node.r)\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.l), get_height(node.r))\n\nif __name__ == \"__main__\":\n    node = get()\n    assert is_balanced_tree(node) == True\n\n    node = get2()\n    assert is_balanced_tree(node) == False\n```", "code": "class Node:\n    def __init__(self, val, l=None, r=None):\n        self.val = val\n        self.l = l\n        self.r = r\n\ndef get():\n    n4 = Node(4)\n    n5 = Node(5)\n\n    n2 = Node(2)\n    n3 = Node(3, n4, n5)\n\n    n1 = Node(1, n2, n3)\n    return n1\n\ndef get2():\n    n6 = Node(6)\n    n7 = Node(7)\n\n    n4 = Node(4, n6, n7)\n    n5 = Node(5)\n\n    n2 = Node(2, n4, n5)\n    n3 = Node(3)\n\n    n1 = Node(1, n2, n3)\n    return n1\n\ndef is_balanced_tree(node):\n    if node is None:\n        return True\n\n    left_height = get_height(node.l)\n    right_height = get_height(node.r)\n\n    if abs(left_height - right_height) > 1:\n        return False\n\n    return is_balanced_tree(node.l) and is_balanced_tree(node.r)\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.l), get_height(node.r))\n\nif __name__ == \"__main__\":\n    node = get()\n    assert is_balanced_tree(node) == True\n\n    node = get2()\n    assert is_balanced_tree(node) == False", "entry_point": "is_balanced_tree", "testcase": ["#     2   3", "#       1", "assert is_balanced_tree(get()) == True", "#      / \\", "#        / \\", "#       4   5  ", "", "#      / \\", "#     2   3", "#   4   5  ", "#       1", "#    / \\", "#  / \\", "# 6   7", "assert is_balanced_tree(get2()) == False"]}
{"seq_id": 8713287739, "instruction": "Write a python function to check if a string has all unique characters.", "output": "Here is the code to solve this problem: \n```python\ndef unique_chars(s):\n    return len(s) == len(set(s))\n```", "code": "def unique_chars(s):\n    return len(s) == len(set(s))", "entry_point": "unique_chars", "testcase": ["assert unique_chars(\"abcdef\") == True", "assert unique_chars(\"python\") == True", "assert unique_chars(\"aabbcc\") == False"]}
{"seq_id": 19776390569, "instruction": "Write a function to find the median of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef median_two_sorted_arrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2] + nums[length // 2 - 1]) / 2\n    else:\n        return nums[length // 2]\n```", "code": "def median_two_sorted_arrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2] + nums[length // 2 - 1]) / 2\n    else:\n        return nums[length // 2]", "entry_point": "median_two_sorted_arrays", "testcase": ["assert median_two_sorted_arrays([0, 0], [0, 0]) == 0", "assert median_two_sorted_arrays([1, 3], [2]) == 2.0", "assert median_two_sorted_arrays([1, 2], [3, 4]) == 2.5"]}
{"seq_id": 26908261216, "instruction": "Write a python function that takes two integers m and n and returns the least common multiple (LCM) of these numbers.", "output": "Here is the code to solve this problem: \n```python\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef least_common_multiple(m, n):\n    return m * n // gcd(m, n)\n```", "code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef least_common_multiple(m, n):\n    return m * n // gcd(m, n)", "entry_point": "least_common_multiple", "testcase": ["assert least_common_multiple(3, 5) == 15", "assert least_common_multiple(21, 6) == 42", "assert least_common_multiple(10, 15) == 30"]}
{"seq_id": 25388343971, "instruction": "Write a function that takes a list of integers and returns a new list with only the even numbers from the original list.", "output": "Here is the code to solve this problem: \n```python\ndef filter_even_numbers(numbers):\n    return [number for number in numbers if number % 2 == 0]\n```", "code": "def filter_even_numbers(numbers):\n    return [number for number in numbers if number % 2 == 0]", "entry_point": "filter_even_numbers", "testcase": ["assert filter_even_numbers([1, 2, 3, 4, 5, 6])==([2, 4, 6])", "assert filter_even_numbers([13, 14, 15, 16, 17, 18])==([14, 16, 18])", "assert filter_even_numbers([7, 8, 9, 10, 11, 12])==([8, 10, 12])"]}
{"seq_id": 24294774216, "instruction": "Write a function that takes an array of integers and returns the maximum sum of a subarray that wraps around the end to the beginning of the array. This is known as the maximum sum circular subarray problem.", "output": "Here is the code to solve this problem: \n```python\ndef max_circular_subarray_sum(A):\n    def kadane(arr):\n        cur = ans = float(\"-inf\")\n        for val in arr:\n            cur = val + max(cur, 0)\n            ans = max(ans, cur)\n        return ans\n    \n    def min_kadane(arr):\n        cur = ans = float(\"inf\")\n        for val in arr:\n            cur = val + min(cur, 0)\n            ans = min(ans, cur)\n        return ans\n    \n    arr_sum = sum(A)\n    ans1 = kadane(A)\n    ans2 = arr_sum - min_kadane(A[1:])\n    ans3 = arr_sum - min_kadane(A[:-1])\n    return max(ans1, ans2, ans3)\n```", "code": "def max_circular_subarray_sum(A):\n    def kadane(arr):\n        cur = ans = float(\"-inf\")\n        for val in arr:\n            cur = val + max(cur, 0)\n            ans = max(ans, cur)\n        return ans\n    \n    def min_kadane(arr):\n        cur = ans = float(\"inf\")\n        for val in arr:\n            cur = val + min(cur, 0)\n            ans = min(ans, cur)\n        return ans\n    \n    arr_sum = sum(A)\n    ans1 = kadane(A)\n    ans2 = arr_sum - min_kadane(A[1:])\n    ans3 = arr_sum - min_kadane(A[:-1])\n    return max(ans1, ans2, ans3)", "entry_point": "max_circular_subarray_sum", "testcase": ["assert max_circular_subarray_sum([1,-2,3,-2]) == 3", "assert max_circular_subarray_sum([-2,-3,-1]) == -1", "assert max_circular_subarray_sum([3,-1,2,-1]) == 4", "assert max_circular_subarray_sum([3,-2,2,-3]) == 3", "assert max_circular_subarray_sum([5,-3,5]) == 10"]}
{"seq_id": 8841228807, "instruction": "Write a function to determine if a given string is a valid identifier according to the Python language definition.\n\nA valid identifier must:\n- Start with a letter (a-z, A-Z) or an underscore (_)\n- Followed by any number of letters, digits (0-9), or underscores (_)\n- Not be a Python keyword", "output": "Here is the code to solve this problem: \n```python\nimport keyword\nimport re\n\ndef is_valid_identifier(identifier):\n    if keyword.iskeyword(identifier):\n        return False\n    identifier_re = re.compile(r'^[a-zA-Z_][a-zA-Z0-9_]*$')\n    return bool(identifier_re.match(identifier))\n```", "code": "import keyword\nimport re\n\ndef is_valid_identifier(identifier):\n    if keyword.iskeyword(identifier):\n        return False\n    identifier_re = re.compile(r'^[a-zA-Z_][a-zA-Z0-9_]*$')\n    return bool(identifier_re.match(identifier))", "entry_point": "is_valid_identifier", "testcase": ["assert is_valid_identifier('my_var') == True", "assert is_valid_identifier('2nd_var') == False", "assert is_valid_identifier('class') == False"]}
{"seq_id": 38154554814, "instruction": "Write a python function to check if a given string is a substring or subsequence of another string. The function should return True if the substring/subsequence is found in the long string, otherwise return False.", "output": "Here is the code to solve this problem: \n```python\nclass MyString(str):\n    def my_index(self, char):\n        if char in self:\n            return self.index(char)\n        else:\n            return -1\n\n\ndef is_subsequence(s: str, t: str) -> bool:\n    t = MyString(t)\n    for char in s:\n        idx = t.my_index(char)\n        if idx < 0:\n            return False\n        else:\n            t = MyString(t[idx+1:])\n    return True\n```", "code": "class MyString(str):\n    def my_index(self, char):\n        if char in self:\n            return self.index(char)\n        else:\n            return -1\n\n\ndef is_subsequence(s: str, t: str) -> bool:\n    t = MyString(t)\n    for char in s:\n        idx = t.my_index(char)\n        if idx < 0:\n            return False\n        else:\n            t = MyString(t[idx+1:])\n    return True", "entry_point": "is_subsequence", "testcase": ["assert is_subsequence(\"abc\", \"ahbgdc\") == True", "assert is_subsequence(\"axc\", \"ahbgdc\") == False", "assert is_subsequence(\"ace\", \"abcde\") == True"]}
{"seq_id": 33785317143, "instruction": "Write a function to find the longest sub string of duplicate characters in the given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_sub_string_of_duplicate_characters(s):\n    max_length = 0\n    current_length = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    return max(max_length, current_length)\n```", "code": "def longest_sub_string_of_duplicate_characters(s):\n    max_length = 0\n    current_length = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    return max(max_length, current_length)", "entry_point": "longest_sub_string_of_duplicate_characters", "testcase": ["assert longest_sub_string_of_duplicate_characters(\"abcccccdddeee\") == 5", "assert longest_sub_string_of_duplicate_characters(\"aabbccddeee\") == 3", "assert longest_sub_string_of_duplicate_characters(\"abcde\") == 1"]}
{"seq_id": 15601953724, "instruction": "Write a function to find the maximum number of overlapping intervals in a list of intervals.", "output": "Here is the code to solve this problem: \n```python\ndef max_overlap(intervals):\n    points = []\n    for start, end in intervals:\n        points.append((start, 'start'))\n        points.append((end, 'end'))\n    points.sort()\n    max_overlap, current_overlap = 0, 0\n    for point, status in points:\n        if status == 'start':\n            current_overlap += 1\n            max_overlap = max(max_overlap, current_overlap)\n        else:\n            current_overlap -= 1\n    return max_overlap\n```", "code": "def max_overlap(intervals):\n    points = []\n    for start, end in intervals:\n        points.append((start, 'start'))\n        points.append((end, 'end'))\n    points.sort()\n    max_overlap, current_overlap = 0, 0\n    for point, status in points:\n        if status == 'start':\n            current_overlap += 1\n            max_overlap = max(max_overlap, current_overlap)\n        else:\n            current_overlap -= 1\n    return max_overlap", "entry_point": "max_overlap", "testcase": ["assert max_overlap([(1, 3), (2, 4), (5, 6), (7, 9)]) == 2", "assert max_overlap([(1, 5), (2, 6), (3, 7), (4, 8)]) == 4", "assert max_overlap([(1, 2), (3, 4), (5, 6), (7, 8)]) == 1"]}
{"seq_id": 72441842352, "instruction": "Write a python function to determine if a given string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward or forward.", "output": "Here is the code to solve this problem: \n```python\ndef is_Palindrome(s):\n    return s == s[::-1]\n```", "code": "def is_Palindrome(s):\n    return s == s[::-1]", "entry_point": "is_Palindrome", "testcase": ["assert is_Palindrome(\"madam\") == True", "assert is_Palindrome(\"12321\") == True", "assert is_Palindrome(\"racecar\") == True", "assert is_Palindrome(\"hello\") == False"]}
{"seq_id": 73029541877, "instruction": "Write a function to convert a string into camel case. The function should remove any leading/trailing underscores and spaces, and capitalize the first letter of each word.", "output": "Here is the code to solve this problem: \n```python\ndef to_camel_case(text):\n    text = text.replace('-', ' ').replace('_', ' ').strip().split()\n    return ''.join(word.capitalize() for word in text)\n```", "code": "def to_camel_case(text):\n    text = text.replace('-', ' ').replace('_', ' ').strip().split()\n    return ''.join(word.capitalize() for word in text)", "entry_point": "to_camel_case", "testcase": ["assert to_camel_case(\"The-Stealth-Warrior\") == \"TheStealthWarrior\"", "assert to_camel_case(\"the_stealth_warrior\") == \"TheStealthWarrior\"", "assert to_camel_case(\"hello_world\") == \"HelloWorld\"", "assert to_camel_case(\"hello_world_test\") == \"HelloWorldTest\"", "assert to_camel_case(\"A-B-C\") == \"ABC\""]}
{"seq_id": 5048131049, "instruction": "Write a function to generate all possible combinations of a given length from the elements of a list.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import combinations\n\ndef generate_combinations(lst, length):\n    return [list(i) for i in combinations(lst, length)]\n```", "code": "from itertools import combinations\n\ndef generate_combinations(lst, length):\n    return [list(i) for i in combinations(lst, length)]", "entry_point": "generate_combinations", "testcase": ["assert generate_combinations([1, 2, 3], 2) == [[1, 2], [1, 3], [2, 3]]", "assert generate_combinations(['a', 'b', 'c'], 3) == [['a', 'b', 'c']]", "assert generate_combinations([4, 5, 6, 7], 1) == [[4], [5], [6], [7]]"]}
{"seq_id": 25881905264, "instruction": "Write a function that takes a list of integers and returns a new list with the product of each pair of adjacent elements. If the list has an odd number of elements, the last element should be multiplied by the first one.", "output": "Here is the code to solve this problem: \n```python\ndef adjacent_product(nums):\n    if len(nums) == 1:\n        return [nums[0] * nums[0]]\n    else:\n        result = [nums[i] * nums[(i+1) % len(nums)] for i in range(len(nums))]\n        return result\n```", "code": "def adjacent_product(nums):\n    if len(nums) == 1:\n        return [nums[0] * nums[0]]\n    else:\n        result = [nums[i] * nums[(i+1) % len(nums)] for i in range(len(nums))]\n        return result", "entry_point": "adjacent_product", "testcase": ["assert adjacent_product([1, 2, 3, 4]) == [2, 6, 12, 4]", "assert adjacent_product([10]) == [100]", "assert adjacent_product([5, 6, 7]) == [30, 42, 35]"]}
{"seq_id": 74354382861, "instruction": "Write a function that checks if a given list of integers has a subarray with a sum of zero. If such a subarray exists, return the starting and ending indices of the subarray. If multiple subarrays with a sum of zero exist, return the indices of the longest subarray. If no such subarray exists, return an empty list.", "output": "Here is the code to solve this problem: \n```python\ndef zero_sum_subarray(arr):\n    sum_dict = {0: -1}\n    max_len = 0\n    max_start = -1\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum in sum_dict:\n            start = sum_dict[curr_sum] + 1\n            if i - start > max_len:\n                max_len = i - start\n                max_start = start\n        else:\n            sum_dict[curr_sum] = i\n    if max_start == -1:\n        return []\n    else:\n        return [max_start, max_start + max_len]\n```", "code": "def zero_sum_subarray(arr):\n    sum_dict = {0: -1}\n    max_len = 0\n    max_start = -1\n    curr_sum = 0\n    for i, num in enumerate(arr):\n        curr_sum += num\n        if curr_sum in sum_dict:\n            start = sum_dict[curr_sum] + 1\n            if i - start > max_len:\n                max_len = i - start\n                max_start = start\n        else:\n            sum_dict[curr_sum] = i\n    if max_start == -1:\n        return []\n    else:\n        return [max_start, max_start + max_len]", "entry_point": "zero_sum_subarray", "testcase": ["assert zero_sum_subarray([1, 2, 3, 4, 5]) == []", "assert zero_sum_subarray([1, 2, 3, -6, 4, 5]) == [0, 3]", "assert zero_sum_subarray([1, -1, 2, -2, 3, -3]) == [0, 5]", "assert zero_sum_subarray([1, 2, -3, 4, 2]) == [0, 2]"]}
{"seq_id": 30063924817, "instruction": "Write a python function to find the binary representation of a given integer. The function should return a list of 0's and 1's representing the binary number, with the least significant bit at the end of the list.", "output": "Here is the code to solve this problem: \n```python\ndef binary_representation(num):\n    if num == 0:\n        return [0]\n    result = []\n    while num > 0:\n        result.append(num % 2)\n        num = num // 2\n    result.reverse()\n    return result\n```", "code": "def binary_representation(num):\n    if num == 0:\n        return [0]\n    result = []\n    while num > 0:\n        result.append(num % 2)\n        num = num // 2\n    result.reverse()\n    return result", "entry_point": "binary_representation", "testcase": ["assert binary_representation(5) == [1, 0, 1]", "assert binary_representation(13) == [1, 1, 0, 1]", "assert binary_representation(0) == [0]"]}
{"seq_id": 13762419370, "instruction": "Write a python function to find the greatest divisor of a given number that is smaller than the number itself. If the number is prime, return 1.", "output": "Here is the code to solve this problem: \n```python\ndef greatest_divisor(n):\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n```", "code": "def greatest_divisor(n):\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "entry_point": "greatest_divisor", "testcase": ["assert greatest_divisor(17) == 1", "assert greatest_divisor(15) == 5", "assert greatest_divisor(100) == 50"]}
{"seq_id": 39963840897, "instruction": "Write a function to find the majority element in an array. The majority element is the element that appears more than n/2 times in the array.", "output": "Here is the code to solve this problem: \n```python\ndef majority_element(arr):\n    count = 0\n    candidate = None\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate\n```", "code": "def majority_element(arr):\n    count = 0\n    candidate = None\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate", "entry_point": "majority_element", "testcase": ["assert majority_element([1, 2, 3, 4, 5, 1, 1, 1, 1]) == 1", "assert majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4", "assert majority_element([1, 1, 2, 3, 3, 3, 3, 2]) == 3"]}
{"seq_id": 74602908392, "instruction": "Write a python function to rearrange given array such that arr[i] becomes arr[arr[i]] with O(1) extra space.", "output": "Here is the code to solve this problem: \n```python\ndef rearrange_array(arr):\n    n = len(arr)\n    for i in range(n):\n        arr[i] += (arr[arr[i]] % n) * n\n    for i in range(n):\n        arr[i] //= n\n    return arr\n```", "code": "def rearrange_array(arr):\n    n = len(arr)\n    for i in range(n):\n        arr[i] += (arr[arr[i]] % n) * n\n    for i in range(n):\n        arr[i] //= n\n    return arr", "entry_point": "rearrange_array", "testcase": ["assert rearrange_array([3, 2, 0, 1]) == [1, 0, 3, 2]", "assert rearrange_array([5, 0, 1, 2, 3, 4]) == [4, 5, 0, 1, 2, 3]", "assert rearrange_array([0, 2, 1, 5, 3, 4]) == [0, 1, 2, 4, 5, 3]"]}
{"seq_id": 15404902520, "instruction": "Write a python function to find the number of jumps required for a frog to reach the end of a river given the current position, the end of the river, and the maximum jump distance the frog can make.", "output": "Here is the code to solve this problem: \n```python\ndef frog_jump(X, Y, D):\n    jumps = (Y - X) / D\n    if (Y - X) % D == 0:\n        return int(jumps)\n    else:\n        return int(jumps) + 1\n\nprint(frog_jump(10, 85, 30))\n```", "code": "def frog_jump(X, Y, D):\n    jumps = (Y - X) / D\n    if (Y - X) % D == 0:\n        return int(jumps)\n    else:\n        return int(jumps) + 1\n\nprint(frog_jump(10, 85, 30))", "entry_point": "frog_jump", "testcase": ["assert frog_jump(0, 100, 10) == 10", "assert frog_jump(10, 85, 30) == 3", "assert frog_jump(5, 5, 1) == 0"]}
{"seq_id": 10480609847, "instruction": "Write a function to count the number of times a given substring appears in a string, considering overlapping occurrences.", "output": "Here is the code to solve this problem: \n```python\ndef count_substring_occurrences(substring, string):\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n```", "code": "def count_substring_occurrences(substring, string):\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count", "entry_point": "count_substring_occurrences", "testcase": ["assert count_substring_occurrences(\"is\", \"thisis\") == 2", "assert count_substring_occurrences(\"hi\", \"hihi\") == 2", "assert count_substring_occurrences(\"test\", \"testtesttest\") == 3"]}
{"seq_id": 11220426670, "instruction": "Write a python function to find the smallest multiple that is evenly divisible by all numbers in a given range.", "output": "Here is the code to solve this problem: \n```python\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef smallestMultipleInRange(start, end):\n    multiple = 1\n    for i in range(start, end + 1):\n        multiple = lcm(multiple, i)\n    return multiple\n```", "code": "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef smallestMultipleInRange(start, end):\n    multiple = 1\n    for i in range(start, end + 1):\n        multiple = lcm(multiple, i)\n    return multiple", "entry_point": "smallestMultipleInRange", "testcase": ["assert smallestMultipleInRange(1, 10) == 2520", "assert smallestMultipleInRange(1, 5) == 60", "assert smallestMultipleInRange(1, 3) == 6"]}
{"seq_id": 23260581097, "instruction": "Write a function to split a string and convert it into an array of words.", "output": "Here is the code to solve this problem: \n```python\ndef string_to_array(s):\n  return s.split(\" \")\n```", "code": "def string_to_array(s):\n  return s.split(\" \")", "entry_point": "string_to_array", "testcase": ["assert string_to_array(\"Split this sentence into words\") == ['Split', 'this', 'sentence', 'into', 'words']", "assert string_to_array(\"The quick brown fox jumps over the lazy dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']", "assert string_to_array(\"I love programming in Python\") == ['I', 'love', 'programming', 'in', 'Python']"]}
{"seq_id": 12618941165, "instruction": "Write a function to find the largest number in a list of integers using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return max(lst[0], find_largest(lst[1:]))\n```", "code": "def find_largest(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return max(lst[0], find_largest(lst[1:]))", "entry_point": "find_largest", "testcase": ["assert find_largest([10, 20, 30, 40, 50]) == 50", "assert find_largest([5, 4, 3, 2, 1]) == 5", "assert find_largest([1, 2, 3, 4, 5]) == 5"]}
{"seq_id": 15951400471, "instruction": "Write a python function to find the common elements between two given arrays. The common elements should be returned as a list and each element should appear as many times as it shows in both arrays.", "output": "Here is the code to solve this problem: \n```python\ndef commonElements(nums1, nums2):\n    dict1 = {}\n    dict2 = {}\n    for i in nums1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for j in nums2:\n        if j in dict2:\n            dict2[j] += 1\n        else:\n            dict2[j] = 1\n    result = []\n    for key in dict1:\n        if key in dict2:\n            count = min(dict1[key], dict2[key])\n            result.extend([key]*count)\n    return result\n```", "code": "def commonElements(nums1, nums2):\n    dict1 = {}\n    dict2 = {}\n    for i in nums1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for j in nums2:\n        if j in dict2:\n            dict2[j] += 1\n        else:\n            dict2[j] = 1\n    result = []\n    for key in dict1:\n        if key in dict2:\n            count = min(dict1[key], dict2[key])\n            result.extend([key]*count)\n    return result", "entry_point": "commonElements", "testcase": ["assert commonElements([1, 2, 2, 1], [2, 2]) == [2, 2]", "assert commonElements([], [1, 2]) == []", "assert commonElements([1, 2, 2, 1], [2, 2, 3]) == [2, 2]", "assert commonElements([1, 2, 3], [3, 4]) == [3]"]}
{"seq_id": 73965270520, "instruction": "Write a function that takes a string as input and removes the minimum number of parentheses such that the resulting string is valid. A string is considered valid if it has balanced parentheses. The function should return the valid string after removing the necessary parentheses.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\nfrom collections import deque\n\ndef min_remove_to_make_valid(s: str) -> str:\n    char_map = defaultdict(str)\n    stack = deque()\n    for i, char in enumerate(s):\n        char_map[i] = char\n    for i, char in enumerate(s):\n        if char == '(': stack.append(i)\n        if char == ')':\n            if stack:\n                last_index = stack.pop()\n                if char_map[last_index] != '(':\n                    char_map[i] = ''\n            else:\n                char_map[i] = ''\n    while stack:\n        last_index = stack.pop()\n        char_map[last_index] = ''\n    return ''.join(char_map.values())\n```", "code": "from collections import defaultdict\nfrom collections import deque\n\ndef min_remove_to_make_valid(s: str) -> str:\n    char_map = defaultdict(str)\n    stack = deque()\n    for i, char in enumerate(s):\n        char_map[i] = char\n    for i, char in enumerate(s):\n        if char == '(': stack.append(i)\n        if char == ')':\n            if stack:\n                last_index = stack.pop()\n                if char_map[last_index] != '(':\n                    char_map[i] = ''\n            else:\n                char_map[i] = ''\n    while stack:\n        last_index = stack.pop()\n        char_map[last_index] = ''\n    return ''.join(char_map.values())", "entry_point": "min_remove_to_make_valid", "testcase": ["assert min_remove_to_make_valid(\"))((\") == \"\"", "assert min_remove_to_make_valid(\"a)b(c)d\") == \"ab(c)d\"", "assert min_remove_to_make_valid(\"lee(t(c)o)de)\") == \"lee(t(c)o)de\""]}
{"seq_id": 31772715395, "instruction": "Write a python function to find the maximum size square sub-matrix with all 1's in a binary matrix.", "output": "Here is the code to solve this problem: \n```python\ndef max_square(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    max_square = 0\n    dp = [[0]*n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_square = max(max_square, dp[i][j])\n    return max_square ** 2\n```", "code": "def max_square(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    max_square = 0\n    dp = [[0]*n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_square = max(max_square, dp[i][j])\n    return max_square ** 2", "entry_point": "max_square", "testcase": ["assert max_square([[1,0,1],[1,1,1],[0,1,1]])==4", "assert max_square([[0,0,0],[0,0,0],[0,0,0]])==0", "assert max_square([[1,1,1],[1,1,1],[1,1,1]])==9"]}
{"seq_id": 26667307816, "instruction": "Write a python function to find the largest Fibonacci number from a given list of Fibonacci numbers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_fibonacci(fib_list):\n    return max(fib_list)\n```", "code": "def largest_fibonacci(fib_list):\n    return max(fib_list)", "entry_point": "largest_fibonacci", "testcase": ["assert largest_fibonacci([1, 2, 3, 5, 8, 13, 21]) == 21", "assert largest_fibonacci([1, 2, 3, 5, 8, 13, 21, 34, 55]) == 55", "assert largest_fibonacci([1, 1, 2, 3, 5, 8, 13]) == 13"]}
{"seq_id": 13930147599, "instruction": "Write a function to find the intersection of two sets.", "output": "Here is the code to solve this problem: \n```python\ndef set_intersection(set1, set2):\n    return set1.intersection(set2)\n```", "code": "def set_intersection(set1, set2):\n    return set1.intersection(set2)", "entry_point": "set_intersection", "testcase": ["assert set_intersection({10, 20, 30}, {20, 30, 40}) == {20, 30}", "assert set_intersection({1, 2, 3, 4}, {3, 4, 5, 6}) == {3, 4}", "assert set_intersection({1, 2}, {3, 4}) == set()"]}
{"seq_id": 12675271855, "instruction": "Write a python function to generate all possible combinations of a given length from a list of elements.", "output": "Here is the code to solve this problem: \n```python\ndef combine(elements, k):\n    def dfs(nums, k, path, res):\n        if len(path) == k:\n            res.append(path)\n            return \n        for i in range(len(nums)):\n            dfs(nums[i+1:], k, path+[nums[i]], res)\n    result = []\n    dfs(elements, k, [], result)\n    return result\n```", "code": "def combine(elements, k):\n    def dfs(nums, k, path, res):\n        if len(path) == k:\n            res.append(path)\n            return \n        for i in range(len(nums)):\n            dfs(nums[i+1:], k, path+[nums[i]], res)\n    result = []\n    dfs(elements, k, [], result)\n    return result", "entry_point": "combine", "testcase": ["assert combine([1, 2, 3, 4], 2) == [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]", "assert combine([1], 1) == [[1]]", "assert combine([1, 2, 3], 3) == [[1, 2, 3]]"]}
{"seq_id": 70290536457, "instruction": "Write a python function to calculate the total number of ways to distribute n identical objects among r groups such that each group can receive 0 to n objects. This is a classic problem of distributing identical objects into distinct groups and is a direct application of the stars and bars theorem from combinatorics.", "output": "Here is the code to solve this problem: \n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef stars_and_bars(n, r):\n    return factorial(n + r - 1) // (factorial(r - 1) * factorial(n))\n```", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef stars_and_bars(n, r):\n    return factorial(n + r - 1) // (factorial(r - 1) * factorial(n))", "entry_point": "stars_and_bars", "testcase": ["assert stars_and_bars(3, 2) == 4", "assert stars_and_bars(4, 2) == 5", "assert stars_and_bars(5, 3) == 21"]}
{"seq_id": 74449111864, "instruction": "Write a function to find the previous permutation of the given list of numbers without changing the frequency of each element.\n\nGiven a list of unique integers, A, find the largest permutation of A that is smaller than A in lexicographical order and return it. If there is no such permutation, return the same list in the same order.", "output": "Here is the code to solve this problem: \n```python\ndef prev_permutation(A):\n    lenn = len(A)\n    i = lenn - 1\n    while i > 0 and A[i-1] <= A[i]:\n        i -= 1\n    if i == 0:\n        return A\n    left = i - 1\n    right = lenn - 1\n    while right >= i and A[right] >= A[left]:\n        right -= 1\n    while A[right] == A[right - 1] and right >= i:\n        right -= 1\n    A[right], A[left] = A[left], A[right]\n    return A\n```", "code": "def prev_permutation(A):\n    lenn = len(A)\n    i = lenn - 1\n    while i > 0 and A[i-1] <= A[i]:\n        i -= 1\n    if i == 0:\n        return A\n    left = i - 1\n    right = lenn - 1\n    while right >= i and A[right] >= A[left]:\n        right -= 1\n    while A[right] == A[right - 1] and right >= i:\n        right -= 1\n    A[right], A[left] = A[left], A[right]\n    return A", "entry_point": "prev_permutation", "testcase": ["assert prev_permutation([1, 9, 4, 6, 7]) == [1, 7, 4, 6, 9]", "assert prev_permutation([1, 1, 5]) == [1, 1, 5]", "assert prev_permutation([3, 2, 1]) == [3, 1, 2]"]}
{"seq_id": 17828400174, "instruction": "Write a python function to find the last index of a given value in a list.", "output": "Here is the code to solve this problem: \n```python\ndef last_index(arr, target):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == target:\n            return i\n    return -1\n```", "code": "def last_index(arr, target):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == target:\n            return i\n    return -1", "entry_point": "last_index", "testcase": ["assert last_index([1, 2, 3, 4, 5], 6) == -1", "assert last_index([1, 2, 3, 2, 4], 2) == 3", "assert last_index([1, 1, 1, 1, 1], 1) == 4"]}
{"seq_id": 42061423802, "instruction": "Write a function to find the total number of connected components in a graph represented by a list of edges.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef dfs(node, visited, graph):\n    visited[node] = True\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            dfs(neighbor, visited, graph)\n\ndef count_connected_components(edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = defaultdict(bool)\n    count = 0\n    for node in graph:\n        if not visited[node]:\n            dfs(node, visited, graph)\n            count += 1\n    return count\n```", "code": "from collections import defaultdict\n\ndef dfs(node, visited, graph):\n    visited[node] = True\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            dfs(neighbor, visited, graph)\n\ndef count_connected_components(edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = defaultdict(bool)\n    count = 0\n    for node in graph:\n        if not visited[node]:\n            dfs(node, visited, graph)\n            count += 1\n    return count", "entry_point": "count_connected_components", "testcase": ["assert count_connected_components([(0, 1), (1, 2), (2, 3), (4, 5), (5, 6)]) == 2", "assert count_connected_components([(0, 1), (2, 3), (4, 5)]) == 3", "assert count_connected_components([(0, 1), (1, 2), (2, 3), (3, 0), (4, 5)]) == 2"]}
{"seq_id": 36716433919, "instruction": "Write a function that takes a list of numbers, and returns a new list with the numbers rounded to the nearest integer.", "output": "Here is the code to solve this problem: \n```python\ndef round_list(lst):\n    return [round(i) for i in lst]\n```", "code": "def round_list(lst):\n    return [round(i) for i in lst]", "entry_point": "round_list", "testcase": ["assert round_list([1.1, 2.2, 3.3, 4.4, 5.5]) == [1, 2, 3, 4, 6]", "assert round_list([1.5, 2.5, 3.5]) == [2, 2, 4]", "assert round_list([2.3, 3.7, 4.9]) == [2, 4, 5]"]}
{"seq_id": 14636869926, "instruction": "Write a function that takes two numbers as input and checks if the first number is a power of the second number.", "output": "Here is the code to solve this problem: \n```python\ndef is_power(num, base):\n    if num == 1:\n        return True\n    if num < 1 or base < 2:\n        return False\n    return is_power(num / base, base) if num % base == 0 else False\n```", "code": "def is_power(num, base):\n    if num == 1:\n        return True\n    if num < 1 or base < 2:\n        return False\n    return is_power(num / base, base) if num % base == 0 else False", "entry_point": "is_power", "testcase": ["assert is_power(27, 3) == True", "assert is_power(1024, 2) == True", "assert is_power(81, 3) == True", "assert is_power(20, 5) == False"]}
{"seq_id": 23673916018, "instruction": "Write a function to find the missing ranges from a given sorted array of integers within a specified lower and upper limit.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing_ranges(nums, lower, upper):\n    ans = []\n    nums = [lower - 1] + nums + [upper + 1]\n    for i in range(0, len(nums) - 1):\n        if nums[i] + 2 == nums[i + 1]:\n            ans.append(str(nums[i] + 1))\n        elif nums[i + 1] > nums[i] + 2:\n            ans.append(str(nums[i] + 1) + \"->\" + str(nums[i + 1] - 1))\n    return ans\n```", "code": "def find_missing_ranges(nums, lower, upper):\n    ans = []\n    nums = [lower - 1] + nums + [upper + 1]\n    for i in range(0, len(nums) - 1):\n        if nums[i] + 2 == nums[i + 1]:\n            ans.append(str(nums[i] + 1))\n        elif nums[i + 1] > nums[i] + 2:\n            ans.append(str(nums[i] + 1) + \"->\" + str(nums[i + 1] - 1))\n    return ans", "entry_point": "find_missing_ranges", "testcase": ["assert find_missing_ranges([0, 1, 2, 3], 0, 3) == []", "assert find_missing_ranges([0, 1, 2, 4, 5, 7], 0, 10) == [\"3\", \"6\", \"8->10\"]", "assert find_missing_ranges([0, 1, 3, 50, 75], 0, 99) == [\"2\", \"4->49\", \"51->74\", \"76->99\"]"]}
{"seq_id": 73926121947, "instruction": "Write a function that finds the maximum value in a list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef max_in_list(numbers):\n    if not numbers:\n        return None\n    max_value = numbers[0]\n    for number in numbers:\n        if number > max_value:\n            max_value = number\n    return max_value\n```", "code": "def max_in_list(numbers):\n    if not numbers:\n        return None\n    max_value = numbers[0]\n    for number in numbers:\n        if number > max_value:\n            max_value = number\n    return max_value", "entry_point": "max_in_list", "testcase": ["assert max_in_list([-10, 0, 10, 20, 30]) == 30", "assert max_in_list([1, 2, 3, 4, 5]) == 5", "assert max_in_list([100, 200, 300, -100, 0]) == 300"]}
{"seq_id": 1638273308, "instruction": "Write a python function to convert a given string to an integer, ignoring non-numeric characters and handling possible overflow conditions.", "output": "Here is the code to solve this problem: \n```python\ndef string_to_integer(s):\n    import re\n    s = re.sub(r'\\D', '', s)\n    if s:\n        val = int(s)\n        if val > 2**31 - 1:\n            return 2**31 - 1\n        elif val < -2**31:\n            return -2**31\n        else:\n            return val\n    else:\n        return 0\n```", "code": "def string_to_integer(s):\n    import re\n    s = re.sub(r'\\D', '', s)\n    if s:\n        val = int(s)\n        if val > 2**31 - 1:\n            return 2**31 - 1\n        elif val < -2**31:\n            return -2**31\n        else:\n            return val\n    else:\n        return 0", "entry_point": "string_to_integer", "testcase": ["assert string_to_integer(\"123a\") == 123", "assert string_to_integer(\"abc123xyz\") == 123", "assert string_to_integer(\"999999999999999999999999999\") == 2147483647"]}
{"seq_id": 21298240575, "instruction": "Write a python function to find the total number of occurrences of a given character in a string.", "output": "Here is the code to solve this problem: \n```python\ndef total_Occurrences(s, char):\n    count = 0\n    for c in s:\n        if c == char:\n            count += 1\n    return count\n```", "code": "def total_Occurrences(s, char):\n    count = 0\n    for c in s:\n        if c == char:\n            count += 1\n    return count", "entry_point": "total_Occurrences", "testcase": ["assert total_Occurrences(\"hello world\", \"l\") == 3", "assert total_Occurrences(\"abcdefg\", \"z\") == 0", "assert total_Occurrences(\"python programming\", \"n\") == 2"]}
{"seq_id": 22790956365, "instruction": "Write a function to find the number of valid parentheses combinations for a given number of pairs of parentheses.", "output": "Here is the code to solve this problem: \n```python\ndef valid_parentheses_combinations(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    result = 0\n    for i in range(n):\n        result += valid_parentheses_combinations(i) * valid_parentheses_combinations(n - 1 - i)\n    return result\n```", "code": "def valid_parentheses_combinations(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    result = 0\n    for i in range(n):\n        result += valid_parentheses_combinations(i) * valid_parentheses_combinations(n - 1 - i)\n    return result", "entry_point": "valid_parentheses_combinations", "testcase": ["assert valid_parentheses_combinations(3) == 5", "assert valid_parentheses_combinations(5) == 42", "assert valid_parentheses_combinations(4) == 14"]}
{"seq_id": 38902932691, "instruction": "Write a python function to find the nth Catalan number. The nth Catalan number is given by the formula:\n\nC(n) = (2n)! / ((n+1)! * n!)\n\nCatalan numbers are a sequence of natural numbers that have many applications in combinatorial mathematics, including the number of correct bracket sequences of length 2n, the number of rooted binary trees with n+1 leaves, and the number of ways to completely parenthesize n+1 factors.", "output": "Here is the code to solve this problem: \n```python\ndef catalan_number(n: int) -> int:\n    if n <= 1:\n        return 1\n    catalan = [0] * (n+1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]\n```", "code": "def catalan_number(n: int) -> int:\n    if n <= 1:\n        return 1\n    catalan = [0] * (n+1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]", "entry_point": "catalan_number", "testcase": ["assert catalan_number(5) == 42", "assert catalan_number(0) == 1", "assert catalan_number(3) == 5"]}
{"seq_id": 20000815549, "instruction": "Write a function to find the minimum cost to connect all sticks where the cost is the sum of the two smallest sticks.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef min_cost_connect_sticks(sticks):\n    \"\"\"\n    :type sticks: List[int]\n    :rtype: int\n    \"\"\"\n    cost = 0\n    heapq.heapify(sticks)\n    while len(sticks) > 1:\n        stick1 = heapq.heappop(sticks)\n        stick2 = heapq.heappop(sticks)\n        cost += stick1 + stick2\n        heapq.heappush(sticks, stick1 + stick2)\n    return cost\n```", "code": "import heapq\n\ndef min_cost_connect_sticks(sticks):\n    \"\"\"\n    :type sticks: List[int]\n    :rtype: int\n    \"\"\"\n    cost = 0\n    heapq.heapify(sticks)\n    while len(sticks) > 1:\n        stick1 = heapq.heappop(sticks)\n        stick2 = heapq.heappop(sticks)\n        cost += stick1 + stick2\n        heapq.heappush(sticks, stick1 + stick2)\n    return cost", "entry_point": "min_cost_connect_sticks", "testcase": ["assert min_cost_connect_sticks([1,8,3,5]) == 30", "assert min_cost_connect_sticks([2,4,3]) == 14", "assert min_cost_connect_sticks([5]) == 0"]}
{"seq_id": 28020429332, "instruction": "Write a function to find the number of unequal triplets in an array. An unequal triplet (i, j, k) is defined as a triplet where 0 <= i < j < k < n and nums[i] != nums[j], nums[i] != nums[k], and nums[j] != nums[k].", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\nfrom itertools import accumulate\n\ndef unequal_triplets(nums):\n    c = list(Counter(nums).values())\n    return sum(s[i - 1] * (s[i] - s[i - 1]) * (s[-1] - s[i]) for i in range(1, len(s)-1)) if (s := list(accumulate(c))) else 0\n```", "code": "from collections import Counter\nfrom itertools import accumulate\n\ndef unequal_triplets(nums):\n    c = list(Counter(nums).values())\n    return sum(s[i - 1] * (s[i] - s[i - 1]) * (s[-1] - s[i]) for i in range(1, len(s)-1)) if (s := list(accumulate(c))) else 0", "entry_point": "unequal_triplets", "testcase": ["assert unequal_triplets([4, 4, 2, 4, 3]) == 3", "assert unequal_triplets([1, 1, 1, 1, 1]) == 0", "assert unequal_triplets([10, 5, 7, 3, 8, 9]) == 20"]}
{"seq_id": 4243870644, "instruction": "Write a python function that takes a string as input, representing a number, and returns all possible valid numbers by inserting a decimal point at different positions. If the number starts with '0', the only valid form is '0' or '0.xxxx' (where 'xxxx' represents the rest of the number). If the number ends with '0', it cannot be a decimal number. Return an empty list if no valid form exists.", "output": "Here is the code to solve this problem: \n```python\ndef valid_numbers(s: str):\n    if s == '0':\n        return ['0']\n    if s[0] == '0' and s != '0':\n        if s[-1] == '0':\n            return []\n        else:\n            return ['0.' + s[1:]]\n    if s[-1] == '0':\n        return [s]\n    numbers = [s]\n    for i in range(1, len(s)):\n        numbers.append(s[:i] + '.' + s[i:])\n    return numbers\n```", "code": "def valid_numbers(s: str):\n    if s == '0':\n        return ['0']\n    if s[0] == '0' and s != '0':\n        if s[-1] == '0':\n            return []\n        else:\n            return ['0.' + s[1:]]\n    if s[-1] == '0':\n        return [s]\n    numbers = [s]\n    for i in range(1, len(s)):\n        numbers.append(s[:i] + '.' + s[i:])\n    return numbers", "entry_point": "valid_numbers", "testcase": ["assert valid_numbers(\"1230\") == ['1230']", "assert valid_numbers(\"0123\") == ['0.123']", "assert valid_numbers(\"000123\") == ['0.00123']", "assert valid_numbers(\"12300\") == ['12300']"]}
{"seq_id": 21091442592, "instruction": "Write a function to calculate the Euclidean distance between two points in a 2D plane.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance\n```", "code": "import math\n\ndef euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance", "entry_point": "euclidean_distance", "testcase": ["assert euclidean_distance([0, 0], [3, 4]) == 5", "assert euclidean_distance([1, 2], [4, 6]) == 5", "assert euclidean_distance([0, 1], [1, 0]) == 1.4142135623730951"]}
{"seq_id": 32566203437, "instruction": "Write a python function to find the smallest missing positive integer in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_missing_positive(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n\n    return n + 1\n```", "code": "def smallest_missing_positive(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n\n    return n + 1", "entry_point": "smallest_missing_positive", "testcase": ["assert smallest_missing_positive([7, 8, 9, 11, 12]) == 1", "assert smallest_missing_positive([1, 2, 0]) == 3", "assert smallest_missing_positive([3, 4, -1, 1]) == 2"]}
{"seq_id": 39886290465, "instruction": "Write a function to find the kth largest element in an unsorted list using quick select algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef quick_select(nums, k):\n    def partition(left, right, pivot_index):\n        pivot = nums[pivot_index]\n        nums[pivot_index], nums[right] = nums[right], nums[pivot_index]\n        store_index = left\n        for i in range(left, right):\n            if nums[i] < pivot:\n                nums[i], nums[store_index] = nums[store_index], nums[i]\n                store_index += 1\n        nums[right], nums[store_index] = nums[store_index], nums[right]\n        return store_index\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return nums[left]\n        pivot_index = left\n        pivot_index = partition(left, right, pivot_index)\n        if k_smallest == pivot_index:\n            return nums[k_smallest]\n        elif k_smallest < pivot_index:\n            return select(left, pivot_index - 1, k_smallest)\n        else:\n            return select(pivot_index + 1, right, k_smallest)\n\n    return select(0, len(nums) - 1, len(nums) - k)\n\nprint(quick_select([3, 2, 1, 5, 6, 4], 2))\nprint(quick_select([3, 2, 3, 1, 2, 4, 5, 5, 6], 4))\nprint(quick_select([1, 2, 3, 4, 5], 3))\n```", "code": "def quick_select(nums, k):\n    def partition(left, right, pivot_index):\n        pivot = nums[pivot_index]\n        nums[pivot_index], nums[right] = nums[right], nums[pivot_index]\n        store_index = left\n        for i in range(left, right):\n            if nums[i] < pivot:\n                nums[i], nums[store_index] = nums[store_index], nums[i]\n                store_index += 1\n        nums[right], nums[store_index] = nums[store_index], nums[right]\n        return store_index\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return nums[left]\n        pivot_index = left\n        pivot_index = partition(left, right, pivot_index)\n        if k_smallest == pivot_index:\n            return nums[k_smallest]\n        elif k_smallest < pivot_index:\n            return select(left, pivot_index - 1, k_smallest)\n        else:\n            return select(pivot_index + 1, right, k_smallest)\n\n    return select(0, len(nums) - 1, len(nums) - k)\n\nprint(quick_select([3, 2, 1, 5, 6, 4], 2))\nprint(quick_select([3, 2, 3, 1, 2, 4, 5, 5, 6], 4))\nprint(quick_select([1, 2, 3, 4, 5], 3))", "entry_point": "quick_select", "testcase": ["assert quick_select([3, 2, 1, 5, 6, 4], 2) == 5", "assert quick_select([1, 2, 3, 4, 5], 3) == 3", "assert quick_select([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4"]}
{"seq_id": 31934583046, "instruction": "Write a python function to count the number of possible attendance records of length n that make a student eligible for an attendance award. The rules for eligibility are:\n1. The student was absent ('A') for strictly fewer than 2 days total.\n2. The student was never late ('L') for 3 or more consecutive days.\nThe answer should be returned modulo 10^9 + 7.", "output": "Here is the code to solve this problem: \n```python\ndef attendance_award(n):\n    mod = 10 ** 9 + 7\n    dp00 = [0] * (n + 1) # A never appeared, end with 0 L\n    dp01 = [0] * (n + 1) # A never appeared, end with 1 L\n    dp02 = [0] * (n + 1) # A never appeared, end with 2 L\n    dp10 = [0] * (n + 1) # A appeared once, end with 0 L\n    dp11 = [0] * (n + 1) # A appeared once, end with 1 L\n    dp12 = [0] * (n + 1) # A appeared once, end with 2 L\n    dp00[0] = 1\n    for i in range(1, n + 1):\n        dp00[i] = (dp00[i - 1] + dp01[i - 1] + dp02[i - 1]) % mod\n        dp01[i] = dp00[i - 1] % mod\n        dp02[i] = dp01[i - 1] % mod\n        dp10[i] = (dp00[i - 1] + dp01[i - 1] + dp02[i - 1] + dp10[i - 1] + dp11[i - 1] + dp12[i - 1]) % mod\n        dp11[i] = dp10[i - 1] % mod\n        dp12[i] = dp11[i - 1] % mod\n    return (dp00[-1] + dp01[-1] + dp02[-1] + dp10[-1] + dp11[-1] + dp12[-1]) % mod\n```", "code": "def attendance_award(n):\n    mod = 10 ** 9 + 7\n    dp00 = [0] * (n + 1) # A never appeared, end with 0 L\n    dp01 = [0] * (n + 1) # A never appeared, end with 1 L\n    dp02 = [0] * (n + 1) # A never appeared, end with 2 L\n    dp10 = [0] * (n + 1) # A appeared once, end with 0 L\n    dp11 = [0] * (n + 1) # A appeared once, end with 1 L\n    dp12 = [0] * (n + 1) # A appeared once, end with 2 L\n    dp00[0] = 1\n    for i in range(1, n + 1):\n        dp00[i] = (dp00[i - 1] + dp01[i - 1] + dp02[i - 1]) % mod\n        dp01[i] = dp00[i - 1] % mod\n        dp02[i] = dp01[i - 1] % mod\n        dp10[i] = (dp00[i - 1] + dp01[i - 1] + dp02[i - 1] + dp10[i - 1] + dp11[i - 1] + dp12[i - 1]) % mod\n        dp11[i] = dp10[i - 1] % mod\n        dp12[i] = dp11[i - 1] % mod\n    return (dp00[-1] + dp01[-1] + dp02[-1] + dp10[-1] + dp11[-1] + dp12[-1]) % mod", "entry_point": "attendance_award", "testcase": ["assert attendance_award(2) == 8", "assert attendance_award(1) == 3", "assert attendance_award(10101) == 183236316"]}
{"seq_id": 15906947588, "instruction": "Write a python function to find the longest palindromic subsequence in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_palindrome_subseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n```", "code": "def longest_palindrome_subseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "entry_point": "longest_palindrome_subseq", "testcase": ["assert longest_palindrome_subseq(\"bbbab\") == 4", "assert longest_palindrome_subseq(\"cbbd\") == 2", "assert longest_palindrome_subseq(\"a\") == 1", "assert longest_palindrome_subseq(\"ac\") == 1"]}
{"seq_id": 36891789628, "instruction": "Write a python function to find the missing number in a given integer array of 1 to 100.", "output": "Here is the code to solve this problem: \n```python\ndef missing_num(arr):\n    n=len(arr)+1\n    total=(n*(n+1))//2\n    sum_of_arr=sum(arr)\n    return total-sum_of_arr\n```", "code": "def missing_num(arr):\n    n=len(arr)+1\n    total=(n*(n+1))//2\n    sum_of_arr=sum(arr)\n    return total-sum_of_arr", "entry_point": "missing_num", "testcase": ["assert missing_num([1,2,3,4,6,7,8,9,10])==5", "assert missing_num([1,2,3,4,5,6,7,8,10])==9", "assert missing_num([2,3,4,5,6,7,8,9,10])==1"]}
{"seq_id": 28372404160, "instruction": "Write a function to find the longest string chain from a given list of words. A string chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on. A word A is a predecessor of a word B if and only if you can insert exactly one letter anywhere in A without changing the order of the other characters to make it equal to B.\n\nFor example, \"abc\" is a predecessor of \"abac\".\n\nA word is not a predecessor of itself. Note that the list of words given is in no particular order.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef longestStrChain(words):\n    words.sort(key=len)\n    dp = defaultdict(int)\n    ans = 0\n    for word in words:\n        dp[word] = 1\n        for i in range(len(word)):\n            predecessor = word[:i] + word[i+1:]\n            if predecessor in dp:\n                dp[word] = max(dp[word], dp[predecessor] + 1)\n        ans = max(ans, dp[word])\n    return ans\n```", "code": "from collections import defaultdict\n\ndef longestStrChain(words):\n    words.sort(key=len)\n    dp = defaultdict(int)\n    ans = 0\n    for word in words:\n        dp[word] = 1\n        for i in range(len(word)):\n            predecessor = word[:i] + word[i+1:]\n            if predecessor in dp:\n                dp[word] = max(dp[word], dp[predecessor] + 1)\n        ans = max(ans, dp[word])\n    return ans", "entry_point": "longestStrChain", "testcase": ["assert longestStrChain([\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]) == 4", "assert longestStrChain([\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]) == 5", "assert longestStrChain([\"abcd\",\"dbqca\"]) == 1"]}
{"seq_id": 74822693873, "instruction": "Write a function that takes a list of numbers and returns a new list where each element is the factorial of the corresponding element from the original list.", "output": "Here is the code to solve this problem: \n```python\ndef factorial_list(nums):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return [factorial(n) for n in nums]\n```", "code": "def factorial_list(nums):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return [factorial(n) for n in nums]", "entry_point": "factorial_list", "testcase": ["assert factorial_list([3, 5, 7]) == [6, 120, 5040]", "assert factorial_list([0, 1, 2, 3]) == [1, 1, 2, 6]", "assert factorial_list([1, 2, 3, 4, 5]) == [1, 2, 6, 24, 120]"]}
{"seq_id": 27746613495, "instruction": "Write a python function to convert a given number into a string, replacing all the zeros with ones.", "output": "Here is the code to solve this problem: \n```python\ndef convertOne(N):\n    return str(N).replace('0', '1')\n```", "code": "def convertOne(N):\n    return str(N).replace('0', '1')", "entry_point": "convertOne", "testcase": ["assert convertOne(102050) == \"112151\"", "assert convertOne(100) == \"111\"", "assert convertOne(100100) == \"111111\""]}
{"seq_id": 23944068745, "instruction": "Write a python function to find the maximum length of a palindrome that can be built with the given list of word pairs.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\nfrom collections import Counter\n\ndef longestPalindrome(words: List[str]) -> int:\n    word_count = Counter(words)\n    max_len = 0\n    flag = True\n    for word in set(words):\n        rev_word = word[-1::-1]\n        if word != rev_word and rev_word in word_count:\n            max_len += 2 * min(word_count[word], word_count[rev_word])\n        elif word == rev_word:\n            if word_count[word] % 2 == 0:\n                max_len += 2 * word_count[word]\n            else:\n                if flag:\n                    max_len += 2 * word_count[word]\n                    flag = False\n                else:\n                    max_len += 2 * (word_count[word] - 1)\n\n    return max_len\n```", "code": "from typing import List\nfrom collections import Counter\n\ndef longestPalindrome(words: List[str]) -> int:\n    word_count = Counter(words)\n    max_len = 0\n    flag = True\n    for word in set(words):\n        rev_word = word[-1::-1]\n        if word != rev_word and rev_word in word_count:\n            max_len += 2 * min(word_count[word], word_count[rev_word])\n        elif word == rev_word:\n            if word_count[word] % 2 == 0:\n                max_len += 2 * word_count[word]\n            else:\n                if flag:\n                    max_len += 2 * word_count[word]\n                    flag = False\n                else:\n                    max_len += 2 * (word_count[word] - 1)\n\n    return max_len", "entry_point": "longestPalindrome", "testcase": ["assert longestPalindrome([\"lc\",\"cl\",\"gg\"]) == 6", "assert longestPalindrome([\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"]) == 8", "assert longestPalindrome([\"cc\",\"ll\",\"xx\"]) == 2"]}
{"seq_id": 16178246060, "instruction": "Write a python function to find the nth Fibonacci number using dynamic programming.", "output": "Here is the code to solve this problem: \n```python\ndef nth_Fibonacci(n):\n    fib = [0, 1] + [0] * (n-1)\n    for i in range(2, n + 1):\n        fib[i] = fib[i-1] + fib[i-2]\n    return fib[n]\n```", "code": "def nth_Fibonacci(n):\n    fib = [0, 1] + [0] * (n-1)\n    for i in range(2, n + 1):\n        fib[i] = fib[i-1] + fib[i-2]\n    return fib[n]", "entry_point": "nth_Fibonacci", "testcase": ["assert nth_Fibonacci(20) == 6765", "assert nth_Fibonacci(30) == 832040", "assert nth_Fibonacci(10) == 55"]}
{"seq_id": 40599917966, "instruction": "Write a function to implement the game of \"Rock, Paper, Scissors\". The function should take two arguments, the choices of the two players, and return the result of the game. The game rules are as follows: Rock beats Scissors, Scissors beats Paper, and Paper beats Rock. If both players choose the same item, the game is a tie.", "output": "Here is the code to solve this problem: \n```python\ndef rock_paper_scissors(player1, player2):\n    if player1 == player2:\n        return 'Tie'\n    elif (player1 == 'rock' and player2 == 'scissors') or (player1 == 'scissors' and player2 == 'paper') or (player1 == 'paper' and player2 == 'rock'):\n        return 'Player 1 wins'\n    else:\n        return 'Player 2 wins'\n```", "code": "def rock_paper_scissors(player1, player2):\n    if player1 == player2:\n        return 'Tie'\n    elif (player1 == 'rock' and player2 == 'scissors') or (player1 == 'scissors' and player2 == 'paper') or (player1 == 'paper' and player2 == 'rock'):\n        return 'Player 1 wins'\n    else:\n        return 'Player 2 wins'", "entry_point": "rock_paper_scissors", "testcase": ["assert rock_paper_scissors('rock', 'paper') == 'Player 2 wins'", "assert rock_paper_scissors('paper', 'scissors') == 'Player 2 wins'", "assert rock_paper_scissors('rock', 'rock') == 'Tie'"]}
{"seq_id": 10787019725, "instruction": "Write a python function to find the maximum number of operations that can be performed on an array such that in each operation, two elements with a given sum are removed from the array.", "output": "Here is the code to solve this problem: \n```python\ndef max_operations(nums, k):\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    operations = 0\n    while left < right:\n        if nums[left] + nums[right] == k:\n            operations += 1\n            left += 1\n            right -= 1\n        elif nums[left] + nums[right] < k:\n            left += 1\n        else:\n            right -= 1\n    return operations\n```", "code": "def max_operations(nums, k):\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    operations = 0\n    while left < right:\n        if nums[left] + nums[right] == k:\n            operations += 1\n            left += 1\n            right -= 1\n        elif nums[left] + nums[right] < k:\n            left += 1\n        else:\n            right -= 1\n    return operations", "entry_point": "max_operations", "testcase": ["assert max_operations([1,2,3,4], 5) == 2", "assert max_operations([2,2,2,2], 4) == 2", "assert max_operations([3,1,3,4,3], 6) == 1"]}
{"seq_id": 18692875714, "instruction": "Write a function to simulate a game of rock-paper-scissors between two players.", "output": "Here is the code to solve this problem: \n```python\ndef play_game(player1,player2):\n    if player1 == player2:\n        return 'It is a draw!'\n    elif (player1 == 'rock' and player2 == 'scissors') or (player1 == 'scissors' and player2 == 'paper') or (player1 == 'paper' and player2 == 'rock'):\n        return 'Player 1 wins!'\n    else:\n        return 'Player 2 wins!'\n```", "code": "def play_game(player1,player2):\n    if player1 == player2:\n        return 'It is a draw!'\n    elif (player1 == 'rock' and player2 == 'scissors') or (player1 == 'scissors' and player2 == 'paper') or (player1 == 'paper' and player2 == 'rock'):\n        return 'Player 1 wins!'\n    else:\n        return 'Player 2 wins!'", "entry_point": "play_game", "testcase": ["assert play_game('paper','rock')=='Player 1 wins!'", "assert play_game('rock','scissors')=='Player 1 wins!'", "assert play_game('scissors','paper')=='Player 1 wins!'", "assert play_game('rock','rock')=='It is a draw!'", "assert play_game('scissors','scissors')=='It is a draw!'", "assert play_game('paper','paper')=='It is a draw!'"]}
{"seq_id": 21548645968, "instruction": "Write a function to find the median of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef findMedianSortedArrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2 - 1] + nums[length // 2]) / 2\n    else:\n        return nums[length // 2]\n```", "code": "def findMedianSortedArrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2 - 1] + nums[length // 2]) / 2\n    else:\n        return nums[length // 2]", "entry_point": "findMedianSortedArrays", "testcase": ["assert findMedianSortedArrays([1, 2], [3, 4]) == 2.5", "assert findMedianSortedArrays([1, 3], [2]) == 2.0", "assert findMedianSortedArrays([0, 0], [0, 0]) == 0.0"]}
{"seq_id": 40988317022, "instruction": "Write a python function to find the lowest common multiple (LCM) of two given numbers.", "output": "Here is the code to solve this problem: \n```python\ndef gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\ndef lowest_common_multiple(x, y):\n    return (x*y)//gcd(x,y)\n```", "code": "def gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\ndef lowest_common_multiple(x, y):\n    return (x*y)//gcd(x,y)", "entry_point": "lowest_common_multiple", "testcase": ["assert lowest_common_multiple(25, 15) == 75", "assert lowest_common_multiple(12, 18) == 36", "assert lowest_common_multiple(3, 5) == 15"]}
{"seq_id": 70082183625, "instruction": "Write a function that finds the largest square containing only 1's in a binary matrix and returns its area.", "output": "Here is the code to solve this problem: \n```python\ndef largest_square(matrix):\n    if not matrix:\n        return 0\n    rows, cols = len(matrix), len(matrix[0])\n    dp = [[0]*cols for _ in range(rows)]\n    max_side = 0\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_side = max(max_side, dp[i][j])\n    return max_side * max_side\n```", "code": "def largest_square(matrix):\n    if not matrix:\n        return 0\n    rows, cols = len(matrix), len(matrix[0])\n    dp = [[0]*cols for _ in range(rows)]\n    max_side = 0\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_side = max(max_side, dp[i][j])\n    return max_side * max_side", "entry_point": "largest_square", "testcase": ["assert largest_square([[1,0,1,0,0],[1,0,1,1,1],[1,1,1,1,1],[1,0,0,1,0]]) == 4", "assert largest_square([[0]]) == 0", "assert largest_square([[0,1],[1,0]]) == 1"]}
{"seq_id": 41029575518, "instruction": "Write a function that takes a string as an input and returns all possible letter case permutations of the string. The function should return a list of all permutations in any order.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef letter_case_permutation(s: str) -> List[str]:\n    res = []\n\n    def dfs(remain, path):\n        if len(path) == len(s):\n            res.append(''.join(path))\n            return\n        if remain[0].isalpha():\n            dfs(remain[1:], path + [remain[0].lower()])\n            dfs(remain[1:], path + [remain[0].upper()])\n        else:\n            dfs(remain[1:], path + [remain[0]])\n\n    dfs(s, [])\n    return res\n```", "code": "from typing import List\n\ndef letter_case_permutation(s: str) -> List[str]:\n    res = []\n\n    def dfs(remain, path):\n        if len(path) == len(s):\n            res.append(''.join(path))\n            return\n        if remain[0].isalpha():\n            dfs(remain[1:], path + [remain[0].lower()])\n            dfs(remain[1:], path + [remain[0].upper()])\n        else:\n            dfs(remain[1:], path + [remain[0]])\n\n    dfs(s, [])\n    return res", "entry_point": "letter_case_permutation", "testcase": ["assert letter_case_permutation(\"a1b2\") == [\"a1b2\", \"a1B2\", \"A1b2\", \"A1B2\"]", "assert letter_case_permutation(\"2\") == [\"2\"]", "assert letter_case_permutation(\"3z4\") == [\"3z4\", \"3Z4\"]"]}
{"seq_id": 37060157136, "instruction": "Write a python function to find the number of ways to reach the last cell of a grid of size m * n from the first cell, moving only right or down.", "output": "Here is the code to solve this problem: \n```python\ndef num_ways_to_reach_last_cell(m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n    return dp[-1][-1]\n```", "code": "def num_ways_to_reach_last_cell(m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n    return dp[-1][-1]", "entry_point": "num_ways_to_reach_last_cell", "testcase": ["assert num_ways_to_reach_last_cell(4, 4) == 20", "assert num_ways_to_reach_last_cell(2, 2) == 2", "assert num_ways_to_reach_last_cell(3, 3) == 6"]}
{"seq_id": 11922086233, "instruction": "Write a python function to find the kth smallest element in a given list.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef kth_smallest(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k-1]\n```", "code": "from typing import List\n\ndef kth_smallest(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k-1]", "entry_point": "kth_smallest", "testcase": ["assert kth_smallest([1, 2, 3], 2) == 2", "assert kth_smallest([7, 10, 4, 3, 20, 15], 4) == 10", "assert kth_smallest([7, 10, 4, 3, 20, 15], 3) == 7"]}
{"seq_id": 35090734469, "instruction": "Create a python function to check if a given string is a valid identifier in Python. A valid identifier:\n- begins with a letter or an underscore.\n- is then followed by any number of letters, digits, or underscores.\n- does not contain any special characters or spaces.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef valid_identifier(identifier):\n    if re.match(\"^[a-zA-Z_][a-zA-Z0-9_]*$\", identifier):\n        return True\n    else:\n        return False\n```", "code": "import re\n\ndef valid_identifier(identifier):\n    if re.match(\"^[a-zA-Z_][a-zA-Z0-9_]*$\", identifier):\n        return True\n    else:\n        return False", "entry_point": "valid_identifier", "testcase": ["assert valid_identifier(\"variable1\") == True", "assert valid_identifier(\"1variable\") == False", "assert valid_identifier(\"variable-name\") == False", "assert valid_identifier(\"variable name\") == False", "assert valid_identifier(\"_variable_name\") == True", "assert valid_identifier(\"Variable1\") == True"]}
{"seq_id": 23598801153, "instruction": "Write a python function to find the number of ways to reach the last cell of a grid from the first cell using only moves that go one cell right or one cell down.", "output": "Here is the code to solve this problem: \n```python\ndef count_paths(m: int, n: int) -> int:\n    # Create a 2D table to store results of subproblems\n    dp = [[0 for x in range(n)] for x in range(m)]\n \n    # Count of paths to reach any cell in first column is 1\n    for i in range(m):\n        dp[i][0] = 1\n \n    # Count of paths to reach any cell in first column is 1\n    for j in range(n):\n        dp[0][j] = 1\n\n    # Calculate count of paths for other cells in bottom-up manner using the recursive solution\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[m-1][n-1]\n```", "code": "def count_paths(m: int, n: int) -> int:\n    # Create a 2D table to store results of subproblems\n    dp = [[0 for x in range(n)] for x in range(m)]\n \n    # Count of paths to reach any cell in first column is 1\n    for i in range(m):\n        dp[i][0] = 1\n \n    # Count of paths to reach any cell in first column is 1\n    for j in range(n):\n        dp[0][j] = 1\n\n    # Calculate count of paths for other cells in bottom-up manner using the recursive solution\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[m-1][n-1]", "entry_point": "count_paths", "testcase": ["assert count_paths(2, 2) == 2", "assert count_paths(3, 3) == 6", "assert count_paths(4, 4) == 20"]}
{"seq_id": 18498647013, "instruction": "Write a python function to find the sum of all divisors of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef sum_divisors(n):\n    if n <= 1:\n        return 0\n    divisors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n```", "code": "def sum_divisors(n):\n    if n <= 1:\n        return 0\n    divisors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "entry_point": "sum_divisors", "testcase": ["assert sum_divisors(10) == 8", "assert sum_divisors(28) == 28", "assert sum_divisors(12) == 16"]}
{"seq_id": 73542684758, "instruction": "Write a function to create a word cloud data in the form of a dictionary where key = words and value = number of times the word occurred in the given string. The function should ignore case sensitivity and punctuation.", "output": "Here is the code to solve this problem: \n```python\nimport string\n\ndef create_word_cloud(word_data):\n    for punctuation in string.punctuation:\n        word_data = word_data.replace(punctuation, \"\")\n    split_data = word_data.lower().split()\n    counter_dict = {}\n    for word in split_data:\n        if word in counter_dict:\n            counter_dict[word] += 1\n        else:\n            counter_dict[word] = 1\n    return counter_dict\n\nword_data = \"Hello world, my baby is my world!\"\nassert create_word_cloud(word_data) == {'hello': 1, 'world': 2, 'my': 2, 'baby': 1, 'is': 1}\n\nword_data = \"Add add add subtract subtract!\"\nassert create_word_cloud(word_data) == {'add': 3, 'subtract': 2}\n\nword_data = \"Punctuation, should; be: ignored!\"\nassert create_word_cloud(word_data) == {'punctuation': 1, 'should': 1, 'be': 1, 'ignored': 1}\n```", "code": "import string\n\ndef create_word_cloud(word_data):\n    for punctuation in string.punctuation:\n        word_data = word_data.replace(punctuation, \"\")\n    split_data = word_data.lower().split()\n    counter_dict = {}\n    for word in split_data:\n        if word in counter_dict:\n            counter_dict[word] += 1\n        else:\n            counter_dict[word] = 1\n    return counter_dict\n\nword_data = \"Hello world, my baby is my world!\"\nassert create_word_cloud(word_data) == {'hello': 1, 'world': 2, 'my': 2, 'baby': 1, 'is': 1}\n\nword_data = \"Add add add subtract subtract!\"\nassert create_word_cloud(word_data) == {'add': 3, 'subtract': 2}\n\nword_data = \"Punctuation, should; be: ignored!\"\nassert create_word_cloud(word_data) == {'punctuation': 1, 'should': 1, 'be': 1, 'ignored': 1}", "entry_point": "create_word_cloud", "testcase": ["assert create_word_cloud(\"Hello world, my baby is my world!\") == {'hello': 1, 'world': 2, 'my': 2, 'baby': 1, 'is': 1}", "assert create_word_cloud(\"Add add add subtract subtract!\") == {'add': 3, 'subtract': 2}", "assert create_word_cloud(\"Punctuation, should; be: ignored!\") == {'punctuation': 1, 'should': 1, 'be': 1, 'ignored': 1}"]}
{"seq_id": 25191348400, "instruction": "Write a python function to generate the next permutation of a given list of numbers. If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). The replacement must be in place and use only constant extra memory.", "output": "Here is the code to solve this problem: \n```python\ndef next_permutation(nums):\n    n = len(nums)\n    i = n - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n\n    if i >= 0:\n        j = n - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n\n    left = i + 1\n    right = n - 1\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n    return nums\n```", "code": "def next_permutation(nums):\n    n = len(nums)\n    i = n - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n\n    if i >= 0:\n        j = n - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n\n    left = i + 1\n    right = n - 1\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n    return nums", "entry_point": "next_permutation", "testcase": ["assert next_permutation([3,2,1]) == [1,2,3]", "assert next_permutation([1,1,5]) == [1,5,1]", "assert next_permutation([1,2,3]) == [1,3,2]"]}
{"seq_id": 74091335704, "instruction": "Write a python function to find the maximum product of three numbers in a list.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_three(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3]) if len(nums) >= 3 else None\n```", "code": "def max_product_three(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3]) if len(nums) >= 3 else None", "entry_point": "max_product_three", "testcase": ["assert max_product_three([1, 10, 2, 6, 5, 3]) == 300", "assert max_product_three([-10, -10, 5, 2]) == 500", "assert max_product_three([1, 2]) == None"]}
{"seq_id": 35572067639, "instruction": "Write a function to find the maximum number of operations that can be performed on a list of integers. An operation consists of selecting two elements from the list that add up to a given value k, then removing those elements from the list. The function should return the maximum number of such operations that can be performed.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef max_operations(nums, k):\n    count = Counter(nums)\n    output = 0\n    seen = set()\n\n    for x in count.keys():\n        if x in seen:\n            continue\n        elif k - x == x:\n            output += count[x] // 2\n        elif k - x in count.keys():\n            output += min(count[x], count[k - x])\n        seen.add(x)\n        seen.add(k - x)\n\n    return output\n```", "code": "from collections import Counter\n\ndef max_operations(nums, k):\n    count = Counter(nums)\n    output = 0\n    seen = set()\n\n    for x in count.keys():\n        if x in seen:\n            continue\n        elif k - x == x:\n            output += count[x] // 2\n        elif k - x in count.keys():\n            output += min(count[x], count[k - x])\n        seen.add(x)\n        seen.add(k - x)\n\n    return output", "entry_point": "max_operations", "testcase": ["assert max_operations([3, 1, 3, 4, 3], 6) == 1", "assert max_operations([1, 2, 3, 4], 5) == 2", "assert max_operations([2, 2, 2, 2], 4) == 2"]}
{"seq_id": 10076138758, "instruction": "Write a function that matches a string that has an 'a' followed by three 'b's.", "output": "Here is the code to solve this problem: \n```python\nimport re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\n```", "code": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "entry_point": "text_match_three", "testcase": ["assert text_match_three(\"abb\")==('Not matched!')", "assert text_match_three(\"abbbbb\")==('Found a match!')", "assert text_match_three(\"abbb\")==('Found a match!')"]}
{"seq_id": 74011387991, "instruction": "Write a python function to find the sum of all even Fibonacci numbers up to a given limit.", "output": "Here is the code to solve this problem: \n```python\ndef sum_even_fibonacci(limit):\n    a, b = 1, 2\n    total_sum = 0\n    while b <= limit:\n        if b % 2 == 0:\n            total_sum += b\n        a, b = b, a + b\n    return total_sum\n```", "code": "def sum_even_fibonacci(limit):\n    a, b = 1, 2\n    total_sum = 0\n    while b <= limit:\n        if b % 2 == 0:\n            total_sum += b\n        a, b = b, a + b\n    return total_sum", "entry_point": "sum_even_fibonacci", "testcase": ["assert sum_even_fibonacci(60) == 44", "assert sum_even_fibonacci(34) == 44", "assert sum_even_fibonacci(10) == 10"]}
{"seq_id": 14120971786, "instruction": "Write a function to find the number of quadruples in a given list of points that form a square. The sides of the square should be parallel to the x-axis and y-axis.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef count_squares(points: List[List[int]]) -> int:\n    points_set = set(map(tuple, points))\n    count = 0\n    \n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if x1 != x2 and y1 != y2:\n                p3 = (x2, y1)\n                p4 = (x1, y2)\n                if p3 in points_set and p4 in points_set and abs(x1 - x2) == abs(y1 - y2):\n                    count += 1\n    return count // 4\n\nprint(count_squares([[0, 0], [1, 1], [1, 0], [0, 1], [2, 2], [2, 1], [1, 2], [2, 0]]))\nprint(count_squares([[1, 0], [0, 1], [0, 0], [1, 1]]))\nprint(count_squares([[1, 1], [3, 3], [3, 1], [1, 3]]))\n```", "code": "from typing import List\n\ndef count_squares(points: List[List[int]]) -> int:\n    points_set = set(map(tuple, points))\n    count = 0\n    \n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if x1 != x2 and y1 != y2:\n                p3 = (x2, y1)\n                p4 = (x1, y2)\n                if p3 in points_set and p4 in points_set and abs(x1 - x2) == abs(y1 - y2):\n                    count += 1\n    return count // 4\n\nprint(count_squares([[0, 0], [1, 1], [1, 0], [0, 1], [2, 2], [2, 1], [1, 2], [2, 0]]))\nprint(count_squares([[1, 0], [0, 1], [0, 0], [1, 1]]))\nprint(count_squares([[1, 1], [3, 3], [3, 1], [1, 3]]))", "entry_point": "count_squares", "testcase": ["assert count_squares([[0, 0], [1, 1], [1, 0], [0, 1], [2, 2], [2, 1], [1, 2], [2, 0]]) == 1", "assert count_squares([[1, 0], [0, 1], [0, 0], [1, 1]]) == 0", "assert count_squares([[1, 1], [3, 3], [3, 1], [1, 3]]) == 0"]}
{"seq_id": 41069714331, "instruction": "Write a python function to find the mode(s) of a list of numbers. The mode is the number that appears most frequently. If there are multiple numbers that appear the same maximum number of times, all of them should be returned.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_Mode(lst):\n    count = Counter(lst)\n    max_count = max(count.values())\n    return [num for num, freq in count.items() if freq == max_count]\n```", "code": "from collections import Counter\n\ndef find_Mode(lst):\n    count = Counter(lst)\n    max_count = max(count.values())\n    return [num for num, freq in count.items() if freq == max_count]", "entry_point": "find_Mode", "testcase": ["assert find_Mode([1, 2, 2, 3, 4, 4, 5]) == [2, 4]", "assert find_Mode([1, 2, 3]) == [1, 2, 3]", "assert find_Mode([1, 1, 2, 3, 3, 3, 4, 4, 4, 4]) == [4]"]}
{"seq_id": 29019174709, "instruction": "Given a sorted array of unique integers, write a function to find the smallest index i for which nums[i] == i. Return -1 if there is no such index.", "output": "Here is the code to solve this problem: \n```python\ndef find_fixed_point(nums):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] < mid:\n            left = mid + 1\n        elif nums[mid] > mid:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n```", "code": "def find_fixed_point(nums):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] < mid:\n            left = mid + 1\n        elif nums[mid] > mid:\n            right = mid - 1\n        else:\n            return mid\n    return -1", "entry_point": "find_fixed_point", "testcase": ["assert find_fixed_point([-10, -5, 3, 4, 5, 9]) == -1", "assert find_fixed_point([-10, -5, 0, 3, 7]) == 3", "assert find_fixed_point([0, 2, 5, 8, 17]) == 0"]}
{"seq_id": 11759270677, "instruction": "Write a function to find the smallest possible value of k such that k raised to the power of x is greater than or equal to n.", "output": "Here is the code to solve this problem: \n```python\nimport math\r\n\r\ndef find_min_pow(x, n):\r\n    return math.ceil(pow(n, 1/x))\n```", "code": "import math\r\n\r\ndef find_min_pow(x, n):\r\n    return math.ceil(pow(n, 1/x))", "entry_point": "find_min_pow", "testcase": ["assert find_min_pow(3, 27) == 3", "assert find_min_pow(4, 100) == 4", "assert find_min_pow(2, 10) == 4"]}
{"seq_id": 10735267149, "instruction": "Write a function to replace all occurrences of a specific word in a given string with another word using regex.", "output": "Here is the code to solve this problem: \n```python\nimport re\r\ndef replace_word(sentence, word1, word2):\r\n  return (re.sub(r'\\b' + word1 + r'\\b', word2, sentence))\n```", "code": "import re\r\ndef replace_word(sentence, word1, word2):\r\n  return (re.sub(r'\\b' + word1 + r'\\b', word2, sentence))", "entry_point": "replace_word", "testcase": ["assert replace_word('I love coding in Python', 'Python', 'JavaScript') == 'I love coding in JavaScript'", "assert replace_word('This is a test sentence with test word', 'test', 'example') == 'This is a example sentence with example word'", "assert replace_word('The quick brown fox jumps over the lazy dog', 'fox', 'cat') == 'The quick brown cat jumps over the lazy dog'"]}
{"seq_id": 43953732131, "instruction": "Write a python function to find the highest power of 3 that is less than or equal to n.", "output": "Here is the code to solve this problem: \n```python\ndef highest_Power_of_3(n):\n    res = 1\n    while (res * 3 <= n):\n        res *= 3\n    return res\n```", "code": "def highest_Power_of_3(n):\n    res = 1\n    while (res * 3 <= n):\n        res *= 3\n    return res", "entry_point": "highest_Power_of_3", "testcase": ["assert highest_Power_of_3(27) == 27", "assert highest_Power_of_3(28) == 27", "assert highest_Power_of_3(81) == 81"]}
{"seq_id": 30124361098, "instruction": "Create a Python function that will return the 'k' closest points to the origin (0,0) from a list of points. Each point is represented as a list of two elements, corresponding to x and y coordinates respectively. The distance from a point to the origin is calculated using the Euclidean distance formula.", "output": "Here is the code to solve this problem: \n```python\nimport math\nfrom typing import List\n\ndef k_closest_points(points: List[List[int]], k: int) -> List[List[int]]:\n    # \u221a(x1 - x2)^2 + (y1 - y2)^2 = sqrt(x1 - x2)**2 + (y1 - y2)**2 -> sqrt((x1)**2 + (y1)**2)\n    # points = [(sqrt(10),[1,3]),(sqrt(8),[-2,2])] -> sort it \n    # return k closest (i for i in k; first k points[i][1]) \n    \n    # Calculating distance for each point\n    for i in range(len(points)):\n        points[i] = (math.sqrt((points[i][0])**2 + (points[i][1])**2), points[i])\n    \n    points.sort()\n    \n    return [points[i][1] for i in range(k)]\n\n# Test cases\nassert k_closest_points([[3,3],[5,-1],[-2,4]], 2) == [[3,3],[-2,4]]\nassert k_closest_points([[1,3],[-2,2]], 1) == [[-2,2]]\nassert k_closest_points([[0,1],[1,0]], 2) == [[0,1],[1,0]]\n```", "code": "import math\nfrom typing import List\n\ndef k_closest_points(points: List[List[int]], k: int) -> List[List[int]]:\n    # \u221a(x1 - x2)^2 + (y1 - y2)^2 = sqrt(x1 - x2)**2 + (y1 - y2)**2 -> sqrt((x1)**2 + (y1)**2)\n    # points = [(sqrt(10),[1,3]),(sqrt(8),[-2,2])] -> sort it \n    # return k closest (i for i in k; first k points[i][1]) \n    \n    # Calculating distance for each point\n    for i in range(len(points)):\n        points[i] = (math.sqrt((points[i][0])**2 + (points[i][1])**2), points[i])\n    \n    points.sort()\n    \n    return [points[i][1] for i in range(k)]\n\n# Test cases\nassert k_closest_points([[3,3],[5,-1],[-2,4]], 2) == [[3,3],[-2,4]]\nassert k_closest_points([[1,3],[-2,2]], 1) == [[-2,2]]\nassert k_closest_points([[0,1],[1,0]], 2) == [[0,1],[1,0]]", "entry_point": "k_closest_points", "testcase": ["assert k_closest_points([[3,3],[5,-1],[-2,4]], 2) == [[3,3],[-2,4]]", "assert k_closest_points([[1,3],[-2,2]], 1) == [[-2,2]]", "assert k_closest_points([[0,1],[1,0]], 2) == [[0,1],[1,0]]"]}
{"seq_id": 13455380741, "instruction": "Write a python function to find the peak element in an array. A peak element is an element that is greater than its neighbors.", "output": "Here is the code to solve this problem: \n```python\ndef find_peak_element(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n```", "code": "def find_peak_element(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return left", "entry_point": "find_peak_element", "testcase": ["assert find_peak_element([1,2,1,3,5,6,4]) == 5", "assert find_peak_element([1,3,20,4,1,0]) == 2", "assert find_peak_element([1,2,3,1]) == 2"]}
{"seq_id": 17489509323, "instruction": "Write a python function to remove duplicates from a given list while preserving the order of elements.", "output": "Here is the code to solve this problem: \n```python\ndef remove_duplicates(lst):\n    result = []\n    seen = set()\n    for item in lst:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result\n```", "code": "def remove_duplicates(lst):\n    result = []\n    seen = set()\n    for item in lst:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result", "entry_point": "remove_duplicates", "testcase": ["assert remove_duplicates([10, 20, 30]) == [10, 20, 30]", "assert remove_duplicates([1, 2, 3, 2, 1, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([5, 5, 5, 5, 5]) == [5]"]}
{"seq_id": 74866393623, "instruction": "Write a function that takes a list of integers, and for each integer, it finds the next greater element in the list. If there is no greater element, it returns -1 for that integer. The function should return a list of these next greater elements.", "output": "Here is the code to solve this problem: \n```python\ndef next_greater_element(nums):\n    result = [-1] * len(nums)\n    stack = []\n    for i, num in enumerate(nums):\n        while stack and nums[stack[-1]] < num:\n            result[stack.pop()] = num\n        stack.append(i)\n    return result\n```", "code": "def next_greater_element(nums):\n    result = [-1] * len(nums)\n    stack = []\n    for i, num in enumerate(nums):\n        while stack and nums[stack[-1]] < num:\n            result[stack.pop()] = num\n        stack.append(i)\n    return result", "entry_point": "next_greater_element", "testcase": ["assert next_greater_element([2, 7, 3, 5, 4, 6, 8]) == [7, 8, 5, 6, 6, 8, -1]", "assert next_greater_element([5, 4, 3, 2, 1]) == [-1, -1, -1, -1, -1]", "assert next_greater_element([1, 2, 3, 4, 5]) == [2, 3, 4, 5, -1]"]}
{"seq_id": 1621570251, "instruction": "Write a function to find the number of ways to decode a message encoded by a substitution cipher, where 'A' is replaced by '1', 'B' is replaced by '2', and so on up to 'Z' being replaced by '26'. The message is encoded using digits, and each digit or pair of digits represents a letter. For example, \"12\" can be decoded as \"AB\" (1 2) or \"L\" (12). Your function should return the number of ways the message can be decoded.", "output": "Here is the code to solve this problem: \n```python\ndef decode_variations(s):\n    \"\"\"\n    Calculate the number of ways to decode a string encoded by a substitution cipher.\n    \n    :param s: A string consisting of digits, representing the encoded message.\n    :return: The number of ways to decode the message.\n    \"\"\"\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        if s[i-1] != '0':\n            dp[i] += dp[i-1]\n        if s[i-2] == '1' or (s[i-2] == '2' and s[i-1] <= '6'):\n            dp[i] += dp[i-2]\n    return dp[n]\n```", "code": "def decode_variations(s):\n    \"\"\"\n    Calculate the number of ways to decode a string encoded by a substitution cipher.\n    \n    :param s: A string consisting of digits, representing the encoded message.\n    :return: The number of ways to decode the message.\n    \"\"\"\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        if s[i-1] != '0':\n            dp[i] += dp[i-1]\n        if s[i-2] == '1' or (s[i-2] == '2' and s[i-1] <= '6'):\n            dp[i] += dp[i-2]\n    return dp[n]", "entry_point": "decode_variations", "testcase": ["assert decode_variations(\"226\") == 3", "assert decode_variations(\"06\") == 0", "assert decode_variations(\"0\") == 0", "assert decode_variations(\"12\") == 2"]}
{"seq_id": 13268086992, "instruction": "Write a python function to find the maximum subsequence of length at most t from a given string where all characters of the subsequence are unique.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef max_unique_subseq(s, t):\n    max_subseq = \"\"\n    for i in range(len(s)):\n        char_count = defaultdict(int)\n        subseq = \"\"\n        for j in range(i, min(i + t, len(s))):\n            if char_count[s[j]] == 0:\n                subseq += s[j]\n                char_count[s[j]] += 1\n            else:\n                break\n        if len(subseq) > len(max_subseq):\n            max_subseq = subseq\n    return max_subseq\n\n# Test cases\nassert max_unique_subseq(\"abcabc\", 3) == \"abc\"\nassert max_unique_subseq(\"abacab\", 3) == \"bac\"\nassert max_unique_subseq(\"awaglknagawunagwkwagl\", 4) == \"wagl\"\n```", "code": "from collections import defaultdict\n\ndef max_unique_subseq(s, t):\n    max_subseq = \"\"\n    for i in range(len(s)):\n        char_count = defaultdict(int)\n        subseq = \"\"\n        for j in range(i, min(i + t, len(s))):\n            if char_count[s[j]] == 0:\n                subseq += s[j]\n                char_count[s[j]] += 1\n            else:\n                break\n        if len(subseq) > len(max_subseq):\n            max_subseq = subseq\n    return max_subseq\n\n# Test cases\nassert max_unique_subseq(\"abcabc\", 3) == \"abc\"\nassert max_unique_subseq(\"abacab\", 3) == \"bac\"\nassert max_unique_subseq(\"awaglknagawunagwkwagl\", 4) == \"wagl\"", "entry_point": "max_unique_subseq", "testcase": ["assert max_unique_subseq(\"awaglknagawunagwkwagl\", 4) == \"wagl\"", "assert max_unique_subseq(\"abacab\", 3) == \"bac\"", "assert max_unique_subseq(\"abcabc\", 3) == \"abc\""]}
{"seq_id": 39776737118, "instruction": "Write a python function to find the number of distinct substrings in a given string. A substring is a contiguous sequence of characters within a string.", "output": "Here is the code to solve this problem: \n```python\ndef distinct_substring(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return len(substrings)\n\nif __name__ == \"__main__\":\n    assert distinct_substring(\"abc\") == 6\n    assert distinct_substring(\"aaa\") == 3\n    assert distinct_substring(\"abcd\") == 10\n    print(\"All test cases passed!\")\n```", "code": "def distinct_substring(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return len(substrings)\n\nif __name__ == \"__main__\":\n    assert distinct_substring(\"abc\") == 6\n    assert distinct_substring(\"aaa\") == 3\n    assert distinct_substring(\"abcd\") == 10\n    print(\"All test cases passed!\")", "entry_point": "distinct_substring", "testcase": ["assert distinct_substring(\"abc\") == 6", "assert distinct_substring(\"abcd\") == 10", "assert distinct_substring(\"aaa\") == 3"]}
{"seq_id": 34504743830, "instruction": "Write a python function to generate all possible combinations of strings that can be made by pressing the buttons of a telephone keypad. Each digit on the keypad corresponds to a set of characters, and the function should return a list of all possible strings that can be made by pressing the digits.", "output": "Here is the code to solve this problem: \n```python\ndef generate_combinations(digits):\n    if len(digits) == 0:\n        return []\n    d = {1:\"\", 2:\"abc\", 3:\"def\", 4:\"ghi\",5:\"jkl\", 6:\"mno\", 7:\"pqrs\", 8:\"tuv\", 9:\"wxyz\", 0:\" \"}\n    def dfs(digits, index, path , res , d):\n        if index == len(digits):\n            res.append(\"\".join(path))\n            return\n        digit = int(digits[index])\n        for c in d.get(digit, []):\n            path.append(c)\n            dfs(digits, index+1, path, res, d)\n            path.pop()\n    res=[]\n    dfs(digits, 0, [], res, d)\n    return res\n```", "code": "def generate_combinations(digits):\n    if len(digits) == 0:\n        return []\n    d = {1:\"\", 2:\"abc\", 3:\"def\", 4:\"ghi\",5:\"jkl\", 6:\"mno\", 7:\"pqrs\", 8:\"tuv\", 9:\"wxyz\", 0:\" \"}\n    def dfs(digits, index, path , res , d):\n        if index == len(digits):\n            res.append(\"\".join(path))\n            return\n        digit = int(digits[index])\n        for c in d.get(digit, []):\n            path.append(c)\n            dfs(digits, index+1, path, res, d)\n            path.pop()\n    res=[]\n    dfs(digits, 0, [], res, d)\n    return res", "entry_point": "generate_combinations", "testcase": ["assert generate_combinations(\"2\") == [\"a\", \"b\", \"c\"]", "assert generate_combinations(\"23\") == [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]", "assert generate_combinations(\"\") == []"]}
{"seq_id": 18586786321, "instruction": "Write a python function to find the maximum xor value of two numbers in an array.\n\nGiven an array of numbers, find the maximum XOR value of any two numbers in the array.", "output": "Here is the code to solve this problem: \n```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node.children:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n\n    def get_max_xor(self, num):\n        node = self.root\n        xor_num = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if (1 - bit) in node.children:\n                xor_num |= (1 << i)\n                node = node.children[1 - bit]\n            else:\n                node = node.children[bit]\n        return xor_num\n\ndef max_xor(nums):\n    trie = Trie()\n    max_xor_value = float('-inf')\n    for num in nums:\n        trie.insert(num)\n    for num in nums:\n        max_xor_value = max(max_xor_value, trie.get_max_xor(num))\n    return max_xor_value\n```", "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        node = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node.children:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n\n    def get_max_xor(self, num):\n        node = self.root\n        xor_num = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if (1 - bit) in node.children:\n                xor_num |= (1 << i)\n                node = node.children[1 - bit]\n            else:\n                node = node.children[bit]\n        return xor_num\n\ndef max_xor(nums):\n    trie = Trie()\n    max_xor_value = float('-inf')\n    for num in nums:\n        trie.insert(num)\n    for num in nums:\n        max_xor_value = max(max_xor_value, trie.get_max_xor(num))\n    return max_xor_value", "entry_point": "max_xor", "testcase": ["assert max_xor([3, 10, 5, 25, 2, 8]) == 28", "assert max_xor([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127", "assert max_xor([1, 2, 3, 9, 8]) == 11"]}
{"seq_id": 43212392428, "instruction": "Write a python function to convert a given string into a list of words, removing any punctuation marks and converting all letters to lowercase.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef convert_to_words(s):\n    # Remove punctuation and convert to lowercase\n    s = re.sub(r'[^\\w\\s]', '', s).lower()\n    # Split the string into a list of words\n    return s.split()\n```", "code": "import re\n\ndef convert_to_words(s):\n    # Remove punctuation and convert to lowercase\n    s = re.sub(r'[^\\w\\s]', '', s).lower()\n    # Split the string into a list of words\n    return s.split()", "entry_point": "convert_to_words", "testcase": ["assert convert_to_words(\"Python is great, isn't it?\") == ['python', 'is', 'great', 'isnt', 'it']", "assert convert_to_words(\"Numbers 123, symbols @#$, and words!\") == ['numbers', '123', 'symbols', 'and', 'words']", "assert convert_to_words(\"Hello, World!\") == ['hello', 'world']"]}
{"seq_id": 38967389053, "instruction": "Write a python function that takes a string and returns a new string with the characters sorted based on their frequency in descending order. If two characters have the same frequency, they should be sorted in their lexicographical order.", "output": "Here is the code to solve this problem: \n```python\nimport collections\nimport heapq\n\ndef frequency_sort(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # Compute char->freq map\n    freq = collections.defaultdict(int)\n    for c in s:\n        freq[c] += 1\n\n    # Use a max-heap to sort the map entries by frequency\n    max_heap = []\n    for c, count in freq.items():\n        heapq.heappush(max_heap, (-count, c))\n    res = ''\n    while max_heap:\n        count, c = heapq.heappop(max_heap)\n        res += c*(-count)\n    \n    return res\n```", "code": "import collections\nimport heapq\n\ndef frequency_sort(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # Compute char->freq map\n    freq = collections.defaultdict(int)\n    for c in s:\n        freq[c] += 1\n\n    # Use a max-heap to sort the map entries by frequency\n    max_heap = []\n    for c, count in freq.items():\n        heapq.heappush(max_heap, (-count, c))\n    res = ''\n    while max_heap:\n        count, c = heapq.heappop(max_heap)\n        res += c*(-count)\n    \n    return res", "entry_point": "frequency_sort", "testcase": ["assert frequency_sort(\"Aabb\") == \"bbAa\"", "assert frequency_sort(\"cccaaa\") == \"aaaccc\"", "assert frequency_sort(\"tree\") == \"eert\""]}
{"seq_id": 11079506736, "instruction": "Write a python function to find the maximum frequency of an element in an array.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef max_frequency(arr):\n    count = Counter(arr)\n    max_freq = max(count.values())\n    for element, freq in count.items():\n        if freq == max_freq:\n            return element\n```", "code": "from collections import Counter\n\ndef max_frequency(arr):\n    count = Counter(arr)\n    max_freq = max(count.values())\n    for element, freq in count.items():\n        if freq == max_freq:\n            return element", "entry_point": "max_frequency", "testcase": ["assert max_frequency([10, 10, 10, 10, 20, 20, 20, 30]) == 10", "assert max_frequency([1, 2, 3, 3, 4, 5, 5, 5]) == 5", "assert max_frequency([1, 2, 3, 4, 5, 6]) == 1"]}
{"seq_id": 44688870015, "instruction": "Write a python function to find the number of unique words in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef unique_word_count(sentence):\n    words = sentence.split()\n    unique_words = set(words)\n    return len(unique_words)\n```", "code": "def unique_word_count(sentence):\n    words = sentence.split()\n    unique_words = set(words)\n    return len(unique_words)", "entry_point": "unique_word_count", "testcase": ["assert unique_word_count(\"Hello world\") == 2", "assert unique_word_count(\"The quick brown fox jumps over the lazy fox\") == 8", "assert unique_word_count(\"The quick brown fox jumps over the lazy dog\") == 9"]}
{"seq_id": 72126697631, "instruction": "Write a python function to find the smallest positive integer whose digits add up to a given number 'n'. If such a number does not exist, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_positive_integer(n):\n    if n == 0:\n        return -1\n    elif n < 10:\n        return n\n    else:\n        digit = n % 9\n        if digit == 0:\n            return int(\"9\" * (n // 9))\n        else:\n            return int(str(digit) + \"9\" * (n // 9))\n```", "code": "def smallest_positive_integer(n):\n    if n == 0:\n        return -1\n    elif n < 10:\n        return n\n    else:\n        digit = n % 9\n        if digit == 0:\n            return int(\"9\" * (n // 9))\n        else:\n            return int(str(digit) + \"9\" * (n // 9))", "entry_point": "smallest_positive_integer", "testcase": ["assert smallest_positive_integer(1) == 1", "assert smallest_positive_integer(10) == 19", "assert smallest_positive_integer(21) == 399"]}
{"seq_id": 4139187281, "instruction": "Write a python function to find the most common element in a list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_most_common_element(lst):\n    counter = Counter(lst)\n    max_count = max(list(counter.values()))\n    return [item for item, count in counter.items() if count == max_count][0]\n```", "code": "from collections import Counter\n\ndef find_most_common_element(lst):\n    counter = Counter(lst)\n    max_count = max(list(counter.values()))\n    return [item for item, count in counter.items() if count == max_count][0]", "entry_point": "find_most_common_element", "testcase": ["assert find_most_common_element([1,2,2,3,3,3]) == 3", "assert find_most_common_element(['a','b','a','c','a']) == 'a'", "assert find_most_common_element([5,5,5,5,6,6,7,8,9,9,9,9,9]) == 9"]}
{"seq_id": 1456560101, "instruction": "Write a function to find the number of days between two dates.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\n\ndef date_difference(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return abs(delta.days)\n```", "code": "from datetime import datetime\n\ndef date_difference(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return abs(delta.days)", "entry_point": "date_difference", "testcase": ["assert date_difference('2021-05-15', '2021-05-20')==5", "assert date_difference('2020-02-01', '2020-02-29')==28", "assert date_difference('2021-01-01', '2021-12-31')==364"]}
{"seq_id": 25608442999, "instruction": "Write a function to find the third largest number in a list.", "output": "Here is the code to solve this problem: \n```python\ndef third_largest(numbers):\n  if len(numbers) < 3:\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort(reverse=True)\n  return uniq_items[2] if len(uniq_items) >= 3 else None\n```", "code": "def third_largest(numbers):\n  if len(numbers) < 3:\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort(reverse=True)\n  return uniq_items[2] if len(uniq_items) >= 3 else None", "entry_point": "third_largest", "testcase": ["assert third_largest([10, 20, 20, 30, 40])==20", "assert third_largest([2, 3])==None", "assert third_largest([1])==None", "assert third_largest([5, 5, 5, 5, 5, 5])==None"]}
{"seq_id": 28849598083, "instruction": "Write a Python function to determine if a given graph is a valid tree. A graph is a tree if it is connected and has no cycles. The graph is represented as an adjacency list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef is_valid_tree(graph):\n    \"\"\"\n    T: O(V + E) and S: O(V)\n    \"\"\"\n    visited = [False] * len(graph)\n    parent = [-1] * len(graph)\n    \n    def has_cycle(node):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                parent[neighbor] = node\n                if has_cycle(neighbor):\n                    return True\n            elif parent[node] != neighbor:\n                return True\n        return False\n    \n    if len(graph) > 1 and has_cycle(0):\n        return False\n    \n    for node in range(len(graph)):\n        if not visited[node]:\n            return False\n    return True\n```", "code": "from collections import defaultdict\n\ndef is_valid_tree(graph):\n    \"\"\"\n    T: O(V + E) and S: O(V)\n    \"\"\"\n    visited = [False] * len(graph)\n    parent = [-1] * len(graph)\n    \n    def has_cycle(node):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                parent[neighbor] = node\n                if has_cycle(neighbor):\n                    return True\n            elif parent[node] != neighbor:\n                return True\n        return False\n    \n    if len(graph) > 1 and has_cycle(0):\n        return False\n    \n    for node in range(len(graph)):\n        if not visited[node]:\n            return False\n    return True", "entry_point": "is_valid_tree", "testcase": ["assert is_valid_tree([[1, 2], [0, 3], [0], [1]]) == True", "assert is_valid_tree([[1, 2], [0, 2], [0, 1]]) == False", "assert is_valid_tree([[1], [0, 2], [1]]) == True"]}
{"seq_id": 32547586533, "instruction": "Write a python function to calculate the Fibonacci number at a given position using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef Fibonacci(n):\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n```", "code": "def Fibonacci(n):\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)", "entry_point": "Fibonacci", "testcase": ["assert Fibonacci(0) == 0", "assert Fibonacci(6) == 8", "assert Fibonacci(10) == 55"]}
{"seq_id": 74895461902, "instruction": "Write a python function to rotate a matrix 90 degrees clockwise.", "output": "Here is the code to solve this problem: \n```python\ndef rotate(matrix):\n    return [[matrix[j][i] for j in reversed(range(len(matrix)))] for i in range(len(matrix[0]))]\n```", "code": "def rotate(matrix):\n    return [[matrix[j][i] for j in reversed(range(len(matrix)))] for i in range(len(matrix[0]))]", "entry_point": "rotate", "testcase": ["assert rotate([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == [[10,7,4,1],[11,8,5,2],[12,9,6,3]]", "assert rotate([[1,2],[3,4]]) == [[3,1],[4,2]]", "assert rotate([[1,2,3],[4,5,6],[7,8,9]]) == [[7,4,1],[8,5,2],[9,6,3]]"]}
{"seq_id": 42425611050, "instruction": "Write a python function to find the smallest integer whose square has exactly 'n' digits.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef smallest_integer_square(n):\n    # The number of digits in x^2 is given by floor(log10(x^2)) + 1 \n    # which is equal to 2*floor(log10(x)) + 1. We need to find the \n    # smallest x such that 2*floor(log10(x)) + 1 = n.\n    # So, we solve the equation for x.\n    x = 10 ** ((n - 1) / 2)\n    return math.ceil(x)\n\nprint(smallest_integer_square(1)) # Should print 1\nprint(smallest_integer_square(2)) # Should print 4\nprint(smallest_integer_square(3)) # Should print 10\n```", "code": "import math\n\ndef smallest_integer_square(n):\n    # The number of digits in x^2 is given by floor(log10(x^2)) + 1 \n    # which is equal to 2*floor(log10(x)) + 1. We need to find the \n    # smallest x such that 2*floor(log10(x)) + 1 = n.\n    # So, we solve the equation for x.\n    x = 10 ** ((n - 1) / 2)\n    return math.ceil(x)\n\nprint(smallest_integer_square(1)) # Should print 1\nprint(smallest_integer_square(2)) # Should print 4\nprint(smallest_integer_square(3)) # Should print 10", "entry_point": "smallest_integer_square", "testcase": ["assert smallest_integer_square(2) == 4", "assert smallest_integer_square(3) == 10", "assert smallest_integer_square(1) == 1"]}
{"seq_id": 24877755224, "instruction": "Write a function in Python to find the sum of the digits of a given number until the sum becomes a single digit.", "output": "Here is the code to solve this problem: \n```python\ndef single_digit_sum(n):\n    while n >= 10:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        n = sum\n    return n\n```", "code": "def single_digit_sum(n):\n    while n >= 10:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        n = sum\n    return n", "entry_point": "single_digit_sum", "testcase": ["assert single_digit_sum(9999)==9", "assert single_digit_sum(123)==6", "assert single_digit_sum(38)==2"]}
{"seq_id": 28485784738, "instruction": "Write a function to find the largest rectangle containing only 1's in a binary matrix.", "output": "Here is the code to solve this problem: \n```python\ndef largest_rectangle(matrix):\n    if not matrix:\n        return 0\n\n    m, n = len(matrix), len(matrix[0])\n    heights = [0] * (n + 1)\n    max_area = 0\n\n    for i in range(m):\n        for j in range(n):\n            heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0\n\n        stack = [-1]\n        for k in range(n + 1):\n            while heights[k] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = k - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(k)\n\n    return max_area\n```", "code": "def largest_rectangle(matrix):\n    if not matrix:\n        return 0\n\n    m, n = len(matrix), len(matrix[0])\n    heights = [0] * (n + 1)\n    max_area = 0\n\n    for i in range(m):\n        for j in range(n):\n            heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0\n\n        stack = [-1]\n        for k in range(n + 1):\n            while heights[k] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = k - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(k)\n\n    return max_area", "entry_point": "largest_rectangle", "testcase": ["assert largest_rectangle([[1]]) == 1", "assert largest_rectangle([[1,1,1],[1,1,1],[1,1,1]]) == 9", "assert largest_rectangle([[0,1,1,0], [1,1,1,1], [1,1,1,1], [1,1,0,0]]) == 8"]}
{"seq_id": 19388796458, "instruction": "Write a python function to check if a given string is an anagram of another string. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as cinema, formed from iceman.", "output": "Here is the code to solve this problem: \n```python\ndef is_anagram(str1,str2):\n    if(sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False\n```", "code": "def is_anagram(str1,str2):\n    if(sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False", "entry_point": "is_anagram", "testcase": ["assert is_anagram('listen','silent') == True", "assert is_anagram('triangle','integral') == True", "assert is_anagram('cinema','iceman') == True", "assert is_anagram('apple','peach') == False"]}
{"seq_id": 43383106232, "instruction": "Write a function to find the longest common substring between two given strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n```", "code": "def longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]", "entry_point": "longest_common_substring", "testcase": ["assert longest_common_substring(\"abcdxyz\", \"xyzabcd\") == \"abcd\"", "assert longest_common_substring(\"aaaa\", \"aa\") == \"aa\"", "assert longest_common_substring(\"abcdef\", \"abc\") == \"abc\""]}
{"seq_id": 22049601671, "instruction": "Given an array of integers and a target value, write a function to find the number of pairs that add up to the target value.", "output": "Here is the code to solve this problem: \n```python\ndef find_pairs(arr, target):\n    freq = {}\n    count = 0\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in freq:\n            count += freq[complement]\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    return count\n```", "code": "def find_pairs(arr, target):\n    freq = {}\n    count = 0\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in freq:\n            count += freq[complement]\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    return count", "entry_point": "find_pairs", "testcase": ["assert find_pairs([1, 3, 2, 2], 4) == 2", "assert find_pairs([1, 5, 7, -1], 6) == 2", "assert find_pairs([1, 1, 1, 1], 2) == 6"]}
{"seq_id": 27216108128, "instruction": "Write a function that takes an integer n and returns a list of all possible binary numbers of length n that have no consecutive 1s.", "output": "Here is the code to solve this problem: \n```python\ndef no_consecutive_ones(n):\n    def backtrack(s):\n        if len(s) == n:\n            result.append(s)\n            return\n        if s[-1] == '0':\n            backtrack(s + '0')\n            backtrack(s + '1')\n        else:\n            backtrack(s + '0')\n\n    result = []\n    if n == 0:\n        return result\n    backtrack('0')\n    backtrack('1')\n    return result\n```", "code": "def no_consecutive_ones(n):\n    def backtrack(s):\n        if len(s) == n:\n            result.append(s)\n            return\n        if s[-1] == '0':\n            backtrack(s + '0')\n            backtrack(s + '1')\n        else:\n            backtrack(s + '0')\n\n    result = []\n    if n == 0:\n        return result\n    backtrack('0')\n    backtrack('1')\n    return result", "entry_point": "no_consecutive_ones", "testcase": ["assert no_consecutive_ones(1) == ['0', '1']", "assert no_consecutive_ones(2) == ['00', '01', '10']", "assert no_consecutive_ones(3) == ['000', '001', '010', '100', '101']"]}
{"seq_id": 24848779835, "instruction": "Write a function to check whether a given number is an Armstrong number or not. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.", "output": "Here is the code to solve this problem: \n```python\ndef check_armstrong(num):\n    # convert number to string to get the length (number of digits)\n    num_str = str(num)\n    num_len = len(num_str)\n    \n    # calculate the sum of each digit raised to the power of the length of the number\n    sum_of_digits = sum([int(digit) ** num_len for digit in num_str])\n    \n    # check if the sum is equal to the original number\n    return sum_of_digits == num\n```", "code": "def check_armstrong(num):\n    # convert number to string to get the length (number of digits)\n    num_str = str(num)\n    num_len = len(num_str)\n    \n    # calculate the sum of each digit raised to the power of the length of the number\n    sum_of_digits = sum([int(digit) ** num_len for digit in num_str])\n    \n    # check if the sum is equal to the original number\n    return sum_of_digits == num", "entry_point": "check_armstrong", "testcase": ["assert check_armstrong(153) == True", "assert check_armstrong(9475) == False", "assert check_armstrong(370) == True", "assert check_armstrong(123) == False", "assert check_armstrong(9474) == True"]}
{"seq_id": 30548369151, "instruction": "Implement a function that reverses the order of words in a given sentence, maintaining the same order of characters within each word.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_sentence_words(sentence):\n  words = sentence.split(\" \")\n  reversed_sentence = \" \".join(words[::-1])\n  return reversed_sentence\n```", "code": "def reverse_sentence_words(sentence):\n  words = sentence.split(\" \")\n  reversed_sentence = \" \".join(words[::-1])\n  return reversed_sentence", "entry_point": "reverse_sentence_words", "testcase": ["assert reverse_sentence_words(\"I love coding\") == \"coding love I\"", "assert reverse_sentence_words(\"Hello World\") == \"World Hello\"", "assert reverse_sentence_words(\"Python is awesome\") == \"awesome is Python\""]}
{"seq_id": 10793914792, "instruction": "Write a python function to find the number of ways to express 'n' as a sum of 1, 3, and 4.", "output": "Here is the code to solve this problem: \n```python\ndef ways_to_sum(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return ways_to_sum(n-1) + ways_to_sum(n-3) + ways_to_sum(n-4)\n\n# This function can be optimized using dynamic programming to avoid recalculating the same values multiple times.\n# Since the above solution has overlapping sub-problems and optimal substructure, we can use dynamic programming.\ndef ways_to_sum_dp(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i-1]\n        if i >= 3:\n            dp[i] += dp[i-3]\n        if i >= 4:\n            dp[i] += dp[i-4]\n    return dp[n]\n```", "code": "def ways_to_sum(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return ways_to_sum(n-1) + ways_to_sum(n-3) + ways_to_sum(n-4)\n\n# This function can be optimized using dynamic programming to avoid recalculating the same values multiple times.\n# Since the above solution has overlapping sub-problems and optimal substructure, we can use dynamic programming.\ndef ways_to_sum_dp(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i-1]\n        if i >= 3:\n            dp[i] += dp[i-3]\n        if i >= 4:\n            dp[i] += dp[i-4]\n    return dp[n]", "entry_point": "ways_to_sum", "testcase": ["assert ways_to_sum(2) == 1", "assert ways_to_sum(1) == 1", "assert ways_to_sum(3) == 2"]}
{"seq_id": 43917084854, "instruction": "Write a function to find the length of the longest consecutive elements sequence in an unsorted array of integers.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consecutive_seq(nums):\n  if not nums:\n    return 0\n\n  nums = set(nums)\n  longest_streak = 0\n\n  for num in nums:\n    if num - 1 not in nums:\n      current_num = num\n      current_streak = 1\n\n      while current_num + 1 in nums:\n        current_num += 1\n        current_streak += 1\n\n      longest_streak = max(longest_streak, current_streak)\n\n  return longest_streak\n```", "code": "def longest_consecutive_seq(nums):\n  if not nums:\n    return 0\n\n  nums = set(nums)\n  longest_streak = 0\n\n  for num in nums:\n    if num - 1 not in nums:\n      current_num = num\n      current_streak = 1\n\n      while current_num + 1 in nums:\n        current_num += 1\n        current_streak += 1\n\n      longest_streak = max(longest_streak, current_streak)\n\n  return longest_streak", "entry_point": "longest_consecutive_seq", "testcase": ["assert longest_consecutive_seq([1,2,0,1])==3", "assert longest_consecutive_seq([0,3,7,2,5,8,4,6,0,1])==9", "assert longest_consecutive_seq([100, 4, 200, 1, 3, 2])==4"]}
{"seq_id": 16779578104, "instruction": "Write a function to convert a decimal number to Roman numeral format.", "output": "Here is the code to solve this problem: \n```python\ndef decimal_to_roman(decimal):\n    roman_numerals = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    result = []\n    for value, symbol in roman_numerals:\n        while decimal >= value:\n            decimal -= value\n            result.append(symbol)\n    return ''.join(result)\n```", "code": "def decimal_to_roman(decimal):\n    roman_numerals = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    result = []\n    for value, symbol in roman_numerals:\n        while decimal >= value:\n            decimal -= value\n            result.append(symbol)\n    return ''.join(result)", "entry_point": "decimal_to_roman", "testcase": ["assert decimal_to_roman(23) == 'XXIII'", "assert decimal_to_roman(94) == 'XCIV'", "assert decimal_to_roman(3999) == 'MMMCMXCIX'"]}
{"seq_id": 29042255282, "instruction": "Write a function to find the smallest missing positive integer from a given unsorted array.", "output": "Here is the code to solve this problem: \n```python\ndef find_smallest_missing(arr):\n    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1\n```", "code": "def find_smallest_missing(arr):\n    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1", "entry_point": "find_smallest_missing", "testcase": ["assert find_smallest_missing([7, 8, 9, 11, 12]) == 1", "assert find_smallest_missing([1, 2, 0]) == 3", "assert find_smallest_missing([3, 4, -1, 1]) == 2"]}
{"seq_id": 3892292897, "instruction": "Write a function that takes a list of integers and returns a new list with the elements sorted in ascending order, but with a twist. The function should sort the list in a way that the smallest number is first, then the largest, followed by the second smallest, second largest, and so on.", "output": "Here is the code to solve this problem: \n```python\ndef alternate_sort(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result\n```", "code": "def alternate_sort(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "entry_point": "alternate_sort", "testcase": ["assert alternate_sort([]) == []", "assert alternate_sort([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert alternate_sort([10, 2, 8, 6, 4]) == [2, 10, 4, 8, 6]", "assert alternate_sort([5, 5, 5, 5]) == [5, 5, 5, 5]"]}
{"seq_id": 13298994060, "instruction": "Write a python function to find the maximum sum of any contiguous subarray within a given one-dimensional array.", "output": "Here is the code to solve this problem: \n```python\ndef max_contiguous_subarray_sum(arr):\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def max_contiguous_subarray_sum(arr):\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "max_contiguous_subarray_sum", "testcase": ["assert max_contiguous_subarray_sum([34, -50, 42, 14, -5, 86]) == 137", "assert max_contiguous_subarray_sum([1, 2, 3, -2, 5]) == 9", "assert max_contiguous_subarray_sum([-5, -1, -8, -9]) == -1"]}
{"seq_id": 22915374140, "instruction": "Write a python function to find the largest continuous sum within a list, and also return the start and end indices of the subarray contributing to this sum.", "output": "Here is the code to solve this problem: \n```python\ndef largest_continuous_sum(arr, index):\n    if not arr:\n        return 0, None, None\n\n    max_sum = current_sum = arr[0]\n    start = end = 0\n    temp_start = 0\n\n    for i in range(1, len(arr)):\n        if current_sum + arr[i] > arr[i]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n            temp_start = i\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = temp_start\n            end = i\n\n    return max_sum, start, end\n```", "code": "def largest_continuous_sum(arr, index):\n    if not arr:\n        return 0, None, None\n\n    max_sum = current_sum = arr[0]\n    start = end = 0\n    temp_start = 0\n\n    for i in range(1, len(arr)):\n        if current_sum + arr[i] > arr[i]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n            temp_start = i\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = temp_start\n            end = i\n\n    return max_sum, start, end", "entry_point": "largest_continuous_sum", "testcase": ["assert largest_continuous_sum([1, 2, -1, 3, 4, 10, 10, -10, -1], None) == (29, 0, 6)", "assert largest_continuous_sum([-2, 11, -4, 13, -5, 2], None) == (20, 1, 3)", "assert largest_continuous_sum([-1, -2, -3, -4], None) == (-1, 0, 0)", "assert largest_continuous_sum([1, 2, 3, 4, -10], None) == (10, 0, 3)"]}
{"seq_id": 75151899145, "instruction": "Write a python function to find the largest subarray sum in a given array.", "output": "Here is the code to solve this problem: \n```python\ndef largestSubarraySum(nums):\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def largestSubarraySum(nums):\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "largestSubarraySum", "testcase": ["assert largestSubarraySum([-2,1,-3,4,-1,2,1,-5,4]) == 6", "assert largestSubarraySum([5,4,-1,7,8]) == 23", "assert largestSubarraySum([1]) == 1"]}
{"seq_id": 74620783686, "instruction": "Write a function to create a dictionary from two lists. The first list contains keys and the second list contains values. If the lists have different lengths, fill the remaining dictionary entries with a default value.", "output": "Here is the code to solve this problem: \n```python\ndef create_dict(keys, values, default=None):\n    dictionary = {}\n    for i, key in enumerate(keys):\n        if i < len(values):\n            dictionary[key] = values[i]\n        else:\n            dictionary[key] = default\n    return dictionary\n```", "code": "def create_dict(keys, values, default=None):\n    dictionary = {}\n    for i, key in enumerate(keys):\n        if i < len(values):\n            dictionary[key] = values[i]\n        else:\n            dictionary[key] = default\n    return dictionary", "entry_point": "create_dict", "testcase": ["assert create_dict(['a', 'b'], [1, 2, 3]) == {'a': 1, 'b': 2}", "assert create_dict(['a', 'b', 'c'], [1, 2, 3]) == {'a': 1, 'b': 2, 'c': 3}", "assert create_dict(['a', 'b', 'c'], [1, 2]) == {'a': 1, 'b': 2, 'c': None}"]}
{"seq_id": 71653664528, "instruction": "Write a function to display the number of days in the given month and year, taking into account leap years.", "output": "Here is the code to solve this problem: \n```python\ndef month_days(month, year):\n    if month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n            return 29\n        else:\n            return 28\n    else:\n        return 31\n```", "code": "def month_days(month, year):\n    if month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n            return 29\n        else:\n            return 28\n    else:\n        return 31", "entry_point": "month_days", "testcase": ["assert month_days(2, 2020) == 29", "assert month_days(4, 2021) == 30", "assert month_days(2, 2019) == 28"]}
{"seq_id": 2521817367, "instruction": "Write a python function to generate a list of Fibonacci numbers up to a given limit.", "output": "Here is the code to solve this problem: \n```python\ndef fib_list(limit):\n    fib_numbers = [0, 1]\n    while True:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        if next_fib > limit:\n            break\n        fib_numbers.append(next_fib)\n    return fib_numbers\n```", "code": "def fib_list(limit):\n    fib_numbers = [0, 1]\n    while True:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        if next_fib > limit:\n            break\n        fib_numbers.append(next_fib)\n    return fib_numbers", "entry_point": "fib_list", "testcase": ["assert fib_list(20) == [0, 1, 1, 2, 3, 5, 8, 13]", "assert fib_list(10) == [0, 1, 1, 2, 3, 5, 8]", "assert fib_list(50) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"]}
{"seq_id": 11136715118, "instruction": "Write a function to find the number of distinct subsequences of a given string.\n\nA subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters.\n\nFor example, \"ace\" is a subsequence of \"abcde\".", "output": "Here is the code to solve this problem: \n```python\ndef num_distinct_subsequences(s, t):\n    dp = [0] * (len(t) + 1)\n    dp[0] = 1\n    s_ptr, t_ptr = 0, 0\n    while s_ptr < len(s):\n        for t_ptr in range(len(t) - 1, -1, -1):\n            if s[s_ptr] == t[t_ptr]:\n                dp[t_ptr + 1] += dp[t_ptr]\n        s_ptr += 1\n    return dp[len(t)]\n```", "code": "def num_distinct_subsequences(s, t):\n    dp = [0] * (len(t) + 1)\n    dp[0] = 1\n    s_ptr, t_ptr = 0, 0\n    while s_ptr < len(s):\n        for t_ptr in range(len(t) - 1, -1, -1):\n            if s[s_ptr] == t[t_ptr]:\n                dp[t_ptr + 1] += dp[t_ptr]\n        s_ptr += 1\n    return dp[len(t)]", "entry_point": "num_distinct_subsequences", "testcase": ["assert num_distinct_subsequences(\"aaaaa\", \"a\") == 5", "assert num_distinct_subsequences(\"babgbag\", \"bag\") == 5", "assert num_distinct_subsequences(\"rabbbit\", \"rabbit\") == 3"]}
{"seq_id": 15907265008, "instruction": "Write a function to find the minimum number of perfect square numbers which sum to 'n'.", "output": "Here is the code to solve this problem: \n```python\ndef find_min_squares(n: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n```", "code": "def find_min_squares(n: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]", "entry_point": "find_min_squares", "testcase": ["assert find_min_squares(12) == 3", "assert find_min_squares(13) == 2", "assert find_min_squares(100) == 1"]}
{"seq_id": 18271721758, "instruction": "Write a function to find the number of times a given word appears in a list of strings, considering case sensitivity.", "output": "Here is the code to solve this problem: \n```python\ndef count_word(words, word):\n    return words.count(word)\n```", "code": "def count_word(words, word):\n    return words.count(word)", "entry_point": "count_word", "testcase": ["assert count_word([\"apple\", \"banana\", \"Apple\", \"orange\"], \"apple\") == 1", "assert count_word([\"Python\", \"python\", \"PYTHON\", \"Programming\"], \"Python\") == 1", "assert count_word([\"hello\", \"world\", \"hello\", \"hello\"], \"hello\") == 3"]}
{"seq_id": 36404138309, "instruction": "Write a python function to find the length of the longest subsequence in a given array such that all elements of the subsequence are sorted in strictly increasing order.", "output": "Here is the code to solve this problem: \n```python\ndef find_LongestIncreasingSubsequence(arr,n): \r\n    dp = [1]*n \r\n    for i in range(1,n): \r\n        for j in range(i): \r\n            if arr[i] > arr[j] and dp[i]< dp[j] + 1 : \r\n                dp[i] = dp[j]+1\r\n    return max(dp)\n```", "code": "def find_LongestIncreasingSubsequence(arr,n): \r\n    dp = [1]*n \r\n    for i in range(1,n): \r\n        for j in range(i): \r\n            if arr[i] > arr[j] and dp[i]< dp[j] + 1 : \r\n                dp[i] = dp[j]+1\r\n    return max(dp)", "entry_point": "find_LongestIncreasingSubsequence", "testcase": ["assert find_LongestIncreasingSubsequence([10, 9, 2, 5, 3, 7, 101, 18],8) == 4", "assert find_LongestIncreasingSubsequence([0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15],16) == 6", "assert find_LongestIncreasingSubsequence([0,1,0,3,2,3],6) == 4"]}
{"seq_id": 23681422934, "instruction": "Write a function to find the largest sum of a contiguous subarray within a one-dimensional array of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_sum(nums):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def largest_sum(nums):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "largest_sum", "testcase": ["assert largest_sum([1])==1", "assert largest_sum([-2,1,-3,4,-1,2,1,-5,4])==6", "assert largest_sum([5,4,-1,7,8])==23"]}
{"seq_id": 26132210268, "instruction": "Write a Python function to find the least common multiple (LCM) of two numbers.", "output": "Here is the code to solve this problem: \n```python\ndef gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\ndef least_common_multiple(x, y):\n   lcm = (x*y)//gcd(x,y)\n   return lcm\n```", "code": "def gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n\ndef least_common_multiple(x, y):\n   lcm = (x*y)//gcd(x,y)\n   return lcm", "entry_point": "least_common_multiple", "testcase": ["assert least_common_multiple(21, 6) == 42", "assert least_common_multiple(4, 6) == 12", "assert least_common_multiple(5, 7) == 35"]}
{"seq_id": 28173523289, "instruction": "Write a function to convert a complex number from the form (a + bi) to its polar form (r, \u03b8). The polar form is represented as a tuple of two values, where r is the magnitude (radius) and \u03b8 is the angle in radians.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef complex_to_polar(real, imag):\n    r = math.sqrt(real ** 2 + imag ** 2)\n    theta = math.atan2(imag, real)\n    return r, theta\n```", "code": "import math\n\ndef complex_to_polar(real, imag):\n    r = math.sqrt(real ** 2 + imag ** 2)\n    theta = math.atan2(imag, real)\n    return r, theta", "entry_point": "complex_to_polar", "testcase": ["assert complex_to_polar(1, 1) == (1.4142135623730951, 0.7853981633974483)", "assert complex_to_polar(-1, 1) == (1.4142135623730951, 2.356194490192345)", "assert complex_to_polar(0, 1) == (1.0, 1.5707963267948966)"]}
{"seq_id": 20274183141, "instruction": "Write a python function to find the maximum XOR value of two numbers in a given array.", "output": "Here is the code to solve this problem: \n```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        root = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in root.children:\n                root.children[bit] = TrieNode()\n            root = root.children[bit]\n\n    def query(self, num):\n        root = self.root\n        xor = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if 1 - bit in root.children:\n                xor |= (1 << i)\n                root = root.children[1 - bit]\n            else:\n                root = root.children[bit]\n        return xor\n\ndef find_max_xor(nums):\n    trie = Trie()\n    max_xor = 0\n    for num in nums:\n        trie.insert(num)\n        max_xor = max(max_xor, trie.query(num))\n    return max_xor\n```", "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, num):\n        root = self.root\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in root.children:\n                root.children[bit] = TrieNode()\n            root = root.children[bit]\n\n    def query(self, num):\n        root = self.root\n        xor = 0\n        for i in range(31, -1, -1):\n            bit = (num >> i) & 1\n            if 1 - bit in root.children:\n                xor |= (1 << i)\n                root = root.children[1 - bit]\n            else:\n                root = root.children[bit]\n        return xor\n\ndef find_max_xor(nums):\n    trie = Trie()\n    max_xor = 0\n    for num in nums:\n        trie.insert(num)\n        max_xor = max(max_xor, trie.query(num))\n    return max_xor", "entry_point": "find_max_xor", "testcase": ["assert find_max_xor([0]) == 0", "assert find_max_xor([3, 10, 5, 25, 2, 8]) == 28", "assert find_max_xor([2, 4]) == 6"]}
{"seq_id": 6203700740, "instruction": "Write a function to find the number of islands in a given grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.", "output": "Here is the code to solve this problem: \n```python\ndef count_islands(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                count += 1\n                grid[i][j] = 0\n                stack = [(i, j)]\n                while stack:\n                    x, y = stack.pop()\n                    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1:\n                            stack.append((nx, ny))\n                            grid[nx][ny] = 0\n    return count\n```", "code": "def count_islands(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                count += 1\n                grid[i][j] = 0\n                stack = [(i, j)]\n                while stack:\n                    x, y = stack.pop()\n                    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1:\n                            stack.append((nx, ny))\n                            grid[nx][ny] = 0\n    return count", "entry_point": "count_islands", "testcase": ["assert count_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 3", "assert count_islands([[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]]) == 1", "assert count_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,1,0],[0,0,0,1,1]]) == 2"]}
{"seq_id": 20101939649, "instruction": "Write a python function that takes a positive integer and returns the number of digits in the integer.", "output": "Here is the code to solve this problem: \n```python\ndef count_digits(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count\n```", "code": "def count_digits(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n:\n        n //= 10\n        count += 1\n    return count", "entry_point": "count_digits", "testcase": ["assert count_digits(123) == 3", "assert count_digits(9876543210) == 10", "assert count_digits(12345) == 5"]}
{"seq_id": 8519560652, "instruction": "Write a function to simulate a biased coin flip. The function should take in the probability of landing heads (a float between 0 and 1) and return 'H' for heads or 'T' for tails based on the given probability.", "output": "Here is the code to solve this problem: \n```python\nimport random\n\ndef biased_coin_flip(probability_heads):\n    return 'H' if random.random() < probability_heads else 'T'\n```", "code": "import random\n\ndef biased_coin_flip(probability_heads):\n    return 'H' if random.random() < probability_heads else 'T'", "entry_point": "biased_coin_flip", "testcase": ["assert biased_coin_flip(0.3) in ['H', 'T']", "assert biased_coin_flip(0.5) in ['H', 'T']", "assert biased_coin_flip(0.7) in ['H', 'T']"]}
{"seq_id": 30883005126, "instruction": "Write a python function to check whether given string is a valid IPv4 address or not.", "output": "Here is the code to solve this problem: \n```python\ndef check_ipv4(ip):\n    nums = ip.split('.')\n    if len(nums) != 4:\n        return False\n    for x in nums:\n        if not x.isdigit():\n            return False\n        i = int(x)\n        if i < 0 or i > 255:\n            return False\n        if len(x) > 1 and x[0] == '0':\n            return False\n    return True\n```", "code": "def check_ipv4(ip):\n    nums = ip.split('.')\n    if len(nums) != 4:\n        return False\n    for x in nums:\n        if not x.isdigit():\n            return False\n        i = int(x)\n        if i < 0 or i > 255:\n            return False\n        if len(x) > 1 and x[0] == '0':\n            return False\n    return True", "entry_point": "check_ipv4", "testcase": ["assert check_ipv4(\"127.0.0.1\") == True", "assert check_ipv4(\"192.168.1.1\") == True", "assert check_ipv4(\"192.168.1.256\") == False", "assert check_ipv4(\"256.256.256.256\") == False"]}
{"seq_id": 71759412595, "instruction": "Write a function that calculates the number of arithmetic slices in a given list of integers. An arithmetic slice is a subsequence of at least three numbers where the difference between consecutive elements is constant.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\nfrom collections import defaultdict\n\ndef count_arithmetic_slices(nums: List[int]) -> int:\n    N = len(nums)\n    if N < 3:\n        return 0\n\n    dp = [defaultdict(int) for _ in range(N)]\n    result = 0\n\n    for i in range(N):\n        for j in range(i):\n            diff = nums[i] - nums[j]\n            dp[i][diff] += dp[j][diff] + 1\n            result += dp[j][diff]\n\n    return result\n```", "code": "from typing import List\nfrom collections import defaultdict\n\ndef count_arithmetic_slices(nums: List[int]) -> int:\n    N = len(nums)\n    if N < 3:\n        return 0\n\n    dp = [defaultdict(int) for _ in range(N)]\n    result = 0\n\n    for i in range(N):\n        for j in range(i):\n            diff = nums[i] - nums[j]\n            dp[i][diff] += dp[j][diff] + 1\n            result += dp[j][diff]\n\n    return result", "entry_point": "count_arithmetic_slices", "testcase": ["assert count_arithmetic_slices([7, 7, 7, 7, 7]) == 16", "assert count_arithmetic_slices([2, 4, 6, 8, 10]) == 7", "assert count_arithmetic_slices([1]) == 0", "assert count_arithmetic_slices([1, 2, 3, 4]) == 3"]}
{"seq_id": 70270844827, "instruction": "Write a python function to find the maximum number of non-overlapping subarrays with sum equals target.", "output": "Here is the code to solve this problem: \n```python\ndef maxNonOverlapping( nums, target):\n    n = len(nums)\n    prefix = [0]*(n+1)\n    for i in range(n):\n        prefix[i+1] = prefix[i] + nums[i]\n\n    seen = {0:0}\n    res = 0\n    for i in range(1, n+1):\n        if prefix[i] - target in seen:\n            res += 1\n            seen = {}\n        seen[prefix[i]] = i\n    return res\n```", "code": "def maxNonOverlapping( nums, target):\n    n = len(nums)\n    prefix = [0]*(n+1)\n    for i in range(n):\n        prefix[i+1] = prefix[i] + nums[i]\n\n    seen = {0:0}\n    res = 0\n    for i in range(1, n+1):\n        if prefix[i] - target in seen:\n            res += 1\n            seen = {}\n        seen[prefix[i]] = i\n    return res", "entry_point": "maxNonOverlapping", "testcase": ["assert maxNonOverlapping([-1, 3, 5, 1, 4, 2, -9], 6) == 2", "assert maxNonOverlapping([1, 1, 1, 1, 1], 2) == 2", "assert maxNonOverlapping([1, 2, 1, 2, 1], 3) == 2"]}
{"seq_id": 40320534564, "instruction": "Write a python function to simulate a traffic light system. The traffic light has two states: green and red. The traffic light stays green for a certain amount of time, then switches to red for a certain amount of time, and then back to green again. The function should return the state of the traffic light at a certain time 't'.", "output": "Here is the code to solve this problem: \n```python\ndef traffic_light(t):\n    green = 2 # green light duration\n    red = 3 # red light duration\n\n    if t % (green + red) < green:\n        return \"green\"\n    else:\n        return \"red\"\n```", "code": "def traffic_light(t):\n    green = 2 # green light duration\n    red = 3 # red light duration\n\n    if t % (green + red) < green:\n        return \"green\"\n    else:\n        return \"red\"", "entry_point": "traffic_light", "testcase": ["assert traffic_light(5) == \"green\"", "assert traffic_light(3) == \"red\"", "assert traffic_light(1) == \"green\""]}
{"seq_id": 44396179893, "instruction": "Write a function to find the number of ways to make up a certain amount (n) using combinations of the given coins. Coins can be used any number of times.", "output": "Here is the code to solve this problem: \n```python\ndef count_combinations(n, coins):\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for coin in coins:\n        for i in range(coin, n + 1):\n            ways[i] += ways[i - coin]\n    return ways[n]\n```", "code": "def count_combinations(n, coins):\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for coin in coins:\n        for i in range(coin, n + 1):\n            ways[i] += ways[i - coin]\n    return ways[n]", "entry_point": "count_combinations", "testcase": ["assert count_combinations(5, [1, 2, 5]) == 4", "assert count_combinations(3, [2]) == 0", "assert count_combinations(10, [10]) == 1"]}
{"seq_id": 14658946272, "instruction": "Write a function to find the n'th fibonacci number using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef get_fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return get_fibonacci(n-1) + get_fibonacci(n-2)\n```", "code": "def get_fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return get_fibonacci(n-1) + get_fibonacci(n-2)", "entry_point": "get_fibonacci", "testcase": ["assert get_fibonacci(12) == 144", "assert get_fibonacci(5) == 5", "assert get_fibonacci(9) == 34"]}
{"seq_id": 44369861544, "instruction": "Write a python function to find the largest rectangle containing only 1's in a binary matrix.", "output": "Here is the code to solve this problem: \n```python\ndef largestRectangle(matrix):\n    if not matrix: return 0\n    rows, cols = len(matrix), len(matrix[0])\n    left = [0] * cols  # initialize left as the leftmost boundary possible\n    right = [cols] * cols  # initialize right as the rightmost boundary possible\n    height = [0] * cols\n    maxarea = 0\n\n    for i in range(rows):\n        cur_left, cur_right = 0, cols\n        # update height\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                height[j] += 1\n            else:\n                height[j] = 0\n        # update left\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                left[j] = max(left[j], cur_left)\n            else:\n                left[j] = 0\n                cur_left = j + 1\n        # update right\n        for j in range(cols - 1, -1, -1):\n            if matrix[i][j] == 1:\n                right[j] = min(right[j], cur_right)\n            else:\n                right[j] = cols\n                cur_right = j\n        # update area\n        for j in range(cols):\n            maxarea = max(maxarea, height[j] * (right[j] - left[j]))\n    return maxarea\n```", "code": "def largestRectangle(matrix):\n    if not matrix: return 0\n    rows, cols = len(matrix), len(matrix[0])\n    left = [0] * cols  # initialize left as the leftmost boundary possible\n    right = [cols] * cols  # initialize right as the rightmost boundary possible\n    height = [0] * cols\n    maxarea = 0\n\n    for i in range(rows):\n        cur_left, cur_right = 0, cols\n        # update height\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                height[j] += 1\n            else:\n                height[j] = 0\n        # update left\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                left[j] = max(left[j], cur_left)\n            else:\n                left[j] = 0\n                cur_left = j + 1\n        # update right\n        for j in range(cols - 1, -1, -1):\n            if matrix[i][j] == 1:\n                right[j] = min(right[j], cur_right)\n            else:\n                right[j] = cols\n                cur_right = j\n        # update area\n        for j in range(cols):\n            maxarea = max(maxarea, height[j] * (right[j] - left[j]))\n    return maxarea", "entry_point": "largestRectangle", "testcase": ["assert largestRectangle([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert largestRectangle([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 9", "assert largestRectangle([[0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 0, 0]]) == 8"]}
{"seq_id": 59207366, "instruction": "Write a function to find the longest palindrome substring in the given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_palindrome_substring(s):\n    if not s:\n        return \"\"\n    n = len(s)\n    start = 0\n    max_len = 1\n    for i in range(n):\n        if i - max_len >= 1 and s[i - max_len - 1:i + 1] == s[i - max_len - 1:i + 1][::-1]:\n            start = i - max_len - 1\n            max_len += 2\n            continue\n        if i - max_len >= 0 and s[i - max_len:i + 1] == s[i - max_len:i + 1][::-1]:\n            start = i - max_len\n            max_len += 1\n    return s[start:start + max_len]\n```", "code": "def longest_palindrome_substring(s):\n    if not s:\n        return \"\"\n    n = len(s)\n    start = 0\n    max_len = 1\n    for i in range(n):\n        if i - max_len >= 1 and s[i - max_len - 1:i + 1] == s[i - max_len - 1:i + 1][::-1]:\n            start = i - max_len - 1\n            max_len += 2\n            continue\n        if i - max_len >= 0 and s[i - max_len:i + 1] == s[i - max_len:i + 1][::-1]:\n            start = i - max_len\n            max_len += 1\n    return s[start:start + max_len]", "entry_point": "longest_palindrome_substring", "testcase": ["assert longest_palindrome_substring(\"cbbd\") == \"bb\"", "assert longest_palindrome_substring(\"ac\") == \"a\"", "assert longest_palindrome_substring(\"a\") == \"a\"", "assert longest_palindrome_substring(\"babad\") == \"bab\""]}
{"seq_id": 31505057884, "instruction": "Write a python function to find the minimum number of steps required to reach a target point from the origin on an infinite number line. You can move either left or right with an increasing step size starting from 1.", "output": "Here is the code to solve this problem: \n```python\ndef min_steps(target: int) -> int:\n    target = abs(target)  # As the line is infinite in both directions, we can consider only positive direction by taking absolute value of target\n    steps = 0  # To store the minimum number of steps required\n    sum_of_steps = 0  # To store the sum of all steps taken\n    while True:\n        if sum_of_steps >= target and (sum_of_steps - target) % 2 == 0:  # Check if the current sum of steps is greater than or equal to target and the difference between sum and target is even\n            return steps  # Return the number of steps required\n        else:\n            steps += 1  # Increment the number of steps\n            sum_of_steps += steps  # Add the current step to the sum of steps\n```", "code": "def min_steps(target: int) -> int:\n    target = abs(target)  # As the line is infinite in both directions, we can consider only positive direction by taking absolute value of target\n    steps = 0  # To store the minimum number of steps required\n    sum_of_steps = 0  # To store the sum of all steps taken\n    while True:\n        if sum_of_steps >= target and (sum_of_steps - target) % 2 == 0:  # Check if the current sum of steps is greater than or equal to target and the difference between sum and target is even\n            return steps  # Return the number of steps required\n        else:\n            steps += 1  # Increment the number of steps\n            sum_of_steps += steps  # Add the current step to the sum of steps", "entry_point": "min_steps", "testcase": ["assert min_steps(3) == 2", "assert min_steps(2) == 3", "assert min_steps(4) == 3"]}
{"seq_id": 26910178253, "instruction": "Write a function that takes a string representing a mathematical equation and returns the solution of the equation. The equation can only contain the operations '+', '-', and the variable 'x' with its coefficient. If the equation has no solution, return \"No solution\". If the equation has infinite solutions, return \"Infinite solutions\". If the equation has a unique solution, ensure that the returned solution for 'x' is an integer.", "output": "Here is the code to solve this problem: \n```python\ndef solve_math_equation(equation):\n    def parse_expr(expr):\n        xvalue = 0\n        value = 0\n        set = 1\n        fset = 1\n        temp = 0\n        forx = 0\n        for s in expr:\n            if s == 'x':\n                if temp != 0:\n                    xvalue = xvalue + temp\n                    temp = 0\n                elif forx == 1:\n                    xvalue = xvalue + 0\n                else:\n                    xvalue = xvalue + fset * set * 1\n                forx = 0\n            elif '0' <= s <= '9':\n                temp = 10 * temp + set * fset * int(s)\n                forx = 1\n            else:\n                forx = 0\n                if temp != 0:\n                    value = value + temp\n                    temp = 0\n                if s == '+':\n                    fset = 1\n                elif s == '-':\n                    fset = -1\n                elif s == '=':\n                    set = -1\n                    fset = 1\n        if temp != 0:\n            value = value + temp\n        return xvalue, value\n\n    left, right = equation.split('=')\n    left_x, left_val = parse_expr(left)\n    right_x, right_val = parse_expr(right)\n    xvalue = left_x - right_x\n    value = right_val - left_val\n    if xvalue == 0:\n        if value == 0:\n            return \"Infinite solutions\"\n        else:\n            return \"No solution\"\n    else:\n        return 'x=' + str(-value // xvalue)\n```", "code": "def solve_math_equation(equation):\n    def parse_expr(expr):\n        xvalue = 0\n        value = 0\n        set = 1\n        fset = 1\n        temp = 0\n        forx = 0\n        for s in expr:\n            if s == 'x':\n                if temp != 0:\n                    xvalue = xvalue + temp\n                    temp = 0\n                elif forx == 1:\n                    xvalue = xvalue + 0\n                else:\n                    xvalue = xvalue + fset * set * 1\n                forx = 0\n            elif '0' <= s <= '9':\n                temp = 10 * temp + set * fset * int(s)\n                forx = 1\n            else:\n                forx = 0\n                if temp != 0:\n                    value = value + temp\n                    temp = 0\n                if s == '+':\n                    fset = 1\n                elif s == '-':\n                    fset = -1\n                elif s == '=':\n                    set = -1\n                    fset = 1\n        if temp != 0:\n            value = value + temp\n        return xvalue, value\n\n    left, right = equation.split('=')\n    left_x, left_val = parse_expr(left)\n    right_x, right_val = parse_expr(right)\n    xvalue = left_x - right_x\n    value = right_val - left_val\n    if xvalue == 0:\n        if value == 0:\n            return \"Infinite solutions\"\n        else:\n            return \"No solution\"\n    else:\n        return 'x=' + str(-value // xvalue)", "entry_point": "solve_math_equation", "testcase": ["assert solve_math_equation(\"x=x+2\") == 'No solution'", "assert solve_math_equation(\"x=x\") == 'Infinite solutions'", "assert solve_math_equation(\"2x=x\") == 'x=0'"]}
{"seq_id": 71045962528, "instruction": "Write a python function to find the most common word in a given string. The function should ignore case sensitivity and punctuation.", "output": "Here is the code to solve this problem: \n```python\nimport re\nfrom collections import Counter\n\ndef most_common_word(sentence):\n    # Remove punctuation and convert to lowercase\n    cleaned_sentence = re.sub(r'[^\\w\\s]', '', sentence).lower()\n    # Split the sentence into words\n    words = cleaned_sentence.split()\n    # Count the occurrences of each word\n    word_counts = Counter(words)\n    # Find the most common word\n    most_common = word_counts.most_common(1)[0][0]\n    return most_common\n```", "code": "import re\nfrom collections import Counter\n\ndef most_common_word(sentence):\n    # Remove punctuation and convert to lowercase\n    cleaned_sentence = re.sub(r'[^\\w\\s]', '', sentence).lower()\n    # Split the sentence into words\n    words = cleaned_sentence.split()\n    # Count the occurrences of each word\n    word_counts = Counter(words)\n    # Find the most common word\n    most_common = word_counts.most_common(1)[0][0]\n    return most_common", "entry_point": "most_common_word", "testcase": ["assert most_common_word(\"To be, or not to be, that is the question.\") == \"to\"", "assert most_common_word(\"Hello world! Hello, everyone.\") == \"hello\"", "assert most_common_word(\"The quick brown fox jumps over the lazy dog.\") == \"the\""]}
{"seq_id": 22140107452, "instruction": "Write a function to find the longest subarray of consecutive integers in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consecutive_subarray(nums):\n    num_set = set(nums)\n    longest_sequence = []\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_sequence = []\n            current_num = num\n            while current_num in num_set:\n                current_sequence.append(current_num)\n                current_num += 1\n            if len(current_sequence) > len(longest_sequence):\n                longest_sequence = current_sequence\n    return longest_sequence\n```", "code": "def longest_consecutive_subarray(nums):\n    num_set = set(nums)\n    longest_sequence = []\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_sequence = []\n            current_num = num\n            while current_num in num_set:\n                current_sequence.append(current_num)\n                current_num += 1\n            if len(current_sequence) > len(longest_sequence):\n                longest_sequence = current_sequence\n    return longest_sequence", "entry_point": "longest_consecutive_subarray", "testcase": ["assert longest_consecutive_subarray([5, 4, 2, 1, 3])==[1,2,3,4,5]", "assert longest_consecutive_subarray([1, 9, 3, 10, 4, 20, 2])==[1,2,3,4]", "assert longest_consecutive_subarray([100, 4, 200, 1, 3, 2])==[1,2,3,4]"]}
{"seq_id": 35063179628, "instruction": "Write a function to find the area of a circle given its radius.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef area_of_circle(radius):\n    return math.pi * radius ** 2\n```", "code": "import math\n\ndef area_of_circle(radius):\n    return math.pi * radius ** 2", "entry_point": "area_of_circle", "testcase": ["assert area_of_circle(5)==78.53981633974483", "assert area_of_circle(0)==0.0", "assert area_of_circle(10)==314.1592653589793"]}
{"seq_id": 13269645973, "instruction": "Write a function that takes a list of intervals and a new interval as input. The function should insert the new interval into the list, merging any overlapping intervals. The intervals are represented as tuples, where the first element is the start of the interval and the second element is the end. The function should return a list of merged intervals sorted by their start points.", "output": "Here is the code to solve this problem: \n```python\ndef insert_interval(intervals, new_interval):\n    \"\"\"\n    Inserts a new interval into a list of intervals, merging any overlapping intervals.\n    :param intervals: List of intervals represented as tuples (start, end)\n    :param new_interval: New interval to insert, also represented as a tuple (start, end)\n    :return: List of merged intervals sorted by their start points.\n    \"\"\"\n    result = []\n    put_flag = False\n    for i, interval in enumerate(intervals):\n        if interval[0] > new_interval[1] or interval[1] < new_interval[0]:\n            if interval[0] > new_interval[0] and not put_flag:\n                result.append(new_interval)\n                put_flag = True\n            result.append(interval)\n        else:\n            new_interval = (min(new_interval[0], interval[0]), max(new_interval[1], interval[1]))\n            if not put_flag:\n                result.append(new_interval)\n                put_flag = True\n            else:\n                result[-1] = new_interval\n    if not put_flag:\n        result.append(new_interval)\n    return result\n```", "code": "def insert_interval(intervals, new_interval):\n    \"\"\"\n    Inserts a new interval into a list of intervals, merging any overlapping intervals.\n    :param intervals: List of intervals represented as tuples (start, end)\n    :param new_interval: New interval to insert, also represented as a tuple (start, end)\n    :return: List of merged intervals sorted by their start points.\n    \"\"\"\n    result = []\n    put_flag = False\n    for i, interval in enumerate(intervals):\n        if interval[0] > new_interval[1] or interval[1] < new_interval[0]:\n            if interval[0] > new_interval[0] and not put_flag:\n                result.append(new_interval)\n                put_flag = True\n            result.append(interval)\n        else:\n            new_interval = (min(new_interval[0], interval[0]), max(new_interval[1], interval[1]))\n            if not put_flag:\n                result.append(new_interval)\n                put_flag = True\n            else:\n                result[-1] = new_interval\n    if not put_flag:\n        result.append(new_interval)\n    return result", "entry_point": "insert_interval", "testcase": ["assert insert_interval([], (5, 7)) == [(5, 7)]", "assert insert_interval([(1, 3), (6, 9)], (2, 5)) == [(1, 5), (6, 9)]", "assert insert_interval([(1, 2), (3, 5), (6, 7), (8, 10), (12, 16)], (4, 8)) == [(1, 2), (3, 10), (12, 16)]"]}
{"seq_id": 6656151071, "instruction": "Write a function to find the unique numbers in a list and return them in ascending order.", "output": "Here is the code to solve this problem: \n```python\ndef find_unique(test_list):\n    unique_list = []\n    for num in test_list:\n        if test_list.count(num) == 1:\n            unique_list.append(num)\n    return sorted(unique_list)\n```", "code": "def find_unique(test_list):\n    unique_list = []\n    for num in test_list:\n        if test_list.count(num) == 1:\n            unique_list.append(num)\n    return sorted(unique_list)", "entry_point": "find_unique", "testcase": ["assert find_unique([1, 2, 3, 2, 4, 5, 5, 6]) == [1, 3, 4, 6]", "assert find_unique([1, 1, 2, 3, 3, 4, 5, 5, 6, 6]) == [2, 4]", "assert find_unique([10, 20, 10, 30, 40, 40, 50]) == [20, 30, 50]"]}
{"seq_id": 42184032009, "instruction": "Write a function to convert a given integer to its base 8 representation as a string.", "output": "Here is the code to solve this problem: \n```python\ndef convert_to_base8(num: int) -> str:\n    if num == 0:\n        return \"0\"\n    \n    res = \"\"\n    flag = True\n    \n    if num < 0:\n        flag = False\n        num = abs(num)\n                    \n    while num > 0:\n        res += str(num % 8)\n        num = num // 8\n        \n    return res[::-1] if flag == True else f\"-{res[::-1]}\"\n```", "code": "def convert_to_base8(num: int) -> str:\n    if num == 0:\n        return \"0\"\n    \n    res = \"\"\n    flag = True\n    \n    if num < 0:\n        flag = False\n        num = abs(num)\n                    \n    while num > 0:\n        res += str(num % 8)\n        num = num // 8\n        \n    return res[::-1] if flag == True else f\"-{res[::-1]}\"", "entry_point": "convert_to_base8", "testcase": ["assert convert_to_base8(-7) == \"-7\"", "assert convert_to_base8(8) == \"10\"", "assert convert_to_base8(100) == \"144\""]}
{"seq_id": 3631609711, "instruction": "Write a function that checks if the sum of the digits of a number is even and each digit is unique. The function returns True if both conditions are met and False otherwise.", "output": "Here is the code to solve this problem: \n```python\ndef is_even_sum_and_unique_digits(n):\n    digits = [int(d) for d in str(n)]\n    if len(digits) != len(set(digits)):\n        return False\n    digit_sum = sum(digits)\n    return digit_sum % 2 == 0\n```", "code": "def is_even_sum_and_unique_digits(n):\n    digits = [int(d) for d in str(n)]\n    if len(digits) != len(set(digits)):\n        return False\n    digit_sum = sum(digits)\n    return digit_sum % 2 == 0", "entry_point": "is_even_sum_and_unique_digits", "testcase": ["assert is_even_sum_and_unique_digits(248) == True", "assert is_even_sum_and_unique_digits(246) == True", "assert is_even_sum_and_unique_digits(12345) == False", "assert is_even_sum_and_unique_digits(123456789) == False", "assert is_even_sum_and_unique_digits(112) == False"]}
{"seq_id": 71551180887, "instruction": "Write a function that calculates the nth number of the Fibonacci sequence using memoization to optimize performance.", "output": "Here is the code to solve this problem: \n```python\ndef fibonacci_memo(n, memo={}):\n    if n <= 1:\n        return n\n    if n not in memo:\n        memo[n] = fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo)\n    return memo[n]\n```", "code": "def fibonacci_memo(n, memo={}):\n    if n <= 1:\n        return n\n    if n not in memo:\n        memo[n] = fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo)\n    return memo[n]", "entry_point": "fibonacci_memo", "testcase": ["assert fibonacci_memo(10) == 55", "assert fibonacci_memo(8) == 21", "assert fibonacci_memo(1) == 1"]}
{"seq_id": 14132417736, "instruction": "Write a function to find the median of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef median_sorted_arrays(nums1, nums2):\n    nums = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            nums.append(nums1[i])\n            i += 1\n        else:\n            nums.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        nums.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        nums.append(nums2[j])\n        j += 1\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        return nums[len(nums)//2]\n```", "code": "def median_sorted_arrays(nums1, nums2):\n    nums = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            nums.append(nums1[i])\n            i += 1\n        else:\n            nums.append(nums2[j])\n            j += 1\n    while i < len(nums1):\n        nums.append(nums1[i])\n        i += 1\n    while j < len(nums2):\n        nums.append(nums2[j])\n        j += 1\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        return nums[len(nums)//2]", "entry_point": "median_sorted_arrays", "testcase": ["assert median_sorted_arrays([1, 3], [2]) == 2.0", "assert median_sorted_arrays([1, 2], [3, 4]) == 2.5", "assert median_sorted_arrays([0, 0], [0, 0]) == 0.0"]}
{"seq_id": 73816757063, "instruction": "Write a function to find the maximum number of coins you can collect by starting from either side of a given array representing houses containing different amounts of coins.", "output": "Here is the code to solve this problem: \n```python\ndef max_loot(houses):\n    def loot_from(start, end):\n        prev, curr = 0, 0\n        for i in range(start, end):\n            temp = curr\n            curr = max(curr, houses[i] + prev)\n            prev = temp\n        return curr\n\n    if len(houses) == 1:\n        return houses[0]\n    return max(loot_from(0, len(houses) - 1), loot_from(1, len(houses)))\n```", "code": "def max_loot(houses):\n    def loot_from(start, end):\n        prev, curr = 0, 0\n        for i in range(start, end):\n            temp = curr\n            curr = max(curr, houses[i] + prev)\n            prev = temp\n        return curr\n\n    if len(houses) == 1:\n        return houses[0]\n    return max(loot_from(0, len(houses) - 1), loot_from(1, len(houses)))", "entry_point": "max_loot", "testcase": ["assert max_loot([1, 2, 3, 1]) == 4", "assert max_loot([1, 2, 3]) == 3", "assert max_loot([2, 3, 2]) == 3"]}
{"seq_id": 26427094611, "instruction": "Write a function to find the number of occurrences of an element in a list by using lambda function.", "output": "Here is the code to solve this problem: \n```python\ndef find_occurrences(lst, element):\n    result = list(map(lambda x: 1 if x == element else 0, lst))\n    return sum(result)\n```", "code": "def find_occurrences(lst, element):\n    result = list(map(lambda x: 1 if x == element else 0, lst))\n    return sum(result)", "entry_point": "find_occurrences", "testcase": ["assert find_occurrences([10,20,30,10,10],10)==3", "assert find_occurrences([1, 2, 3, 2, 1, 2, 3],1)==2", "assert find_occurrences(['a','b','c','a','b','a'], 'a')==3"]}
{"seq_id": 74188130317, "instruction": "Write a python function to find the least number of perfect squares which sum to the given number.", "output": "Here is the code to solve this problem: \n```python\nfrom math import sqrt\n\ndef least_squares(n):\n    table = [0] * (n + 1)\n    for i in range(1, n + 1):\n        min_val = float('inf')\n        j = 1\n        while j * j <= i:\n            min_val = min(min_val, table[i - j * j] + 1)\n            j += 1\n        table[i] = min_val\n    return table[n]\n```", "code": "from math import sqrt\n\ndef least_squares(n):\n    table = [0] * (n + 1)\n    for i in range(1, n + 1):\n        min_val = float('inf')\n        j = 1\n        while j * j <= i:\n            min_val = min(min_val, table[i - j * j] + 1)\n            j += 1\n        table[i] = min_val\n    return table[n]", "entry_point": "least_squares", "testcase": ["assert least_squares(12) == 3", "assert least_squares(100) == 1", "assert least_squares(13) == 2"]}
{"seq_id": 37170539131, "instruction": "Write a python function to find the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_Substring_Without_Repeating_Characters(s):\n    charMap = {}\n    left = 0\n    res = \"\"\n    maxLength = 0\n\n    for right in range(len(s)):\n        if s[right] in charMap:\n            left = max(charMap[s[right]] + 1, left)\n\n        charMap[s[right]] = right\n\n        if right - left + 1 > maxLength:\n            maxLength = right - left + 1\n            res = s[left:right+1]\n\n    return res\n```", "code": "def longest_Substring_Without_Repeating_Characters(s):\n    charMap = {}\n    left = 0\n    res = \"\"\n    maxLength = 0\n\n    for right in range(len(s)):\n        if s[right] in charMap:\n            left = max(charMap[s[right]] + 1, left)\n\n        charMap[s[right]] = right\n\n        if right - left + 1 > maxLength:\n            maxLength = right - left + 1\n            res = s[left:right+1]\n\n    return res", "entry_point": "longest_Substring_Without_Repeating_Characters", "testcase": ["assert longest_Substring_Without_Repeating_Characters(\"abcabcbb\") == \"abc\"", "assert longest_Substring_Without_Repeating_Characters(\"bbbbb\") == \"b\"", "assert longest_Substring_Without_Repeating_Characters(\"\") == \"\"", "assert longest_Substring_Without_Repeating_Characters(\"pwwkew\") == \"wke\""]}
{"seq_id": 41026972769, "instruction": "Write a function to find the k pairs with smallest sums from two arrays.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\nfrom itertools import product\n\ndef smallest_sum_pairs(nums1, nums2, k):\n    return list(map(list, heapq.nsmallest(k, product(nums1, nums2), key=sum)))\n```", "code": "import heapq\nfrom itertools import product\n\ndef smallest_sum_pairs(nums1, nums2, k):\n    return list(map(list, heapq.nsmallest(k, product(nums1, nums2), key=sum)))", "entry_point": "smallest_sum_pairs", "testcase": ["assert smallest_sum_pairs([1,2], [3], 3) == [[1,3],[2,3]]", "assert smallest_sum_pairs([1,1,2], [1,2,3], 2) == [[1,1],[1,1]]", "assert smallest_sum_pairs([1,7,11], [2,4,6], 3) == [[1,2],[1,4],[1,6]]"]}
{"seq_id": 6600756257, "instruction": "Write a function to evaluate the Reverse Polish Notation (RPN) expression.", "output": "Here is the code to solve this problem: \n```python\ndef evalRPN(tokens):\n    operators = {'+', '-', '/', '*'}\n    nums = []\n    for token in tokens:\n        if token not in operators:\n            nums.append(int(token))\n        else:\n            num2 = nums.pop()\n            num1 = nums.pop()\n            if token == '+':\n                nums.append(num1 + num2)\n            elif token == '-':\n                nums.append(num1 - num2)\n            elif token == '*':\n                nums.append(num1 * num2)\n            elif token == '/':\n                nums.append(int(num1 / num2))\n    return nums[-1]\n```", "code": "def evalRPN(tokens):\n    operators = {'+', '-', '/', '*'}\n    nums = []\n    for token in tokens:\n        if token not in operators:\n            nums.append(int(token))\n        else:\n            num2 = nums.pop()\n            num1 = nums.pop()\n            if token == '+':\n                nums.append(num1 + num2)\n            elif token == '-':\n                nums.append(num1 - num2)\n            elif token == '*':\n                nums.append(num1 * num2)\n            elif token == '/':\n                nums.append(int(num1 / num2))\n    return nums[-1]", "entry_point": "evalRPN", "testcase": ["assert evalRPN([\"2\", \"1\", \"+\", \"3\", \"*\"]) == 9", "assert evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]) == 6", "assert evalRPN([\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]) == 22"]}
{"seq_id": 10673377922, "instruction": "Write a function that takes a list of numbers and returns a new list with the numbers rounded to the nearest integer.", "output": "Here is the code to solve this problem: \n```python\ndef round_numbers(numbers):\n    return [round(num) for num in numbers]\n```", "code": "def round_numbers(numbers):\n    return [round(num) for num in numbers]", "entry_point": "round_numbers", "testcase": ["assert round_numbers([9.9, 10.1, 11.5, 12.6])==[10, 10, 12, 13]", "assert round_numbers([5.6, 6.3, 7.8, 8.2])==[6, 6, 8, 8]", "assert round_numbers([1.2, 2.5, 3.7, 4.4])==[1, 2, 4, 4]"]}
{"seq_id": 73183411082, "instruction": "Write a python function to find the first missing positive integer in an unsorted array.", "output": "Here is the code to solve this problem: \n```python\ndef first_Missing_Positive(nums):\n    for i in range(len(nums)):\n        while 1 <= nums[i] <= len(nums) and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    for i in range(len(nums)):\n        if nums[i] != i + 1:\n            return i + 1\n    return len(nums) + 1\n```", "code": "def first_Missing_Positive(nums):\n    for i in range(len(nums)):\n        while 1 <= nums[i] <= len(nums) and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    for i in range(len(nums)):\n        if nums[i] != i + 1:\n            return i + 1\n    return len(nums) + 1", "entry_point": "first_Missing_Positive", "testcase": ["assert first_Missing_Positive([1,2,0]) == 3", "assert first_Missing_Positive([7,8,9,11,12]) == 1", "assert first_Missing_Positive([3,4,-1,1]) == 2"]}
{"seq_id": 4258822093, "instruction": "Write a python function to check if a given list contains a mirror sequence of another list at least twice. A mirror sequence is when the second list is the reverse of a substring of the first list.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\r\ndef has_mirror_twice(a1:List[int],a2:List[int])->bool:\r\n    len_a1=len(a1)\r\n    len_a2=len(a2)\r\n    count=0\r\n    if len_a2>len_a1:\r\n        return False\r\n    else:\r\n        limit=len_a1-len_a2+1\r\n        for index in range(limit):\r\n            sub_string_index=0\r\n            while(sub_string_index<len_a2):\r\n                if a1[index+sub_string_index]!=a2[-sub_string_index-1]:\r\n                    break\r\n                sub_string_index+=1\r\n            if sub_string_index==len_a2:\r\n                count=count+1\r\n        if count>=2:\r\n            return True\r\n        else:\r\n            return False\n```", "code": "from typing import List\r\ndef has_mirror_twice(a1:List[int],a2:List[int])->bool:\r\n    len_a1=len(a1)\r\n    len_a2=len(a2)\r\n    count=0\r\n    if len_a2>len_a1:\r\n        return False\r\n    else:\r\n        limit=len_a1-len_a2+1\r\n        for index in range(limit):\r\n            sub_string_index=0\r\n            while(sub_string_index<len_a2):\r\n                if a1[index+sub_string_index]!=a2[-sub_string_index-1]:\r\n                    break\r\n                sub_string_index+=1\r\n            if sub_string_index==len_a2:\r\n                count=count+1\r\n        if count>=2:\r\n            return True\r\n        else:\r\n            return False", "entry_point": "has_mirror_twice", "testcase": ["assert has_mirror_twice([1,2,3,2,1,1,2,3,2,1],[1,2]) == True", "assert has_mirror_twice([1,2,3,2,1,1,2,3,2,1],[3,2]) == True", "assert has_mirror_twice([1,2,3,4,5,6,7,8,9],[3,2,1]) == False"]}
{"seq_id": 39761944803, "instruction": "Write a python function to convert a given string of lowercase letters into uppercase letters.", "output": "Here is the code to solve this problem: \n```python\ndef convert_to_uppercase(s):\n    return s.upper()\n```", "code": "def convert_to_uppercase(s):\n    return s.upper()", "entry_point": "convert_to_uppercase", "testcase": ["assert convert_to_uppercase(\"hello\") == \"HELLO\"", "assert convert_to_uppercase(\"python\") == \"PYTHON\"", "assert convert_to_uppercase(\"world\") == \"WORLD\""]}
{"seq_id": 27935038680, "instruction": "Write a function to check if a given string can be constructed by repeating a substring.", "output": "Here is the code to solve this problem: \n```python\ndef is_repeated_substring(s):\n    return (s+s)[1:-1].find(s) != -1\n```", "code": "def is_repeated_substring(s):\n    return (s+s)[1:-1].find(s) != -1", "entry_point": "is_repeated_substring", "testcase": ["assert is_repeated_substring(\"abab\") == True", "assert is_repeated_substring(\"aba\") == False", "assert is_repeated_substring(\"abcabcabcabc\") == True"]}
{"seq_id": 11229579375, "instruction": "Write a function that calculates the number of days between two given dates. The dates should be input in the format 'YYYY-MM-DD'. Leap years should be considered.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\n\ndef date_difference(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return abs(delta.days)\n```", "code": "from datetime import datetime\n\ndef date_difference(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return abs(delta.days)", "entry_point": "date_difference", "testcase": ["assert date_difference('2020-01-01', '2020-01-02') == 1", "assert date_difference('2019-02-28', '2019-03-01') == 1 # Non-leap year", "assert date_difference('2020-02-28', '2020-03-01') == 2 # Leap year", "assert date_difference('2019-12-31', '2020-01-01') == 1"]}
{"seq_id": 2360468678, "instruction": "Write a python function to find the closest pair of points in a 2D plane.\n\nThe function should take a list of tuples, where each tuple represents a point in the plane (x, y). The function should return a tuple containing the two points that are closest to each other.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef closest_pair(points):\n    points.sort()\n    best_pair = (points[0], points[1])\n    min_dist = distance(points[0], points[1])\n    for i in range(len(points) - 1):\n        for j in range(i+1, len(points)):\n            if points[j][0] - points[i][0] >= min_dist:\n                break\n            dist = distance(points[i], points[j])\n            if dist < min_dist:\n                min_dist = dist\n                best_pair = (points[i], points[j])\n    return best_pair\n```", "code": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef closest_pair(points):\n    points.sort()\n    best_pair = (points[0], points[1])\n    min_dist = distance(points[0], points[1])\n    for i in range(len(points) - 1):\n        for j in range(i+1, len(points)):\n            if points[j][0] - points[i][0] >= min_dist:\n                break\n            dist = distance(points[i], points[j])\n            if dist < min_dist:\n                min_dist = dist\n                best_pair = (points[i], points[j])\n    return best_pair", "entry_point": "closest_pair", "testcase": ["assert closest_pair([(1,2), (3,4), (5,6), (7,8), (9,10)]) == ((1,2), (3,4))", "assert closest_pair([(1,2), (10,20), (3,4)]) == ((1,2), (3,4))", "assert closest_pair([(1,2), (3,4), (5,6)]) == ((1,2), (3,4))"]}
{"seq_id": 34587203681, "instruction": "Write a python function to find the largest subarray with 0 sum.", "output": "Here is the code to solve this problem: \n```python\ndef maxLen(arr, n): \n    # Creates an empty hashMap hM \n    hM = {} \n    # Initialize result \n    max_len = 0\n    # Initialize sum of elements \n    curr_sum = 0\n  \n    # Traverse through the given array \n    for i in range (0, n): \n  \n        # Add current element to sum \n        curr_sum = curr_sum + arr[i] \n  \n        # To handle sum=0 at last index \n        if (curr_sum==0): \n            max_len = i+1\n  \n        # If this sum is seen before, then update max_len \n        # if required \n        if curr_sum in hM: \n            max_len = max(max_len, i-hM[curr_sum]) \n        else: \n  \n            # else put this sum in hash table \n            hM[curr_sum] = i \n  \n    return max_len\n```", "code": "def maxLen(arr, n): \n    # Creates an empty hashMap hM \n    hM = {} \n    # Initialize result \n    max_len = 0\n    # Initialize sum of elements \n    curr_sum = 0\n  \n    # Traverse through the given array \n    for i in range (0, n): \n  \n        # Add current element to sum \n        curr_sum = curr_sum + arr[i] \n  \n        # To handle sum=0 at last index \n        if (curr_sum==0): \n            max_len = i+1\n  \n        # If this sum is seen before, then update max_len \n        # if required \n        if curr_sum in hM: \n            max_len = max(max_len, i-hM[curr_sum]) \n        else: \n  \n            # else put this sum in hash table \n            hM[curr_sum] = i \n  \n    return max_len", "entry_point": "maxLen", "testcase": ["assert maxLen([15, -2, 2, -8, 1, 7, 10, 23],8) == 5", "assert maxLen([1,2,-3,3],4) == 3", "assert maxLen([1,2,3],3) == 0"]}
{"seq_id": 18514494369, "instruction": "Write a python function to calculate the sum of the elements in a list using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef recursive_sum(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + recursive_sum(nums[1:])\n```", "code": "def recursive_sum(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + recursive_sum(nums[1:])", "entry_point": "recursive_sum", "testcase": ["assert recursive_sum([100]) == 100", "assert recursive_sum([10, 20, 30]) == 60", "assert recursive_sum([1, 2, 3, 4]) == 10"]}
{"seq_id": 30231088399, "instruction": "Write a python function to find the number of ways to partition a given integer n into a sum of positive integers, where each number in the sum is less than or equal to k.", "output": "Here is the code to solve this problem: \n```python\ndef partition_ways(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, k + 1):\n        for j in range(i, n + 1):\n            dp[j] += dp[j - i]\n    return dp[n]\n```", "code": "def partition_ways(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, k + 1):\n        for j in range(i, n + 1):\n            dp[j] += dp[j - i]\n    return dp[n]", "entry_point": "partition_ways", "testcase": ["assert partition_ways(3, 3) == 3", "assert partition_ways(5, 2) == 3", "assert partition_ways(10, 10) == 42"]}
{"seq_id": 2512707638, "instruction": "Write a function to remove all occurrences of an element from a given list.", "output": "Here is the code to solve this problem: \n```python\ndef remove_element(nums, val):\n    i = 0\n    while i < len(nums):\n        if nums[i] == val:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n```", "code": "def remove_element(nums, val):\n    i = 0\n    while i < len(nums):\n        if nums[i] == val:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums", "entry_point": "remove_element", "testcase": ["assert remove_element([1, 2, 3, 2, 4], 2) == [1, 3, 4]", "assert remove_element([1, 2, 3, 3, 4], 3) == [1, 2, 4]", "assert remove_element([1, 2, 3, 4], 5) == [1, 2, 3, 4]"]}
{"seq_id": 34842069150, "instruction": "Write a function to calculate the grade of a student based on their score using conditional statements.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_grade(score):\n    if score >= 90:\n        return 'A+'\n    elif score >= 80:\n        return 'B+'\n    elif score >= 70:\n        return 'C'\n    elif score >= 60:\n        return 'D'\n    else:\n        return 'F'\n```", "code": "def calculate_grade(score):\n    if score >= 90:\n        return 'A+'\n    elif score >= 80:\n        return 'B+'\n    elif score >= 70:\n        return 'C'\n    elif score >= 60:\n        return 'D'\n    else:\n        return 'F'", "entry_point": "calculate_grade", "testcase": ["assert calculate_grade(95) == 'A+'", "assert calculate_grade(85) == 'B+'", "assert calculate_grade(60) == 'D'", "assert calculate_grade(50) == 'F'", "assert calculate_grade(70) == 'C'"]}
{"seq_id": 8802821254, "instruction": "Write a function that returns the length of the longest subarray with a sum of 0.", "output": "Here is the code to solve this problem: \n```python\ndef longest_subarray_with_sum_0(arr):\n    sum_map = {}\n    max_len = 0\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n        if arr[i] == 0 and max_len == 0:\n            max_len = 1\n        if sum == 0:\n            max_len = i + 1\n        if sum in sum_map:\n            max_len = max(max_len, i - sum_map[sum])\n        else:\n            sum_map[sum] = i\n    return max_len\n```", "code": "def longest_subarray_with_sum_0(arr):\n    sum_map = {}\n    max_len = 0\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n        if arr[i] == 0 and max_len == 0:\n            max_len = 1\n        if sum == 0:\n            max_len = i + 1\n        if sum in sum_map:\n            max_len = max(max_len, i - sum_map[sum])\n        else:\n            sum_map[sum] = i\n    return max_len", "entry_point": "longest_subarray_with_sum_0", "testcase": ["assert longest_subarray_with_sum_0([1, 2, 3, 4]) == 0", "assert longest_subarray_with_sum_0([4, -1, -3, 1, 2, 2, -2]) == 5", "assert longest_subarray_with_sum_0([1, 2, -3, 3]) == 3"]}
{"seq_id": 31443508007, "instruction": "Write a python function to calculate the maximum depth of a binary tree. The binary tree is represented as a TreeNode where each node has a value and two children (left and right).", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nfrom queue import SimpleQueue\n\ndef maxDepth(root: TreeNode) -> int:\n    if not root:\n        return 0\n\n    q = SimpleQueue()\n    q.put(root)\n    ans = 0\n    while not q.empty():\n        for _ in range(q.qsize()):\n            node = q.get()\n            if node.left:\n                q.put(node.left)\n            if node.right:\n                q.put(node.right)\n        ans += 1\n    return ans\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nfrom queue import SimpleQueue\n\ndef maxDepth(root: TreeNode) -> int:\n    if not root:\n        return 0\n\n    q = SimpleQueue()\n    q.put(root)\n    ans = 0\n    while not q.empty():\n        for _ in range(q.qsize()):\n            node = q.get()\n            if node.left:\n                q.put(node.left)\n            if node.right:\n                q.put(node.right)\n        ans += 1\n    return ans", "entry_point": "maxDepth", "testcase": ["assert maxDepth(TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))) == 3", "assert maxDepth(TreeNode(1, TreeNode(2))) == 2", "assert maxDepth(TreeNode(1)) == 1", "assert maxDepth(None) == 0"]}
{"seq_id": 75069658869, "instruction": "Write a function to find the largest integer in a list that is divisible by a given divisor.", "output": "Here is the code to solve this problem: \n```python\ndef largest_divisible(nums, divisor):\n    # Filter the list to only include numbers divisible by the divisor\n    divisible_nums = [num for num in nums if num % divisor == 0]\n    \n    # If the filtered list is empty, return None\n    if not divisible_nums:\n        return None\n    \n    # Return the maximum number in the filtered list\n    return max(divisible_nums)\n```", "code": "def largest_divisible(nums, divisor):\n    # Filter the list to only include numbers divisible by the divisor\n    divisible_nums = [num for num in nums if num % divisor == 0]\n    \n    # If the filtered list is empty, return None\n    if not divisible_nums:\n        return None\n    \n    # Return the maximum number in the filtered list\n    return max(divisible_nums)", "entry_point": "largest_divisible", "testcase": ["assert largest_divisible([3, 6, 9, 12, 15], 3) == 15", "assert largest_divisible([1, 3, 5, 7, 9], 2) == None", "assert largest_divisible([2, 4, 6, 8, 10], 2) == 10"]}
{"seq_id": 33812623865, "instruction": "Write a function to determine if a word is a valid word from a given list of words. A word is valid if it appears in the list, and it is not surrounded by characters that are not letters.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_word(word_list, word):\n    if word not in word_list:\n        return False\n    if not word.isalpha() or not (word[0].isalpha() and word[-1].isalpha()):\n        return False\n    return True\n```", "code": "def is_valid_word(word_list, word):\n    if word not in word_list:\n        return False\n    if not word.isalpha() or not (word[0].isalpha() and word[-1].isalpha()):\n        return False\n    return True", "entry_point": "is_valid_word", "testcase": ["assert is_valid_word([\"hello\", \"world\"], \"hello\") == True", "assert is_valid_word([\"coding\", \"is\", \"fun\"], \"code\") == False", "assert is_valid_word([\"coding\", \"is\", \"fun\"], \"fun!\") == False", "assert is_valid_word([\"python\", \"is\", \"awesome\"], \"python\") == True"]}
{"seq_id": 70248618101, "instruction": "Write a python function to find the nth Hexagonal number.\n\nA Hexagonal number is a figurate number that represents a hexagon with a dot at each corner. The nth hexagonal number is given by the formula: H_n = n * (2n - 1)", "output": "Here is the code to solve this problem: \n```python\ndef hexagonal_number(n):\n    return n * (2*n - 1)\n```", "code": "def hexagonal_number(n):\n    return n * (2*n - 1)", "entry_point": "hexagonal_number", "testcase": ["assert hexagonal_number(1) == 1", "assert hexagonal_number(2) == 6", "assert hexagonal_number(3) == 15", "assert hexagonal_number(4) == 28"]}
{"seq_id": 22419418836, "instruction": "Write a function to check if a given graph is bipartite. A graph is bipartite if the vertex set can be divided into two sets, A and B such that no two vertices in the same set have an edge between them.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef is_bipartite(graph):\n    color = {}\n    for node in range(len(graph)):\n        if node not in color:\n            color[node] = 0\n            queue = deque([node])\n            while queue:\n                current = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor in color:\n                        if color[neighbor] == color[current]:\n                            return False\n                    else:\n                        color[neighbor] = 1 - color[current]\n                        queue.append(neighbor)\n    return True\n```", "code": "from collections import deque\n\ndef is_bipartite(graph):\n    color = {}\n    for node in range(len(graph)):\n        if node not in color:\n            color[node] = 0\n            queue = deque([node])\n            while queue:\n                current = queue.popleft()\n                for neighbor in graph[current]:\n                    if neighbor in color:\n                        if color[neighbor] == color[current]:\n                            return False\n                    else:\n                        color[neighbor] = 1 - color[current]\n                        queue.append(neighbor)\n    return True", "entry_point": "is_bipartite", "testcase": ["assert is_bipartite([[1, 3], [0, 2], [1, 3], [0, 2]]) == True", "assert is_bipartite([[1], [0], [3], [2]]) == True", "assert is_bipartite([[1, 2, 3], [0, 2], [0, 1, 3], [0, 2]]) == False"]}
{"seq_id": 953530149, "instruction": "Write a python function to find the prime numbers in a list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef prime_numbers_in_list(numbers):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in numbers if is_prime(num)]\n```", "code": "def prime_numbers_in_list(numbers):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in numbers if is_prime(num)]", "entry_point": "prime_numbers_in_list", "testcase": ["assert prime_numbers_in_list([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [2, 3, 5, 7, 11, 13]", "assert prime_numbers_in_list([1, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]) == [17, 19, 23, 29, 31, 37]", "assert prime_numbers_in_list([39, 41, 43, 47, 49, 51, 53, 59, 61, 63, 67, 71]) == [41, 43, 47, 53, 59, 61, 67, 71]"]}
{"seq_id": 74623930807, "instruction": "Write a python function to check if a given string can be divided into two substrings of equal length, where both substrings have the same frequency of each character.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef can_divide_string(s: str) -> bool:\n    if len(s) % 2 != 0:\n        return False\n    mid = len(s) // 2\n    left_half = Counter(s[:mid])\n    right_half = Counter(s[mid:])\n    return left_half == right_half\n```", "code": "from collections import Counter\n\ndef can_divide_string(s: str) -> bool:\n    if len(s) % 2 != 0:\n        return False\n    mid = len(s) // 2\n    left_half = Counter(s[:mid])\n    right_half = Counter(s[mid:])\n    return left_half == right_half", "entry_point": "can_divide_string", "testcase": ["assert can_divide_string(\"abcdabcd\") == True", "assert can_divide_string(\"aacbbaac\") == True", "assert can_divide_string(\"abcabc\") == True", "assert can_divide_string(\"abcdef\") == False"]}
{"seq_id": 30793406158, "instruction": "Write a python function to check if four points in a 2D plane form a valid square. A valid square is defined as a quadrilateral with four equal sides and four equal angles (90 degrees).", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef check_square(p1, p2, p3, p4):\n    def dist(a, b):\n        x = abs(a[0] - b[0])\n        y = abs(a[1] - b[1])\n        return math.sqrt(x * x + y * y)\n\n    def check(p1, p2, p3, p4):\n        d1 = dist(p1, p2)\n        d2 = dist(p1, p3)\n        d3 = dist(p1, p4)\n        if d1 == 0 or d2 == 0 or d3 == 0:\n            return False\n\n        arr = sorted([d1, d2, d3])\n        return arr[0] == arr[1] and math.isclose(arr[2], arr[0] * math.sqrt(2))\n\n    for a, b, c, d in [(p1, p2, p3, p4), (p1, p3, p4, p2), (p1, p4, p2, p3)]:\n        if not check(a, b, c, d):\n            return False\n    return True\n```", "code": "import math\n\ndef check_square(p1, p2, p3, p4):\n    def dist(a, b):\n        x = abs(a[0] - b[0])\n        y = abs(a[1] - b[1])\n        return math.sqrt(x * x + y * y)\n\n    def check(p1, p2, p3, p4):\n        d1 = dist(p1, p2)\n        d2 = dist(p1, p3)\n        d3 = dist(p1, p4)\n        if d1 == 0 or d2 == 0 or d3 == 0:\n            return False\n\n        arr = sorted([d1, d2, d3])\n        return arr[0] == arr[1] and math.isclose(arr[2], arr[0] * math.sqrt(2))\n\n    for a, b, c, d in [(p1, p2, p3, p4), (p1, p3, p4, p2), (p1, p4, p2, p3)]:\n        if not check(a, b, c, d):\n            return False\n    return True", "entry_point": "check_square", "testcase": ["assert check_square([1, 0], [-1, 0], [0, 1], [0, -1]) == True", "assert check_square([0, 0], [1, 2], [1, 0], [0, 1]) == False", "assert check_square([0, 0], [1, 1], [1, 0], [0, 1]) == True"]}
{"seq_id": 20054260200, "instruction": "Write a function to find the first unique character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef first_unique_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for i in range(len(s)):\n        if char_count[s[i]] == 1:\n            return i\n    return -1\n```", "code": "def first_unique_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for i in range(len(s)):\n        if char_count[s[i]] == 1:\n            return i\n    return -1", "entry_point": "first_unique_char", "testcase": ["assert first_unique_char(\"leetcode\") == 0", "assert first_unique_char(\"aabb\") == -1", "assert first_unique_char(\"loveleetcode\") == 2"]}
{"seq_id": 38343583038, "instruction": "Write a function to find the smallest k elements from two given sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_elements(arr1, arr2, k):\n    i, j = 0, 0\n    result = []\n    while len(result) < k and i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    while len(result) < k and i < len(arr1):\n        result.append(arr1[i])\n        i += 1\n    while len(result) < k and j < len(arr2):\n        result.append(arr2[j])\n        j += 1\n    return result\n```", "code": "def smallest_elements(arr1, arr2, k):\n    i, j = 0, 0\n    result = []\n    while len(result) < k and i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    while len(result) < k and i < len(arr1):\n        result.append(arr1[i])\n        i += 1\n    while len(result) < k and j < len(arr2):\n        result.append(arr2[j])\n        j += 1\n    return result", "entry_point": "smallest_elements", "testcase": ["assert smallest_elements([1, 3, 5], [2, 4, 6], 3) == [1, 2, 3]", "assert smallest_elements([2, 3, 6, 7, 9], [1, 4, 8, 10], 4) == [1, 2, 3, 4]", "assert smallest_elements([1, 10, 12, 19], [5, 11, 15, 20], 5) == [1, 5, 10, 11, 12]"]}
{"seq_id": 3553278453, "instruction": "Write a python function that takes a positive integer and returns the number of positive integers less than that number that are coprime to it. Two numbers are coprime if their greatest common divisor (GCD) is 1.", "output": "Here is the code to solve this problem: \n```python\nfrom math import gcd\n\ndef count_coprimes(n):\n    count = 0\n    for i in range(1, n):\n        if gcd(i, n) == 1:\n            count += 1\n    return count\n```", "code": "from math import gcd\n\ndef count_coprimes(n):\n    count = 0\n    for i in range(1, n):\n        if gcd(i, n) == 1:\n            count += 1\n    return count", "entry_point": "count_coprimes", "testcase": ["assert count_coprimes(10) == 4", "assert count_coprimes(13) == 12", "assert count_coprimes(1) == 0"]}
{"seq_id": 38726736521, "instruction": "Write a python function to find the minimum cost to connect all the sticks where the cost of connecting two sticks is the sum of their values. The process is repeated until a single stick is left.", "output": "Here is the code to solve this problem: \n```python\nfrom heapq import heapify, heappop, heappush, heapreplace\n\ndef connectSticks(sticks):\n    heapify(sticks)\n    cost = 0\n    while len(sticks)>1:\n        temp = heappop(sticks) + heappop(sticks)\n        cost += temp\n        heappush(sticks, temp)\n    return cost\n```", "code": "from heapq import heapify, heappop, heappush, heapreplace\n\ndef connectSticks(sticks):\n    heapify(sticks)\n    cost = 0\n    while len(sticks)>1:\n        temp = heappop(sticks) + heappop(sticks)\n        cost += temp\n        heappush(sticks, temp)\n    return cost", "entry_point": "connectSticks", "testcase": ["assert connectSticks([1,8,3,5]) == 30", "assert connectSticks([2,4,3]) == 14", "assert connectSticks([5]) == 0"]}
{"seq_id": 23397627349, "instruction": "Write a function to check whether a set of numbers is a subset of another set.", "output": "Here is the code to solve this problem: \n```python\ndef check_subset(subset, superset):\n  return subset.issubset(superset)\n```", "code": "def check_subset(subset, superset):\n  return subset.issubset(superset)", "entry_point": "check_subset", "testcase": ["assert check_subset({1, 2, 3}, {1, 2, 3, 4, 5}) == True", "assert check_subset({1, 2, 3, 4}, {1, 2, 3}) == False", "assert check_subset({10, 20, 30}, {10, 20, 30, 40, 50}) == True", "assert check_subset({1, 6}, {2, 3, 4, 5}) == False"]}
{"seq_id": 20000952739, "instruction": "Write a function to find the minimum number of jumps required to reach the last index of an array from the first index. You can jump from index i to index j if and only if arr[i] = arr[j] or j = i + 1. Also, you can jump from the last index to any index if arr[i] = arr[-1].", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict, deque\n\ndef min_jumps(arr):\n    maps = defaultdict(list)\n    for i, num in enumerate(arr):\n        maps[num].append(i)\n\n    queue = deque([0])\n    visited = {0}\n    rank = 0\n    while queue:\n        n = len(queue)\n        for _ in range(n):\n            node = queue.popleft()\n            if node == len(arr) - 1:\n                return rank\n            children = maps[arr[node]]\n            for child in children:\n                if child not in visited:\n                    visited.add(child)\n                    queue.append(child)\n            maps[arr[node]].clear()\n            if node + 1 not in visited and node + 1 < len(arr):\n                visited.add(node + 1)\n                queue.append(node + 1)\n            if node - 1 not in visited and node - 1 >= 0:\n                visited.add(node - 1)\n                queue.append(node - 1)\n        rank += 1\n```", "code": "from collections import defaultdict, deque\n\ndef min_jumps(arr):\n    maps = defaultdict(list)\n    for i, num in enumerate(arr):\n        maps[num].append(i)\n\n    queue = deque([0])\n    visited = {0}\n    rank = 0\n    while queue:\n        n = len(queue)\n        for _ in range(n):\n            node = queue.popleft()\n            if node == len(arr) - 1:\n                return rank\n            children = maps[arr[node]]\n            for child in children:\n                if child not in visited:\n                    visited.add(child)\n                    queue.append(child)\n            maps[arr[node]].clear()\n            if node + 1 not in visited and node + 1 < len(arr):\n                visited.add(node + 1)\n                queue.append(node + 1)\n            if node - 1 not in visited and node - 1 >= 0:\n                visited.add(node - 1)\n                queue.append(node - 1)\n        rank += 1", "entry_point": "min_jumps", "testcase": ["assert min_jumps([7, 6, 9, 6, 9, 6, 9, 7]) == 1", "assert min_jumps([7]) == 0", "assert min_jumps([100, -23, -23, 404, 100, 23, 23, 23, 3, 404]) == 3"]}
{"seq_id": 4314676519, "instruction": "Write a python function to check if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.", "output": "Here is the code to solve this problem: \n```python\ndef check_anagrams(str1, str2):\n    # Remove any spaces and convert strings to lowercase\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n\n    # Check if the sorted characters of both strings are equal\n    return sorted(str1) == sorted(str2)\n```", "code": "def check_anagrams(str1, str2):\n    # Remove any spaces and convert strings to lowercase\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n\n    # Check if the sorted characters of both strings are equal\n    return sorted(str1) == sorted(str2)", "entry_point": "check_anagrams", "testcase": ["assert check_anagrams(\"hello\", \"world\") == False", "assert check_anagrams(\"listen\", \"silent\") == True", "assert check_anagrams(\"triangle\", \"integral\") == True", "assert check_anagrams(\"java\", \"javascript\") == False", "assert check_anagrams(\"earth\", \"heart\") == True", "assert check_anagrams(\"python\", \"typhon\") == True", "assert check_anagrams(\"binary\", \"brainy\") == True"]}
{"seq_id": 25668503931, "instruction": "Write a function to find the number of distinct subsequences of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef numDistinct(s: str, t: str) -> int:\n    m, n = len(s), len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[m][n]\n```", "code": "def numDistinct(s: str, t: str) -> int:\n    m, n = len(s), len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[m][n]", "entry_point": "numDistinct", "testcase": ["assert numDistinct(\"abc\", \"abc\") == 1", "assert numDistinct(\"babgbag\", \"bag\") == 5", "assert numDistinct(\"rabbbit\", \"rabbit\") == 3", "assert numDistinct(\"aaaaa\", \"a\") == 5"]}
{"seq_id": 35193345369, "instruction": "Create a Python function that finds the least number of time units required to complete all tasks given a cooldown period. Each task can be represented by a capital letter, and the tasks are represented by a list of strings. The cooldown period is the number of time units between the same tasks.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\nimport heapq\nfrom collections import deque\n\ndef least_time_to_complete(tasks: list, n: int) -> int:\n    counter = Counter(tasks)\n    maxHeap = [-cnt for cnt in counter.values()]\n    heapq.heapify(maxHeap)\n    q = deque()\n    time = 0\n\n    while maxHeap or q:\n        time += 1\n\n        if maxHeap:\n            processingTaskFreq = heapq.heappop(maxHeap) + 1\n            if processingTaskFreq < 0:\n                q.append([processingTaskFreq, time + n])\n\n        if q and q[0][1] == time:\n            heapq.heappush(maxHeap, q.popleft()[0])\n    \n    return time\n```", "code": "from collections import Counter\nimport heapq\nfrom collections import deque\n\ndef least_time_to_complete(tasks: list, n: int) -> int:\n    counter = Counter(tasks)\n    maxHeap = [-cnt for cnt in counter.values()]\n    heapq.heapify(maxHeap)\n    q = deque()\n    time = 0\n\n    while maxHeap or q:\n        time += 1\n\n        if maxHeap:\n            processingTaskFreq = heapq.heappop(maxHeap) + 1\n            if processingTaskFreq < 0:\n                q.append([processingTaskFreq, time + n])\n\n        if q and q[0][1] == time:\n            heapq.heappush(maxHeap, q.popleft()[0])\n    \n    return time", "entry_point": "least_time_to_complete", "testcase": ["assert least_time_to_complete([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 2) == 8", "assert least_time_to_complete([\"A\", \"C\", \"A\", \"B\", \"D\", \"B\"], 1) == 6", "assert least_time_to_complete([\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], 2) == 16"]}
{"seq_id": 74965843234, "instruction": "Write a python function to find the maximum product of three numbers from a given list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_three_nums(lst):\n    lst.sort()\n    return max(lst[0]*lst[1]*lst[-1], lst[-1]*lst[-2]*lst[-3])\n```", "code": "def max_product_three_nums(lst):\n    lst.sort()\n    return max(lst[0]*lst[1]*lst[-1], lst[-1]*lst[-2]*lst[-3])", "entry_point": "max_product_three_nums", "testcase": ["assert max_product_three_nums([1,2,3]) == 6", "assert max_product_three_nums([-10,-10,1,3,2]) == 300", "assert max_product_three_nums([1,2,3,4]) == 24"]}
{"seq_id": 20898555625, "instruction": "Write a python function to find the number of balanced strings of a given length that can be formed using the characters 'a', 'b', and 'c'. A balanced string is defined as a string where the count of any character does not exceed the count of any other character by more than 1.", "output": "Here is the code to solve this problem: \n```python\nfrom math import factorial\n\ndef balanced_strings(n):\n    if n < 3:\n        return 0\n    total = 0\n    for i in range(n//3 + 1):\n        for j in range(i + 1):\n            k = n - 2*i - j\n            if k < 0 or k > j + 1:\n                continue\n            total += factorial(n) // (factorial(i) * factorial(j) * factorial(k))\n    return total\n```", "code": "from math import factorial\n\ndef balanced_strings(n):\n    if n < 3:\n        return 0\n    total = 0\n    for i in range(n//3 + 1):\n        for j in range(i + 1):\n            k = n - 2*i - j\n            if k < 0 or k > j + 1:\n                continue\n            total += factorial(n) // (factorial(i) * factorial(j) * factorial(k))\n    return total", "entry_point": "balanced_strings", "testcase": ["assert balanced_strings(3) == 12", "assert balanced_strings(4) == 24", "assert balanced_strings(5) == 60"]}
{"seq_id": 34530076206, "instruction": "Write a python function that checks if a given list of numbers contains a specific number within a certain range of indices. The function should take three parameters, the list of numbers, the target number, and the range of indices, and return a boolean value indicating if the target number is found within the specified range.", "output": "Here is the code to solve this problem: \n```python\ndef check_number_in_range(nums, target, range_indices):\n    start, end = range_indices\n    for i in range(start, end + 1):\n        if nums[i] == target:\n            return True\n    return False\n```", "code": "def check_number_in_range(nums, target, range_indices):\n    start, end = range_indices\n    for i in range(start, end + 1):\n        if nums[i] == target:\n            return True\n    return False", "entry_point": "check_number_in_range", "testcase": ["assert check_number_in_range([1, 2, 3, 4, 5], 3, (0, 4)) == True", "assert check_number_in_range([1, 2, 3, 4, 5], 6, (0, 4)) == False", "assert check_number_in_range([10, 20, 30, 40, 50], 30, (1, 3)) == True"]}
{"seq_id": 73602158659, "instruction": "Write a python function to find the length of the longest substring without repeating characters in the given string.", "output": "Here is the code to solve this problem: \n```python\ndef len_longest_substring(s):\n    if not s:\n        return 0\n\n    char_map = {}\n    left = 0\n    max_length = 0\n\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n\n    return max_length\n```", "code": "def len_longest_substring(s):\n    if not s:\n        return 0\n\n    char_map = {}\n    left = 0\n    max_length = 0\n\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n\n    return max_length", "entry_point": "len_longest_substring", "testcase": ["assert len_longest_substring(\"pwwkew\") == 3", "assert len_longest_substring(\"bbbbb\") == 1", "assert len_longest_substring(\"abcabcbb\") == 3"]}
{"seq_id": 33838210072, "instruction": "Write a function to find the first repeating element in the given array.", "output": "Here is the code to solve this problem: \n```python\ndef first_repeating(arr):\n    count = {}\n    for i in arr:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for i in arr:\n        if count[i] > 1:\n            return i\n    return -1\n```", "code": "def first_repeating(arr):\n    count = {}\n    for i in arr:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for i in arr:\n        if count[i] > 1:\n            return i\n    return -1", "entry_point": "first_repeating", "testcase": ["assert first_repeating([10, 5, 3, 4, 3, 5, 6]) == 5", "assert first_repeating([2, 1, 3, 4]) == -1", "assert first_repeating([6, 1, 9, 5, 3, 4, 9]) == 9"]}
{"seq_id": 12578471491, "instruction": "Write a function that takes a list of integers and returns the minimum and maximum numbers in the list using a heap data structure. The function should ignore any duplicate numbers and return the unique minimum and maximum numbers.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef heap_min_max(lst):\n    unique_numbers = list(set(lst))\n    max_heap = []\n    min_heap = []\n    \n    for num in unique_numbers:\n        heapq.heappush(max_heap, -num)\n        heapq.heappush(min_heap, num)\n    \n    if not max_heap:\n        return [0, 0]\n    \n    max_num = -heapq.heappop(max_heap)\n    min_num = heapq.heappop(min_heap)\n    \n    return (min_num, max_num)\n```", "code": "import heapq\n\ndef heap_min_max(lst):\n    unique_numbers = list(set(lst))\n    max_heap = []\n    min_heap = []\n    \n    for num in unique_numbers:\n        heapq.heappush(max_heap, -num)\n        heapq.heappush(min_heap, num)\n    \n    if not max_heap:\n        return [0, 0]\n    \n    max_num = -heapq.heappop(max_heap)\n    min_num = heapq.heappop(min_heap)\n    \n    return (min_num, max_num)", "entry_point": "heap_min_max", "testcase": ["assert heap_min_max([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == (10, 100)", "assert heap_min_max([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == (0, 9)", "assert heap_min_max([4, 5, 6, 1, 2, 3, 4, 5, 6]) == (1, 6)"]}
{"seq_id": 28877081933, "instruction": "Write a function to find the minimum number of operations required to convert a given number into a sum of squares.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef minimum_squares(n):\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = i\n        for j in range(1, int(math.sqrt(i))+1):\n            temp = j * j\n            dp[i] = min(dp[i], dp[i-temp] + 1)\n    return dp[n]\n```", "code": "import math\n\ndef minimum_squares(n):\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = i\n        for j in range(1, int(math.sqrt(i))+1):\n            temp = j * j\n            dp[i] = min(dp[i], dp[i-temp] + 1)\n    return dp[n]", "entry_point": "minimum_squares", "testcase": ["assert minimum_squares(13) == 2", "assert minimum_squares(100) == 1", "assert minimum_squares(12) == 3"]}
{"seq_id": 31827524826, "instruction": "Write a function to find the maximum product of two elements in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_product(arr):\n    if len(arr) < 2:\n        return None\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n```", "code": "def find_max_product(arr):\n    if len(arr) < 2:\n        return None\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product", "entry_point": "find_max_product", "testcase": ["assert find_max_product([10, 20]) == 200", "assert find_max_product([0, 0, 0, 0]) == 0", "assert find_max_product([-1, -2, -3, -4]) == 12", "assert find_max_product([1, 5, 2, -7, 3]) == 15", "assert find_max_product([100]) == None"]}
{"seq_id": 18309632224, "instruction": "Write a function to check if a group of rectangles can form a perfect rectangle.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef isRectangleCover(rectangles):\n    area, x, y, x1, y1 = 0, rectangles[0][0], rectangles[0][1], rectangles[0][2], rectangles[0][3]\n    dic = Counter()\n    for val in rectangles:\n        area += (val[2] - val[0]) * (val[3] - val[1])\n        x = min(x, val[0])\n        y = min(y, val[1])\n        x1 = max(x1, val[2])\n        y1 = max(y1, val[3])\n        dic[(val[0], val[1])] += 1\n        dic[(val[0], val[3])] += 1\n        dic[(val[2], val[3])] += 1\n        dic[(val[2], val[1])] += 1\n    if area != (x1 - x) * (y1 - y):\n        return False\n    if dic[(x, y)] != 1 or dic[(x, y1)] != 1 or dic[(x1, y)] != 1 or dic[(x1, y1)] != 1:\n        return False\n    del dic[(x, y)], dic[(x, y1)], dic[(x1, y)], dic[(x1, y1)]\n    return not any(val == 1 or val == 3 for val in dic.values())\n```", "code": "from collections import Counter\n\ndef isRectangleCover(rectangles):\n    area, x, y, x1, y1 = 0, rectangles[0][0], rectangles[0][1], rectangles[0][2], rectangles[0][3]\n    dic = Counter()\n    for val in rectangles:\n        area += (val[2] - val[0]) * (val[3] - val[1])\n        x = min(x, val[0])\n        y = min(y, val[1])\n        x1 = max(x1, val[2])\n        y1 = max(y1, val[3])\n        dic[(val[0], val[1])] += 1\n        dic[(val[0], val[3])] += 1\n        dic[(val[2], val[3])] += 1\n        dic[(val[2], val[1])] += 1\n    if area != (x1 - x) * (y1 - y):\n        return False\n    if dic[(x, y)] != 1 or dic[(x, y1)] != 1 or dic[(x1, y)] != 1 or dic[(x1, y1)] != 1:\n        return False\n    del dic[(x, y)], dic[(x, y1)], dic[(x1, y)], dic[(x1, y1)]\n    return not any(val == 1 or val == 3 for val in dic.values())", "entry_point": "isRectangleCover", "testcase": ["assert isRectangleCover([[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]) == False", "assert isRectangleCover([[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]) == True", "assert isRectangleCover([[1,1,2,3],[1,3,2,4],[3,2,4,4],[1,2,4,4]]) == False"]}
{"seq_id": 36310978331, "instruction": "Write a function to find the maximum depth of a binary tree using Breadth-First Search (BFS).", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth_bfs(root):\n    if not root:\n        return 0\n\n    queue = deque([root])\n    depth = 0\n\n    while queue:\n        depth += 1\n        for _ in range(len(queue)):\n            current_node = queue.popleft()\n            if current_node.left:\n                queue.append(current_node.left)\n            if current_node.right:\n                queue.append(current_node.right)\n\n    return depth\n\n# Test cases\nassert max_depth_bfs(TreeNode(1, TreeNode(2), TreeNode(3))) == 2\nassert max_depth_bfs(TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))) == 3\nassert max_depth_bfs(TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(7), TreeNode(8)), TreeNode(5)), TreeNode(3))) == 4\n```", "code": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth_bfs(root):\n    if not root:\n        return 0\n\n    queue = deque([root])\n    depth = 0\n\n    while queue:\n        depth += 1\n        for _ in range(len(queue)):\n            current_node = queue.popleft()\n            if current_node.left:\n                queue.append(current_node.left)\n            if current_node.right:\n                queue.append(current_node.right)\n\n    return depth\n\n# Test cases\nassert max_depth_bfs(TreeNode(1, TreeNode(2), TreeNode(3))) == 2\nassert max_depth_bfs(TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))) == 3\nassert max_depth_bfs(TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(7), TreeNode(8)), TreeNode(5)), TreeNode(3))) == 4", "entry_point": "max_depth_bfs", "testcase": ["assert max_depth_bfs(TreeNode(1, TreeNode(2), TreeNode(3))) == 2", "assert max_depth_bfs(TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(7), TreeNode(8)), TreeNode(5)), TreeNode(3))) == 4", "assert max_depth_bfs(TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))) == 3"]}
{"seq_id": 72462200948, "instruction": "Write a function to find the least common multiple (LCM) of two numbers.", "output": "Here is the code to solve this problem: \n```python\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n```", "code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "entry_point": "lcm", "testcase": ["assert lcm(4, 6) == 12", "assert lcm(14, 8) == 56", "assert lcm(21, 6) == 42"]}
{"seq_id": 26741061190, "instruction": "Write a function to segregate even and odd numbers in an array. All even numbers should come before odd numbers in the output array. The relative order of the even and odd numbers should be the same as in the original array.", "output": "Here is the code to solve this problem: \n```python\ndef segregate_even_odd(nums):\n    even = [num for num in nums if num % 2 == 0]\n    odd = [num for num in nums if num % 2 != 0]\n    return even + odd\n```", "code": "def segregate_even_odd(nums):\n    even = [num for num in nums if num % 2 == 0]\n    odd = [num for num in nums if num % 2 != 0]\n    return even + odd", "entry_point": "segregate_even_odd", "testcase": ["assert segregate_even_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6, 1, 3, 5]", "assert segregate_even_odd([4, 2, 5, 3, 1]) == [4, 2, 5, 3, 1]", "assert segregate_even_odd([10, 12, 3, 5, 7, 19]) == [10, 12, 3, 5, 7, 19]"]}
{"seq_id": 40615370088, "instruction": "Write a function to find the maximum rank of a network based on the given number of cities (n) and a list of roads connecting these cities. The rank of a network is defined as the sum of the degrees of two cities minus the number of direct roads between them. The degree of a city is the number of roads connected to it.", "output": "Here is the code to solve this problem: \n```python\ndef maximal_network_rank(n, roads):\n    grp = [[False] * n for _ in range(n)]\n    degree = [0] * n\n    for a,b in roads:\n        degree[a] += 1\n        degree[b] += 1\n        grp[a][b] = True\n        grp[b][a] = True\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            rank = degree[i] + degree[j] - grp[i][j]\n            ans = max(ans, rank)\n    return ans\n```", "code": "def maximal_network_rank(n, roads):\n    grp = [[False] * n for _ in range(n)]\n    degree = [0] * n\n    for a,b in roads:\n        degree[a] += 1\n        degree[b] += 1\n        grp[a][b] = True\n        grp[b][a] = True\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            rank = degree[i] + degree[j] - grp[i][j]\n            ans = max(ans, rank)\n    return ans", "entry_point": "maximal_network_rank", "testcase": ["assert maximal_network_rank(4, [[0,1],[0,3],[1,2],[1,3]]) == 4", "assert maximal_network_rank(8, [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]) == 5", "assert maximal_network_rank(5, [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]) == 5"]}
{"seq_id": 11551764972, "instruction": "Write a function that takes a list of numbers and a target number, then finds two numbers in the list that add up to the target.", "output": "Here is the code to solve this problem: \n```python\ndef find_two_sum(nums, target):\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_to_index:\n            return (num_to_index[complement], i)\n        num_to_index[num] = i\n    return None\n```", "code": "def find_two_sum(nums, target):\n    num_to_index = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_to_index:\n            return (num_to_index[complement], i)\n        num_to_index[num] = i\n    return None", "entry_point": "find_two_sum", "testcase": ["assert find_two_sum([2, 7, 11, 15], 9) == (0, 1)", "assert find_two_sum([3, 2, 4], 6) == (1, 2)", "assert find_two_sum([3, 3], 6) == (0, 1)"]}
{"seq_id": 69884540478, "instruction": "Write a python function to find the longest substring with at most two unique characters.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring_with_2_unique_chars(s):\n    if len(s) == 0:\n        return 0\n    left = 0\n    right = 0\n    max_len = 0\n    char_index = {}\n    while right < len(s):\n        if s[right] in char_index:\n            char_index[s[right]] = right\n        else:\n            if len(char_index) == 2:\n                min_index = min(char_index.values())\n                left = min_index + 1\n                del char_index[s[min_index]]\n            char_index[s[right]] = right\n        max_len = max(max_len, right - left + 1)\n        right += 1\n    return max_len\n```", "code": "def longest_substring_with_2_unique_chars(s):\n    if len(s) == 0:\n        return 0\n    left = 0\n    right = 0\n    max_len = 0\n    char_index = {}\n    while right < len(s):\n        if s[right] in char_index:\n            char_index[s[right]] = right\n        else:\n            if len(char_index) == 2:\n                min_index = min(char_index.values())\n                left = min_index + 1\n                del char_index[s[min_index]]\n            char_index[s[right]] = right\n        max_len = max(max_len, right - left + 1)\n        right += 1\n    return max_len", "entry_point": "longest_substring_with_2_unique_chars", "testcase": ["assert longest_substring_with_2_unique_chars(\"abcabcabc\") == 2", "assert longest_substring_with_2_unique_chars(\"ccaabbb\") == 5", "assert longest_substring_with_2_unique_chars(\"eceba\") == 3"]}
{"seq_id": 38617046009, "instruction": "Write a function to find the shortest repeating pattern within a string. If no repeating pattern exists, return None.", "output": "Here is the code to solve this problem: \n```python\ndef shortest_repeating_pattern(s: str) -> str or None:\n    if len(set(s)) == len(s):\n        return None\n\n    for i in range(1, len(s)//2 + 1):\n        if len(s) % i == 0:\n            if s[:i] * (len(s)//i) == s:\n                return s[:i]\n    return None\n```", "code": "def shortest_repeating_pattern(s: str) -> str or None:\n    if len(set(s)) == len(s):\n        return None\n\n    for i in range(1, len(s)//2 + 1):\n        if len(s) % i == 0:\n            if s[:i] * (len(s)//i) == s:\n                return s[:i]\n    return None", "entry_point": "shortest_repeating_pattern", "testcase": ["assert shortest_repeating_pattern(\"abcabcabc\") == \"abc\"", "assert shortest_repeating_pattern(\"abcdef\") == None", "assert shortest_repeating_pattern(\"abcdabcdabcd\") == \"abcd\""]}
{"seq_id": 73948799257, "instruction": "Write a function to find all the possible rotation of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef all_rotations(string):\n    rotations = [string]\n    for i in range(1, len(string)):\n        string = string[1:] + string[0]\n        rotations.append(string)\n    return rotations\n```", "code": "def all_rotations(string):\n    rotations = [string]\n    for i in range(1, len(string)):\n        string = string[1:] + string[0]\n        rotations.append(string)\n    return rotations", "entry_point": "all_rotations", "testcase": ["assert all_rotations('a') == ['a']", "assert all_rotations('abc') == ['abc', 'bca', 'cab']", "assert all_rotations('hello') == ['hello', 'elloh', 'llohe', 'lohel', 'ohell']"]}
{"seq_id": 41440534242, "instruction": "Write a python function to generate the hailstone sequence of a number. The hailstone sequence starts with a given number n, then follows these rules:\n- If n is 1, the sequence ends.\n- If n is even, the next number in the sequence is n/2.\n- If n is odd, the next number in the sequence is 3n + 1.", "output": "Here is the code to solve this problem: \n```python\ndef hailstone(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n```", "code": "def hailstone(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence", "entry_point": "hailstone", "testcase": ["assert hailstone(7) == [7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]", "assert hailstone(1) == [1]", "assert hailstone(12) == [12, 6, 3, 10, 5, 16, 8, 4, 2, 1]"]}
{"seq_id": 8801640723, "instruction": "Write a python function to find the number of unique substrings in a given string. A substring is a contiguous sequence of characters within a string.", "output": "Here is the code to solve this problem: \n```python\ndef unique_substrings(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return len(substrings)\n```", "code": "def unique_substrings(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return len(substrings)", "entry_point": "unique_substrings", "testcase": ["assert unique_substrings(\"abcd\") == 10", "assert unique_substrings(\"aaa\") == 3", "assert unique_substrings(\"abc\") == 6"]}
{"seq_id": 44069673831, "instruction": "Write a function to find the longest common prefix string amongst an array of strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest_str = min(strs, key=len)\n    for i, char in enumerate(shortest_str):\n        for other in strs:\n            if other[i] != char:\n                return shortest_str[:i]\n    return shortest_str\n```", "code": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest_str = min(strs, key=len)\n    for i, char in enumerate(shortest_str):\n        for other in strs:\n            if other[i] != char:\n                return shortest_str[:i]\n    return shortest_str", "entry_point": "longest_common_prefix", "testcase": ["assert longest_common_prefix([\"throne\",\"throne\"]) == \"throne\"", "assert longest_common_prefix([\"interspecies\",\"interstellar\",\"interstate\"]) == \"inters\"", "assert longest_common_prefix([\"dog\",\"racecar\",\"car\"]) == \"\"", "assert longest_common_prefix([\"flower\",\"flow\",\"flight\"]) == \"fl\""]}
{"seq_id": 4582163070, "instruction": "Write a function to perform the multiplication of tuple elements in the given two nested tuples.", "output": "Here is the code to solve this problem: \n```python\ndef multiply_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n              for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n```", "code": "def multiply_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n              for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "entry_point": "multiply_nested_tuples", "testcase": ["assert multiply_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert multiply_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((24, 45), (30, 77), (12, 33), (27, 60))", "assert multiply_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((14, 32), (20, 60), (6, 20), (16, 44))"]}
{"seq_id": 5203701685, "instruction": "Write a python function to find the nth digit in the concatenated positive integers series.", "output": "Here is the code to solve this problem: \n```python\ndef find_nth_digit(n):\n    size = 1\n    length = 9\n    while n > length * size:\n        n -= length * size\n        size += 1\n        length *= 10\n    q, r = divmod(n - 1, size)\n    s = str(10 ** (size - 1) + q)\n    return int(s[r])\n```", "code": "def find_nth_digit(n):\n    size = 1\n    length = 9\n    while n > length * size:\n        n -= length * size\n        size += 1\n        length *= 10\n    q, r = divmod(n - 1, size)\n    s = str(10 ** (size - 1) + q)\n    return int(s[r])", "entry_point": "find_nth_digit", "testcase": ["assert find_nth_digit(3) == 3", "assert find_nth_digit(11) == 0", "assert find_nth_digit(15) == 2", "assert find_nth_digit(100) == 5"]}
{"seq_id": 34564985386, "instruction": "Write a function to find the number of common divisors between two positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef common_divisors(a, b):\n    min_num = min(a, b)\n    divisors = 0\n    for i in range(1, min_num + 1):\n        if a % i == 0 and b % i == 0:\n            divisors += 1\n    return divisors\n```", "code": "def common_divisors(a, b):\n    min_num = min(a, b)\n    divisors = 0\n    for i in range(1, min_num + 1):\n        if a % i == 0 and b % i == 0:\n            divisors += 1\n    return divisors", "entry_point": "common_divisors", "testcase": ["assert common_divisors(12, 6) == 4", "assert common_divisors(100, 200) == 9", "assert common_divisors(25, 30) == 2"]}
{"seq_id": 42426215846, "instruction": "Write a python function to generate all possible permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef str_permutations(str1):\n    if len(str1) == 1:\n        return [str1]\n    permutations = []\n    for i in range(len(str1)):\n        char = str1[i]\n        remaining = str1[:i] + str1[i+1:]\n        for perm in str_permutations(remaining):\n            permutations.append(char + perm)\n    return permutations\n```", "code": "def str_permutations(str1):\n    if len(str1) == 1:\n        return [str1]\n    permutations = []\n    for i in range(len(str1)):\n        char = str1[i]\n        remaining = str1[:i] + str1[i+1:]\n        for perm in str_permutations(remaining):\n            permutations.append(char + perm)\n    return permutations", "entry_point": "str_permutations", "testcase": ["assert str_permutations('a') == ['a']", "assert str_permutations('ab') == ['ab', 'ba']", "assert str_permutations('abc') == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']"]}
{"seq_id": 3096024661, "instruction": "Write a python function to find the largest subarray with 0 sum.", "output": "Here is the code to solve this problem: \n```python\ndef maxLen(arr):\n    hash_map = {}\n    cur_sum = 0\n    max_len = 0\n    for i in range(len(arr)):\n        cur_sum += arr[i]\n        if arr[i] is 0 and max_len == 0:\n            max_len = 1\n        if cur_sum == 0:\n            max_len = i + 1\n        if cur_sum in hash_map:\n            max_len = max(max_len, i - hash_map[cur_sum])\n        else:\n            hash_map[cur_sum] = i\n    return max_len\n```", "code": "def maxLen(arr):\n    hash_map = {}\n    cur_sum = 0\n    max_len = 0\n    for i in range(len(arr)):\n        cur_sum += arr[i]\n        if arr[i] is 0 and max_len == 0:\n            max_len = 1\n        if cur_sum == 0:\n            max_len = i + 1\n        if cur_sum in hash_map:\n            max_len = max(max_len, i - hash_map[cur_sum])\n        else:\n            hash_map[cur_sum] = i\n    return max_len", "entry_point": "maxLen", "testcase": ["assert maxLen([15, -2, 2, -8, 1, 7, 10, 23]) == 5", "assert maxLen([1, 2, -3, 3]) == 3", "assert maxLen([1, 2, 3, -6, 4]) == 4"]}
{"seq_id": 31160793371, "instruction": "Write a function to find the smallest possible length of a substring of `s`, that has all the characters of `t`.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef min_length_substring(s, t):\n    if not s or not t:\n        return -1\n\n    t_count = Counter(t)\n    required = len(t_count)\n    formed = 0\n    window_counts = Counter()\n    ans = float(\"inf\"), None, None\n\n    l = 0\n    for r in range(len(s)):\n        character = s[r]\n        window_counts[character] += 1\n\n        if character in t_count and window_counts[character] == t_count[character]:\n            formed += 1\n\n        while l <= r and formed == required:\n            character = s[l]\n\n            if r - l + 1 < ans[0]:\n                ans = (r - l + 1, l, r)\n\n            window_counts[character] -= 1\n            if character in t_count and window_counts[character] < t_count[character]:\n                formed -= 1\n\n            l += 1\n\n    return ans[0] if ans[0] != float(\"inf\") else -1\n```", "code": "from collections import Counter\n\ndef min_length_substring(s, t):\n    if not s or not t:\n        return -1\n\n    t_count = Counter(t)\n    required = len(t_count)\n    formed = 0\n    window_counts = Counter()\n    ans = float(\"inf\"), None, None\n\n    l = 0\n    for r in range(len(s)):\n        character = s[r]\n        window_counts[character] += 1\n\n        if character in t_count and window_counts[character] == t_count[character]:\n            formed += 1\n\n        while l <= r and formed == required:\n            character = s[l]\n\n            if r - l + 1 < ans[0]:\n                ans = (r - l + 1, l, r)\n\n            window_counts[character] -= 1\n            if character in t_count and window_counts[character] < t_count[character]:\n                formed -= 1\n\n            l += 1\n\n    return ans[0] if ans[0] != float(\"inf\") else -1", "entry_point": "min_length_substring", "testcase": ["assert min_length_substring(\"ADOBECODEBANC\", \"ABC\") == 4", "assert min_length_substring(\"A\", \"AA\") == -1", "assert min_length_substring(\"aabcbb\", \"abc\") == 3"]}
{"seq_id": 3142484254, "instruction": "Write a python function that takes a list of strings as input and returns a dictionary where the keys are the unique strings in the list and the values are the lengths of those strings.", "output": "Here is the code to solve this problem: \n```python\ndef string_lengths(strings):\n    return {string: len(string) for string in strings}\n```", "code": "def string_lengths(strings):\n    return {string: len(string) for string in strings}", "entry_point": "string_lengths", "testcase": ["assert string_lengths([\"hello\", \"world\", \"hello\", \"python\"]) == {\"hello\": 5, \"world\": 5, \"python\": 6}", "assert string_lengths([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]) == {\"a\": 1, \"ab\": 2, \"abc\": 3, \"abcd\": 4, \"abcde\": 5}", "assert string_lengths([\"apple\", \"banana\", \"cherry\"]) == {\"apple\": 5, \"banana\": 6, \"cherry\": 6}"]}
{"seq_id": 16551152440, "instruction": "Write a python function to find the number of ways to reach the last cell of a grid from the first cell using only right and down moves.", "output": "Here is the code to solve this problem: \n```python\ndef numberOfWays(m, n):\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j - 1]\n    return dp[m - 1][n - 1]\n```", "code": "def numberOfWays(m, n):\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = 1\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j - 1]\n    return dp[m - 1][n - 1]", "entry_point": "numberOfWays", "testcase": ["assert numberOfWays(3, 3) == 6", "assert numberOfWays(2, 2) == 2", "assert numberOfWays(4, 4) == 20"]}
{"seq_id": 12371837132, "instruction": "Write a python function that calculates the number of days until a deadline given the current day and the deadline day. Both the current day and the deadline day are represented as strings in the format \"YYYY-MM-DD\". Assume that the current day and the deadline day are within the same year.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\n\ndef days_until_deadline(current_day, deadline_day):\n    current_date = datetime.strptime(current_day, \"%Y-%m-%d\")\n    deadline_date = datetime.strptime(deadline_day, \"%Y-%m-%d\")\n    delta = deadline_date - current_date\n    return delta.days\n```", "code": "from datetime import datetime\n\ndef days_until_deadline(current_day, deadline_day):\n    current_date = datetime.strptime(current_day, \"%Y-%m-%d\")\n    deadline_date = datetime.strptime(deadline_day, \"%Y-%m-%d\")\n    delta = deadline_date - current_date\n    return delta.days", "entry_point": "days_until_deadline", "testcase": ["assert days_until_deadline(\"2023-04-13\", \"2023-04-21\") == 8", "assert days_until_deadline(\"2023-12-30\", \"2023-12-31\") == 1", "assert days_until_deadline(\"2023-01-01\", \"2023-01-15\") == 14"]}
{"seq_id": 34764493665, "instruction": "Write a python function to find the maximum sum of a subarray with the length of exactly k.", "output": "Here is the code to solve this problem: \n```python\ndef max_sum_subarray_of_size_k(k, arr):\n    max_sum = 0\n    window_sum = 0\n    window_start = 0\n\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end]\n        if window_end >= k-1:\n            max_sum = max(max_sum, window_sum)\n            window_sum -= arr[window_start]\n            window_start += 1\n    return max_sum\n```", "code": "def max_sum_subarray_of_size_k(k, arr):\n    max_sum = 0\n    window_sum = 0\n    window_start = 0\n\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end]\n        if window_end >= k-1:\n            max_sum = max(max_sum, window_sum)\n            window_sum -= arr[window_start]\n            window_start += 1\n    return max_sum", "entry_point": "max_sum_subarray_of_size_k", "testcase": ["assert max_sum_subarray_of_size_k(3, [2, 1, 5, 1, 3, 2]) == 9", "assert max_sum_subarray_of_size_k(4, [1, 4, 2, 10, 23, 3, 1, 0, 20]) == 39", "assert max_sum_subarray_of_size_k(2, [2, 3, 4, 1, 5]) == 7"]}
{"seq_id": 24772219489, "instruction": "Write a python function to find the longest string in a list of strings.", "output": "Here is the code to solve this problem: \n```python\ndef get_longest_string(strings):\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n```", "code": "def get_longest_string(strings):\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "entry_point": "get_longest_string", "testcase": ["assert get_longest_string([\"python\", \"java\", \"c++\", \"javascript\"]) == \"javascript\"", "assert get_longest_string([\"a\", \"b\", \"c\"]) == \"a\"", "assert get_longest_string([\"cat\", \"dog\", \"elephant\"]) == \"elephant\""]}
{"seq_id": 29744332050, "instruction": "Write a python function to find the smallest common multiple of two given numbers.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_common_multiple(a,b):\n    #finding the greatest common divisor\n    def gcd(x,y):\n        while(y):\n            x,y=y,x%y\n        return x\n    #finding the least common multiple\n    lcm = (a*b)//gcd(a,b)\n    return lcm\n```", "code": "def smallest_common_multiple(a,b):\n    #finding the greatest common divisor\n    def gcd(x,y):\n        while(y):\n            x,y=y,x%y\n        return x\n    #finding the least common multiple\n    lcm = (a*b)//gcd(a,b)\n    return lcm", "entry_point": "smallest_common_multiple", "testcase": ["assert smallest_common_multiple(5,10) == 10", "assert smallest_common_multiple(21,6) == 42", "assert smallest_common_multiple(4,6) == 12"]}
{"seq_id": 24491382884, "instruction": "Write a function to calculate the number of unique paths in a grid from the top-left corner to the bottom-right corner. You can only move either down or to the right at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef unique_paths(m, n):\n    dp = [[1]*n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]\n```", "code": "def unique_paths(m, n):\n    dp = [[1]*n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]", "entry_point": "unique_paths", "testcase": ["assert unique_paths(7, 3) == 28", "assert unique_paths(3, 3) == 6", "assert unique_paths(3, 2) == 3"]}
{"seq_id": 27321934075, "instruction": "Write a function to find the number of islands in a given grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.", "output": "Here is the code to solve this problem: \n```python\ndef find_islands(grid):\n    if not grid:\n        return 0\n\n    def dfs(i, j):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != 1:\n            return\n        grid[i][j] = 0\n        dfs(i+1, j)\n        dfs(i-1, j)\n        dfs(i, j+1)\n        dfs(i, j-1)\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    return count\n```", "code": "def find_islands(grid):\n    if not grid:\n        return 0\n\n    def dfs(i, j):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != 1:\n            return\n        grid[i][j] = 0\n        dfs(i+1, j)\n        dfs(i-1, j)\n        dfs(i, j+1)\n        dfs(i, j-1)\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    return count", "entry_point": "find_islands", "testcase": ["assert find_islands([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]) == 3", "assert find_islands([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 0", "assert find_islands([[1, 1, 0, 1, 1], [1, 0, 0, 0, 0], [0, 0, 1, 0, 1], [0, 0, 0, 1, 1]]) == 4"]}
{"seq_id": 28590946317, "instruction": "Write a python function to check if a given graph is bipartite or not.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef is_bipartite(graph):\n    color = {}\n    for node in range(len(graph)):\n        if node not in color:\n            color[node] = 0\n            queue = deque([node])\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if neighbor in color:\n                        if color[neighbor] == color[node]:\n                            return False\n                    else:\n                        color[neighbor] = 1 - color[node]\n                        queue.append(neighbor)\n    return True\n```", "code": "from collections import deque\n\ndef is_bipartite(graph):\n    color = {}\n    for node in range(len(graph)):\n        if node not in color:\n            color[node] = 0\n            queue = deque([node])\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if neighbor in color:\n                        if color[neighbor] == color[node]:\n                            return False\n                    else:\n                        color[neighbor] = 1 - color[node]\n                        queue.append(neighbor)\n    return True", "entry_point": "is_bipartite", "testcase": ["assert is_bipartite([[1,2],[0,3],[0,3],[1,2]]) == True", "assert is_bipartite([[1,3],[0,2],[1,3],[0,2]]) == True", "assert is_bipartite([[1,2,3],[0,2],[0,1,3],[0,2]]) == False"]}
{"seq_id": 40697727209, "instruction": "Write a function to count the number of subarrays with exactly K distinct elements in a given array A.\n\nFunction Signature: `def subarrays_with_k_distinct(A: List[int], K: int) -> int`", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\nfrom collections import Counter\n\ndef subarrays_with_k_distinct(A: List[int], K: int) -> int:\n    def atmostk(A, K):\n        c = Counter()\n        res = i = 0\n        for j in range(len(A)):\n            if c[A[j]] == 0:\n                K -= 1\n            c[A[j]] += 1\n\n            while K < 0:\n                c[A[i]] -= 1\n                if c[A[i]] == 0:\n                    K += 1\n                i += 1\n            res += j - i + 1\n        return res\n\n    return atmostk(A, K) - atmostk(A, K - 1)\n```", "code": "from typing import List\nfrom collections import Counter\n\ndef subarrays_with_k_distinct(A: List[int], K: int) -> int:\n    def atmostk(A, K):\n        c = Counter()\n        res = i = 0\n        for j in range(len(A)):\n            if c[A[j]] == 0:\n                K -= 1\n            c[A[j]] += 1\n\n            while K < 0:\n                c[A[i]] -= 1\n                if c[A[i]] == 0:\n                    K += 1\n                i += 1\n            res += j - i + 1\n        return res\n\n    return atmostk(A, K) - atmostk(A, K - 1)", "entry_point": "subarrays_with_k_distinct", "testcase": ["assert subarrays_with_k_distinct([1, 2, 1, 3, 4], 3) == 3", "assert subarrays_with_k_distinct([1, 2, 1, 2, 3], 2) == 7", "assert subarrays_with_k_distinct([1, 2, 3, 4, 5], 1) == 5"]}
{"seq_id": 11860768217, "instruction": "Write a function that takes a list of integers as input and returns a new list with only the prime numbers from the original list.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef filter_primes(numbers):\n    return [num for num in numbers if is_prime(num)]\n```", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef filter_primes(numbers):\n    return [num for num in numbers if is_prime(num)]", "entry_point": "filter_primes", "testcase": ["assert filter_primes([11, 13, 17, 19, 23, 29, 31]) == [11, 13, 17, 19, 23, 29, 31]", "assert filter_primes([4, 6, 8, 10, 12, 14, 16, 18, 20]) == []", "assert filter_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 5, 7]"]}
{"seq_id": 24900740007, "instruction": "Write a python function to find the number of ways to decode a message using a given mapping of characters to numbers.", "output": "Here is the code to solve this problem: \n```python\ndef decode(s, mapping):\n    if not s:\n        return 1\n    if s[0] == '0':\n        return 0\n    count = decode(s[1:], mapping)\n    if len(s) >= 2 and s[:2] in mapping.values():\n        count += decode(s[2:], mapping)\n    return count\n```", "code": "def decode(s, mapping):\n    if not s:\n        return 1\n    if s[0] == '0':\n        return 0\n    count = decode(s[1:], mapping)\n    if len(s) >= 2 and s[:2] in mapping.values():\n        count += decode(s[2:], mapping)\n    return count", "entry_point": "decode", "testcase": ["assert decode('226', {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6', 'G': '7', 'H': '8', 'I': '9', 'J': '10', 'K': '11', 'L': '12', 'M': '13', 'N': '14', 'O': '15', 'P': '16', 'Q': '17', 'R': '18', 'S': '19', 'T': '20', 'U': '21', 'V': '22', 'W': '23', 'X': '24', 'Y': '25', 'Z': '26'}) == 3", "assert decode('12', {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6', 'G': '7', 'H': '8', 'I': '9', 'J': '10', 'K': '11', 'L': '12'}) == 2", "assert decode('0', {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6', 'G': '7', 'H': '8', 'I': '9', 'J': '10', 'K': '11', 'L': '12'}) == 0"]}
{"seq_id": 34425219398, "instruction": "Write a function that takes a list of strings and returns the shortest string that contains all the strings as substrings.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef shortest_string(arr):\n    def merge(s1, s2):\n        if s1 in s2:\n            return s2\n        for i in range(len(s2)):\n            if s1.startswith(s2[i:]):\n                return s2[:i] + s1\n        return s2 + s1\n    \n    res = \"a\" * 999\n    for perm in permutations(arr):\n        s = merge(perm[0], merge(perm[1], perm[2]))\n        if len(s) < len(res):\n            res = s\n        elif len(s) == len(res):\n            res = min(s, res)\n    return res\n```", "code": "from itertools import permutations\n\ndef shortest_string(arr):\n    def merge(s1, s2):\n        if s1 in s2:\n            return s2\n        for i in range(len(s2)):\n            if s1.startswith(s2[i:]):\n                return s2[:i] + s1\n        return s2 + s1\n    \n    res = \"a\" * 999\n    for perm in permutations(arr):\n        s = merge(perm[0], merge(perm[1], perm[2]))\n        if len(s) < len(res):\n            res = s\n        elif len(s) == len(res):\n            res = min(s, res)\n    return res", "entry_point": "shortest_string", "testcase": ["assert shortest_string([\"abc\", \"def\", \"ghi\"]) == \"abcdefghi\"", "assert shortest_string([\"a\", \"b\", \"c\"]) == \"abc\"", "assert shortest_string([\"ab\", \"bc\", \"cd\"]) == \"abcd\""]}
{"seq_id": 33624726549, "instruction": "Write a function to rotate elements of a list to the left by a given number of positions.", "output": "Here is the code to solve this problem: \n```python\ndef rotate_left(nums, k):\n    k = k % len(nums)\n    return nums[k:] + nums[:k]\n```", "code": "def rotate_left(nums, k):\n    k = k % len(nums)\n    return nums[k:] + nums[:k]", "entry_point": "rotate_left", "testcase": ["assert rotate_left([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]", "assert rotate_left([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]", "assert rotate_left([1, 2, 3, 4, 5], 7) == [3, 4, 5, 1, 2]", "assert rotate_left([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]"]}
{"seq_id": 20063888472, "instruction": "Write a function to find the kth smallest element in a given list of sorted lists.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef kth_smallest(matrix, k):\n    minheap = []\n    n = len(matrix)\n    for i in range(min(k, n)):\n        heapq.heappush(minheap, (matrix[i][0], i, 0))\n\n    cnt = 0\n    while cnt < k:\n        cnt += 1\n        x, i, j = heapq.heappop(minheap)\n        if j < n - 1: heapq.heappush(minheap, (matrix[i][j + 1], i, j + 1))\n    return x\n```", "code": "import heapq\n\ndef kth_smallest(matrix, k):\n    minheap = []\n    n = len(matrix)\n    for i in range(min(k, n)):\n        heapq.heappush(minheap, (matrix[i][0], i, 0))\n\n    cnt = 0\n    while cnt < k:\n        cnt += 1\n        x, i, j = heapq.heappop(minheap)\n        if j < n - 1: heapq.heappush(minheap, (matrix[i][j + 1], i, j + 1))\n    return x", "entry_point": "kth_smallest", "testcase": ["assert kth_smallest([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 5) == 5", "assert kth_smallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13", "assert kth_smallest([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 1"]}
{"seq_id": 10576620171, "instruction": "Write a function to find the number of distinct BSTs (binary search trees) that store values 1 to n.", "output": "Here is the code to solve this problem: \n```python\ndef count_distinct_bsts(n):\n    \"\"\"\n    Returns the number of structurally unique BST's (binary search trees)\n    that store values 1 ... n\n    \"\"\"\n    f = [0 for _ in range(n+1)]\n    f[0] = 1\n    for tot in range(1, n+1):\n        for left in range(tot):\n            f[tot] += f[left] * f[tot-1-left]\n    return f[-1]\n```", "code": "def count_distinct_bsts(n):\n    \"\"\"\n    Returns the number of structurally unique BST's (binary search trees)\n    that store values 1 ... n\n    \"\"\"\n    f = [0 for _ in range(n+1)]\n    f[0] = 1\n    for tot in range(1, n+1):\n        for left in range(tot):\n            f[tot] += f[left] * f[tot-1-left]\n    return f[-1]", "entry_point": "count_distinct_bsts", "testcase": ["assert count_distinct_bsts(4) == 14", "assert count_distinct_bsts(3) == 5", "assert count_distinct_bsts(5) == 42"]}
{"seq_id": 11607461487, "instruction": "Write a function to find the smallest substring that contains all the characters of a given pattern.", "output": "Here is the code to solve this problem: \n```python\ndef smallestSubstring(str, pattern):\n    dict_pat = {}\n    for i in range(len(pattern)):\n        dict_pat[pattern[i]] = dict_pat.get(pattern[i], 0) + 1\n\n    start, start_index, min_len = 0, -1, float('inf')\n    count = 0\n    dict_str = {}\n    for j in range(len(str)):\n        dict_str[str[j]] = dict_str.get(str[j], 0) + 1\n        if pattern.find(str[j]) != -1:\n            if dict_str[str[j]] <= dict_pat[str[j]]:\n                count += 1\n        if count == len(pattern):\n            while dict_str[str[start]] > dict_pat.get(str[start], 0) or dict_pat.get(str[start], 0) == 0:\n                if dict_str[str[start]] > dict_pat.get(str[start], 0):\n                    dict_str[str[start]] -= 1\n                start += 1\n            len_window = j - start + 1\n            if min_len > len_window:\n                min_len = len_window\n                start_index = start\n    return str[start_index: start_index + min_len]\n```", "code": "def smallestSubstring(str, pattern):\n    dict_pat = {}\n    for i in range(len(pattern)):\n        dict_pat[pattern[i]] = dict_pat.get(pattern[i], 0) + 1\n\n    start, start_index, min_len = 0, -1, float('inf')\n    count = 0\n    dict_str = {}\n    for j in range(len(str)):\n        dict_str[str[j]] = dict_str.get(str[j], 0) + 1\n        if pattern.find(str[j]) != -1:\n            if dict_str[str[j]] <= dict_pat[str[j]]:\n                count += 1\n        if count == len(pattern):\n            while dict_str[str[start]] > dict_pat.get(str[start], 0) or dict_pat.get(str[start], 0) == 0:\n                if dict_str[str[start]] > dict_pat.get(str[start], 0):\n                    dict_str[str[start]] -= 1\n                start += 1\n            len_window = j - start + 1\n            if min_len > len_window:\n                min_len = len_window\n                start_index = start\n    return str[start_index: start_index + min_len]", "entry_point": "smallestSubstring", "testcase": ["assert smallestSubstring(\"geeksforgeeks\", \"ork\") == \"ksfor\"", "assert smallestSubstring(\"windowss\", \"os\") == \"ows\"", "assert smallestSubstring(\"this is a test string\", \"tist\") == \"t stri\""]}
{"seq_id": 338467450, "instruction": "Write a function to check if a string is a permutation of a palindrome.", "output": "Here is the code to solve this problem: \n```python\ndef is_permutation_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n```", "code": "def is_permutation_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1", "entry_point": "is_permutation_palindrome", "testcase": ["assert is_permutation_palindrome(\"Not a Palindrome\") == False", "assert is_permutation_palindrome(\"A man a plan a canal Panama\") == True", "assert is_permutation_palindrome(\"Tact Coa\") == True", "assert is_permutation_palindrome(\"Was it a car or a cat I saw\") == True"]}
{"seq_id": 40029976068, "instruction": "Write a function to find the shortest distance from all buildings in a 2D grid. You can only move up, down, left, and right. The grid contains empty land (0), buildings (1), and obstacles (2). The function should return the shortest total travel distance to reach all buildings from the chosen empty land. If it is not possible to reach all buildings, return -1.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef shortest_distance(grid):\n    m, n = len(grid), len(grid[0])\n    total_buildings = sum(cell == 1 for row in grid for cell in row)\n    \n    distances = [[0] * n for _ in range(m)]\n    reachable = [[0] * n for _ in range(m)]\n    \n    def bfs(x, y):\n        queue = deque([(x, y)])\n        visited = set([(x, y)])\n        level = 0\n        \n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                x, y = queue.popleft()\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited:\n                        visited.add((nx, ny))\n                        distances[nx][ny] += level\n                        reachable[nx][ny] += 1\n                        queue.append((nx, ny))\n    \n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                bfs(i, j)\n    \n    min_distance = float('inf')\n    for i in range(m):\n        for j in range(n):\n            if reachable[i][j] == total_buildings:\n                min_distance = min(min_distance, distances[i][j])\n    \n    return min_distance if min_distance != float('inf') else -1\n```", "code": "from collections import deque\n\ndef shortest_distance(grid):\n    m, n = len(grid), len(grid[0])\n    total_buildings = sum(cell == 1 for row in grid for cell in row)\n    \n    distances = [[0] * n for _ in range(m)]\n    reachable = [[0] * n for _ in range(m)]\n    \n    def bfs(x, y):\n        queue = deque([(x, y)])\n        visited = set([(x, y)])\n        level = 0\n        \n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                x, y = queue.popleft()\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited:\n                        visited.add((nx, ny))\n                        distances[nx][ny] += level\n                        reachable[nx][ny] += 1\n                        queue.append((nx, ny))\n    \n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                bfs(i, j)\n    \n    min_distance = float('inf')\n    for i in range(m):\n        for j in range(n):\n            if reachable[i][j] == total_buildings:\n                min_distance = min(min_distance, distances[i][j])\n    \n    return min_distance if min_distance != float('inf') else -1", "entry_point": "shortest_distance", "testcase": ["assert shortest_distance([[1,0,0,0,1,2],[0,0,0,0,0,0],[0,0,1,0,0,0]]) == 6", "assert shortest_distance([[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]) == 7", "assert shortest_distance([[1,2]]) == -1"]}
{"seq_id": 2512540858, "instruction": "Write a function that takes a list of numbers as input and returns a new list where each number is rounded to the nearest integer. If the fractional part of a number is 0.5 or higher, the number should be rounded up, otherwise, it should be rounded down.", "output": "Here is the code to solve this problem: \n```python\nfrom math import floor, ceil\n\ndef round_list(numbers):\n    rounded_list = []\n    for number in numbers:\n        if number - floor(number) >= 0.5:\n            rounded_list.append(ceil(number))\n        else:\n            rounded_list.append(floor(number))\n    return rounded_list\n```", "code": "from math import floor, ceil\n\ndef round_list(numbers):\n    rounded_list = []\n    for number in numbers:\n        if number - floor(number) >= 0.5:\n            rounded_list.append(ceil(number))\n        else:\n            rounded_list.append(floor(number))\n    return rounded_list", "entry_point": "round_list", "testcase": ["assert round_list([0.9, 1.5, 2.3, 3.5, 4.6]) == [1, 2, 2, 4, 5]", "assert round_list([-1.2, -2.5, -3.7, -4.4]) == [-1, -2, -4, -4]", "assert round_list([1.2, 2.5, 3.7, 4.4]) == [1, 3, 4, 4]"]}
{"seq_id": 69969868160, "instruction": "Write a function to find whether a given string can be formed by concatenating the strings in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef can_form_string(target: str, strings: list) -> bool:\n    if target == \"\":\n        return True\n    for s in strings:\n        if target.startswith(s):\n            remaining = target[len(s):]\n            if can_form_string(remaining, strings):\n                return True\n    return False\n```", "code": "def can_form_string(target: str, strings: list) -> bool:\n    if target == \"\":\n        return True\n    for s in strings:\n        if target.startswith(s):\n            remaining = target[len(s):]\n            if can_form_string(remaining, strings):\n                return True\n    return False", "entry_point": "can_form_string", "testcase": ["assert can_form_string(\"hello\", [\"he\", \"llo\"]) == True", "assert can_form_string(\"world\", [\"wor\", \"ld\"]) == True", "assert can_form_string(\"python\", [\"py\", \"th\", \"on\"]) == True", "assert can_form_string(\"testcase\", [\"test\", \"case\"]) == True", "assert can_form_string(\"concatenate\", [\"con\", \"cat\", \"enate\"]) == True"]}
{"seq_id": 37691708104, "instruction": "Write a function that takes a string and a dictionary of words, and returns the shortest possible sentence formed from the dictionary that matches the given string. If no match is found, return None.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import Set\n\ndef shortest_sentence(s: str, word_dict: Set[str]) -> str:\n    n = len(s)\n    if not s or not word_dict:\n        return None\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = float('inf')\n        for j in range(i):\n            if s[j:i] in word_dict and dp[j] < dp[i]:\n                dp[i] = dp[j] + 1\n    if dp[n] == float('inf'):\n        return None\n    result = []\n    i = n\n    while i > 0:\n        for j in range(i):\n            if s[j:i] in word_dict and dp[j] == dp[i] - 1:\n                result.append(s[j:i])\n                i = j\n                break\n    return ' '.join(result[::-1])\n```", "code": "from typing import Set\n\ndef shortest_sentence(s: str, word_dict: Set[str]) -> str:\n    n = len(s)\n    if not s or not word_dict:\n        return None\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = float('inf')\n        for j in range(i):\n            if s[j:i] in word_dict and dp[j] < dp[i]:\n                dp[i] = dp[j] + 1\n    if dp[n] == float('inf'):\n        return None\n    result = []\n    i = n\n    while i > 0:\n        for j in range(i):\n            if s[j:i] in word_dict and dp[j] == dp[i] - 1:\n                result.append(s[j:i])\n                i = j\n                break\n    return ' '.join(result[::-1])", "entry_point": "shortest_sentence", "testcase": ["assert shortest_sentence(\"ilikecat\", {\"i\", \"like\", \"cats\"}) == None", "assert shortest_sentence(\"ilikecats\", {\"i\", \"like\", \"cats\"}) == \"i like cats\"", "assert shortest_sentence(\"iliketocats\", {\"i\", \"like\", \"to\", \"cats\"}) == \"i like to cats\""]}
{"seq_id": 2697685579, "instruction": "Write a python function to find the minimum length of a contiguous subarray with sum at least s.", "output": "Here is the code to solve this problem: \n```python\ndef min_subarray_length(s, nums):\n    n = len(nums)\n    min_len = float('inf')\n    start = 0\n    current_sum = 0\n    \n    for end in range(n):\n        current_sum += nums[end]\n        while current_sum >= s:\n            min_len = min(min_len, end - start + 1)\n            current_sum -= nums[start]\n            start += 1\n            \n    return min_len if min_len != float('inf') else 0\n```", "code": "def min_subarray_length(s, nums):\n    n = len(nums)\n    min_len = float('inf')\n    start = 0\n    current_sum = 0\n    \n    for end in range(n):\n        current_sum += nums[end]\n        while current_sum >= s:\n            min_len = min(min_len, end - start + 1)\n            current_sum -= nums[start]\n            start += 1\n            \n    return min_len if min_len != float('inf') else 0", "entry_point": "min_subarray_length", "testcase": ["assert min_subarray_length(7, [2,3,1,2,4,3]) == 2", "assert min_subarray_length(4, [1,4,4]) == 1", "assert min_subarray_length(11, [1,1,1,1,1,1,1,1]) == 0"]}
{"seq_id": 32026465966, "instruction": "Write a function to find the number of times a given substring appears in a string, considering both uppercase and lowercase letters.", "output": "Here is the code to solve this problem: \n```python\ndef find_substring(main_string, sub_string):\n    main_string = main_string.lower()\n    sub_string = sub_string.lower()\n    return main_string.count(sub_string)\n```", "code": "def find_substring(main_string, sub_string):\n    main_string = main_string.lower()\n    sub_string = sub_string.lower()\n    return main_string.count(sub_string)", "entry_point": "find_substring", "testcase": ["assert find_substring(\"HelloHelloHello\", \"hello\") == 3", "assert find_substring(\"PythonProgramming\", \"pro\") == 1", "assert find_substring(\"WorldWorld\", \"world\") == 2"]}
{"seq_id": 4007157791, "instruction": "Write a function to find the maximum element in a binary search tree (BST).", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_max_bst(arr):\n    if not arr:\n        return None\n    root = TreeNode(arr[0])\n    for i in range(1, len(arr)):\n        insert_bst(root, arr[i])\n    return find_max(root)\n\ndef insert_bst(root, val):\n    if not root:\n        return TreeNode(val)\n    if val < root.val:\n        root.left = insert_bst(root.left, val)\n    else:\n        root.right = insert_bst(root.right, val)\n    return root\n\ndef find_max(root):\n    if not root:\n        return None\n    while root.right:\n        root = root.right\n    return root.val\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_max_bst(arr):\n    if not arr:\n        return None\n    root = TreeNode(arr[0])\n    for i in range(1, len(arr)):\n        insert_bst(root, arr[i])\n    return find_max(root)\n\ndef insert_bst(root, val):\n    if not root:\n        return TreeNode(val)\n    if val < root.val:\n        root.left = insert_bst(root.left, val)\n    else:\n        root.right = insert_bst(root.right, val)\n    return root\n\ndef find_max(root):\n    if not root:\n        return None\n    while root.right:\n        root = root.right\n    return root.val", "entry_point": "find_max_bst", "testcase": ["assert find_max_bst([10, 5, 15, 1, 7, 12, 18]) == 18", "assert find_max_bst([7, 2, 9, 1, 3, 6, 8]) == 9", "assert find_max_bst([4, 2, 7, 1, 3]) == 7"]}
{"seq_id": 33496395346, "instruction": "Write a function to swap the positions of two elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef swap_elements(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n    return arr\n```", "code": "def swap_elements(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n    return arr", "entry_point": "swap_elements", "testcase": ["assert swap_elements([1, 2, 3, 4], 1, 3) == [1, 4, 3, 2]", "assert swap_elements(['a', 'b', 'c', 'd'], 2, 3) == ['a', 'b', 'd', 'c']", "assert swap_elements([5, 6, 7, 8, 9], 0, 4) == [9, 6, 7, 8, 5]"]}
{"seq_id": 1455968301, "instruction": "Write a function to find the maximum product of two integers in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_pair(nums):\n    nums.sort()\n    return max(nums[0] * nums[1], nums[-1] * nums[-2])\n```", "code": "def max_product_pair(nums):\n    nums.sort()\n    return max(nums[0] * nums[1], nums[-1] * nums[-2])", "entry_point": "max_product_pair", "testcase": ["assert max_product_pair([1, 2, 3, 4]) == 12", "assert max_product_pair([-1, -2, -3, -4]) == 12", "assert max_product_pair([1, 10, 2, 6, 5, 3]) == 60", "assert max_product_pair([0, 0, 0, 0]) == 0"]}
{"seq_id": 23794794790, "instruction": "Write a function to find the nth ugly number. Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.", "output": "Here is the code to solve this problem: \n```python\ndef nth_ugly_number(n):\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n\n    for i in range(1, n):\n        next_ugly = min(next_multiple_of_2, next_multiple_of_3, next_multiple_of_5)\n        ugly.append(next_ugly)\n\n        if next_ugly == next_multiple_of_2:\n            i2 += 1\n            next_multiple_of_2 = ugly[i2] * 2\n\n        if next_ugly == next_multiple_of_3:\n            i3 += 1\n            next_multiple_of_3 = ugly[i3] * 3\n\n        if next_ugly == next_multiple_of_5:\n            i5 += 1\n            next_multiple_of_5 = ugly[i5] * 5\n\n    return ugly[-1]\n\n# Test the function\nassert nth_ugly_number(10) == 12\nassert nth_ugly_number(1) == 1\nassert nth_ugly_number(20) == 36\n```", "code": "def nth_ugly_number(n):\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n\n    for i in range(1, n):\n        next_ugly = min(next_multiple_of_2, next_multiple_of_3, next_multiple_of_5)\n        ugly.append(next_ugly)\n\n        if next_ugly == next_multiple_of_2:\n            i2 += 1\n            next_multiple_of_2 = ugly[i2] * 2\n\n        if next_ugly == next_multiple_of_3:\n            i3 += 1\n            next_multiple_of_3 = ugly[i3] * 3\n\n        if next_ugly == next_multiple_of_5:\n            i5 += 1\n            next_multiple_of_5 = ugly[i5] * 5\n\n    return ugly[-1]\n\n# Test the function\nassert nth_ugly_number(10) == 12\nassert nth_ugly_number(1) == 1\nassert nth_ugly_number(20) == 36", "entry_point": "nth_ugly_number", "testcase": ["assert nth_ugly_number(10) == 12", "assert nth_ugly_number(20) == 36", "assert nth_ugly_number(1) == 1"]}
{"seq_id": 37284019898, "instruction": "Write a function to find the minimum number of operations to convert a number into 1. The operations allowed are:\n1. If the number is even, divide it by 2.\n2. If the number is odd, either increment or decrement it by 1.", "output": "Here is the code to solve this problem: \n```python\ndef min_operations_to_one(n):\n    operations = 0\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            if n == 3 or n % 4 == 1:\n                n -= 1\n            else:\n                n += 1\n        operations += 1\n    return operations\n```", "code": "def min_operations_to_one(n):\n    operations = 0\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            if n == 3 or n % 4 == 1:\n                n -= 1\n            else:\n                n += 1\n        operations += 1\n    return operations", "entry_point": "min_operations_to_one", "testcase": ["assert min_operations_to_one(8) == 3", "assert min_operations_to_one(4) == 2", "assert min_operations_to_one(7) == 4"]}
{"seq_id": 39431451437, "instruction": "Write a python function to find the frequency of repeated elements in a given array.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_frequency(arr,n): \n    return {k:v for k,v in Counter(arr).items() if v > 1}\n```", "code": "from collections import Counter\n\ndef find_frequency(arr,n): \n    return {k:v for k,v in Counter(arr).items() if v > 1}", "entry_point": "find_frequency", "testcase": ["assert find_frequency([1,2,3,1,1],5) == {1: 3}", "assert find_frequency([1,2,3,1,1,4,5,6],8) == {1: 3}", "assert find_frequency([1,1,2],3) == {1: 2}"]}
{"seq_id": 7540590029, "instruction": "Write a function to find the length of the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring(s: str) -> int:\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length\n```", "code": "def longest_substring(s: str) -> int:\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length", "entry_point": "longest_substring", "testcase": ["assert longest_substring(\"pwwkew\") == 3", "assert longest_substring(\"bbbbb\") == 1", "assert longest_substring(\"abcabcbb\") == 3"]}
{"seq_id": 22014767159, "instruction": "Write a python function to find the longest continuous increasing subsequence (LCIS) in an array of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_LCIS(nums):\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            dp[i] = dp[i-1] + 1\n    return max(dp)\n\n# Test cases\nassert find_LCIS([1,3,5,4,7]) == 3\nassert find_LCIS([2,2,2,2,2]) == 1\nassert find_LCIS([5,4,3,2,1]) == 1\n```", "code": "def find_LCIS(nums):\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            dp[i] = dp[i-1] + 1\n    return max(dp)\n\n# Test cases\nassert find_LCIS([1,3,5,4,7]) == 3\nassert find_LCIS([2,2,2,2,2]) == 1\nassert find_LCIS([5,4,3,2,1]) == 1", "entry_point": "find_LCIS", "testcase": ["assert find_LCIS([1,3,5,4,7]) == 3", "assert find_LCIS([2,2,2,2,2]) == 1", "assert find_LCIS([5,4,3,2,1]) == 1"]}
{"seq_id": 72685076704, "instruction": "Write a python function to find the number of balanced parentheses in a given string.\n\nBalanced parentheses means every opening parenthesis '(' has a corresponding closing parenthesis ')', and they are properly nested.", "output": "Here is the code to solve this problem: \n```python\ndef count_balanced_parentheses(s):\n    count = 0\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            if balance > 0:\n                balance -= 1\n                if balance == 0:\n                    count += 1\n            else:\n                # Unbalanced parentheses, reset balance\n                balance = 0\n    return count\n```", "code": "def count_balanced_parentheses(s):\n    count = 0\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            if balance > 0:\n                balance -= 1\n                if balance == 0:\n                    count += 1\n            else:\n                # Unbalanced parentheses, reset balance\n                balance = 0\n    return count", "entry_point": "count_balanced_parentheses", "testcase": ["assert count_balanced_parentheses(\"((()))\") == 1", "assert count_balanced_parentheses(\"((())())\") == 1", "assert count_balanced_parentheses(\")(\") == 0", "assert count_balanced_parentheses(\"(((())))\") == 1", "assert count_balanced_parentheses(\"()()\") == 2"]}
{"seq_id": 75042490264, "instruction": "Write a function to check if a given array can be partitioned into two subsets such that the sum of elements in both subsets is equal.", "output": "Here is the code to solve this problem: \n```python\ndef canPartition(nums):\n    if sum(nums)%2==1 or not nums:\n        return False\n    bag = int(sum(nums)/2)\n    dp = []\n    for i in range(0, len(nums)+1):\n        array = []\n        for j in range(0, bag+1):\n            array.append(False)\n        dp.append(array)\n    for i in range(0, len(nums)+1):\n        dp[i][0] = True\n    for i in range(1, len(nums)+1):\n        for j in range(1, bag+1):\n            if j-nums[i-1]>=0:\n                    dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n        \n    for i in range(len(nums)+1):\n        if dp[i][bag]:\n            return True\n    return False\n```", "code": "def canPartition(nums):\n    if sum(nums)%2==1 or not nums:\n        return False\n    bag = int(sum(nums)/2)\n    dp = []\n    for i in range(0, len(nums)+1):\n        array = []\n        for j in range(0, bag+1):\n            array.append(False)\n        dp.append(array)\n    for i in range(0, len(nums)+1):\n        dp[i][0] = True\n    for i in range(1, len(nums)+1):\n        for j in range(1, bag+1):\n            if j-nums[i-1]>=0:\n                    dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n        \n    for i in range(len(nums)+1):\n        if dp[i][bag]:\n            return True\n    return False", "entry_point": "canPartition", "testcase": ["assert canPartition([1, 2, 3, 5])==False", "assert canPartition([1, 5, 11, 5])==True", "assert canPartition([23,13,11,7,6,5,5])==True"]}
{"seq_id": 4679771979, "instruction": "Write a function to find the maximum height of a binary tree. A binary tree node has a value, a left child, and a right child. The height of a binary tree is the number of edges between the tree's root and its furthest leaf.", "output": "Here is the code to solve this problem: \n```python\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1\n```", "code": "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1", "entry_point": "max_height", "testcase": ["assert max_height(None) == 0", "assert max_height(Node(1, Node(2), Node(3))) == 2", "assert max_height(Node(1, Node(2, Node(4), Node(5)), Node(3))) == 3", "assert max_height(Node(1)) == 1"]}
{"seq_id": 6275609487, "instruction": "Write a function to validate a MAC address in the format AA-BB-CC-DD-EE-FF.", "output": "Here is the code to solve this problem: \n```python\nimport string\n\ndef validate_mac_address(mac_address):\n    s = mac_address.split(\"-\")\n    \n    if len(s) != 6:\n        return False\n        \n    for e in s:\n        if len(e) != 2:\n            return False\n    \n    return all(e[0] in string.hexdigits and e[1] in string.hexdigits for e in s)\n```", "code": "import string\n\ndef validate_mac_address(mac_address):\n    s = mac_address.split(\"-\")\n    \n    if len(s) != 6:\n        return False\n        \n    for e in s:\n        if len(e) != 2:\n            return False\n    \n    return all(e[0] in string.hexdigits and e[1] in string.hexdigits for e in s)", "entry_point": "validate_mac_address", "testcase": ["assert validate_mac_address(\"GG-HH-II-JJ-KK-LL\") == False", "assert validate_mac_address(\"00-1A-2B-3C-4D-5E-6F\") == False", "assert validate_mac_address(\"00-1A-2B-3C-4D\") == False", "assert validate_mac_address(\"00-1A-2B-3C-4D-5Z\") == False", "assert validate_mac_address(\"00-1A-2B-3C-4D-5E\") == True"]}
{"seq_id": 35167707800, "instruction": "Write a function to convert a number from base 10 to a given base.", "output": "Here is the code to solve this problem: \n```python\ndef base_converter(num, base):\n    if num == 0: return '0'\n    result = ''\n    digits = \"0123456789ABCDEF\"\n    while num > 0:\n        result = digits[num % base] + result\n        num = num // base\n    return result\n```", "code": "def base_converter(num, base):\n    if num == 0: return '0'\n    result = ''\n    digits = \"0123456789ABCDEF\"\n    while num > 0:\n        result = digits[num % base] + result\n        num = num // base\n    return result", "entry_point": "base_converter", "testcase": ["assert base_converter(15, 2)=='1111'", "assert base_converter(15, 8)=='17'", "assert base_converter(15, 16)=='F'"]}
{"seq_id": 41164770184, "instruction": "Write a function that takes a list of intervals and returns the minimum number of meeting rooms required to accommodate all the meetings. Each interval is represented as a list of two integers, where the first integer is the start time of the meeting and the second integer is the end time of the meeting.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\n\ndef min_meeting_rooms(intervals: List[List[int]]) -> int:\n    starts = sorted(i[0] for i in intervals)\n    ends = sorted(i[1] for i in intervals)\n    i = count = 0\n    for s in starts:\n        if s < ends[i]:\n            count += 1\n        else:\n            i += 1\n    return count\n```", "code": "from typing import List\n\n\ndef min_meeting_rooms(intervals: List[List[int]]) -> int:\n    starts = sorted(i[0] for i in intervals)\n    ends = sorted(i[1] for i in intervals)\n    i = count = 0\n    for s in starts:\n        if s < ends[i]:\n            count += 1\n        else:\n            i += 1\n    return count", "entry_point": "min_meeting_rooms", "testcase": ["assert min_meeting_rooms([[7,10],[2,4]]) == 1", "assert min_meeting_rooms([[0,30],[5,10],[15,20]]) == 2", "assert min_meeting_rooms([[1,5],[5,10]]) == 1"]}
{"seq_id": 34280643209, "instruction": "Write a python function to find the smallest repeating pattern in a string and return the number of times it repeats to form the original string. If no repeating pattern exists, return 1.", "output": "Here is the code to solve this problem: \n```python\ndef find_repeating_pattern(s):\n    for i in range(1, len(s)//2 + 1):\n        if len(s) % i == 0:\n            if s[:i]*(len(s)//i) == s:\n                return len(s)//i\n    return 1\n```", "code": "def find_repeating_pattern(s):\n    for i in range(1, len(s)//2 + 1):\n        if len(s) % i == 0:\n            if s[:i]*(len(s)//i) == s:\n                return len(s)//i\n    return 1", "entry_point": "find_repeating_pattern", "testcase": ["assert find_repeating_pattern(\"ababab\") == 3", "assert find_repeating_pattern(\"abcabcabc\") == 3", "assert find_repeating_pattern(\"abcd\") == 1"]}
{"seq_id": 5493304210, "instruction": "Write a python function to find the number of subarrays with a given sum in an array of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_subarrays_with_given_sum(arr, target_sum):\n    count = 0\n    current_sum = 0\n    sum_dict = {0:1}\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum - target_sum in sum_dict:\n            count += sum_dict[current_sum - target_sum]\n        if current_sum in sum_dict:\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n    return count\n```", "code": "def find_subarrays_with_given_sum(arr, target_sum):\n    count = 0\n    current_sum = 0\n    sum_dict = {0:1}\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum - target_sum in sum_dict:\n            count += sum_dict[current_sum - target_sum]\n        if current_sum in sum_dict:\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n    return count", "entry_point": "find_subarrays_with_given_sum", "testcase": ["assert find_subarrays_with_given_sum([1,2,3], 3) == 2", "assert find_subarrays_with_given_sum([1,1,1], 2) == 2", "assert find_subarrays_with_given_sum([10,2,-2,-20,10], -10) == 3"]}
{"seq_id": 40251405975, "instruction": "Write a python function to find the number of distinct subsequences of a given string.\n\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).", "output": "Here is the code to solve this problem: \n```python\ndef distinct_subsequences(s, t):\n    dp = [[0] * (len(s) + 1) for _ in range(len(t) + 1)]\n    for j in range(len(s) + 1):\n        dp[0][j] = 1\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[-1][-1]\n```", "code": "def distinct_subsequences(s, t):\n    dp = [[0] * (len(s) + 1) for _ in range(len(t) + 1)]\n    for j in range(len(s) + 1):\n        dp[0][j] = 1\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[-1][-1]", "entry_point": "distinct_subsequences", "testcase": ["assert distinct_subsequences(\"rabbbit\", \"rabbit\") == 3", "assert distinct_subsequences(\"abc\", \"abc\") == 1", "assert distinct_subsequences(\"babgbag\", \"bag\") == 5"]}
{"seq_id": 37486530974, "instruction": "Write a function to find the number of ways to reach the nth stair by climbing either 1 or 2 steps at a time.", "output": "Here is the code to solve this problem: \n```python\ndef count_ways_to_reach_n_stairs(n):\n    if n <= 1:\n        return n\n    first, second = 1, 2\n    for i in range(2, n):\n        first, second = second, first + second\n    return second\n```", "code": "def count_ways_to_reach_n_stairs(n):\n    if n <= 1:\n        return n\n    first, second = 1, 2\n    for i in range(2, n):\n        first, second = second, first + second\n    return second", "entry_point": "count_ways_to_reach_n_stairs", "testcase": ["assert count_ways_to_reach_n_stairs(5) == 8", "assert count_ways_to_reach_n_stairs(3) == 3", "assert count_ways_to_reach_n_stairs(4) == 5"]}
{"seq_id": 22526138827, "instruction": "Write a function to find the length of the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring(s):\n    char_map = {}\n    left = 0\n    result = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        result = max(result, right - left + 1)\n    return result\n```", "code": "def longest_substring(s):\n    char_map = {}\n    left = 0\n    result = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        result = max(result, right - left + 1)\n    return result", "entry_point": "longest_substring", "testcase": ["assert longest_substring(\"\") == 0", "assert longest_substring(\"pwwkew\") == 3", "assert longest_substring(\"bbbbb\") == 1", "assert longest_substring(\"abcabcbb\") == 3"]}
{"seq_id": 30362823714, "instruction": "Write a function to implement the Sieve of Eratosthenes algorithm which finds all prime numbers up to any given limit.", "output": "Here is the code to solve this problem: \n```python\ndef sieve_of_eratosthenes(n):\n    primes = [True for i in range(n + 1)]\n    p = 2\n    while(p * p <= n):\n        if (primes[p] == True):\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n    prime_numbers = []\n    for p in range(2, n):\n        if primes[p]:\n            prime_numbers.append(p)\n    return prime_numbers\n```", "code": "def sieve_of_eratosthenes(n):\n    primes = [True for i in range(n + 1)]\n    p = 2\n    while(p * p <= n):\n        if (primes[p] == True):\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n    prime_numbers = []\n    for p in range(2, n):\n        if primes[p]:\n            prime_numbers.append(p)\n    return prime_numbers", "entry_point": "sieve_of_eratosthenes", "testcase": ["assert sieve_of_eratosthenes(10) == [2, 3, 5, 7]", "assert sieve_of_eratosthenes(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "assert sieve_of_eratosthenes(20) == [2, 3, 5, 7, 11, 13, 17, 19]"]}
{"seq_id": 20136626442, "instruction": "Write a python function to check if a given number is a confusing number. A confusing number is a number that, when rotated 180 degrees, becomes a different number, and each digit remains valid after the rotation. Digits 0, 1, and 8 rotate to themselves; digits 2 and 5 rotate to each other; digits 6 and 9 rotate to each other, and the rest of the digits do not rotate to any other digit and become invalid.", "output": "Here is the code to solve this problem: \n```python\ndef confusing_number(N):\n    rules = {\n        \"0\": \"0\",\n        \"1\": \"1\",\n        \"6\": \"9\",\n        \"8\": \"8\",\n        \"9\": \"6\"\n    }\n    n_str = str(N)\n    left, right = 0, len(n_str) - 1\n    diff = False\n    while left <= right:\n        if n_str[left] not in rules or n_str[right] not in rules:\n            return False\n        else:\n            if rules[n_str[left]] != n_str[right] or rules[n_str[right]] != n_str[left]:\n                diff = True\n            left += 1\n            right -= 1\n    return diff if diff else False\n```", "code": "def confusing_number(N):\n    rules = {\n        \"0\": \"0\",\n        \"1\": \"1\",\n        \"6\": \"9\",\n        \"8\": \"8\",\n        \"9\": \"6\"\n    }\n    n_str = str(N)\n    left, right = 0, len(n_str) - 1\n    diff = False\n    while left <= right:\n        if n_str[left] not in rules or n_str[right] not in rules:\n            return False\n        else:\n            if rules[n_str[left]] != n_str[right] or rules[n_str[right]] != n_str[left]:\n                diff = True\n            left += 1\n            right -= 1\n    return diff if diff else False", "entry_point": "confusing_number", "testcase": ["assert confusing_number(6)==True", "assert confusing_number(125)==False", "assert confusing_number(89)==True", "assert confusing_number(11)==False"]}
{"seq_id": 71840218842, "instruction": "Write a python function to find the index of the last occurrence of a target value in a sorted array. If the target is not found, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef findLastOccurrence(nums, target):\n    left, right = 0, len(nums) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            result = mid\n            left = mid + 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```", "code": "def findLastOccurrence(nums, target):\n    left, right = 0, len(nums) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            result = mid\n            left = mid + 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "entry_point": "findLastOccurrence", "testcase": ["assert findLastOccurrence([1,2,2,3,4], 2) == 2", "assert findLastOccurrence([1,2,3,4,5], 6) == -1", "assert findLastOccurrence([1,2,3,3,3,4,5], 3) == 4"]}
{"seq_id": 786025828, "instruction": "Write a function to find the Longest Common Subsequence (LCS) of two sequences.", "output": "Here is the code to solve this problem: \n```python\ndef find_LCS(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[\"\" for _ in range(n+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + s1[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], key=len)\n    return dp[m][n]\n```", "code": "def find_LCS(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[\"\" for _ in range(n+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + s1[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], key=len)\n    return dp[m][n]", "entry_point": "find_LCS", "testcase": ["assert find_LCS(\"AGGTAB\", \"GXTXAYB\") == \"GTAB\"", "assert find_LCS(\"ABCBDAB\", \"BDCAB\") == \"BCAB\"", "assert find_LCS(\"ABC\", \"AC\") == \"AC\""]}
{"seq_id": 3642131806, "instruction": "Write a python function to find the smallest positive integer that is missing from the given unsorted array.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing_positive(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i]-1] != nums[i]:\n            nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n    for i in range(n):\n        if nums[i] != i+1:\n            return i+1\n    return n+1\n```", "code": "def find_missing_positive(nums):\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i]-1] != nums[i]:\n            nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n    for i in range(n):\n        if nums[i] != i+1:\n            return i+1\n    return n+1", "entry_point": "find_missing_positive", "testcase": ["assert find_missing_positive([7, 8, 9, 11, 12]) == 1", "assert find_missing_positive([1, 2, 0]) == 3", "assert find_missing_positive([3, 4, -1, 1]) == 2"]}
{"seq_id": 32897334319, "instruction": "Write a function to find the number of days in a given month.", "output": "Here is the code to solve this problem: \n```python\ndef month_days(month):\n  days_in_month = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31\n  }\n  return days_in_month.get(month)\n```", "code": "def month_days(month):\n  days_in_month = {\n    \"January\": 31,\n    \"February\": 28,\n    \"March\": 31,\n    \"April\": 30,\n    \"May\": 31,\n    \"June\": 30,\n    \"July\": 31,\n    \"August\": 31,\n    \"September\": 30,\n    \"October\": 31,\n    \"November\": 30,\n    \"December\": 31\n  }\n  return days_in_month.get(month)", "entry_point": "month_days", "testcase": ["assert month_days(\"April\")==30", "assert month_days(\"January\")==31", "assert month_days(\"February\")==28"]}
{"seq_id": 25200548377, "instruction": "Write a function to find the maximum product subarray in a given array.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_product(nums):\n    if not nums:\n        return 0\n    n = len(nums)\n    max_dp = [0] * n\n    min_dp = [0] * n\n    max_dp[0] = min_dp[0] = nums[0]\n    for i in range(1, n):\n        max_dp[i] = max(nums[i], max_dp[i-1] * nums[i], min_dp[i-1] * nums[i])\n        min_dp[i] = min(nums[i], max_dp[i-1] * nums[i], min_dp[i-1] * nums[i])\n    return max(max_dp)\n```", "code": "def find_max_product(nums):\n    if not nums:\n        return 0\n    n = len(nums)\n    max_dp = [0] * n\n    min_dp = [0] * n\n    max_dp[0] = min_dp[0] = nums[0]\n    for i in range(1, n):\n        max_dp[i] = max(nums[i], max_dp[i-1] * nums[i], min_dp[i-1] * nums[i])\n        min_dp[i] = min(nums[i], max_dp[i-1] * nums[i], min_dp[i-1] * nums[i])\n    return max(max_dp)", "entry_point": "find_max_product", "testcase": ["assert find_max_product([2,3,-2,4]) == 6", "assert find_max_product([-2,0,-1]) == 0", "assert find_max_product([0,2]) == 2"]}
{"seq_id": 12187608263, "instruction": "Write a python function to identify whether a number is a perfect square or not.", "output": "Here is the code to solve this problem: \n```python\nimport math\ndef check_Perfect_Square(num):\n    root = math.sqrt(num)\n    if int(root + 0.5) ** 2 == num:\n        return True\n    else:\n        return False\n```", "code": "import math\ndef check_Perfect_Square(num):\n    root = math.sqrt(num)\n    if int(root + 0.5) ** 2 == num:\n        return True\n    else:\n        return False", "entry_point": "check_Perfect_Square", "testcase": ["assert check_Perfect_Square(20) == False", "assert check_Perfect_Square(16) == True", "assert check_Perfect_Square(25) == True"]}
{"seq_id": 6370750277, "instruction": "Write a function to convert a CamelCase string to snake_case.", "output": "Here is the code to solve this problem: \n```python\ndef convert_camel_to_snake(camel_case_string):\n    snake_case_string = ''\n    for char in camel_case_string:\n        if char.isupper():\n            if snake_case_string:  # If there's already characters in snake_case_string\n                snake_case_string += '_'  # Add an underscore\n            snake_case_string += char.lower()  # Always add lowercase letters\n        else:\n            snake_case_string += char\n    return snake_case_string\n```", "code": "def convert_camel_to_snake(camel_case_string):\n    snake_case_string = ''\n    for char in camel_case_string:\n        if char.isupper():\n            if snake_case_string:  # If there's already characters in snake_case_string\n                snake_case_string += '_'  # Add an underscore\n            snake_case_string += char.lower()  # Always add lowercase letters\n        else:\n            snake_case_string += char\n    return snake_case_string", "entry_point": "convert_camel_to_snake", "testcase": ["assert convert_camel_to_snake('Camel2Camel2Case') == 'camel2_camel2_case'", "assert convert_camel_to_snake('CamelCamelCase') == 'camel_camel_case'", "assert convert_camel_to_snake('CamelCase') == 'camel_case'"]}
{"seq_id": 12538527688, "instruction": "Write a function to determine if two rectangles intersect with each other. The rectangles are represented by their bottom-left and top-right coordinates.\n\nThe function should take in two rectangles as input, where each rectangle is represented by a list of four integers [x1, y1, x2, y2], with (x1, y1) being the coordinates of the bottom-left corner and (x2, y2) being the coordinates of the top-right corner.\n\nReturn True if the two rectangles intersect, and False otherwise.", "output": "Here is the code to solve this problem: \n```python\ndef rectangle_intersection(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n\n    x_overlap = max(0, min(x2, x4) - max(x1, x3))\n    y_overlap = max(0, min(y2, y4) - max(y1, y3))\n\n    return x_overlap > 0 and y_overlap > 0\n```", "code": "def rectangle_intersection(rect1, rect2):\n    x1, y1, x2, y2 = rect1\n    x3, y3, x4, y4 = rect2\n\n    x_overlap = max(0, min(x2, x4) - max(x1, x3))\n    y_overlap = max(0, min(y2, y4) - max(y1, y3))\n\n    return x_overlap > 0 and y_overlap > 0", "entry_point": "rectangle_intersection", "testcase": ["assert rectangle_intersection([1, 1, 3, 3], [2, 2, 4, 4]) == True", "assert rectangle_intersection([1, 1, 2, 2], [3, 3, 4, 4]) == False", "assert rectangle_intersection([0, 0, 1, 1], [1, 0, 2, 1]) == False", "assert rectangle_intersection([-3, -3, 0, 0], [-2, -2, 1, 1]) == True"]}
{"seq_id": 38217888779, "instruction": "Write a function that takes a list of integers and returns a new list with the integers in reverse order.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_list(lst):\n    return lst[::-1]\n```", "code": "def reverse_list(lst):\n    return lst[::-1]", "entry_point": "reverse_list", "testcase": ["assert reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert reverse_list([10, 20, 30]) == [30, 20, 10]", "assert reverse_list([1, 2, 3, 4]) == [4, 3, 2, 1]"]}
{"seq_id": 6033479474, "instruction": "Write a function to reverse the order of words in a given sentence.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = \" \".join(reversed_words)\n    return reversed_sentence\n```", "code": "def reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = \" \".join(reversed_words)\n    return reversed_sentence", "entry_point": "reverse_sentence", "testcase": ["assert reverse_sentence(\"This is a test\")==\"test a is This\"", "assert reverse_sentence(\"Hello World\")==\"World Hello\"", "assert reverse_sentence(\"I love coding\")==\"coding love I\""]}
{"seq_id": 3938189772, "instruction": "Write a function to calculate the number of days in a given month of a specific year, taking into account leap years.", "output": "Here is the code to solve this problem: \n```python\ndef days_in_month(month, year):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    else:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 29\n        else:\n            return 28\n```", "code": "def days_in_month(month, year):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    else:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 29\n        else:\n            return 28", "entry_point": "days_in_month", "testcase": ["assert days_in_month(2, 2020) == 29", "assert days_in_month(2, 2021) == 28", "assert days_in_month(4, 2022) == 30", "assert days_in_month(12, 2023) == 31"]}
{"seq_id": 15907052498, "instruction": "Write a python function that takes in a list of integers and a target sum as input. The function should return a list of all unique pairs of integers from the input list that add up to the target sum. The pairs should be returned as tuples, and the list of tuples should be sorted based on the first element of each tuple in ascending order. If no such pairs are found, the function should return an empty list.", "output": "Here is the code to solve this problem: \n```python\ndef find_pairs(lst, target):\n    seen = set()\n    result = []\n    for num in lst:\n        complement = target - num\n        if complement in seen:\n            result.append((min(num, complement), max(num, complement)))\n        seen.add(num)\n    return sorted(list(set(result)))\n\nprint(find_pairs([1, 3, 2, 2, 4, 0], 4))  # [(0, 4), (1, 3), (2, 2)]\nprint(find_pairs([10, 7, 5, 3, 1, 8], 11))  # [(3, 8), (5, 6)]\nprint(find_pairs([5, 5, 5, 5], 10))  # [(5, 5)]\nprint(find_pairs([1, 2, 3], 7))  # []\n```", "code": "def find_pairs(lst, target):\n    seen = set()\n    result = []\n    for num in lst:\n        complement = target - num\n        if complement in seen:\n            result.append((min(num, complement), max(num, complement)))\n        seen.add(num)\n    return sorted(list(set(result)))\n\nprint(find_pairs([1, 3, 2, 2, 4, 0], 4))  # [(0, 4), (1, 3), (2, 2)]\nprint(find_pairs([10, 7, 5, 3, 1, 8], 11))  # [(3, 8), (5, 6)]\nprint(find_pairs([5, 5, 5, 5], 10))  # [(5, 5)]\nprint(find_pairs([1, 2, 3], 7))  # []", "entry_point": "find_pairs", "testcase": ["assert find_pairs([5, 5, 5, 5], 10) == [(5, 5)]", "assert find_pairs([1, 2, 3], 7) == []", "assert find_pairs([1, 3, 2, 2, 4, 0], 4) == [(0, 4), (1, 3), (2, 2)]"]}
{"seq_id": 21825496603, "instruction": "Write a python function to find the number of unique paths in a grid from the top-left corner to the bottom-right corner. You can only either move down or move right at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef Unique_Paths(m, n):\n    path = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                path[i][j] = 1\n            else:\n                path[i][j] = path[i-1][j] + path[i][j-1]\n    return path[m-1][n-1]\n```", "code": "def Unique_Paths(m, n):\n    path = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                path[i][j] = 1\n            else:\n                path[i][j] = path[i-1][j] + path[i][j-1]\n    return path[m-1][n-1]", "entry_point": "Unique_Paths", "testcase": ["assert Unique_Paths(3, 7) == 28", "assert Unique_Paths(7, 3) == 28", "assert Unique_Paths(3, 2) == 3"]}
{"seq_id": 108685579, "instruction": "Write a python function to calculate the number of ways to reach the last cell of a grid from the first cell. Movement is restricted to only right and down.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_ways(m, n):\n    # Initialize a 2D array with zeros\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # Set the first cell to 1\n    dp[0][0] = 1\n\n    # Fill the dp array\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n\n    # Return the value in the last cell\n    return dp[m-1][n-1]\n```", "code": "def calculate_ways(m, n):\n    # Initialize a 2D array with zeros\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # Set the first cell to 1\n    dp[0][0] = 1\n\n    # Fill the dp array\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n\n    # Return the value in the last cell\n    return dp[m-1][n-1]", "entry_point": "calculate_ways", "testcase": ["assert calculate_ways(2, 2) == 2", "assert calculate_ways(3, 3) == 6", "assert calculate_ways(4, 4) == 20"]}
{"seq_id": 24030268020, "instruction": "Write a python function to find the maximum number of non-overlapping subarrays with sum zero.", "output": "Here is the code to solve this problem: \n```python\ndef max_subarrays_with_zero_sum(arr):\n    n = len(arr)\n    max_count = 0\n    subarray_count = 0\n    sum_dict = {0: 1}\n    current_sum = 0\n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum in sum_dict:\n            subarray_count += sum_dict[current_sum]\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n        max_count = max(max_count, subarray_count)\n    return max_count\n```", "code": "def max_subarrays_with_zero_sum(arr):\n    n = len(arr)\n    max_count = 0\n    subarray_count = 0\n    sum_dict = {0: 1}\n    current_sum = 0\n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum in sum_dict:\n            subarray_count += sum_dict[current_sum]\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n        max_count = max(max_count, subarray_count)\n    return max_count", "entry_point": "max_subarrays_with_zero_sum", "testcase": ["assert max_subarrays_with_zero_sum([1, 2, -3, 3]) == 2", "assert max_subarrays_with_zero_sum([1, 2, -1, -2]) == 1", "assert max_subarrays_with_zero_sum([4, 2, -1, -1, 2, -1]) == 3"]}
{"seq_id": 32499708330, "instruction": "Write a python function to find the number of palindromic substrings in a given string. A palindromic substring is a substring which reads the same backward or forward.", "output": "Here is the code to solve this problem: \n```python\ndef palindromic_substrings(s):\n    def count_palindromes(s, left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total = 0\n    for i in range(len(s)):\n        total += count_palindromes(s, i, i)  # odd length palindromes\n        total += count_palindromes(s, i, i+1)  # even length palindromes\n    return total\n```", "code": "def palindromic_substrings(s):\n    def count_palindromes(s, left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total = 0\n    for i in range(len(s)):\n        total += count_palindromes(s, i, i)  # odd length palindromes\n        total += count_palindromes(s, i, i+1)  # even length palindromes\n    return total", "entry_point": "palindromic_substrings", "testcase": ["assert palindromic_substrings(\"abc\") == 3", "assert palindromic_substrings(\"aaa\") == 6", "assert palindromic_substrings(\"racecar\") == 10"]}
{"seq_id": 1022106618, "instruction": "Write a function that takes a list of tuples as input, consisting of (x, y) coordinates, and returns the coordinates of the bounding box that encloses all the points. The bounding box is represented by a tuple of two tuples: the first tuple contains the minimum x and y coordinates, and the second tuple contains the maximum x and y coordinates.", "output": "Here is the code to solve this problem: \n```python\ndef bounding_box(points):\n    min_x = min(point[0] for point in points)\n    min_y = min(point[1] for point in points)\n    max_x = max(point[0] for point in points)\n    max_y = max(point[1] for point in points)\n    return ((min_x, min_y), (max_x, max_y))\n```", "code": "def bounding_box(points):\n    min_x = min(point[0] for point in points)\n    min_y = min(point[1] for point in points)\n    max_x = max(point[0] for point in points)\n    max_y = max(point[1] for point in points)\n    return ((min_x, min_y), (max_x, max_y))", "entry_point": "bounding_box", "testcase": ["assert bounding_box([(10, 20), (10, 10), (20, 20), (20, 10)]) == ((10, 10), (20, 20))", "assert bounding_box([(0, 0), (-1, -1), (1, 1)]) == ((-1, -1), (1, 1))", "assert bounding_box([(1, 2), (3, 4), (5, 6), (7, 8)]) == ((1, 2), (7, 8))"]}
{"seq_id": 29326219057, "instruction": "Write a function to find the connected components in an undirected graph represented as a list of edges.", "output": "Here is the code to solve this problem: \n```python\ndef find_connected_components(edges):\n    parent = {}\n    \n    def find(x):\n        if x not in parent:\n            parent[x] = x\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    \n    def union(a, b):\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return\n        parent[ra] = rb\n    \n    for edge in edges:\n        union(edge[0], edge[1])\n    \n    components = {}\n    for node in parent:\n        root = find(node)\n        if root not in components:\n            components[root] = set()\n        components[root].add(node)\n    \n    return list(components.values())\n```", "code": "def find_connected_components(edges):\n    parent = {}\n    \n    def find(x):\n        if x not in parent:\n            parent[x] = x\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    \n    def union(a, b):\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return\n        parent[ra] = rb\n    \n    for edge in edges:\n        union(edge[0], edge[1])\n    \n    components = {}\n    for node in parent:\n        root = find(node)\n        if root not in components:\n            components[root] = set()\n        components[root].add(node)\n    \n    return list(components.values())", "entry_point": "find_connected_components", "testcase": ["assert find_connected_components([(1, 2), (2, 3), (3, 4), (5, 6), (6, 7)]) == [{1, 2, 3, 4}, {5, 6, 7}]", "assert find_connected_components([(1, 2), (3, 4), (5, 6)]) == [{1, 2}, {3, 4}, {5, 6}]", "assert find_connected_components([(1, 2), (2, 3), (4, 5)]) == [{1, 2, 3}, {4, 5}]"]}
{"seq_id": 41486465799, "instruction": "Write a python function to find the volume of a cylinder", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef volume_cylinder(r,h):\n  volume = math.pi * r * r * h\n  return volume\n```", "code": "import math\n\ndef volume_cylinder(r,h):\n  volume = math.pi * r * r * h\n  return volume", "entry_point": "volume_cylinder", "testcase": ["assert volume_cylinder(5,10)==785.3981633974483", "assert volume_cylinder(3,7)==197.92033717615698", "assert volume_cylinder(10,20)==6283.185307179587"]}
{"seq_id": 12298709232, "instruction": "Write a python function that finds the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_unique_substring(s):\n    char_index = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_index and char_index[s[right]] >= left:\n            left = char_index[s[right]] + 1\n        char_index[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length\n```", "code": "def find_longest_unique_substring(s):\n    char_index = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_index and char_index[s[right]] >= left:\n            left = char_index[s[right]] + 1\n        char_index[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length", "entry_point": "find_longest_unique_substring", "testcase": ["assert find_longest_unique_substring(\"abcabcbb\") == 3", "assert find_longest_unique_substring(\"bbbbb\") == 1", "assert find_longest_unique_substring(\"pwwkew\") == 3"]}
{"seq_id": 70436961619, "instruction": "Write a function to find the nth largest element in an unsorted list using a min heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef nth_largest(nums, n):\n    return heapq.nlargest(n, nums)[-1]\n```", "code": "import heapq\n\ndef nth_largest(nums, n):\n    return heapq.nlargest(n, nums)[-1]", "entry_point": "nth_largest", "testcase": ["assert nth_largest([1, 2, 3, 4, 5], 2) == 4", "assert nth_largest([7, 10, 4, 3, 20, 15], 3) == 10", "assert nth_largest([10, 20, 30, 40, 50], 1) == 50"]}
{"seq_id": 30372915169, "instruction": "Write a function to calculate the number of elements in an array that can be increased by 1 to match the next integer in the array.", "output": "Here is the code to solve this problem: \n```python\ndef count_increment(arr):\n\tcounterSum = 0\n\tcounter = dict()\n\tsetConversion = set(arr)\n\tfor el in arr:\n\t\tif (not(el + 1 in counter)):\n\t\t\tcounter[el + 1] = 1\n\t\telse:\n\t\t\tcounter[el + 1] += 1\n\tfor el in setConversion:\n\t\tif (el in counter):\n\t\t\tcounterSum += counter[el]\n\treturn counterSum\n```", "code": "def count_increment(arr):\n\tcounterSum = 0\n\tcounter = dict()\n\tsetConversion = set(arr)\n\tfor el in arr:\n\t\tif (not(el + 1 in counter)):\n\t\t\tcounter[el + 1] = 1\n\t\telse:\n\t\t\tcounter[el + 1] += 1\n\tfor el in setConversion:\n\t\tif (el in counter):\n\t\t\tcounterSum += counter[el]\n\treturn counterSum", "entry_point": "count_increment", "testcase": ["assert count_increment([100]) == 0", "assert count_increment([1,1,3,3,5,5,7,7]) == 0", "assert count_increment([1,1,2,2]) == 2"]}
{"seq_id": 31928074377, "instruction": "Write a function that takes a string and a substring as input. This function should return the count of the substring's occurrence in the string, including overlapping occurrences.", "output": "Here is the code to solve this problem: \n```python\ndef count_substring_occurrence(str1, str2):\n  count = 0\n  start = 0\n  while start < len(str1):\n    pos = str1.find(str2, start)\n    if pos != -1:\n      count += 1\n      start = pos + 1\n    else:\n      break\n  return count\n```", "code": "def count_substring_occurrence(str1, str2):\n  count = 0\n  start = 0\n  while start < len(str1):\n    pos = str1.find(str2, start)\n    if pos != -1:\n      count += 1\n      start = pos + 1\n    else:\n      break\n  return count", "entry_point": "count_substring_occurrence", "testcase": ["assert count_substring_occurrence(\"mississippi\", \"iss\") == 2", "assert count_substring_occurrence(\"abababa\", \"aba\") == 3", "assert count_substring_occurrence(\"hello\", \"l\") == 2"]}
{"seq_id": 20602778133, "instruction": "Write a function to find the mode in the given array. The mode is the element that appears most frequently in the array. There can be more than one mode in the array.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_mode(arr):\n    counter = Counter(arr)\n    max_count = max(counter.values())\n    return [key for key, value in counter.items() if value == max_count]\n```", "code": "from collections import Counter\n\ndef find_mode(arr):\n    counter = Counter(arr)\n    max_count = max(counter.values())\n    return [key for key, value in counter.items() if value == max_count]", "entry_point": "find_mode", "testcase": ["assert find_mode([1, 1, 2, 2, 3, 3, 4, 4]) == [1, 2, 3, 4]", "assert find_mode([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [4]", "assert find_mode([5, 5, 6, 6, 6, 7, 7, 7, 7]) == [7]"]}
{"seq_id": 31446781569, "instruction": "Write a python function that takes a list of strings and returns the first word that appears the most frequently in the list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef most_frequent_word(words):\n    word_counts = Counter(words)\n    return word_counts.most_common(1)[0][0]\n```", "code": "from collections import Counter\n\ndef most_frequent_word(words):\n    word_counts = Counter(words)\n    return word_counts.most_common(1)[0][0]", "entry_point": "most_frequent_word", "testcase": ["assert most_frequent_word([\"the\", \"cat\", \"in\", \"the\", \"hat\", \"in\", \"the\", \"box\"]) == \"the\"", "assert most_frequent_word([\"hello\", \"world\", \"hello\", \"python\", \"world\", \"python\", \"python\"]) == \"python\"", "assert most_frequent_word([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"]) == \"a\""]}
{"seq_id": 14110587249, "instruction": "Write a function to find the number of times a given number appears in a list and also return the positions of its occurrence.", "output": "Here is the code to solve this problem: \n```python\ndef find_num_positions(nums, target):\n    positions = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            positions.append(i)\n    return (len(positions), positions)\n```", "code": "def find_num_positions(nums, target):\n    positions = []\n    for i in range(len(nums)):\n        if nums[i] == target:\n            positions.append(i)\n    return (len(positions), positions)", "entry_point": "find_num_positions", "testcase": ["assert find_num_positions([1,2,3,2,4,2], 2) == (3, [1, 3, 5])", "assert find_num_positions([1,1,1,1], 1) == (4, [0, 1, 2, 3])", "assert find_num_positions([10,20,30,40], 50) == (0, [])"]}
{"seq_id": 6784417929, "instruction": "Write a function to find the maximum product of two integers in a given array.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_of_two(arr):\n    arr.sort()\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])\n```", "code": "def max_product_of_two(arr):\n    arr.sort()\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])", "entry_point": "max_product_of_two", "testcase": ["assert max_product_of_two([-1, -2, -3, -4]) == 12", "assert max_product_of_two([1, 2, 3, 4]) == 12", "assert max_product_of_two([10, 20, 30, 5, 6]) == 600"]}
{"seq_id": 22085871932, "instruction": "Write a python function to find the next palindrome number greater than the given number.", "output": "Here is the code to solve this problem: \n```python\ndef find_next_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n```", "code": "def find_next_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]", "entry_point": "find_next_palindrome", "testcase": ["assert find_next_palindrome(123) == 131", "assert find_next_palindrome(999) == 1001", "assert find_next_palindrome(678) == 686"]}
{"seq_id": 26628176460, "instruction": "Write a python function to find the length of the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef find_Longest_Substring(s: str) -> int:\n    if len(s) == 0:\n        return 0\n    char_map = {}\n    left = 0\n    result = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        result = max(result, right - left + 1)\n    return result\n```", "code": "def find_Longest_Substring(s: str) -> int:\n    if len(s) == 0:\n        return 0\n    char_map = {}\n    left = 0\n    result = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        result = max(result, right - left + 1)\n    return result", "entry_point": "find_Longest_Substring", "testcase": ["assert find_Longest_Substring(\"bbbbb\") == 1", "assert find_Longest_Substring(\"abcabcbb\") == 3", "assert find_Longest_Substring(\"pwwkew\") == 3"]}
{"seq_id": 21289630947, "instruction": "Write a function to find the number of unique paths from the top-left corner to the bottom-right corner of a grid. You can only move either down or right at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef unique_paths(m: int, n: int) -> int:\n    # Initialize the DP array with 1s\n    dp = [[1] * n for _ in range(m)]\n\n    # Fill the DP array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m-1][n-1]\n```", "code": "def unique_paths(m: int, n: int) -> int:\n    # Initialize the DP array with 1s\n    dp = [[1] * n for _ in range(m)]\n\n    # Fill the DP array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m-1][n-1]", "entry_point": "unique_paths", "testcase": ["assert unique_paths(3, 3) == 6", "assert unique_paths(7, 3) == 28", "assert unique_paths(3, 2) == 3"]}
{"seq_id": 73557653191, "instruction": "Write a python function to find the smallest number in a given list of integers. The list may contain duplicate numbers, and the function should return the smallest unique number. If all numbers in the list are the same, return the number itself.", "output": "Here is the code to solve this problem: \n```python\ndef find_smallest_unique(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums)==0:\n        return None\n    if len(nums)==1:\n        return nums[0]\n    else:\n        nums.sort()\n        smallest = nums[0]\n        for i in range(1,len(nums)):\n            if nums[i] != smallest:\n                return smallest\n            smallest = nums[i]\n        return smallest\n```", "code": "def find_smallest_unique(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums)==0:\n        return None\n    if len(nums)==1:\n        return nums[0]\n    else:\n        nums.sort()\n        smallest = nums[0]\n        for i in range(1,len(nums)):\n            if nums[i] != smallest:\n                return smallest\n            smallest = nums[i]\n        return smallest", "entry_point": "find_smallest_unique", "testcase": ["assert find_smallest_unique([10, 10, 10]) == 10", "assert find_smallest_unique([3, 1, 4, 1, 5, 9]) == 1", "assert find_smallest_unique([2, 2, 3, 3, 4, 4, 5]) == 2"]}
{"seq_id": 13694717249, "instruction": "Write a function that generates the first n numbers in a special sequence. The sequence starts with 1, 2, 3, and every subsequent number is formed by appending a digit (1, 2, or 3) to the end of the last number in the sequence. For example, the first five numbers in the sequence are 1, 2, 3, 11, 12.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef special_sequence(n):\n    if n<=3:\n        return list(range(1,n+1))\n    ans = [1,2,3]\n    Q=deque()\n    Q.append(1)\n    Q.append(2)\n    Q.append(3)\n\n    for i in range(4,n+1):\n        num = Q.popleft()\n        for i in range(1,4):\n            elem = (num*10)+i\n            ans.append(elem)\n            Q.append(elem)\n            if len(ans)==n:\n                return ans\n    return ans\n```", "code": "from collections import deque\n\ndef special_sequence(n):\n    if n<=3:\n        return list(range(1,n+1))\n    ans = [1,2,3]\n    Q=deque()\n    Q.append(1)\n    Q.append(2)\n    Q.append(3)\n\n    for i in range(4,n+1):\n        num = Q.popleft()\n        for i in range(1,4):\n            elem = (num*10)+i\n            ans.append(elem)\n            Q.append(elem)\n            if len(ans)==n:\n                return ans\n    return ans", "entry_point": "special_sequence", "testcase": ["assert special_sequence(5) == [1, 2, 3, 11, 12]", "assert special_sequence(10) == [1, 2, 3, 11, 12, 13, 21, 22, 23, 31]", "assert special_sequence(3) == [1, 2, 3]"]}
{"seq_id": 35283529202, "instruction": "Write a function to find the number of pairs in a given list of integers that sum up to a given target number.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef find_target_pairs(nums: List[int], target: int) -> int:\n    seen = {}\n    pairs_count = 0\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            pairs_count += seen[complement]\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    return pairs_count\n```", "code": "from typing import List\n\ndef find_target_pairs(nums: List[int], target: int) -> int:\n    seen = {}\n    pairs_count = 0\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            pairs_count += seen[complement]\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    return pairs_count", "entry_point": "find_target_pairs", "testcase": ["assert find_target_pairs([1, 5, 7, -1], 6) == 2", "assert find_target_pairs([1, 3, 2, 2, 4, 0], 4) == 3", "assert find_target_pairs([1, 5, 7, -1, 5], 6) == 3"]}
{"seq_id": 34461169636, "instruction": "Write a function to count the number of times a substring appears in a string, including overlaps.", "output": "Here is the code to solve this problem: \n```python\ndef count_substring_overlap(text, pattern):\n    count = 0\n    pos = 0\n    while pos < len(text):\n        pos = text.find(pattern, pos)\n        if pos == -1:\n            break\n        count += 1\n        pos += 1\n    return count\n```", "code": "def count_substring_overlap(text, pattern):\n    count = 0\n    pos = 0\n    while pos < len(text):\n        pos = text.find(pattern, pos)\n        if pos == -1:\n            break\n        count += 1\n        pos += 1\n    return count", "entry_point": "count_substring_overlap", "testcase": ["assert count_substring_overlap('HELLO', 'L') == 2", "assert count_substring_overlap('ABCDCDC', 'CDC') == 2", "assert count_substring_overlap('AAAA', 'AA') == 3"]}
{"seq_id": 43021722544, "instruction": "Write a function in Python to generate a random password based on the given parameters. The password should have a mix of uppercase, lowercase, numbers, and special characters. The length of the password should be between the minimum and maximum length given.", "output": "Here is the code to solve this problem: \n```python\nimport random\nimport string\n\ndef generate_password(min_length, max_length):\n    all_characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(all_characters) for _ in range(random.randint(min_length, max_length)))\n    return password\n```", "code": "import random\nimport string\n\ndef generate_password(min_length, max_length):\n    all_characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(all_characters) for _ in range(random.randint(min_length, max_length)))\n    return password", "entry_point": "generate_password", "testcase": ["assert generate_password(8, 12) != generate_password(8, 12)", "assert len(generate_password(8, 12)) <= 12", "assert len(generate_password(8, 12)) >= 8", "assert generate_password(8, 12).isalnum() == False # Check if it contains special characters"]}
{"seq_id": 1152166216, "instruction": "Write a function to calculate the maximum profit that can be achieved from a list of stock prices, where you can buy and sell multiple times, but you must sell the stock before you buy again.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_max_profit(prices):\n    profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i-1]:\n            profit += prices[i] - prices[i-1]\n    return profit\n```", "code": "def calculate_max_profit(prices):\n    profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i-1]:\n            profit += prices[i] - prices[i-1]\n    return profit", "entry_point": "calculate_max_profit", "testcase": ["assert calculate_max_profit([7, 1, 5, 3, 6, 4]) == 7", "assert calculate_max_profit([1, 2, 3, 4, 5]) == 4", "assert calculate_max_profit([7, 6, 4, 3, 1]) == 0"]}
{"seq_id": 8692976662, "instruction": "Write a function that takes a 2D list (matrix) and returns the indexes of the columns that contain at least one '1'. The rows represent the soldiers and the columns represent the positions. A '1' means the presence of a soldier and '0' means the absence. The function should return the indexes of the columns with at least one soldier in them.", "output": "Here is the code to solve this problem: \n```python\ndef find_soldier_columns(matrix):\n    column_with_soldiers = []\n    for col in range(len(matrix[0])):\n        if any(matrix[row][col] == 1 for row in range(len(matrix))):\n            column_with_soldiers.append(col)\n    return column_with_soldiers\n```", "code": "def find_soldier_columns(matrix):\n    column_with_soldiers = []\n    for col in range(len(matrix[0])):\n        if any(matrix[row][col] == 1 for row in range(len(matrix))):\n            column_with_soldiers.append(col)\n    return column_with_soldiers", "entry_point": "find_soldier_columns", "testcase": ["assert find_soldier_columns([[1, 1, 1], [1, 1, 1]]) == [0, 1, 2]", "assert find_soldier_columns([[0, 0, 0], [0, 0, 0]]) == []", "assert find_soldier_columns([[0, 0, 1], [0, 1, 0], [1, 0, 0]]) == [0, 1, 2]"]}
{"seq_id": 21990016102, "instruction": "Write a python function to find the two largest unique numbers in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef find_two_largest_unique(list1):\n    list1 = list(set(list1))\n    if len(list1)<2:\n        return []\n    list1.sort()\n    return [list1[-2],list1[-1]]\n```", "code": "def find_two_largest_unique(list1):\n    list1 = list(set(list1))\n    if len(list1)<2:\n        return []\n    list1.sort()\n    return [list1[-2],list1[-1]]", "entry_point": "find_two_largest_unique", "testcase": ["assert find_two_largest_unique([1,2,3,4,5])==[4,5]", "assert find_two_largest_unique([5,5,5,4])==[4,5]", "assert find_two_largest_unique([1,1,1,1])==[]"]}
{"seq_id": 28532706547, "instruction": "Write a function that takes a list of strings and returns a list of unique strings that are palindromes.\n\nA palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward. Examples of palindromes include \"madam\", \"racecar\", and \"12321\".", "output": "Here is the code to solve this problem: \n```python\ndef palindrome_strings(lst):\n    return [word for word in lst if word == word[::-1] and lst.count(word) == 1]\n```", "code": "def palindrome_strings(lst):\n    return [word for word in lst if word == word[::-1] and lst.count(word) == 1]", "entry_point": "palindrome_strings", "testcase": ["assert palindrome_strings([\"abba\", \"1221\", \"test\", \"123\", \"abcba\", \"123321\"]) == [\"abba\", \"1221\", \"abcba\", \"123321\"]", "assert palindrome_strings([\"hello\", \"world\", \"python\"]) == []", "assert palindrome_strings([\"madam\", \"racecar\", \"hello\", \"12321\", \"world\", \"123454321\", \"python\"]) == [\"madam\", \"racecar\", \"12321\", \"123454321\"]"]}
{"seq_id": 2446877837, "instruction": "Write a function to find the largest digit in a given number.", "output": "Here is the code to solve this problem: \n```python\ndef find_largest_digit(n):\n    n = abs(n)\n    largest = 0\n    while n > 0:\n        digit = n % 10\n        if digit > largest:\n            largest = digit\n        n = n // 10\n    return largest\n```", "code": "def find_largest_digit(n):\n    n = abs(n)\n    largest = 0\n    while n > 0:\n        digit = n % 10\n        if digit > largest:\n            largest = digit\n        n = n // 10\n    return largest", "entry_point": "find_largest_digit", "testcase": ["assert find_largest_digit(-98765) == 9", "assert find_largest_digit(9876543210) == 9", "assert find_largest_digit(12345) == 5"]}
{"seq_id": 36088109980, "instruction": "Write a function to find the maximum sum of non-adjacent elements in an array.", "output": "Here is the code to solve this problem: \n```python\ndef max_non_adjacent_sum(arr):\n    incl = 0\n    excl = 0\n\n    for i in arr:\n        new_excl = excl if excl > incl else incl\n\n        incl = excl + i\n        excl = new_excl\n\n    return max(incl, excl)\n```", "code": "def max_non_adjacent_sum(arr):\n    incl = 0\n    excl = 0\n\n    for i in arr:\n        new_excl = excl if excl > incl else incl\n\n        incl = excl + i\n        excl = new_excl\n\n    return max(incl, excl)", "entry_point": "max_non_adjacent_sum", "testcase": ["assert max_non_adjacent_sum([5, 5, 10, 100, 10, 5]) == 110", "assert max_non_adjacent_sum([3, 2, 5, 10, 7]) == 15", "assert max_non_adjacent_sum([3, 2, 7, 10]) == 13"]}
{"seq_id": 19643859558, "instruction": "Write a function to calculate the sum of all elements in a list that are greater than a given number.", "output": "Here is the code to solve this problem: \n```python\ndef sum_greater_than(lst, num):\n    total = 0\n    for i in lst:\n        if i > num:\n            total += i\n    return total\n```", "code": "def sum_greater_than(lst, num):\n    total = 0\n    for i in lst:\n        if i > num:\n            total += i\n    return total", "entry_point": "sum_greater_than", "testcase": ["assert sum_greater_than([1, 2, 3, 4, 5], 2) == 12", "assert sum_greater_than([10, 20, 30, 40, 50], 25) == 120", "assert sum_greater_than([1, 1, 1, 1, 1], 0) == 5"]}
{"seq_id": 410799495, "instruction": "Write a python function to find the factorial of a given number using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef factorial_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n```", "code": "def factorial_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)", "entry_point": "factorial_recursive", "testcase": ["assert factorial_recursive(5) == 120", "assert factorial_recursive(3) == 6", "assert factorial_recursive(1) == 1"]}
{"seq_id": 74517289476, "instruction": "Write a python function to calculate the area of a circle given its radius.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef calculate_circle_area(radius):\n    return math.pi * radius * radius\n```", "code": "import math\n\ndef calculate_circle_area(radius):\n    return math.pi * radius * radius", "entry_point": "calculate_circle_area", "testcase": ["assert calculate_circle_area(3) == 28.274333882308138", "assert calculate_circle_area(2) == 12.566370614359172", "assert calculate_circle_area(1) == 3.141592653589793"]}
{"seq_id": 17675562000, "instruction": "Write a function to find the symmetric difference between two sets of integers.", "output": "Here is the code to solve this problem: \n```python\ndef symmetric_difference(set1, set2):\n    return set1 ^ set2\n```", "code": "def symmetric_difference(set1, set2):\n    return set1 ^ set2", "entry_point": "symmetric_difference", "testcase": ["assert symmetric_difference({6, 7, 8}, {7, 9, 10}) == {6, 8, 9, 10}", "assert symmetric_difference({1, 2, 3}, {3, 4, 5}) == {1, 2, 4, 5}", "assert symmetric_difference({11, 12, 13}, {13, 14, 15}) == {11, 12, 14, 15}"]}
{"seq_id": 26239738102, "instruction": "Write a python function to find the maximum sum of a subarray with the length of k.", "output": "Here is the code to solve this problem: \n```python\ndef maxSubArraySum(arr,k):\n    if not arr:\n        return 0\n    max_sum = current_sum = sum(arr[:k])\n    for i in range(k,len(arr)):\n        current_sum += arr[i] - arr[i-k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def maxSubArraySum(arr,k):\n    if not arr:\n        return 0\n    max_sum = current_sum = sum(arr[:k])\n    for i in range(k,len(arr)):\n        current_sum += arr[i] - arr[i-k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "maxSubArraySum", "testcase": ["assert maxSubArraySum([5,1,2,3,4,5],3) == 12", "assert maxSubArraySum([1,2,3,4,5],2) == 9", "assert maxSubArraySum([-1,-2,-3,-4,-5],1) == -1"]}
{"seq_id": 4718273317, "instruction": "Write a python function to find the number of good pairs in a list. A pair (i, j) is called good if nums[i] == nums[j] and i < j.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef numGoodPairs(nums):\n    temp = dict(Counter(nums))\n    res = 0\n    for val in temp.values():\n        res += (val*(val-1))//2\n    return res\n```", "code": "from collections import Counter\n\ndef numGoodPairs(nums):\n    temp = dict(Counter(nums))\n    res = 0\n    for val in temp.values():\n        res += (val*(val-1))//2\n    return res", "entry_point": "numGoodPairs", "testcase": ["assert numGoodPairs([1,2,3,1,1,3]) == 4", "assert numGoodPairs([1,1,1,1]) == 6", "assert numGoodPairs([1,2,3]) == 0"]}
{"seq_id": 69941233193, "instruction": "Write a function that reverses a string. The input string is given as an array of characters char[].\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nYou may assume all the characters consist of printable ascii characters.", "output": "Here is the code to solve this problem: \n```python\ndef string_reverse(s):\n    s.reverse()\n    return ''.join(s)\n\n# check function to verify the correctness of the solution\ndef check_solution():\n    assert string_reverse(list(\"hello\"))==\"olleh\"\n    assert string_reverse(list(\"python\"))==\"nohtyp\"\n    assert string_reverse(list(\"algorithm\"))==\"mhtirogla\"\n    print(\"All test cases passed\")\n\ncheck_solution()\n```", "code": "def string_reverse(s):\n    s.reverse()\n    return ''.join(s)\n\n# check function to verify the correctness of the solution\ndef check_solution():\n    assert string_reverse(list(\"hello\"))==\"olleh\"\n    assert string_reverse(list(\"python\"))==\"nohtyp\"\n    assert string_reverse(list(\"algorithm\"))==\"mhtirogla\"\n    print(\"All test cases passed\")\n\ncheck_solution()", "entry_point": "string_reverse", "testcase": ["assert string_reverse(list(\"algorithm\"))==\"mhtirogla\"", "assert string_reverse(list(\"hello\"))==\"olleh\"", "assert string_reverse(list(\"python\"))==\"nohtyp\""]}
{"seq_id": 18636248139, "instruction": "Write a function to find the length of the shortest subarray that needs to be sorted in ascending order so that the whole array becomes sorted in ascending order.", "output": "Here is the code to solve this problem: \n```python\ndef find_shortest_subarray(nums):\n    n = len(nums)\n    end = -2\n    start = -1\n    Max = nums[0] \n    Min = nums[n-1]\n    \n    for i in range(0, n):\n        Max = max(Max, nums[i])\n        if nums[i] < Max:\n            end = i\n        \n        Min = min(Min, nums[n-1-i])\n        if nums[n-1-i] > Min:\n            start = n-1-i\n    \n    return end-start+1\n```", "code": "def find_shortest_subarray(nums):\n    n = len(nums)\n    end = -2\n    start = -1\n    Max = nums[0] \n    Min = nums[n-1]\n    \n    for i in range(0, n):\n        Max = max(Max, nums[i])\n        if nums[i] < Max:\n            end = i\n        \n        Min = min(Min, nums[n-1-i])\n        if nums[n-1-i] > Min:\n            start = n-1-i\n    \n    return end-start+1", "entry_point": "find_shortest_subarray", "testcase": ["assert find_shortest_subarray([1, 3, 2, 2, 2]) == 4", "assert find_shortest_subarray([1, 2, 3, 5, 4]) == 2", "assert find_shortest_subarray([1, 2, 3, 4]) == 0", "assert find_shortest_subarray([2, 6, 4, 8, 10, 9, 15]) == 5"]}
{"seq_id": 16557899745, "instruction": "Write a function that checks if a given string is a palindrome considering case sensitivity and non-alphanumeric characters.", "output": "Here is the code to solve this problem: \n```python\ndef is_strict_palindrome(s):\n    return s == s[::-1]\n\ndef test_strict_palindrome():\n    test_cases = [\n        (\"A man, a plan, a canal: Panama\", False),\n        (\"race a car\", False),\n        (\"madam\", True),\n        (\"step on no pets\", True),\n    ]\n    for s, expected in test_cases:\n        assert is_strict_palindrome(s) == expected, f\"Failed for {s}\"\n    print(\"All test cases passed.\")\n\ntest_strict_palindrome()\n```", "code": "def is_strict_palindrome(s):\n    return s == s[::-1]\n\ndef test_strict_palindrome():\n    test_cases = [\n        (\"A man, a plan, a canal: Panama\", False),\n        (\"race a car\", False),\n        (\"madam\", True),\n        (\"step on no pets\", True),\n    ]\n    for s, expected in test_cases:\n        assert is_strict_palindrome(s) == expected, f\"Failed for {s}\"\n    print(\"All test cases passed.\")\n\ntest_strict_palindrome()", "entry_point": "is_strict_palindrome", "testcase": ["assert is_strict_palindrome(\"step on no pets\") == True", "assert is_strict_palindrome(\"A man, a plan, a canal: Panama\") == False", "assert is_strict_palindrome(\"race a car\") == False", "assert is_strict_palindrome(\"madam\") == True"]}
{"seq_id": 1025937302, "instruction": "Write a Python function to find all possible paths from the source node to the destination node in a directed graph.", "output": "Here is the code to solve this problem: \n```python\ndef find_all_paths(graph, source, destination):\n    paths = []\n    dfs(graph, source, destination, [source], paths)\n    return paths\n\ndef dfs(graph, source, destination, path, paths):\n    if source == destination:\n        paths.append(path[:])\n        return\n    for adjacent in graph[source]:\n        dfs(graph, adjacent, destination, path + [adjacent], paths)\n```", "code": "def find_all_paths(graph, source, destination):\n    paths = []\n    dfs(graph, source, destination, [source], paths)\n    return paths\n\ndef dfs(graph, source, destination, path, paths):\n    if source == destination:\n        paths.append(path[:])\n        return\n    for adjacent in graph[source]:\n        dfs(graph, adjacent, destination, path + [adjacent], paths)", "entry_point": "find_all_paths", "testcase": ["assert find_all_paths([[1, 2], [3], [3], []], 0, 3) == [[0, 1, 3], [0, 2, 3]]", "assert find_all_paths([[1], [2], [3], []], 0, 3) == [[0, 1, 2, 3]]", "assert find_all_paths([[1, 2, 3], [], [], []], 0, 3) == [[0, 3]]"]}
{"seq_id": 26182812595, "instruction": "Write a function to reorder a given list so that all even numbers appear before all odd numbers, while keeping the relative order of the even and odd numbers.", "output": "Here is the code to solve this problem: \n```python\ndef even_before_odd(arr):\n    even = [x for x in arr if x % 2 == 0]\n    odd = [x for x in arr if x % 2 != 0]\n    return even + odd\n```", "code": "def even_before_odd(arr):\n    even = [x for x in arr if x % 2 == 0]\n    odd = [x for x in arr if x % 2 != 0]\n    return even + odd", "entry_point": "even_before_odd", "testcase": ["assert even_before_odd([11, 22, 33, 44, 55, 66, 77, 88]) == [22, 44, 66, 88, 11, 33, 55, 77]", "assert even_before_odd([10, 5, 8, 3, 2, 7, 4]) == [10, 8, 2, 4, 5, 3, 7]", "assert even_before_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6, 1, 3, 5]"]}
{"seq_id": 32711593746, "instruction": "Write a function that reverses a string. The input string is given as an array of characters char[].\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nYou may assume all the characters consist of printable ascii characters.", "output": "Here is the code to solve this problem: \n```python\ndef reverseString(s):\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left, right = left + 1, right - 1\n    return s\n```", "code": "def reverseString(s):\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left, right = left + 1, right - 1\n    return s", "entry_point": "reverseString", "testcase": ["assert reverseString([\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"e\",\"d\",\"c\",\"b\",\"a\"]", "assert reverseString([\"h\",\"e\",\"l\",\"l\",\"o\"]) == [\"o\",\"l\",\"l\",\"e\",\"h\"]", "assert reverseString([\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]) == [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]"]}
{"seq_id": 2960200923, "instruction": "Write a function to find the least common multiple (lcm) of two integers by using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef recur_lcm(a, b):\n    def gcd(x, y):\n        if x % y == 0:\n            return y\n        return gcd(y, x % y)\n    return a * b // gcd(a, b)\n```", "code": "def recur_lcm(a, b):\n    def gcd(x, y):\n        if x % y == 0:\n            return y\n        return gcd(y, x % y)\n    return a * b // gcd(a, b)", "entry_point": "recur_lcm", "testcase": ["assert recur_lcm(9, 3) == 9", "assert recur_lcm(13,17) == 221", "assert recur_lcm(12,14) == 84"]}
{"seq_id": 43724636583, "instruction": "Write a function to find the missing number in a given array that contains all numbers from 1 to n with one missing.", "output": "Here is the code to solve this problem: \n```python\ndef findMissingNumber(nums):\n    n = len(nums) + 1\n    total = n * (n + 1) // 2\n    sum_of_nums = sum(nums)\n    return total - sum_of_nums\n```", "code": "def findMissingNumber(nums):\n    n = len(nums) + 1\n    total = n * (n + 1) // 2\n    sum_of_nums = sum(nums)\n    return total - sum_of_nums", "entry_point": "findMissingNumber", "testcase": ["assert findMissingNumber([1, 3, 4, 5]) == 2", "assert findMissingNumber([1, 2, 3, 5]) == 4", "assert findMissingNumber([2, 3, 1, 5]) == 4"]}
{"seq_id": 9663866988, "instruction": "Write a function to check if a sequence of numbers is an arithmetic sequence.\n\nAn arithmetic sequence is a sequence of numbers in which the difference between any two consecutive terms is constant. For example, in the sequence 1, 3, 5, 7, ..., the difference between any two consecutive terms is 2, so it is an arithmetic sequence.\n\nYour task is to write a function that takes a list of numbers as input and returns True if the sequence is an arithmetic sequence, and False otherwise.", "output": "Here is the code to solve this problem: \n```python\ndef is_arithmetic_sequence(nums):\n    if len(nums) <= 2:\n        return True\n    diff = nums[1] - nums[0]\n    for i in range(2, len(nums)):\n        if nums[i] - nums[i-1] != diff:\n            return False\n    return True\n```", "code": "def is_arithmetic_sequence(nums):\n    if len(nums) <= 2:\n        return True\n    diff = nums[1] - nums[0]\n    for i in range(2, len(nums)):\n        if nums[i] - nums[i-1] != diff:\n            return False\n    return True", "entry_point": "is_arithmetic_sequence", "testcase": ["assert is_arithmetic_sequence([1, 2]) == True", "assert is_arithmetic_sequence([1, 2, 4, 8, 16]) == False", "assert is_arithmetic_sequence([10, 10, 10, 10]) == True", "assert is_arithmetic_sequence([1, 3, 5, 7, 9, 11]) == True", "assert is_arithmetic_sequence([1, 2, 4, 7, 11, 16]) == False", "assert is_arithmetic_sequence([1, 3, 5, 7, 9]) == True", "assert is_arithmetic_sequence([1]) == True"]}
{"seq_id": 36369536412, "instruction": "Write a python function to find the longest common subsequence between two strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_subseq(X , Y): \n    m = len(X) \n    n = len(Y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n    return L[m][n]\n```", "code": "def longest_common_subseq(X , Y): \n    m = len(X) \n    n = len(Y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n    return L[m][n]", "entry_point": "longest_common_subseq", "testcase": ["assert longest_common_subseq(\"apple\",\"make\") == 2", "assert longest_common_subseq(\"abcdgh\",\"aedfhr\") == 3", "assert longest_common_subseq(\"xyz\",\"xyz\") == 3"]}
{"seq_id": 30323656634, "instruction": "Write a function to return the number of pairs in the given array that add up to a specific target sum.", "output": "Here is the code to solve this problem: \n```python\ndef find_pairs_with_sum(arr, target):\n    seen = {}\n    count = 0\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in seen:\n            count += seen[complement]\n        if arr[i] in seen:\n            seen[arr[i]] += 1\n        else:\n            seen[arr[i]] = 1\n    return count\n```", "code": "def find_pairs_with_sum(arr, target):\n    seen = {}\n    count = 0\n    for i in range(len(arr)):\n        complement = target - arr[i]\n        if complement in seen:\n            count += seen[complement]\n        if arr[i] in seen:\n            seen[arr[i]] += 1\n        else:\n            seen[arr[i]] = 1\n    return count", "entry_point": "find_pairs_with_sum", "testcase": ["assert find_pairs_with_sum([1, 5, 7, -1, 5], 6) == 3", "assert find_pairs_with_sum([1, 1, 1, 1], 2) == 6", "assert find_pairs_with_sum([1, 10, 100, 1000], 110) == 1"]}
{"seq_id": 19408773463, "instruction": "Write a function to determine if a given year is a leap year.", "output": "Here is the code to solve this problem: \n```python\ndef is_leap_year(year):\n    if year % 4 != 0:\n        return False\n    elif year % 100 != 0:\n        return True\n    elif year % 400 != 0:\n        return False\n    else:\n        return True\n```", "code": "def is_leap_year(year):\n    if year % 4 != 0:\n        return False\n    elif year % 100 != 0:\n        return True\n    elif year % 400 != 0:\n        return False\n    else:\n        return True", "entry_point": "is_leap_year", "testcase": ["assert is_leap_year(2100) == False", "assert is_leap_year(2000) == True", "assert is_leap_year(2004) == True", "assert is_leap_year(1900) == False", "assert is_leap_year(1996) == True"]}
{"seq_id": 20586120219, "instruction": "Write a python function to find the maximum sum of a subarray with the length of exactly 'k'.", "output": "Here is the code to solve this problem: \n```python\ndef maxSumSubarray(arr, k):\n    if (not arr) or (len(arr) < k):\n        return None\n    \n    max_sum = window_sum = sum(arr[:k])\n    for i in range(len(arr) - k):\n        window_sum = window_sum - arr[i] + arr[i+k]\n        max_sum = max(max_sum, window_sum)\n        \n    return max_sum\n```", "code": "def maxSumSubarray(arr, k):\n    if (not arr) or (len(arr) < k):\n        return None\n    \n    max_sum = window_sum = sum(arr[:k])\n    for i in range(len(arr) - k):\n        window_sum = window_sum - arr[i] + arr[i+k]\n        max_sum = max(max_sum, window_sum)\n        \n    return max_sum", "entry_point": "maxSumSubarray", "testcase": ["assert maxSumSubarray([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) == 39", "assert maxSumSubarray([-1, 2, 3, -4, 5, 10], 2) == 15", "assert maxSumSubarray([2, 3, 4, 1, 5], 1) == 5"]}
{"seq_id": 33419093039, "instruction": "Given a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.", "output": "Here is the code to solve this problem: \n```python\ndef exist(board, word):\n    def dfs(i, j, k):\n        if not (0 <= i < len(board)) or not (0 <= j < len(board[0])) or board[i][j] != word[k]:\n            return False\n        if k == len(word) - 1:\n            return True\n        board[i][j] = ''\n        res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)\n        board[i][j] = word[k]\n        return res\n\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if dfs(i, j, 0):\n                return True\n    return False\n```", "code": "def exist(board, word):\n    def dfs(i, j, k):\n        if not (0 <= i < len(board)) or not (0 <= j < len(board[0])) or board[i][j] != word[k]:\n            return False\n        if k == len(word) - 1:\n            return True\n        board[i][j] = ''\n        res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)\n        board[i][j] = word[k]\n        return res\n\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if dfs(i, j, 0):\n                return True\n    return False", "entry_point": "exist", "testcase": ["assert exist([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]],\"ABCCED\") == True", "assert exist([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]],\"SEE\") == True", "assert exist([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]],\"ABCB\") == False"]}
{"seq_id": 38484085628, "instruction": "Write a python function to find the kth largest element in a given list of integers using heap queue algorithm.", "output": "Here is the code to solve this problem: \n```python\nimport heapq as hq\ndef find_kth_largest(nums, k):\n    hq.heapify(nums)\n    for i in range(len(nums) - k):\n        hq.heappop(nums)\n    return hq.heappop(nums)\n```", "code": "import heapq as hq\ndef find_kth_largest(nums, k):\n    hq.heapify(nums)\n    for i in range(len(nums) - k):\n        hq.heappop(nums)\n    return hq.heappop(nums)", "entry_point": "find_kth_largest", "testcase": ["assert find_kth_largest([3,2,3,1,2,4,5,5,6], 1) == 6", "assert find_kth_largest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert find_kth_largest([3,2,3,1,2,4,5,5,6], 9) == 1"]}
{"seq_id": 10108254239, "instruction": "Write a Python function to check if a given string is a valid URL.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n```", "code": "import re\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None", "entry_point": "is_valid_url", "testcase": ["assert is_valid_url(\"www.example.com\") == False", "assert is_valid_url(\"https://www.example.com\") == True", "assert is_valid_url(\"https://example.com/path\") == True", "assert is_valid_url(\"ftp://example.com\") == True", "assert is_valid_url(\"example.com\") == False"]}
{"seq_id": 17435591560, "instruction": "Write a function to find the maximum sum of a subarray with a given length after partitioning. Given an integer array `arr` and an integer `k`, partition the array into (contiguous) subarrays of length at most `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray. Return the largest sum of the given array after partitioning.", "output": "Here is the code to solve this problem: \n```python\ndef max_sum_after_partition(arr, k):\n    dp = [0] * (len(arr) + 1)\n    dp[1] = arr[0]\n    for i in range(1, len(arr)):\n        maxSum = float(\"-inf\")\n        maxNum = float(\"-inf\")\n        for j in range(1, k+1):\n            if i - j + 1 >= 0:\n                maxNum = max(maxNum, arr[i - j + 1])\n                newSum = maxNum * j + dp[i - j + 1]\n                maxSum = max(maxSum, newSum)\n        dp[i + 1] = maxSum\n\n    return dp[len(arr)]\n```", "code": "def max_sum_after_partition(arr, k):\n    dp = [0] * (len(arr) + 1)\n    dp[1] = arr[0]\n    for i in range(1, len(arr)):\n        maxSum = float(\"-inf\")\n        maxNum = float(\"-inf\")\n        for j in range(1, k+1):\n            if i - j + 1 >= 0:\n                maxNum = max(maxNum, arr[i - j + 1])\n                newSum = maxNum * j + dp[i - j + 1]\n                maxSum = max(maxSum, newSum)\n        dp[i + 1] = maxSum\n\n    return dp[len(arr)]", "entry_point": "max_sum_after_partition", "testcase": ["assert max_sum_after_partition([1,15,7,9,2,5,10], 3) == 84", "assert max_sum_after_partition([1,4,1,5,7,3,6,1,9,9,3], 4) == 83", "assert max_sum_after_partition([1], 1) == 1"]}
{"seq_id": 1302685998, "instruction": "Write a python function to find the minimum length substring of `s` that contains all the characters in `t`. If no substring of `s` contains all characters in `t`, the function should return an empty string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef minWindow(s, t):\n    if len(t) > len(s):\n        return \"\"\n\n    tDict = {}\n    for c in t:\n        tDict[c] = tDict.get(c, 0) + 1\n    sDict = {}\n    indices = deque()\n    res = s + 'p'\n    found = False\n    for i in range(len(s)):\n        if s[i] in tDict:\n            indices.append(i)\n            sDict[s[i]] = sDict.get(s[i], 0) + 1\n            while sDict[s[i]] > tDict[s[i]]:\n                popped = indices.popleft()\n                sDict[s[popped]] -= 1\n\n            if sDict == tDict and (indices[-1] - indices[0] + 1 < len(res)):\n                res = s[indices[0]:indices[-1]+1]\n                found = True\n\n    return res if found else \"\"\n```", "code": "from collections import deque\n\ndef minWindow(s, t):\n    if len(t) > len(s):\n        return \"\"\n\n    tDict = {}\n    for c in t:\n        tDict[c] = tDict.get(c, 0) + 1\n    sDict = {}\n    indices = deque()\n    res = s + 'p'\n    found = False\n    for i in range(len(s)):\n        if s[i] in tDict:\n            indices.append(i)\n            sDict[s[i]] = sDict.get(s[i], 0) + 1\n            while sDict[s[i]] > tDict[s[i]]:\n                popped = indices.popleft()\n                sDict[s[popped]] -= 1\n\n            if sDict == tDict and (indices[-1] - indices[0] + 1 < len(res)):\n                res = s[indices[0]:indices[-1]+1]\n                found = True\n\n    return res if found else \"\"", "entry_point": "minWindow", "testcase": ["assert minWindow(s=\"ADOBECODEBANC\", t=\"ABC\") == \"BANC\"", "assert minWindow(s=\"a\", t=\"a\") == \"a\"", "assert minWindow(s=\"ab\", t=\"aa\") == \"\"", "assert minWindow(s=\"a\", t=\"aa\") == \"\""]}
{"seq_id": 4396244528, "instruction": "Write a python function to find the most common word in a given paragraph, excluding a list of banned words. The function should ignore case sensitivity and punctuation.", "output": "Here is the code to solve this problem: \n```python\nimport re\nfrom collections import Counter\n\n\ndef most_common_word(paragraph, banned):\n    \"\"\"\n    :type paragraph: str\n    :type banned: List[str]\n    :rtype: str\n    \"\"\"\n    paragraph = paragraph.lower()\n    word_list = re.findall(r'[a-zA-z]+', paragraph)\n\n    # \u5229\u7528Counter.most_common()\u9009\u53d6\u6307\u5b9a\u6700\u5927\u6b21\u6570\u7684\u6570\u636e\n    word_count = Counter(word_list)\n    res = word_count.most_common(len(banned) + 1)\n    for word_cnt in res:\n        if word_cnt[0] not in banned:\n            return word_cnt[0]\n```", "code": "import re\nfrom collections import Counter\n\n\ndef most_common_word(paragraph, banned):\n    \"\"\"\n    :type paragraph: str\n    :type banned: List[str]\n    :rtype: str\n    \"\"\"\n    paragraph = paragraph.lower()\n    word_list = re.findall(r'[a-zA-z]+', paragraph)\n\n    # \u5229\u7528Counter.most_common()\u9009\u53d6\u6307\u5b9a\u6700\u5927\u6b21\u6570\u7684\u6570\u636e\n    word_count = Counter(word_list)\n    res = word_count.most_common(len(banned) + 1)\n    for word_cnt in res:\n        if word_cnt[0] not in banned:\n            return word_cnt[0]", "entry_point": "most_common_word", "testcase": ["assert most_common_word(\"a, a, a, a, b,b,b,c, c,\", [\"a\"]) == \"b\"", "assert most_common_word(\"Bob hit a ball, the hit BALL flew far after it was hit.\", [\"hit\"]) == \"ball\"", "assert most_common_word(\"It was the best of times, it was the worst of times.\", [\"it\", \"of\", \"was\", \"the\", \"times\"]) == \"best\""]}
{"seq_id": 13618663882, "instruction": "Write a Python function to calculate the minimum number of moves required to arrange the given list of integers in ascending order. A move is defined as swapping two adjacent elements.", "output": "Here is the code to solve this problem: \n```python\ndef min_moves_to_sort(arr):\n    N = len(arr)\n    moves = 0\n    for i in range(N):\n        for j in range(N - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                moves += 1\n    return moves\n```", "code": "def min_moves_to_sort(arr):\n    N = len(arr)\n    moves = 0\n    for i in range(N):\n        for j in range(N - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                moves += 1\n    return moves", "entry_point": "min_moves_to_sort", "testcase": ["assert min_moves_to_sort([3, 2, 1]) == 3", "assert min_moves_to_sort([2, 3, 1]) == 2", "assert min_moves_to_sort([1, 2, 3]) == 0"]}
{"seq_id": 25965729119, "instruction": "Create a python function that checks if a given string is a valid password. A valid password is defined as one which is at least 8 characters long, contains at least one uppercase letter, one lowercase letter, one digit, and one special character.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_password(password):\n    if len(password) < 8:\n        return False\n    if not re.search(\"[a-z]\", password):\n        return False\n    if not re.search(\"[A-Z]\", password):\n        return False\n    if not re.search(\"[0-9]\", password):\n        return False\n    if not re.search(\"[_@$%^&*()-+]\", password):\n        return False\n    return True\n```", "code": "import re\n\ndef is_valid_password(password):\n    if len(password) < 8:\n        return False\n    if not re.search(\"[a-z]\", password):\n        return False\n    if not re.search(\"[A-Z]\", password):\n        return False\n    if not re.search(\"[0-9]\", password):\n        return False\n    if not re.search(\"[_@$%^&*()-+]\", password):\n        return False\n    return True", "entry_point": "is_valid_password", "testcase": ["assert is_valid_password(\"Password123\") == False", "assert is_valid_password(\"Password@123\") == True", "assert is_valid_password(\"password\") == False", "assert is_valid_password(\"password@123\") == False", "assert is_valid_password(\"Password@1\") == True", "assert is_valid_password(\"Pass@1\") == False"]}
{"seq_id": 14385950701, "instruction": "Write a python function to check if a binary tree is a binary search tree (BST).\n\nIn a binary search tree, for every node, all elements in the left subtree are less than the node, and all elements in the right subtree are greater than the node.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef is_bst(root):\n    def is_bst_helper(root, min_val, max_val):\n        if root is None:\n            return True\n        else:\n            if not (min_val < root.val < max_val):\n                return False\n            return is_bst_helper(root.left, min_val, root.val) and is_bst_helper(root.right, root.val, max_val)\n\n    return is_bst_helper(root, float('-inf'), float('inf'))\n\n# Create a binary tree\n#     2\n#    / \\\n#   1   3\nroot = TreeNode(2)\nroot.left = TreeNode(1)\nroot.right = TreeNode(3)\n\nassert is_bst(root) == True\n\n# Create a binary tree\n#     1\n#    / \\\n#   2   3\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\n\nassert is_bst(root) == False\n```", "code": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef is_bst(root):\n    def is_bst_helper(root, min_val, max_val):\n        if root is None:\n            return True\n        else:\n            if not (min_val < root.val < max_val):\n                return False\n            return is_bst_helper(root.left, min_val, root.val) and is_bst_helper(root.right, root.val, max_val)\n\n    return is_bst_helper(root, float('-inf'), float('inf'))\n\n# Create a binary tree\n#     2\n#    / \\\n#   1   3\nroot = TreeNode(2)\nroot.left = TreeNode(1)\nroot.right = TreeNode(3)\n\nassert is_bst(root) == True\n\n# Create a binary tree\n#     1\n#    / \\\n#   2   3\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\n\nassert is_bst(root) == False", "entry_point": "is_bst", "testcase": ["# This is a BST", "#     2", "#   1   3", "#    / \\", "# Create a binary tree", "#    / \\", "# This is not a BST", "", "#     1", "# Create a binary tree", "assert is_bst(root) == False", "#   2   3"]}
{"seq_id": 13626311785, "instruction": "Write a function to find the largest number that can be formed using the digits of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef largest_number(n):\n    return int(\"\".join(sorted(str(n), reverse=True)))\n```", "code": "def largest_number(n):\n    return int(\"\".join(sorted(str(n), reverse=True)))", "entry_point": "largest_number", "testcase": ["assert largest_number(12345) == 54321", "assert largest_number(987654321) == 987654321", "assert largest_number(231) == 321"]}
{"seq_id": 22506029714, "instruction": "Write a python function to find the length of the longest substring that can be obtained by replacing at most k characters in the given string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef longest_substring_with_k_replacements(s, k):\n    count = Counter()\n    best, i, ans = 0, 0, 0\n    for j, char in enumerate(s):\n        count[char] += 1 \n        best = max(best, count[char]) \n        if best + k < j - i + 1:\n            count[s[i]] -= 1 \n            i += 1 \n        ans = max(ans, j - i + 1)\n    return ans\n```", "code": "from collections import Counter\n\ndef longest_substring_with_k_replacements(s, k):\n    count = Counter()\n    best, i, ans = 0, 0, 0\n    for j, char in enumerate(s):\n        count[char] += 1 \n        best = max(best, count[char]) \n        if best + k < j - i + 1:\n            count[s[i]] -= 1 \n            i += 1 \n        ans = max(ans, j - i + 1)\n    return ans", "entry_point": "longest_substring_with_k_replacements", "testcase": ["assert longest_substring_with_k_replacements(\"ABAB\", 2) == 4", "assert longest_substring_with_k_replacements(\"AABABBA\", 2) == 5", "assert longest_substring_with_k_replacements(\"AABABBA\", 1) == 4"]}
{"seq_id": 11338617461, "instruction": "Write a python function to convert a number from base 10 to binary.", "output": "Here is the code to solve this problem: \n```python\ndef dec_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n```", "code": "def dec_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")", "entry_point": "dec_to_binary", "testcase": ["assert dec_to_binary(5) == '101'", "assert dec_to_binary(15) == '1111'", "assert dec_to_binary(10) == '1010'"]}
{"seq_id": 71155097766, "instruction": "Write a function to find the prime factors of a number.", "output": "Here is the code to solve this problem: \n```python\ndef find_prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return list(set(factors))\n```", "code": "def find_prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return list(set(factors))", "entry_point": "find_prime_factors", "testcase": ["assert find_prime_factors(28) == [2, 7]", "assert find_prime_factors(29) == [29]", "assert find_prime_factors(100) == [2, 5]"]}
{"seq_id": 31548764512, "instruction": "Write a python function to find the maximum sum of any subsequence of a given array. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.", "output": "Here is the code to solve this problem: \n```python\ndef max_subsequence_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in arr:\n        current_sum += i\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def max_subsequence_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in arr:\n        current_sum += i\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "max_subsequence_sum", "testcase": ["assert max_subsequence_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6", "assert max_subsequence_sum([4, -1, 2, 1]) == 6", "assert max_subsequence_sum([-1, -2, -3, -4]) == 0"]}
{"seq_id": 20062407056, "instruction": "Write a function to check if a given string is a valid IPv6 address.\n\nAn IPv6 address is a 128-bit numerical address expressed as eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons (:). An IPv6 address may contain leading zeros in any group, but they are usually omitted. A double colon (::) can be used once in an address to denote one or more groups of four zeros.\n\nThe function should return True if the given string is a valid IPv6 address, and False otherwise.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_ipv6(ip):\n    pattern = r'^([0-9a-fA-F]{0,4}:){7}([0-9a-fA-F]{1,4})$'\n    if re.match(pattern, ip):\n        return True\n    if '::' in ip:\n        parts = ip.split('::')\n        if len(parts) > 2:\n            return False\n        if len(parts[0]) + len(parts[1]) > 8:\n            return False\n        for part in parts:\n            if part:\n                if not all([len(x) <= 4 and all(c in '0123456789abcdefABCDEF' for c in x) for x in part.split(':')]):\n                    return False\n        return True\n    return False\n```", "code": "import re\n\ndef is_valid_ipv6(ip):\n    pattern = r'^([0-9a-fA-F]{0,4}:){7}([0-9a-fA-F]{1,4})$'\n    if re.match(pattern, ip):\n        return True\n    if '::' in ip:\n        parts = ip.split('::')\n        if len(parts) > 2:\n            return False\n        if len(parts[0]) + len(parts[1]) > 8:\n            return False\n        for part in parts:\n            if part:\n                if not all([len(x) <= 4 and all(c in '0123456789abcdefABCDEF' for c in x) for x in part.split(':')]):\n                    return False\n        return True\n    return False", "entry_point": "is_valid_ipv6", "testcase": ["assert is_valid_ipv6(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\") == True", "assert is_valid_ipv6(\"2001:db8:85a3:0:0:8A2E:0370:733G\") == False", "assert is_valid_ipv6(\"2001:db8:85a3:0:0:8A2E:0370:7334\") == True"]}
{"seq_id": 6068511519, "instruction": "Write a function to find the number of ways to make change for a given amount using a set of coin denominations.", "output": "Here is the code to solve this problem: \n```python\ndef num_ways_to_make_change_for_amount(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] += dp[x - coin]\n\n    return dp[amount]\n```", "code": "def num_ways_to_make_change_for_amount(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] += dp[x - coin]\n\n    return dp[amount]", "entry_point": "num_ways_to_make_change_for_amount", "testcase": ["assert num_ways_to_make_change_for_amount([1], 0) == 1", "assert num_ways_to_make_change_for_amount([2], 3) == 0", "assert num_ways_to_make_change_for_amount([1, 2, 5], 5) == 4"]}
{"seq_id": 10018934957, "instruction": "Write a function to find the k most frequent elements in an array of numbers. If multiple elements have the same frequency, return them in the order they first appeared in the array.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef find_k_most_frequent(nums, k):\n    freqs = {}\n    for num in nums:\n        if num in freqs:\n            freqs[num] += 1\n        else:\n            freqs[num] = 1\n\n    MaxHeap = [(-freq, num) for num, freq in freqs.items()]\n    heapq.heapify(MaxHeap)\n    kfreq = [heapq.heappop(MaxHeap)[1] for _ in range(k)]\n    return kfreq\n```", "code": "import heapq\n\ndef find_k_most_frequent(nums, k):\n    freqs = {}\n    for num in nums:\n        if num in freqs:\n            freqs[num] += 1\n        else:\n            freqs[num] = 1\n\n    MaxHeap = [(-freq, num) for num, freq in freqs.items()]\n    heapq.heapify(MaxHeap)\n    kfreq = [heapq.heappop(MaxHeap)[1] for _ in range(k)]\n    return kfreq", "entry_point": "find_k_most_frequent", "testcase": ["assert find_k_most_frequent([1], 1) == [1]", "assert find_k_most_frequent([1,2,3,4,5,6,7], 3) == [1, 2, 3]", "assert find_k_most_frequent([1,1,1,2,2,3], 2) == [1, 2]"]}
{"seq_id": 2909867269, "instruction": "Write a python function to find all unique quadruplets in the array which gives the sum of target.", "output": "Here is the code to solve this problem: \n```python\ndef fourSum(nums, target):\n    result = []\n    nums.sort()\n    n = len(nums)\n    for i in range(n):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, n):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left, right = j + 1, n - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result\n```", "code": "def fourSum(nums, target):\n    result = []\n    nums.sort()\n    n = len(nums)\n    for i in range(n):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, n):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left, right = j + 1, n - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result", "entry_point": "fourSum", "testcase": ["assert fourSum([1, 0, -1, 0, -2, 2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]", "assert fourSum([0, 0, 0, 0], 0) == [[0, 0, 0, 0]]", "assert fourSum([2, 2, 2, 2, 2], 8) == [[2, 2, 2, 2]]"]}
{"seq_id": 39461681752, "instruction": "Write a python function to find the longest palindromic substring in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_palindrome_substring(s):\n    if len(s) < 2:\n        return s\n\n    start = 0\n    max_len = 1\n\n    for i in range(len(s)):\n        if i - max_len >= 1 and s[i - max_len - 1:i + 1] == s[i - max_len - 1:i + 1][::-1]:\n            start = i - max_len - 1\n            max_len += 2\n            continue\n\n        if i - max_len >= 0 and s[i - max_len:i + 1] == s[i - max_len:i + 1][::-1]:\n            start = i - max_len\n            max_len += 1\n\n    return s[start:start + max_len]\n```", "code": "def longest_palindrome_substring(s):\n    if len(s) < 2:\n        return s\n\n    start = 0\n    max_len = 1\n\n    for i in range(len(s)):\n        if i - max_len >= 1 and s[i - max_len - 1:i + 1] == s[i - max_len - 1:i + 1][::-1]:\n            start = i - max_len - 1\n            max_len += 2\n            continue\n\n        if i - max_len >= 0 and s[i - max_len:i + 1] == s[i - max_len:i + 1][::-1]:\n            start = i - max_len\n            max_len += 1\n\n    return s[start:start + max_len]", "entry_point": "longest_palindrome_substring", "testcase": ["assert longest_palindrome_substring(\"cbbd\") == \"bb\"", "assert longest_palindrome_substring(\"a\") == \"a\"", "assert longest_palindrome_substring(\"babad\") == \"bab\"", "assert longest_palindrome_substring(\"ac\") == \"a\""]}
{"seq_id": 9319240511, "instruction": "Write a python function to convert a given number of seconds into a human-readable format of hours, minutes, and seconds.", "output": "Here is the code to solve this problem: \n```python\ndef convert_seconds(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f'{hours} hour(s), {minutes} minute(s), and {seconds} second(s)'\n```", "code": "def convert_seconds(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f'{hours} hour(s), {minutes} minute(s), and {seconds} second(s)'", "entry_point": "convert_seconds", "testcase": ["assert convert_seconds(3665) == '1 hour(s), 1 minute(s), and 5 second(s)'", "assert convert_seconds(85) == '0 hour(s), 1 minute(s), and 25 second(s)'", "assert convert_seconds(7200) == '2 hour(s), 0 minute(s), and 0 second(s)'"]}
{"seq_id": 6621057047, "instruction": "Write a python function to check if a given string is a valid hexadecimal color code.", "output": "Here is the code to solve this problem: \n```python\ndef is_hex_color(code):\n  if len(code) != 7 or code[0] != '#':\n    return False\n  for i in range(1, 7):\n    if not (code[i] >= '0' and code[i] <= '9' or code[i] >= 'A' and code[i] <= 'F' or code[i] >= 'a' and code[i] <= 'f'):\n      return False\n  return True\n```", "code": "def is_hex_color(code):\n  if len(code) != 7 or code[0] != '#':\n    return False\n  for i in range(1, 7):\n    if not (code[i] >= '0' and code[i] <= '9' or code[i] >= 'A' and code[i] <= 'F' or code[i] >= 'a' and code[i] <= 'f'):\n      return False\n  return True", "entry_point": "is_hex_color", "testcase": ["assert is_hex_color(\"#CD5C5C\") == True", "assert is_hex_color(\"#E3A5A5\") == True", "assert is_hex_color(\"#123\") == False", "assert is_hex_color(\"CD5C5C\") == False", "assert is_hex_color(\"#CDEFGH\") == False"]}
{"seq_id": 13087339835, "instruction": "Write a function that takes in a string and checks if it is a valid integer. The function should consider both positive and negative integers, and should not consider leading zeros as valid.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_integer(s: str) -> bool:\n    if not s:\n        return False\n    if s[0] == \"0\" and len(s) > 1:\n        return False\n    if s[0] == \"-\" and (len(s) == 1 or s[1] == \"0\"):\n        return False\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n```", "code": "def is_valid_integer(s: str) -> bool:\n    if not s:\n        return False\n    if s[0] == \"0\" and len(s) > 1:\n        return False\n    if s[0] == \"-\" and (len(s) == 1 or s[1] == \"0\"):\n        return False\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "entry_point": "is_valid_integer", "testcase": ["assert is_valid_integer(\"123\") == True", "assert is_valid_integer(\"\") == False", "assert is_valid_integer(\"abc\") == False", "assert is_valid_integer(\"-123\") == True", "assert is_valid_integer(\"00123\") == False", "assert is_valid_integer(\"12.3\") == False", "assert is_valid_integer(\"-0\") == False", "assert is_valid_integer(\"0\") == True"]}
{"seq_id": 71535676909, "instruction": "Write a function to check if two strings are anagrams of each other, ignoring any non-alphabetic characters and case sensitivity.", "output": "Here is the code to solve this problem: \n```python\ndef check_anagrams(str1, str2):\n    filtered_str1 = []\n    for c in str1:\n        if c.isalpha():\n            filtered_str1.append(c.lower())\n    \n    filtered_str2 = []\n    for c in str2:\n        if c.isalpha():\n            filtered_str2.append(c.lower())\n    \n    if \"\".join(filtered_str1) == \"\".join(filtered_str2):\n        return 'YES'\n    \n    filtered_str1.sort()\n    filtered_str2.sort()\n\n    if \"\".join(filtered_str1) == \"\".join(filtered_str2):\n        return 'YES'\n    \n    return 'NO'\n```", "code": "def check_anagrams(str1, str2):\n    filtered_str1 = []\n    for c in str1:\n        if c.isalpha():\n            filtered_str1.append(c.lower())\n    \n    filtered_str2 = []\n    for c in str2:\n        if c.isalpha():\n            filtered_str2.append(c.lower())\n    \n    if \"\".join(filtered_str1) == \"\".join(filtered_str2):\n        return 'YES'\n    \n    filtered_str1.sort()\n    filtered_str2.sort()\n\n    if \"\".join(filtered_str1) == \"\".join(filtered_str2):\n        return 'YES'\n    \n    return 'NO'", "entry_point": "check_anagrams", "testcase": ["assert check_anagrams('Snooze alarms', 'Alas! No more Zs') == 'YES'", "assert check_anagrams('The Morse Code', 'Here come dots') == 'YES'", "assert check_anagrams('Desperation', 'A rope ends it') == 'YES'", "assert check_anagrams('Conversation', 'Voices rant on') == 'YES'", "assert check_anagrams('School master', 'The classroom') == 'YES'", "assert check_anagrams('The eyes', 'They see') == 'YES'", "assert check_anagrams('Astronomer', 'Moon starer') == 'YES'", "assert check_anagrams('Dormitory', 'Dirty room') == 'YES'", "assert check_anagrams('Hello', 'World') == 'NO'", "assert check_anagrams('Listen', 'Silent') == 'YES'"]}
{"seq_id": 9070941150, "instruction": "Write a function to calculate the score from a dart game result, where each turn result is represented as a string. The game uses standard dart scoring where a number is followed by one of the following:\nS: Square (raise to the power of 1) \nD: Double (raise to the power of 2) \nT: Triple (raise to the power of 3) \n'*': Multiplies the score of the current and previous dart by 2\n'#': Negates the score of the current dart.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_dart_score(dartResult):\n    power = {\"S\": 1, \"D\": 2, \"T\": 3}\n    modifier = {\"*\": 2, \"#\": -1}\n    score = []\n    for i in range(len(dartResult)):\n        if dartResult[i].isdigit():\n            if i != 0 and dartResult[i] == \"0\" and dartResult[i - 1] == \"1\":\n                score[-1] = 10\n                continue\n            score.append(int(dartResult[i]))\n            continue\n        elif dartResult[i] in power:\n            if score[-1] == 10 and len(score) > 1:\n                score[-2] = 10 ** power[dartResult[i]]\n            else:\n                score[-1] = score[-1] ** power[dartResult[i]]\n            continue\n        else:\n            if dartResult[i] == \"*\":\n                if len(score) <= 1:\n                    score[-1] *= 2\n                else:\n                    score[-2] *= 2\n                    score[-1] *= 2\n            elif dartResult[i] == \"#\":\n                score[-1] *= -1\n            \n    return sum(score)\n```", "code": "def calculate_dart_score(dartResult):\n    power = {\"S\": 1, \"D\": 2, \"T\": 3}\n    modifier = {\"*\": 2, \"#\": -1}\n    score = []\n    for i in range(len(dartResult)):\n        if dartResult[i].isdigit():\n            if i != 0 and dartResult[i] == \"0\" and dartResult[i - 1] == \"1\":\n                score[-1] = 10\n                continue\n            score.append(int(dartResult[i]))\n            continue\n        elif dartResult[i] in power:\n            if score[-1] == 10 and len(score) > 1:\n                score[-2] = 10 ** power[dartResult[i]]\n            else:\n                score[-1] = score[-1] ** power[dartResult[i]]\n            continue\n        else:\n            if dartResult[i] == \"*\":\n                if len(score) <= 1:\n                    score[-1] *= 2\n                else:\n                    score[-2] *= 2\n                    score[-1] *= 2\n            elif dartResult[i] == \"#\":\n                score[-1] *= -1\n            \n    return sum(score)", "entry_point": "calculate_dart_score", "testcase": ["assert calculate_dart_score(\"1D2S0T\") == 3", "assert calculate_dart_score(\"1S*2T*3S\") == 23", "assert calculate_dart_score(\"1D#2S*3S\") == 5", "assert calculate_dart_score(\"1S2D*3T\") == 37", "assert calculate_dart_score(\"1D2S3T*\") == 59"]}
{"seq_id": 6923107628, "instruction": "Write a python function to calculate the number of unique permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef string_permutation(s):\n    return len(set(''.join(p) for p in permutations(s)))\n```", "code": "from itertools import permutations\n\ndef string_permutation(s):\n    return len(set(''.join(p) for p in permutations(s)))", "entry_point": "string_permutation", "testcase": ["assert string_permutation(\"a\") == 1", "assert string_permutation(\"ab\") == 2", "assert string_permutation(\"aab\") == 3", "assert string_permutation(\"abc\") == 6"]}
{"seq_id": 28247670047, "instruction": "Write a python function to find the number of connected components in an undirected graph using the Union-Find algorithm.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef find_root(uf_set: List[int], x: int) -> int:\n    while uf_set[x] != x:\n        uf_set[x] = uf_set[uf_set[x]]\n        x = uf_set[x]\n    return x\n\ndef union_uf_set(uf_set: List[int], a: int, b: int) -> None:\n    root_a = find_root(uf_set, a)\n    root_b = find_root(uf_set, b)\n    if root_a != root_b:\n        uf_set[root_b] = root_a\n\ndef connected_components(n: int, edges: List[List[int]]) -> int:\n    uf_set = list(range(n))\n    for edge in edges:\n        union_uf_set(uf_set, edge[0], edge[1])\n    \n    roots = set()\n    for i in range(n):\n        roots.add(find_root(uf_set, i))\n    return len(roots)\n\n# Test cases\nassert connected_components(10, [[0, 1], [1, 2], [3, 4], [5, 6], [6, 7], [7, 8], [8, 9]]) == 3\nassert connected_components(6, [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == 1\nassert connected_components(5, [[0, 1], [2, 3], [3, 4]]) == 2\n```", "code": "from typing import List\n\ndef find_root(uf_set: List[int], x: int) -> int:\n    while uf_set[x] != x:\n        uf_set[x] = uf_set[uf_set[x]]\n        x = uf_set[x]\n    return x\n\ndef union_uf_set(uf_set: List[int], a: int, b: int) -> None:\n    root_a = find_root(uf_set, a)\n    root_b = find_root(uf_set, b)\n    if root_a != root_b:\n        uf_set[root_b] = root_a\n\ndef connected_components(n: int, edges: List[List[int]]) -> int:\n    uf_set = list(range(n))\n    for edge in edges:\n        union_uf_set(uf_set, edge[0], edge[1])\n    \n    roots = set()\n    for i in range(n):\n        roots.add(find_root(uf_set, i))\n    return len(roots)\n\n# Test cases\nassert connected_components(10, [[0, 1], [1, 2], [3, 4], [5, 6], [6, 7], [7, 8], [8, 9]]) == 3\nassert connected_components(6, [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == 1\nassert connected_components(5, [[0, 1], [2, 3], [3, 4]]) == 2", "entry_point": "connected_components", "testcase": ["assert connected_components(10, [[0, 1], [1, 2], [3, 4], [5, 6], [6, 7], [7, 8], [8, 9]]) == 3", "assert connected_components(6, [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == 1", "assert connected_components(5, [[0, 1], [2, 3], [3, 4]]) == 2"]}
{"seq_id": 73768644144, "instruction": "Write a function to find the length of the longest consecutive substring of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consecutive_substring(s):\n    if not s:\n        return 0\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(s)):\n        if ord(s[i]) == ord(s[i-1]) + 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return max_length\n```", "code": "def longest_consecutive_substring(s):\n    if not s:\n        return 0\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(s)):\n        if ord(s[i]) == ord(s[i-1]) + 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return max_length", "entry_point": "longest_consecutive_substring", "testcase": ["assert longest_consecutive_substring(\"abcabcbb\") == 3", "assert longest_consecutive_substring(\"\") == 0", "assert longest_consecutive_substring(\"bbbbb\") == 1"]}
{"seq_id": 6511505956, "instruction": "Write a function to find the number of N-Queens solutions for a given size of the chessboard.", "output": "Here is the code to solve this problem: \n```python\ndef n_queens(n):\n    result = []\n    def DFS(queens, left, right):\n        row = len(queens)\n        if row == n:\n            result.append(queens)\n            return None\n        for col in range(n):\n            if col not in queens and row - col not in left and row + col not in right:\n                DFS(queens + [col], left + [row - col], right + [row + col])\n    DFS([], [], [])\n    return len(result)\n```", "code": "def n_queens(n):\n    result = []\n    def DFS(queens, left, right):\n        row = len(queens)\n        if row == n:\n            result.append(queens)\n            return None\n        for col in range(n):\n            if col not in queens and row - col not in left and row + col not in right:\n                DFS(queens + [col], left + [row - col], right + [row + col])\n    DFS([], [], [])\n    return len(result)", "entry_point": "n_queens", "testcase": ["assert n_queens(4) == 2", "assert n_queens(1) == 1", "assert n_queens(8) == 92"]}
{"seq_id": 36877574758, "instruction": "Write a function to find the n'th Lucas number using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef get_lucas(n):\n  if (n == 0):\n    return 2\n  if (n == 1):\n    return 1\n  return get_lucas(n - 1) + get_lucas(n - 2)\n```", "code": "def get_lucas(n):\n  if (n == 0):\n    return 2\n  if (n == 1):\n    return 1\n  return get_lucas(n - 1) + get_lucas(n - 2)", "entry_point": "get_lucas", "testcase": ["assert get_lucas(9) == 76", "assert get_lucas(4) == 7", "assert get_lucas(6) == 18"]}
{"seq_id": 31140918045, "instruction": "Write a function to find the length of the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef length_longest_substring(s):\n    if len(s) == 0: return 0\n    left = 0\n    max_len = 0\n    cur_len = 0\n    new_str = set()\n    for i in range(len(s)):\n        cur_len += 1\n        while s[i] in new_str:\n            new_str.remove(s[left])\n            left += 1\n            cur_len -= 1\n        if cur_len > max_len: max_len = cur_len\n        new_str.add(s[i])\n    return max_len\n```", "code": "def length_longest_substring(s):\n    if len(s) == 0: return 0\n    left = 0\n    max_len = 0\n    cur_len = 0\n    new_str = set()\n    for i in range(len(s)):\n        cur_len += 1\n        while s[i] in new_str:\n            new_str.remove(s[left])\n            left += 1\n            cur_len -= 1\n        if cur_len > max_len: max_len = cur_len\n        new_str.add(s[i])\n    return max_len", "entry_point": "length_longest_substring", "testcase": ["assert length_longest_substring('bbbbb') == 1", "assert length_longest_substring('') == 0", "assert length_longest_substring('pwwkew') == 3", "assert length_longest_substring('abcabcbb') == 3"]}
{"seq_id": 70785923872, "instruction": "Write a python function to convert a string of numbers written in words into their numerical equivalents.", "output": "Here is the code to solve this problem: \n```python\ndef convert_number_words_to_num(s):\n    answer = \"\"\n    dic = {'zero':'0', 'one':'1', 'two':'2', 'three':'3', 'four':'4', 'five':'5', 'six':'6', 'seven':'7', 'eight':'8', 'nine':'9'}\n    word_list = s.split()\n    for word in word_list:\n        answer += dic[word]\n    return int(answer)\n```", "code": "def convert_number_words_to_num(s):\n    answer = \"\"\n    dic = {'zero':'0', 'one':'1', 'two':'2', 'three':'3', 'four':'4', 'five':'5', 'six':'6', 'seven':'7', 'eight':'8', 'nine':'9'}\n    word_list = s.split()\n    for word in word_list:\n        answer += dic[word]\n    return int(answer)", "entry_point": "convert_number_words_to_num", "testcase": ["assert convert_number_words_to_num(\"one three five\") == 135", "assert convert_number_words_to_num(\"seven three two\") == 732", "assert convert_number_words_to_num(\"nine eight zero\") == 980"]}
{"seq_id": 22549014986, "instruction": "Write a function to find the shortest repeating pattern in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef shortest_repeating_pattern(s):\n    length = len(s)\n    for i in range(1, length//2 + 1):\n        if length % i == 0:\n            if s[:i]*(length//i) == s:\n                return s[:i]\n    return s\n```", "code": "def shortest_repeating_pattern(s):\n    length = len(s)\n    for i in range(1, length//2 + 1):\n        if length % i == 0:\n            if s[:i]*(length//i) == s:\n                return s[:i]\n    return s", "entry_point": "shortest_repeating_pattern", "testcase": ["assert shortest_repeating_pattern('ababababab') == 'ab'", "assert shortest_repeating_pattern('xyzxyzxyzxyzxyz') == 'xyz'", "assert shortest_repeating_pattern('abcabcabcabc') == 'abc'", "assert shortest_repeating_pattern('abcdabcdabcd') == 'abcd'", "assert shortest_repeating_pattern('aaaaaa') == 'a'", "assert shortest_repeating_pattern('ababababc') == 'ababababc'"]}
{"seq_id": 37282873958, "instruction": "Write a function to find the minimum number of coins required to make a certain amount using dynamic programming.", "output": "Here is the code to solve this problem: \n```python\ndef minimum_coins(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n\n    return dp[amount] if dp[amount] != float('inf') else -1\n```", "code": "def minimum_coins(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n\n    return dp[amount] if dp[amount] != float('inf') else -1", "entry_point": "minimum_coins", "testcase": ["assert minimum_coins([2], 3) == -1", "assert minimum_coins([1], 0) == 0", "assert minimum_coins([1, 2, 5], 11) == 3"]}
{"seq_id": 14199081940, "instruction": "Write a python function to find the largest product of three numbers in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef product_of_three(numbers):\n    numbers.sort()\n    return max(numbers[0]*numbers[1]*numbers[-1], numbers[-1]*numbers[-2]*numbers[-3])\n```", "code": "def product_of_three(numbers):\n    numbers.sort()\n    return max(numbers[0]*numbers[1]*numbers[-1], numbers[-1]*numbers[-2]*numbers[-3])", "entry_point": "product_of_three", "testcase": ["assert product_of_three([-10, -10, 5, 2]) == 500", "assert product_of_three([1, 2, 3]) == 6", "assert product_of_three([-5, -2, 0, 2, 5]) == 50"]}
{"seq_id": 24511913584, "instruction": "Write a function to check if two given strings are rotations of each other.", "output": "Here is the code to solve this problem: \n```python\ndef are_rotations(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    temp = str1 + str1\n    return temp.find(str2) != -1\n```", "code": "def are_rotations(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    temp = str1 + str1\n    return temp.find(str2) != -1", "entry_point": "are_rotations", "testcase": ["assert are_rotations(\"ABACD\", \"CDABA\") == True", "assert are_rotations(\"ABCD\", \"CDAB\") == True", "assert are_rotations(\"ABCD\", \"DABC\") == True", "assert are_rotations(\"ABACD\", \"ACBAD\") == False", "assert are_rotations(\"BCDAB\", \"ABCD\") == False"]}
{"seq_id": 23706184274, "instruction": "Write a function to find the length of the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef len_longest_substring(s):\n    char_map = {}\n    left = 0\n    max_len = 0\n\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n```", "code": "def len_longest_substring(s):\n    char_map = {}\n    left = 0\n    max_len = 0\n\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len", "entry_point": "len_longest_substring", "testcase": ["assert len_longest_substring(\"bbbbb\") == 1", "assert len_longest_substring(\"pwwkew\") == 3", "assert len_longest_substring(\"abcabcbb\") == 3"]}
{"seq_id": 2279303676, "instruction": "Write a function to find the longest subsequence of a given string that is also a palindrome.", "output": "Here is the code to solve this problem: \n```python\ndef longest_palindrome_subsequence(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if s[start] == s[end]:\n                dp[start][end] = 2 + dp[start+1][end-1]\n            else:\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n\n    return dp[0][n-1]\n\nprint(longest_palindrome_subsequence(\"abdbca\"))\nprint(longest_palindrome_subsequence(\"cddpd\"))\nprint(longest_palindrome_subsequence(\"pqr\"))\n```", "code": "def longest_palindrome_subsequence(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if s[start] == s[end]:\n                dp[start][end] = 2 + dp[start+1][end-1]\n            else:\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n\n    return dp[0][n-1]\n\nprint(longest_palindrome_subsequence(\"abdbca\"))\nprint(longest_palindrome_subsequence(\"cddpd\"))\nprint(longest_palindrome_subsequence(\"pqr\"))", "entry_point": "longest_palindrome_subsequence", "testcase": ["assert longest_palindrome_subsequence(\"cddpd\") == 3", "assert longest_palindrome_subsequence(\"pqr\") == 1", "assert longest_palindrome_subsequence(\"abdbca\") == 5"]}
{"seq_id": 74586916305, "instruction": "Write a python function to count the number of times a given character appears in a string.", "output": "Here is the code to solve this problem: \n```python\ndef count_char(s, char):\n    count = 0\n    for c in s:\n        if c == char:\n            count += 1\n    return count\n```", "code": "def count_char(s, char):\n    count = 0\n    for c in s:\n        if c == char:\n            count += 1\n    return count", "entry_point": "count_char", "testcase": ["assert count_char('apple', 'p') == 2", "assert count_char('hello world', 'o') == 2", "assert count_char('banana', 'x') == 0"]}
{"seq_id": 27136044302, "instruction": "Write a function to find the number of ways to express n as the sum of 1, 3, and 4 given a target number n.", "output": "Here is the code to solve this problem: \n```python\ndef num_ways(target):\n    if target == 1 or target == 2:\n        return 1\n    dp = [0] * (target + 1)\n    dp[1] = 1\n    dp[2] = 1\n    dp[3] = 2\n    dp[4] = 3\n    for i in range(5, target+1):\n        dp[i] = dp[i-1] + dp[i-3] + dp[i-4]\n    return dp[target]\n```", "code": "def num_ways(target):\n    if target == 1 or target == 2:\n        return 1\n    dp = [0] * (target + 1)\n    dp[1] = 1\n    dp[2] = 1\n    dp[3] = 2\n    dp[4] = 3\n    for i in range(5, target+1):\n        dp[i] = dp[i-1] + dp[i-3] + dp[i-4]\n    return dp[target]", "entry_point": "num_ways", "testcase": ["assert num_ways(2) == 1", "assert num_ways(4) == 3", "assert num_ways(1) == 1"]}
{"seq_id": 9316290740, "instruction": "Write a function to find the sum of all unique multiples of 3 or 5 below a given number n.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_multiples(n):\n    sum = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum\n```", "code": "def sum_of_multiples(n):\n    sum = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum", "entry_point": "sum_of_multiples", "testcase": ["assert sum_of_multiples(20) == 78", "assert sum_of_multiples(10) == 23", "assert sum_of_multiples(1000) == 233168"]}
{"seq_id": 70559467927, "instruction": "Write a function to find the number of islands in a given grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.", "output": "Here is the code to solve this problem: \n```python\ndef islands_number(grid):\n    def dfs(grid, i, j):\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n            return\n        grid[i][j] = 0\n        dfs(grid, i+1, j)\n        dfs(grid, i-1, j)\n        dfs(grid, i, j+1)\n        dfs(grid, i, j-1)\n\n    islands = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                islands += 1\n    return islands\n```", "code": "def islands_number(grid):\n    def dfs(grid, i, j):\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n            return\n        grid[i][j] = 0\n        dfs(grid, i+1, j)\n        dfs(grid, i-1, j)\n        dfs(grid, i, j+1)\n        dfs(grid, i, j-1)\n\n    islands = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                islands += 1\n    return islands", "entry_point": "islands_number", "testcase": ["assert islands_number([[0, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) == 3", "assert islands_number([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]) == 3", "assert islands_number([[1, 1, 1], [0, 1, 0], [1, 1, 1]]) == 1"]}
{"seq_id": 70495258675, "instruction": "Write a python function to find the n-th harmonic number, which is the sum of the reciprocals of the first n natural numbers.", "output": "Here is the code to solve this problem: \n```python\ndef harmonic_number(n):\n    if n <= 0:\n        return 0\n    harmonic_sum = 0.0\n    for i in range(1, n + 1):\n        harmonic_sum += 1.0 / i\n    return harmonic_sum\n```", "code": "def harmonic_number(n):\n    if n <= 0:\n        return 0\n    harmonic_sum = 0.0\n    for i in range(1, n + 1):\n        harmonic_sum += 1.0 / i\n    return harmonic_sum", "entry_point": "harmonic_number", "testcase": ["assert harmonic_number(1) == 1.0", "assert harmonic_number(10) == 2.9289682539682538", "assert harmonic_number(5) == 2.283333333333333"]}
{"seq_id": 5258447641, "instruction": "Write a function to calculate the total number of bits needed to represent a positive integer in binary form.", "output": "Here is the code to solve this problem: \n```python\ndef bits_needed(num):\n  bits = 0\n  while num > 0:\n    bits += 1\n    num = num >> 1\n  return bits\n```", "code": "def bits_needed(num):\n  bits = 0\n  while num > 0:\n    bits += 1\n    num = num >> 1\n  return bits", "entry_point": "bits_needed", "testcase": ["assert bits_needed(10) == 4", "assert bits_needed(2048) == 12", "assert bits_needed(1023) == 10"]}
{"seq_id": 13383748139, "instruction": "Write a python function that takes a string, counts the number of vowels in it, and returns a dictionary where the keys are the vowels and the values are the counts of each vowel.", "output": "Here is the code to solve this problem: \n```python\ndef vowel_count(string):\n    vowels = 'aeiou'\n    vowel_count = {vowel: 0 for vowel in vowels}\n    for char in string.lower():\n        if char in vowels:\n            vowel_count[char] += 1\n    return vowel_count\n```", "code": "def vowel_count(string):\n    vowels = 'aeiou'\n    vowel_count = {vowel: 0 for vowel in vowels}\n    for char in string.lower():\n        if char in vowels:\n            vowel_count[char] += 1\n    return vowel_count", "entry_point": "vowel_count", "testcase": ["assert vowel_count('Quick Brown Fox') == {'a': 0, 'e': 0, 'i': 1, 'o': 2, 'u': 1}", "assert vowel_count('aeiou') == {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}", "assert vowel_count('Hello World') == {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}"]}
{"seq_id": 28711073221, "instruction": "Write a function to check if a given string is a permutation of a palindrome.", "output": "Here is the code to solve this problem: \n```python\ndef is_permutation_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1\n```", "code": "def is_permutation_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    odd_count = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1", "entry_point": "is_permutation_palindrome", "testcase": ["assert is_permutation_palindrome(\"Tact Coa\") == True", "assert is_permutation_palindrome(\"A man a plan a canal Panama\") == True", "assert is_permutation_palindrome(\"Not a Palindrome\") == False"]}
{"seq_id": 71352049239, "instruction": "Write a function to generate all possible permutations of a given list of integers.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef permutations(nums: List[int]) -> List[List[int]]:\n    def backtrack(start=0):\n        if start == len(nums):\n            result.append(nums[:])\n        for i in range(start, len(nums)):\n            nums[start], nums[i] = nums[i], nums[start]\n            backtrack(start + 1)\n            nums[start], nums[i] = nums[i], nums[start]\n\n    result = []\n    backtrack()\n    return result\n```", "code": "from typing import List\n\ndef permutations(nums: List[int]) -> List[List[int]]:\n    def backtrack(start=0):\n        if start == len(nums):\n            result.append(nums[:])\n        for i in range(start, len(nums)):\n            nums[start], nums[i] = nums[i], nums[start]\n            backtrack(start + 1)\n            nums[start], nums[i] = nums[i], nums[start]\n\n    result = []\n    backtrack()\n    return result", "entry_point": "sorted", "testcase": ["assert sorted(permutations([1, 2, 3])) == sorted([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])", "assert sorted(permutations([1, 2])) == sorted([[1, 2], [2, 1]])", "assert sorted(permutations([0])) == sorted([[0]])"]}
{"seq_id": 35732244869, "instruction": "Write a function to check if a given number is a Armstrong number or not.", "output": "Here is the code to solve this problem: \n```python\ndef check_armstrong(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False\n```", "code": "def check_armstrong(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False", "entry_point": "check_armstrong", "testcase": ["assert check_armstrong(370)==True", "assert check_armstrong(153)==True", "assert check_armstrong(9475)==False", "assert check_armstrong(9474)==True"]}
{"seq_id": 15733554812, "instruction": "Write a function that finds the k most frequent elements in a list of numbers. In case of a tie, return the element that appears first in the list.", "output": "Here is the code to solve this problem: \n```python\ndef k_most_frequent(nums, k):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    sorted_count = sorted(count.items(), key=lambda x: (-x[1], nums.index(x[0])))\n    result = []\n    for i in range(k):\n        result.append(sorted_count[i][0])\n    return result\n```", "code": "def k_most_frequent(nums, k):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    sorted_count = sorted(count.items(), key=lambda x: (-x[1], nums.index(x[0])))\n    result = []\n    for i in range(k):\n        result.append(sorted_count[i][0])\n    return result", "entry_point": "k_most_frequent", "testcase": ["assert k_most_frequent([1,2,2,3,3,3,4,4,4,4], 1) == [4]", "assert k_most_frequent([-1,5,5,5,5,0,0,0,1], 3) == [5, 0, -1]", "assert k_most_frequent([4,1,-2,4,6,4,1,6,6,6], 2) == [6, 4]", "assert k_most_frequent([1,1,1,1,1,1,1,1,1,1], 1) == [1]"]}
{"seq_id": 37617165676, "instruction": "Write a function to find the first missing positive integer in an unsorted array of integers.", "output": "Here is the code to solve this problem: \n```python\ndef findFirstMissPos(num):\n    map = {}\n    for x in num:\n        map[x] = x\n\n    for i in range(1, len(num) + 2): #//from 1 to len(num)+1\n        if map.get(i) == None:\n            return i\n```", "code": "def findFirstMissPos(num):\n    map = {}\n    for x in num:\n        map[x] = x\n\n    for i in range(1, len(num) + 2): #//from 1 to len(num)+1\n        if map.get(i) == None:\n            return i", "entry_point": "findFirstMissPos", "testcase": ["assert findFirstMissPos([7,8,9,11,12])==1", "assert findFirstMissPos([3,4,-1,1])==2", "assert findFirstMissPos([1,2,0])==3"]}
{"seq_id": 10784937155, "instruction": "Write a function to calculate the number of ways to construct an array of length n with elements from 1 to m such that the search cost is exactly k. The search cost is defined as the number of elements one has to check in the worst case to find the maximum element in the array using linear search.", "output": "Here is the code to solve this problem: \n```python\ndef numOfArrays(n, m, k):\n    MOD = 10**9 + 7\n    dp = [[[0]*(k+1) for _ in range(m+1)] for _ in range(2)]\n    prefix_dp = [[[0]*(k+1) for _ in range(m+1)] for _ in range(2)]\n    for i in range(1, m+1):\n        dp[1][i][1] = 1\n        prefix_dp[1][i][1] = (prefix_dp[1][i-1][1] + dp[1][i][1])%MOD\n    for l in range(2, n+1):\n        for i in range(1, m+1):\n            for j in range(1, k+1):\n                dp[l%2][i][j] = (i*dp[(l-1)%2][i][j]%MOD + prefix_dp[(l-1)%2][i-1][j-1])%MOD\n                prefix_dp[l%2][i][j] = (prefix_dp[l%2][i-1][j] + dp[l%2][i][j])%MOD\n    return prefix_dp[n%2][m][k]\n```", "code": "def numOfArrays(n, m, k):\n    MOD = 10**9 + 7\n    dp = [[[0]*(k+1) for _ in range(m+1)] for _ in range(2)]\n    prefix_dp = [[[0]*(k+1) for _ in range(m+1)] for _ in range(2)]\n    for i in range(1, m+1):\n        dp[1][i][1] = 1\n        prefix_dp[1][i][1] = (prefix_dp[1][i-1][1] + dp[1][i][1])%MOD\n    for l in range(2, n+1):\n        for i in range(1, m+1):\n            for j in range(1, k+1):\n                dp[l%2][i][j] = (i*dp[(l-1)%2][i][j]%MOD + prefix_dp[(l-1)%2][i-1][j-1])%MOD\n                prefix_dp[l%2][i][j] = (prefix_dp[l%2][i-1][j] + dp[l%2][i][j])%MOD\n    return prefix_dp[n%2][m][k]", "entry_point": "numOfArrays", "testcase": ["assert numOfArrays(9, 1, 1) == 1", "assert numOfArrays(5, 2, 3) == 0", "assert numOfArrays(2, 3, 1) == 6"]}
{"seq_id": 8956374761, "instruction": "Write a function that takes a list of numbers and returns a list of those numbers, each multiplied by 2.", "output": "Here is the code to solve this problem: \n```python\ndef double_elements(nums):\n    return [x*2 for x in nums]\n```", "code": "def double_elements(nums):\n    return [x*2 for x in nums]", "entry_point": "double_elements", "testcase": ["assert double_elements([1, 2, 3]) == [2, 4, 6]", "assert double_elements([10, 100, 1000, 10000, 100000]) == [20, 200, 2000, 20000, 200000]", "assert double_elements([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [10, 6, 10, 4, 6, 6, 18, 0, 246]"]}
{"seq_id": 9590696565, "instruction": "Write a python function to find the longest common subsequence(LCS) for two given strings. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.", "output": "Here is the code to solve this problem: \n```python\ndef find_LCS(str1,str2):\n    m = len(str1)\n    n = len(str2)\n    L = [[0] * (n+1) for _ in range(m+1)]\n\n    # Build the matrix in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n```", "code": "def find_LCS(str1,str2):\n    m = len(str1)\n    n = len(str2)\n    L = [[0] * (n+1) for _ in range(m+1)]\n\n    # Build the matrix in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]", "entry_point": "find_LCS", "testcase": ["assert find_LCS(\"ABCBDAB\",\"BDCAB\") == 4 # The longest common subsequence is BCAB", "assert find_LCS(\"AGGTAB\",\"GXTXAYB\") == 4 # The longest common subsequence is GTAB", "assert find_LCS(\"ABC\",\"ABC\") == 3 # All the characters are common"]}
{"seq_id": 70047027955, "instruction": "Write a python function to rotate a string by N positions to the left. If N is negative, rotate to the right.", "output": "Here is the code to solve this problem: \n```python\ndef rotate_string(s, n):\n    if n == 0:\n        return s\n    elif n > 0:\n        return s[n:] + s[:n]\n    else:\n        return s[n+len(s):] + s[:n+len(s)]\n\n# Test cases\nprint(rotate_string(\"hello\", 2)) # Expected output: \"llohe\"\nprint(rotate_string(\"world\", -1)) # Expected output: \"dworl\"\nprint(rotate_string(\"python\", 0)) # Expected output: \"python\"\n```", "code": "def rotate_string(s, n):\n    if n == 0:\n        return s\n    elif n > 0:\n        return s[n:] + s[:n]\n    else:\n        return s[n+len(s):] + s[:n+len(s)]\n\n# Test cases\nprint(rotate_string(\"hello\", 2)) # Expected output: \"llohe\"\nprint(rotate_string(\"world\", -1)) # Expected output: \"dworl\"\nprint(rotate_string(\"python\", 0)) # Expected output: \"python\"", "entry_point": "rotate_string", "testcase": ["assert rotate_string(\"world\", -1) == \"dworl\"", "assert rotate_string(\"python\", 0) == \"python\"", "assert rotate_string(\"hello\", 2) == \"llohe\""]}
{"seq_id": 11264992677, "instruction": "Write a function to find the height of a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        return max(height(root.left), height(root.right)) + 1\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        return max(height(root.left), height(root.right)) + 1", "entry_point": "height", "testcase": ["assert height(TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))) == 3", "assert height(None) == 0", "assert height(TreeNode(1)) == 1", "assert height(TreeNode(1, TreeNode(2), TreeNode(3))) == 2"]}
{"seq_id": 69869705367, "instruction": "Write a function to check if a list of integers is a valid arithmetic sequence.\n\nAn arithmetic sequence is a sequence of numbers such that the difference between the consecutive terms is constant. For example, in the sequence 1, 3, 5, 7, ..., the difference between consecutive terms is 2, which is a constant.", "output": "Here is the code to solve this problem: \n```python\ndef is_arithmetic_sequence(sequence):\n    if len(sequence) < 2:\n        return False\n    difference = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != difference:\n            return False\n    return True\n```", "code": "def is_arithmetic_sequence(sequence):\n    if len(sequence) < 2:\n        return False\n    difference = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != difference:\n            return False\n    return True", "entry_point": "is_arithmetic_sequence", "testcase": ["assert is_arithmetic_sequence([5, 7, 9, 11]) == True", "assert is_arithmetic_sequence([1, 3, 6, 10]) == False", "assert is_arithmetic_sequence([1, 2, 4, 8]) == False", "assert is_arithmetic_sequence([10, 10, 10, 10]) == True", "assert is_arithmetic_sequence([1, 3, 5, 7, 9]) == True"]}
{"seq_id": 73096077784, "instruction": "Write a function to find the number of unique paths from top-left corner to bottom-right corner of a grid. You can only move either down or right at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef uniquePaths(m, n):\n    if m == 0 or n == 0:\n        return 0\n\n    dp = [[1 for _ in range(n)] for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]\n```", "code": "def uniquePaths(m, n):\n    if m == 0 or n == 0:\n        return 0\n\n    dp = [[1 for _ in range(n)] for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]", "entry_point": "uniquePaths", "testcase": ["assert uniquePaths(3, 2) == 3", "assert uniquePaths(3, 7) == 28", "assert uniquePaths(3, 3) == 6"]}
{"seq_id": 28217847126, "instruction": "Write a function to calculate the maximum length of the palindromic subsequence in a given string.\n\nA palindromic subsequence is a sequence that reads the same backwards as forwards and is not necessarily contiguous.", "output": "Here is the code to solve this problem: \n```python\ndef max_palindromic_subsequence(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n```", "code": "def max_palindromic_subsequence(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]", "entry_point": "max_palindromic_subsequence", "testcase": ["assert max_palindromic_subsequence(\"cbbd\") == 2", "assert max_palindromic_subsequence(\"bbbab\") == 4", "assert max_palindromic_subsequence(\"leetcode\") == 3"]}
{"seq_id": 73629577944, "instruction": "Write a python function to return the Fibonacci sequence to the nth term.", "output": "Here is the code to solve this problem: \n```python\ndef get_fibonacci(n):\n  fib_sequence = [0, 1]\n  while len(fib_sequence) < n:\n    fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n  return fib_sequence\n```", "code": "def get_fibonacci(n):\n  fib_sequence = [0, 1]\n  while len(fib_sequence) < n:\n    fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n  return fib_sequence", "entry_point": "get_fibonacci", "testcase": ["assert get_fibonacci(9) == [0, 1, 1, 2, 3, 5, 8, 13, 21]", "assert get_fibonacci(4) == [0, 1, 1, 2]", "assert get_fibonacci(6) == [0, 1, 1, 2, 3, 5]"]}
{"seq_id": 10787038555, "instruction": "Write a function to find the shortest path from the start point to the end point in a grid. The grid is represented as a list of lists, where each cell can be either 0 (representing a free space) or 1 (representing an obstacle). You can only move in four directions: up, down, left, and right. The function should return the length of the shortest path found, or -1 if there is no path from the start point to the end point.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef shortest_path(grid, start, end):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type start: List[int]\n    :type end: List[int]\n    :rtype: int\n    \"\"\"\n    # Define the four possible directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    # Create a queue for Breadth-First Search (BFS)\n    queue = deque([(start[0], start[1], 0)])\n    # Create a set to store visited cells\n    visited = set((start[0], start[1]))\n    \n    while queue:\n        x, y, distance = queue.popleft()\n        # Check if the current cell is the end point\n        if (x, y) == (end[0], end[1]):\n            return distance\n        # Explore all four directions from the current cell\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            # Check if the new cell is within the grid and is not an obstacle\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 0 and (nx, ny) not in visited:\n                queue.append((nx, ny, distance + 1))\n                visited.add((nx, ny))\n    # If no path is found, return -1\n    return -1\n```", "code": "from collections import deque\n\ndef shortest_path(grid, start, end):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type start: List[int]\n    :type end: List[int]\n    :rtype: int\n    \"\"\"\n    # Define the four possible directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    # Create a queue for Breadth-First Search (BFS)\n    queue = deque([(start[0], start[1], 0)])\n    # Create a set to store visited cells\n    visited = set((start[0], start[1]))\n    \n    while queue:\n        x, y, distance = queue.popleft()\n        # Check if the current cell is the end point\n        if (x, y) == (end[0], end[1]):\n            return distance\n        # Explore all four directions from the current cell\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            # Check if the new cell is within the grid and is not an obstacle\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 0 and (nx, ny) not in visited:\n                queue.append((nx, ny, distance + 1))\n                visited.add((nx, ny))\n    # If no path is found, return -1\n    return -1", "entry_point": "shortest_path", "testcase": ["assert shortest_path([[0,0,0],[1,0,0],[0,0,0]], [0,0], [2,2])==4", "assert shortest_path([[1,1],[1,1]], [0,0], [1,1])==-1", "assert shortest_path([[0,1],[1,0]], [0,0], [1,1])==-1"]}
{"seq_id": 20146464738, "instruction": "Write a function to find the sum of two large numbers represented as strings.", "output": "Here is the code to solve this problem: \n```python\ndef add_large_numbers(a, b):\n    i, j, carry = len(a) - 1, len(b) - 1, 0\n    result = \"\"\n    while i >= 0 or j >= 0:\n        current = carry\n        if i >= 0:\n            current += int(a[i])\n            i -= 1\n        if j >= 0:\n            current += int(b[j])\n            j -= 1\n        carry = current // 10\n        current %= 10\n        result = str(current) + result\n    if carry: result = str(carry) + result\n    return result\n```", "code": "def add_large_numbers(a, b):\n    i, j, carry = len(a) - 1, len(b) - 1, 0\n    result = \"\"\n    while i >= 0 or j >= 0:\n        current = carry\n        if i >= 0:\n            current += int(a[i])\n            i -= 1\n        if j >= 0:\n            current += int(b[j])\n            j -= 1\n        carry = current // 10\n        current %= 10\n        result = str(current) + result\n    if carry: result = str(carry) + result\n    return result", "entry_point": "add_large_numbers", "testcase": ["assert add_large_numbers(\"12345678901234567890\", \"98765432109876543210\")== \"111111111011111111100\"", "assert add_large_numbers(\"999999999999999999\", \"1\")== \"1000000000000000000\"", "assert add_large_numbers(\"123456789\", \"987654321\")== \"1111111110\""]}
{"seq_id": 10683740573, "instruction": "Write a function that takes a list of tuples, where each tuple contains a student's name and their grade. The function should return the name of the student with the highest grade.", "output": "Here is the code to solve this problem: \n```python\ndef top_student(students):\n    if not students:\n        return None\n    top = max(students, key=lambda x: x[1])\n    return top[0]\n```", "code": "def top_student(students):\n    if not students:\n        return None\n    top = max(students, key=lambda x: x[1])\n    return top[0]", "entry_point": "top_student", "testcase": ["assert top_student([]) == None", "assert top_student([(\"Alice\", 85), (\"Bob\", 92), (\"Charlie\", 88)]) == \"Bob\"", "assert top_student([(\"Sarah\", 94), (\"Tom\", 89), (\"Zoe\", 97)]) == \"Zoe\""]}
{"seq_id": 73661557492, "instruction": "Write a function to find all the prime numbers in a given range.", "output": "Here is the code to solve this problem: \n```python\ndef prime_numbers_in_range(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers\n```", "code": "def prime_numbers_in_range(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers", "entry_point": "prime_numbers_in_range", "testcase": ["assert prime_numbers_in_range(10, 20) == [11, 13, 17, 19]", "assert prime_numbers_in_range(20, 30) == [23, 29]", "assert prime_numbers_in_range(1, 10) == [2, 3, 5, 7]"]}
{"seq_id": 28590827957, "instruction": "Write a function to check if a given word is a valid word according to a dictionary. The dictionary is given as a list of words. A word is valid if it exists in the dictionary and all its prefixes also exist in the dictionary. For example, \"apple\" is a valid word if \"a\", \"ap\", \"app\", \"appl\", and \"apple\" all exist in the dictionary.", "output": "Here is the code to solve this problem: \n```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word = ''\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def addWord(self, word):\n        node = self.root\n        for char in word:\n            if char in node.children:\n                node = node.children[char]\n            else:\n                new_node = TrieNode()\n                node.children[char] = new_node\n                node = new_node\n        node.word = word\n\n    def is_valid_word(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n            if node.word == '':\n                return False\n        return True\n\ndef is_valid_word(dictionary, word):\n    trie = Trie()\n    for w in dictionary:\n        trie.addWord(w)\n    return trie.is_valid_word(word)\n```", "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word = ''\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def addWord(self, word):\n        node = self.root\n        for char in word:\n            if char in node.children:\n                node = node.children[char]\n            else:\n                new_node = TrieNode()\n                node.children[char] = new_node\n                node = new_node\n        node.word = word\n\n    def is_valid_word(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n            if node.word == '':\n                return False\n        return True\n\ndef is_valid_word(dictionary, word):\n    trie = Trie()\n    for w in dictionary:\n        trie.addWord(w)\n    return trie.is_valid_word(word)", "entry_point": "is_valid_word", "testcase": ["assert is_valid_word([\"a\", \"ap\", \"app\", \"appl\", \"apple\"], \"app\") == True", "assert is_valid_word([\"a\", \"ap\", \"app\", \"appl\", \"apple\"], \"apple\") == True", "assert is_valid_word([\"a\", \"ap\", \"app\", \"appl\", \"apple\"], \"apples\") == False", "assert is_valid_word([\"the\", \"a\", \"there\", \"answer\", \"any\", \"by\", \"bye\", \"their\"], \"th\") == False"]}
{"seq_id": 35587903850, "instruction": "Write a function to check if a given number is a strictly palindromic number. A strictly palindromic number is a number that is a palindrome in all bases from 2 up to the base just below its own value.", "output": "Here is the code to solve this problem: \n```python\ndef is_strictly_palindromic(n: int) -> bool:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    for base in range(2, n):\n        num = n\n        base_num = \"\"\n        while num > 0:\n            digit = num % base\n            base_num = str(digit) + base_num\n            num //= base\n        if not is_palindrome(base_num):\n            return False\n    return True\n```", "code": "def is_strictly_palindromic(n: int) -> bool:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    for base in range(2, n):\n        num = n\n        base_num = \"\"\n        while num > 0:\n            digit = num % base\n            base_num = str(digit) + base_num\n            num //= base\n        if not is_palindrome(base_num):\n            return False\n    return True", "entry_point": "is_strictly_palindromic", "testcase": ["assert is_strictly_palindromic(4) == False", "assert is_strictly_palindromic(58) == False", "assert is_strictly_palindromic(9) == False"]}
{"seq_id": 8975214762, "instruction": "Write a function to find the number of times a specific element appears in a list of lists. The function should also return the indices of the lists in which the element appears.", "output": "Here is the code to solve this problem: \n```python\ndef find_element_indices(list_of_lists, element):\n    occurrence_count = 0\n    index_list = []\n    for i, sublist in enumerate(list_of_lists):\n        if element in sublist:\n            occurrence_count += sublist.count(element)\n            index_list.append(i)\n    return (occurrence_count, index_list)\n```", "code": "def find_element_indices(list_of_lists, element):\n    occurrence_count = 0\n    index_list = []\n    for i, sublist in enumerate(list_of_lists):\n        if element in sublist:\n            occurrence_count += sublist.count(element)\n            index_list.append(i)\n    return (occurrence_count, index_list)", "entry_point": "find_element_indices", "testcase": ["assert find_element_indices([[7, 8, 9], [10, 11, 12], [7, 8, 7]], 7) == (3, [0, 2])", "assert find_element_indices([[1, 2, 3], [4, 5, 6], [1, 2, 1]], 1) == (3, [0, 2])", "assert find_element_indices([[13, 14, 15], [16, 17, 18], [19, 20, 21]], 22) == (0, [])"]}
{"seq_id": 16779580794, "instruction": "Write a python function to find the nth Fibonacci number using matrix exponentiation.", "output": "Here is the code to solve this problem: \n```python\ndef fib_matrix(n):\n    F = [[1, 1],\n         [1, 0]]\n    if n == 0:\n        return 0\n    power(F, n - 1)\n    return F[0][0]\n\ndef multiply(F, M):\n    x = F[0][0] * M[0][0] + F[0][1] * M[1][0]\n    y = F[0][0] * M[0][1] + F[0][1] * M[1][1]\n    z = F[1][0] * M[0][0] + F[1][1] * M[1][0]\n    w = F[1][0] * M[0][1] + F[1][1] * M[1][1]\n    F[0][0] = x\n    F[0][1] = y\n    F[1][0] = z\n    F[1][1] = w\n\ndef power(F, n):\n    M = [[1, 1],\n         [1, 0]]\n    for _ in range(2, n + 1):\n        multiply(F, M)\n```", "code": "def fib_matrix(n):\n    F = [[1, 1],\n         [1, 0]]\n    if n == 0:\n        return 0\n    power(F, n - 1)\n    return F[0][0]\n\ndef multiply(F, M):\n    x = F[0][0] * M[0][0] + F[0][1] * M[1][0]\n    y = F[0][0] * M[0][1] + F[0][1] * M[1][1]\n    z = F[1][0] * M[0][0] + F[1][1] * M[1][0]\n    w = F[1][0] * M[0][1] + F[1][1] * M[1][1]\n    F[0][0] = x\n    F[0][1] = y\n    F[1][0] = z\n    F[1][1] = w\n\ndef power(F, n):\n    M = [[1, 1],\n         [1, 0]]\n    for _ in range(2, n + 1):\n        multiply(F, M)", "entry_point": "fib_matrix", "testcase": ["assert fib_matrix(10) == 55", "assert fib_matrix(7) == 13", "assert fib_matrix(5) == 5"]}
{"seq_id": 34069106432, "instruction": "Write a python function to find the minimum window in a given string which will contain all the characters of another given string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef min_window(s, t):\n    if not t or not s:\n        return \"\"\n    \n    dict_t = Counter(t)\n    \n    required = len(dict_t)\n    \n    l, r = 0, 0\n    \n    formed = 0\n    \n    window_counts = {}\n    \n    ans = float(\"inf\"), None, None\n    \n    while r < len(s):\n        character = s[r]\n        window_counts[character] = window_counts.get(character, 0) + 1\n        \n        if character in dict_t and window_counts[character] == dict_t[character]:\n            formed += 1\n        \n        while l <= r and formed == required:\n            character = s[l]\n            \n            if r - l + 1 < ans[0]:\n                ans = (r - l + 1, l, r)\n            \n            window_counts[character] -= 1\n            if character in dict_t and window_counts[character] < dict_t[character]:\n                formed -= 1\n            \n            l += 1\n        \n        r += 1\n    \n    return \"\" if ans[0] == float(\"inf\") else s[ans[1] : ans[2] + 1]\n```", "code": "from collections import Counter\n\ndef min_window(s, t):\n    if not t or not s:\n        return \"\"\n    \n    dict_t = Counter(t)\n    \n    required = len(dict_t)\n    \n    l, r = 0, 0\n    \n    formed = 0\n    \n    window_counts = {}\n    \n    ans = float(\"inf\"), None, None\n    \n    while r < len(s):\n        character = s[r]\n        window_counts[character] = window_counts.get(character, 0) + 1\n        \n        if character in dict_t and window_counts[character] == dict_t[character]:\n            formed += 1\n        \n        while l <= r and formed == required:\n            character = s[l]\n            \n            if r - l + 1 < ans[0]:\n                ans = (r - l + 1, l, r)\n            \n            window_counts[character] -= 1\n            if character in dict_t and window_counts[character] < dict_t[character]:\n                formed -= 1\n            \n            l += 1\n        \n        r += 1\n    \n    return \"\" if ans[0] == float(\"inf\") else s[ans[1] : ans[2] + 1]", "entry_point": "min_window", "testcase": ["assert min_window(\"ADOBECODEBANC\", \"ABC\") == \"BANC\"", "assert min_window(\"a\", \"a\") == \"a\"", "assert min_window(\"a\", \"aa\") == \"\""]}
{"seq_id": 6761317945, "instruction": "Write a function to find the common elements in two lists and return them in a sorted list.", "output": "Here is the code to solve this problem: \n```python\ndef common_sorted_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    common_elements = list(set1.intersection(set2))\n    return sorted(common_elements)\n```", "code": "def common_sorted_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    common_elements = list(set1.intersection(set2))\n    return sorted(common_elements)", "entry_point": "common_sorted_elements", "testcase": ["assert common_sorted_elements([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])==[1, 5, 653]", "assert common_sorted_elements([5, 3, 2, 8], [3, 2])==[2, 3]", "assert common_sorted_elements([10, 20, 30, 40], [0, 50, 60])==[]"]}
{"seq_id": 979095597, "instruction": "Write a function to find the shortest path between two nodes in a graph using Breadth First Search (BFS).", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef shortest_path_bfs(graph, start, end):\n    visited = set()\n    queue = deque([(start, 0)])\n    \n    while queue:\n        node, dist = queue.popleft()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    queue.append((neighbor, dist + 1))\n    return -1\n```", "code": "from collections import deque\n\ndef shortest_path_bfs(graph, start, end):\n    visited = set()\n    queue = deque([(start, 0)])\n    \n    while queue:\n        node, dist = queue.popleft()\n        if node == end:\n            return dist\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    queue.append((neighbor, dist + 1))\n    return -1", "entry_point": "shortest_path_bfs", "testcase": ["assert shortest_path_bfs({1: [2, 3], 2: [4], 3: [4, 5], 4: [], 5: []}, 1, 4) == 2", "assert shortest_path_bfs({1: [2], 2: [3], 3: [4], 4: []}, 1, 4) == 3", "assert shortest_path_bfs({1: [2], 2: [3], 3: [4], 4: [5], 5: []}, 1, 5) == 4"]}
{"seq_id": 31688331710, "instruction": "Write a function to check if a string can be formed by rearranging the characters of another string.\n\nYour task is to implement a function `canFormString(s, t)` that takes in two strings `s` and `t` as input and returns `True` if string `s` can be formed by rearranging the characters of string `t`, and `False` otherwise.", "output": "Here is the code to solve this problem: \n```python\ndef canFormString(s, t):\n    if len(s) > len(t):\n        return False\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in t:\n        if char in char_count:\n            char_count[char] -= 1\n            if char_count[char] == 0:\n                del char_count[char]\n    return len(char_count) == 0\n```", "code": "def canFormString(s, t):\n    if len(s) > len(t):\n        return False\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in t:\n        if char in char_count:\n            char_count[char] -= 1\n            if char_count[char] == 0:\n                del char_count[char]\n    return len(char_count) == 0", "entry_point": "canFormString", "testcase": ["assert canFormString(\"abcd\", \"dcba\") == True", "assert canFormString(\"aabbcc\", \"abc\") == False", "assert canFormString(\"abc\", \"badc\") == True"]}
{"seq_id": 72288062106, "instruction": "Write a python function that removes all digits from a given string and returns the cleaned string.", "output": "Here is the code to solve this problem: \n```python\ndef remove_Digits(s: str) -> str:\n    result = [char for char in s if not char.isdigit()]\n    return ''.join(result)\n```", "code": "def remove_Digits(s: str) -> str:\n    result = [char for char in s if not char.isdigit()]\n    return ''.join(result)", "entry_point": "remove_Digits", "testcase": ["assert remove_Digits(\"123Hello456\") == \"Hello\"", "assert remove_Digits(\"2023 is the year\") == \" is the year\"", "assert remove_Digits(\"NoDigitsHere!\") == \"NoDigitsHere!\""]}
{"seq_id": 11097026605, "instruction": "Write a function to find the maximum score that can be obtained by jumping through the elements of the given list. The score for each jump is the value of the element jumped to. You can jump up to k steps ahead from the current position. The goal is to reach the last index of the list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef max_score(nums, k):\n    deq = deque([0])\n    n = len(nums)\n\n    for i in range(1, n):\n        while deq and deq[0] < i - k: deq.popleft()\n        nums[i] += nums[deq[0]]   \n        while deq and nums[i] >= nums[deq[-1]]: deq.pop()\n        deq.append(i)\n            \n    return nums[-1]\n```", "code": "from collections import deque\n\ndef max_score(nums, k):\n    deq = deque([0])\n    n = len(nums)\n\n    for i in range(1, n):\n        while deq and deq[0] < i - k: deq.popleft()\n        nums[i] += nums[deq[0]]   \n        while deq and nums[i] >= nums[deq[-1]]: deq.pop()\n        deq.append(i)\n            \n    return nums[-1]", "entry_point": "max_score", "testcase": ["assert max_score([10, -5, -2, 4, 0, 3], 3) == 17", "assert max_score([1, -1, -2, 4, -7, 3], 2) == 7", "assert max_score([1, -5, -20, 4, -1, 3, -6, -3], 2) == 0"]}
{"seq_id": 36842660018, "instruction": "Write a python function to calculate the number of unique permutations of a given list of numbers.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef unique_permutations(nums):\n    return len(set(permutations(nums)))\n```", "code": "from itertools import permutations\n\ndef unique_permutations(nums):\n    return len(set(permutations(nums)))", "entry_point": "unique_permutations", "testcase": ["assert unique_permutations([1, 2, 2]) == 3", "assert unique_permutations([1, 2, 3]) == 6", "assert unique_permutations([1, 1, 1]) == 1"]}
{"seq_id": 19116663421, "instruction": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "output": "Here is the code to solve this problem: \n```python\ndef find_gcd(a, b):\n    while(b):\n        a, b = b, a % b\n    return a\n```", "code": "def find_gcd(a, b):\n    while(b):\n        a, b = b, a % b\n    return a", "entry_point": "find_gcd", "testcase": ["assert find_gcd(14, 28) == 14", "assert find_gcd(8, 12) == 4", "assert find_gcd(21, 28) == 7"]}
{"seq_id": 11956824756, "instruction": "Write a python function to find the most frequent element in a list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef most_frequent_element(lst):\n    counter = Counter(lst)\n    max_count = max(list(counter.values()))\n    return [item for item, count in counter.items() if count == max_count][0]\n```", "code": "from collections import Counter\n\ndef most_frequent_element(lst):\n    counter = Counter(lst)\n    max_count = max(list(counter.values()))\n    return [item for item, count in counter.items() if count == max_count][0]", "entry_point": "most_frequent_element", "testcase": ["assert most_frequent_element([1, 2, 3, 2, 4, 2]) == 2", "assert most_frequent_element([10, 20, 20, 40, 40, 40, 50]) == 40", "assert most_frequent_element(['apple', 'banana', 'apple', 'orange', 'banana', 'banana']) == 'banana'"]}
{"seq_id": 16306230540, "instruction": "Write a function to find the maximum value in a sliding window of a given size in an array.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef sliding_window_max(nums, k):\n    if not nums:\n        return []\n\n    result = []\n    dq = deque()\n\n    for i in range(k):\n        while dq and nums[i] > nums[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n\n    for i in range(k, len(nums)):\n        result.append(nums[dq[0]])\n\n        while dq and dq[0] <= i - k:\n            dq.popleft()\n\n        while dq and nums[i] > nums[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n\n    result.append(nums[dq[0]])\n    return result\n```", "code": "from collections import deque\n\ndef sliding_window_max(nums, k):\n    if not nums:\n        return []\n\n    result = []\n    dq = deque()\n\n    for i in range(k):\n        while dq and nums[i] > nums[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n\n    for i in range(k, len(nums)):\n        result.append(nums[dq[0]])\n\n        while dq and dq[0] <= i - k:\n            dq.popleft()\n\n        while dq and nums[i] > nums[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n\n    result.append(nums[dq[0]])\n    return result", "entry_point": "sliding_window_max", "testcase": ["assert sliding_window_max([1, 2, 3, 4, 5], 3) == [3, 4, 5]", "assert sliding_window_max([1, 3, 1, 2, 0, 5], 3) == [3, 3, 2, 5]", "assert sliding_window_max([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7]"]}
{"seq_id": 72857338619, "instruction": "Write a function to reverse the order of words in a sentence while keeping the order of the characters in each word intact.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_order(sentence):\n    words = sentence.split()\n    reversed_sentence = ' '.join(reversed(words))\n    return reversed_sentence\n```", "code": "def reverse_order(sentence):\n    words = sentence.split()\n    reversed_sentence = ' '.join(reversed(words))\n    return reversed_sentence", "entry_point": "reverse_order", "testcase": ["assert reverse_order(\"Hello World\")==\"World Hello\"", "assert reverse_order(\"Python is awesome\")==\"awesome is Python\"", "assert reverse_order(\"I love coding\")==\"coding love I\""]}
{"seq_id": 23483573327, "instruction": "Write a python function to convert a given decimal number into its equivalent in a specified base between 2 and 16. If the conversion results in letters (for bases above 10), use capital letters. Return \"ERROR\" if the base is outside the allowed range.", "output": "Here is the code to solve this problem: \n```python\ndef dec_to_base(num, base):\n    if base < 2 or base > 16:\n        return \"ERROR\"\n    result = \"\"\n    digits = \"0123456789ABCDEF\"\n    while num > 0:\n        remainder = num % base\n        num = num // base\n        result = digits[remainder] + result\n    return result\n```", "code": "def dec_to_base(num, base):\n    if base < 2 or base > 16:\n        return \"ERROR\"\n    result = \"\"\n    digits = \"0123456789ABCDEF\"\n    while num > 0:\n        remainder = num % base\n        num = num // base\n        result = digits[remainder] + result\n    return result", "entry_point": "dec_to_base", "testcase": ["assert dec_to_base(255, 16) == \"FF\"", "assert dec_to_base(10, 2) == \"1010\"", "assert dec_to_base(15, 17) == \"ERROR\""]}
{"seq_id": 2521661347, "instruction": "Write a python function to calculate the number of ways to reach the top of a staircase given n steps, where at each step, you can either take one or two steps.", "output": "Here is the code to solve this problem: \n```python\ndef num_ways_to_top(n):\n    if n <= 2:\n        return n\n    first = 1\n    second = 2\n    for _ in range(2, n):\n        third = first + second\n        first = second\n        second = third\n    return second\n```", "code": "def num_ways_to_top(n):\n    if n <= 2:\n        return n\n    first = 1\n    second = 2\n    for _ in range(2, n):\n        third = first + second\n        first = second\n        second = third\n    return second", "entry_point": "num_ways_to_top", "testcase": ["assert num_ways_to_top(3) == 3", "assert num_ways_to_top(4) == 5", "assert num_ways_to_top(5) == 8"]}
{"seq_id": 28733210316, "instruction": "Write a function to find all the shortest paths between two words in a word list, where only one letter can be changed at a time, and the intermediate word must exist in the word list. This is known as a Word Ladder II problem.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\nimport collections\n\ndef word_ladder_ii(beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n    if endWord not in wordList: return []\n    m, conn = len(beginWord), collections.defaultdict(list)\n\n    def genKeys(word):\n        for i in range(m):\n            yield word[:i] + '*' + word[i+1:]\n    for w in wordList:\n        for key in genKeys(w):\n            conn[key].append(w)\n\n    que, prev = collections.deque([beginWord]), collections.defaultdict(list)\n    dis, shortest, res = {beginWord: 1}, float(\"inf\"), []\n    while que:\n        word = que.popleft()\n        if word == endWord:\n            shortest = dis[word]\n            break\n        if dis[word] >= shortest: continue\n        for key in genKeys(word):\n            for nxt in conn[key]:\n                if nxt not in dis:\n                    dis[nxt] = dis[word] + 1\n                    que.append(nxt)\n                if dis[word] + 1 == dis[nxt]:\n                    prev[nxt].append(word)\n\n    def backtrace(path):\n        if len(path) == shortest:\n            res.append(path[::-1])\n        for w in prev[path[-1]]:\n            path.append(w)\n            backtrace(path)\n            path.pop()\n    backtrace([endWord])\n    return res\n```", "code": "from typing import List\nimport collections\n\ndef word_ladder_ii(beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n    if endWord not in wordList: return []\n    m, conn = len(beginWord), collections.defaultdict(list)\n\n    def genKeys(word):\n        for i in range(m):\n            yield word[:i] + '*' + word[i+1:]\n    for w in wordList:\n        for key in genKeys(w):\n            conn[key].append(w)\n\n    que, prev = collections.deque([beginWord]), collections.defaultdict(list)\n    dis, shortest, res = {beginWord: 1}, float(\"inf\"), []\n    while que:\n        word = que.popleft()\n        if word == endWord:\n            shortest = dis[word]\n            break\n        if dis[word] >= shortest: continue\n        for key in genKeys(word):\n            for nxt in conn[key]:\n                if nxt not in dis:\n                    dis[nxt] = dis[word] + 1\n                    que.append(nxt)\n                if dis[word] + 1 == dis[nxt]:\n                    prev[nxt].append(word)\n\n    def backtrace(path):\n        if len(path) == shortest:\n            res.append(path[::-1])\n        for w in prev[path[-1]]:\n            path.append(w)\n            backtrace(path)\n            path.pop()\n    backtrace([endWord])\n    return res", "entry_point": "word_ladder_ii", "testcase": ["assert word_ladder_ii(\"red\", \"tax\", [\"ted\", \"tex\", \"red\", \"tax\", \"tad\", \"den\", \"rex\", \"pee\"]) == [['red', 'ted', 'tad', 'tax'], ['red', 'ted', 'tex', 'tax'], ['red', 'rex', 'tex', 'tax']]", "assert word_ladder_ii(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]) == [['hit', 'hot', 'dot', 'dog', 'cog'], ['hit', 'hot', 'lot', 'log', 'cog']]", "assert word_ladder_ii(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]) == []"]}
{"seq_id": 14120974476, "instruction": "Write a Python function to find the minimum area of a rectangle formed by a group of points in a 2D plane. The rectangle's sides do not have to be parallel to the x-axis and y-axis. If no rectangle can be formed, return 0.\n\nThe function should have the following signature:\n```python\ndef min_area_rectangle(points: List[List[int]]) -> int:\n    pass\n```\n\nThe points are represented as `[x, y]` coordinates. The function should return the minimum area of the rectangle that can be formed from any four points in the input list. If no rectangle can be formed, the function should return 0.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\nINF = 0x7FFFFFFF\n\ndef min_area_rectangle(points: List[List[int]]) -> int:\n    n = len(points)\n    point_set = set(map(tuple, points))\n    res = INF\n\n    # Check all combinations of three points, with the first as the intersection\n    for i in range(n):\n        for j in range(i + 1, n):\n            a, b = points[j][0] - points[i][0], points[j][1] - points[i][1]\n            for k in range(j + 1, n):\n                c, d = points[k][0] - points[i][0], points[k][1] - points[i][1]\n                # Check if the angle formed by points i, j, and k is a right angle\n                if a * c + b * d == 0 and (points[i][0] + a + c, points[i][1] + b + d) in point_set:\n                    res = min(res, abs(a * d - b * c))\n\n    return 0 if res == INF else res\n```", "code": "from typing import List\n\nINF = 0x7FFFFFFF\n\ndef min_area_rectangle(points: List[List[int]]) -> int:\n    n = len(points)\n    point_set = set(map(tuple, points))\n    res = INF\n\n    # Check all combinations of three points, with the first as the intersection\n    for i in range(n):\n        for j in range(i + 1, n):\n            a, b = points[j][0] - points[i][0], points[j][1] - points[i][1]\n            for k in range(j + 1, n):\n                c, d = points[k][0] - points[i][0], points[k][1] - points[i][1]\n                # Check if the angle formed by points i, j, and k is a right angle\n                if a * c + b * d == 0 and (points[i][0] + a + c, points[i][1] + b + d) in point_set:\n                    res = min(res, abs(a * d - b * c))\n\n    return 0 if res == INF else res", "entry_point": "min_area_rectangle", "testcase": ["assert min_area_rectangle([[1, 1], [2, 2], [3, 3]]) == 0", "assert min_area_rectangle([[1, 2], [2, 2], [3, 2], [1, 1], [3, 1]]) == 2", "assert min_area_rectangle([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]) == 0"]}
{"seq_id": 32837088017, "instruction": "Write a python function to find the maximum number of dungeons that can be cleared given a character's health and a list of dungeons. Each dungeon requires a minimum health to enter and drains a certain amount of health. The function should return the maximum number of dungeons that can be cleared.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef max_dungeons(k, dungeons):\n    order = list(permutations(dungeons))\n    answer = []\n    hp = k\n    for i in order:\n        count = 0\n        for j in range(len(i)):\n            if hp >= i[j][0]:\n                count += 1\n                hp -= i[j][1]\n            else:\n                continue\n        answer.append(count)\n        hp = k\n    return max(answer)\n```", "code": "from itertools import permutations\n\ndef max_dungeons(k, dungeons):\n    order = list(permutations(dungeons))\n    answer = []\n    hp = k\n    for i in order:\n        count = 0\n        for j in range(len(i)):\n            if hp >= i[j][0]:\n                count += 1\n                hp -= i[j][1]\n            else:\n                continue\n        answer.append(count)\n        hp = k\n    return max(answer)", "entry_point": "max_dungeons", "testcase": ["assert max_dungeons(80, [[80,20],[50,40],[30,10]]) == 3", "assert max_dungeons(20, [[80,20],[50,40],[30,10]]) == 0", "assert max_dungeons(50, [[80,20],[50,40],[30,10]]) == 1"]}
{"seq_id": 4458926810, "instruction": "Write a function to find the maximum length of a substring in a given string where the characters are in consecutive alphabetical order.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_consecutive_substring(s):\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(s)):\n        if ord(s[i]) == ord(s[i-1]) + 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n    return max_length\n```", "code": "def find_max_consecutive_substring(s):\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(s)):\n        if ord(s[i]) == ord(s[i-1]) + 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n    return max_length", "entry_point": "find_max_consecutive_substring", "testcase": ["assert find_max_consecutive_substring(\"zyx\") == 1", "assert find_max_consecutive_substring(\"abcde\") == 5", "assert find_max_consecutive_substring(\"aebcd\") == 3", "assert find_max_consecutive_substring(\"xyzabc\") == 3"]}
{"seq_id": 3603931803, "instruction": "Write a function to reverse the digits of a positive integer.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_number(n):\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n = n // 10\n    return reversed_num\n```", "code": "def reverse_number(n):\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n = n // 10\n    return reversed_num", "entry_point": "reverse_number", "testcase": ["assert reverse_number(1000) == 1", "assert reverse_number(1200) == 21", "assert reverse_number(123) == 321"]}
{"seq_id": 23136609361, "instruction": "Write a function to find the minimum and maximum elements in a given array using divide and conquer technique.", "output": "Here is the code to solve this problem: \n```python\ndef min_max(arr):\n    if len(arr) == 1:\n        return (arr[0], arr[0])\n    elif len(arr) == 2:\n        return (min(arr[0], arr[1]), max(arr[0], arr[1]))\n    else:\n        mid = len(arr) // 2\n        left_min, left_max = min_max(arr[:mid])\n        right_min, right_max = min_max(arr[mid:])\n        return (min(left_min, right_min), max(left_max, right_max))\n```", "code": "def min_max(arr):\n    if len(arr) == 1:\n        return (arr[0], arr[0])\n    elif len(arr) == 2:\n        return (min(arr[0], arr[1]), max(arr[0], arr[1]))\n    else:\n        mid = len(arr) // 2\n        left_min, left_max = min_max(arr[:mid])\n        right_min, right_max = min_max(arr[mid:])\n        return (min(left_min, right_min), max(left_max, right_max))", "entry_point": "min_max", "testcase": ["assert min_max([100, 200, 300, 400, 500]) == (100, 500)", "assert min_max([5, 4, 3, 2, 1]) == (1, 5)", "assert min_max([1, 2, 3, 4, 5]) == (1, 5)"]}
{"seq_id": 19237701490, "instruction": "Write a Python function to find the number of permutations of a given list of items.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef num_permutations(lst):\n    return math.factorial(len(lst))\n```", "code": "import math\n\ndef num_permutations(lst):\n    return math.factorial(len(lst))", "entry_point": "num_permutations", "testcase": ["assert num_permutations([1]) == 1", "assert num_permutations(['a', 'b', 'c', 'd']) == 24", "assert num_permutations([1, 2, 3]) == 6"]}
{"seq_id": 32686835217, "instruction": "Write a function to find the transpose of a matrix. The transpose of a matrix is obtained by swapping the rows and columns of the matrix.", "output": "Here is the code to solve this problem: \n```python\ndef matrix_transpose(matrix):\n    \"\"\"\n    Returns the transpose of the given matrix.\n    \"\"\"\n    if not matrix:\n        return []\n    nrow = len(matrix)\n    ncol = len(matrix[0])\n    transpose = [[0] * nrow for _ in range(ncol)]\n    for i in range(nrow):\n        for j in range(ncol):\n            transpose[j][i] = matrix[i][j]\n    return transpose\n```", "code": "def matrix_transpose(matrix):\n    \"\"\"\n    Returns the transpose of the given matrix.\n    \"\"\"\n    if not matrix:\n        return []\n    nrow = len(matrix)\n    ncol = len(matrix[0])\n    transpose = [[0] * nrow for _ in range(ncol)]\n    for i in range(nrow):\n        for j in range(ncol):\n            transpose[j][i] = matrix[i][j]\n    return transpose", "entry_point": "matrix_transpose", "testcase": ["assert matrix_transpose([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]", "assert matrix_transpose([[1, 2, 3]]) == [[1], [2], [3]]", "assert matrix_transpose([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]"]}
{"seq_id": 74666557703, "instruction": "Write a python function to find the number of pairs in an array that sum up to a given value k.", "output": "Here is the code to solve this problem: \n```python\ndef findPairs(arr, k):\n    if len(arr) < 2:\n        return 0\n    seen = set()\n    output = set()\n    for num in arr:\n        target = k - num\n        if target not in seen:\n            seen.add(num)\n        else:\n            output.add( (min(num,target), max(num,target)) )\n    return len(output)\n```", "code": "def findPairs(arr, k):\n    if len(arr) < 2:\n        return 0\n    seen = set()\n    output = set()\n    for num in arr:\n        target = k - num\n        if target not in seen:\n            seen.add(num)\n        else:\n            output.add( (min(num,target), max(num,target)) )\n    return len(output)", "entry_point": "findPairs", "testcase": ["assert findPairs([1, 1], 2) == 1", "assert findPairs([1, 3, 2, 2, 3, 4], 5) == 2", "assert findPairs([1, 5, 7, -1], 6) == 2"]}
{"seq_id": 4339348976, "instruction": "Write a Python function to generate all possible combinations of phone keypad letters for a given string of digits.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef letter_combinations(digits: str) -> List[str]:\n    dic = {'2': ['a', 'b', 'c'],\n           '3': ['d', 'e', 'f'],\n           '4': ['g', 'h', 'i'],\n           '5': ['j', 'k', 'l'],\n           '6': ['m', 'n', 'o'],\n           '7': ['p', 'q', 'r', 's'],\n           '8': ['t', 'u', 'v'],\n           '9': ['w', 'x', 'y', 'z']}\n    \n    def letter(pw, next_digits):\n        if not next_digits:\n            tmp.append(pw)\n        else:\n            number = dic[next_digits[0]]\n            for word in number:\n                letter(pw + word, next_digits[1:])\n\n    pw = ''\n    tmp = []\n    if not digits:\n        return tmp\n    letter(pw, digits)\n    return tmp\n```", "code": "from typing import List\n\ndef letter_combinations(digits: str) -> List[str]:\n    dic = {'2': ['a', 'b', 'c'],\n           '3': ['d', 'e', 'f'],\n           '4': ['g', 'h', 'i'],\n           '5': ['j', 'k', 'l'],\n           '6': ['m', 'n', 'o'],\n           '7': ['p', 'q', 'r', 's'],\n           '8': ['t', 'u', 'v'],\n           '9': ['w', 'x', 'y', 'z']}\n    \n    def letter(pw, next_digits):\n        if not next_digits:\n            tmp.append(pw)\n        else:\n            number = dic[next_digits[0]]\n            for word in number:\n                letter(pw + word, next_digits[1:])\n\n    pw = ''\n    tmp = []\n    if not digits:\n        return tmp\n    letter(pw, digits)\n    return tmp", "entry_point": "letter_combinations", "testcase": ["assert letter_combinations(\"\") == []", "assert letter_combinations(\"23\") == [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]", "assert letter_combinations(\"2\") == [\"a\", \"b\", \"c\"]"]}
{"seq_id": 74017753886, "instruction": "Write a function that takes a list of strings as input and returns a list of unique strings after removing duplicates, ignoring case sensitivity.", "output": "Here is the code to solve this problem: \n```python\ndef remove_duplicates_ignore_case(strings):\n    unique_strings = set()\n    result = []\n    for string in strings:\n        if string.lower() not in unique_strings:\n            unique_strings.add(string.lower())\n            result.append(string)\n    return result\n```", "code": "def remove_duplicates_ignore_case(strings):\n    unique_strings = set()\n    result = []\n    for string in strings:\n        if string.lower() not in unique_strings:\n            unique_strings.add(string.lower())\n            result.append(string)\n    return result", "entry_point": "remove_duplicates_ignore_case", "testcase": ["assert remove_duplicates_ignore_case(['hello', 'WORLD', 'world', 'HELLO']) == ['hello', 'WORLD']", "assert remove_duplicates_ignore_case(['dog', 'Cat', 'cat', 'DOG', 'bird']) == ['dog', 'Cat', 'bird']", "assert remove_duplicates_ignore_case(['apple', 'Banana', 'banana', 'Cherry', 'cherry']) == ['apple', 'Banana', 'Cherry']"]}
{"seq_id": 23008145703, "instruction": "Write a function to check if a given list of integers contains a Pythagorean triplet.", "output": "Here is the code to solve this problem: \n```python\ndef check_pythagorean_triplet(nums):\n    nums_squared = [x ** 2 for x in nums]\n    nums_squared.sort()\n    for i in range(len(nums_squared) - 1, 1, -1):\n        if nums_squared[i] == nums_squared[i - 1] + nums_squared[i - 2]:\n            return True\n    return False\n```", "code": "def check_pythagorean_triplet(nums):\n    nums_squared = [x ** 2 for x in nums]\n    nums_squared.sort()\n    for i in range(len(nums_squared) - 1, 1, -1):\n        if nums_squared[i] == nums_squared[i - 1] + nums_squared[i - 2]:\n            return True\n    return False", "entry_point": "check_pythagorean_triplet", "testcase": ["assert check_pythagorean_triplet([3, 5, 12, 5, 13])==True ", "assert check_pythagorean_triplet([3, 1, 2, 4, 5])==True", "assert check_pythagorean_triplet([10, 4, 6])==False"]}
{"seq_id": 11907452276, "instruction": "Write a python function to find the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root):\n    (diameter, height) = diameter_of_binary_tree_recursive(root)\n    return diameter\n\ndef diameter_of_binary_tree_recursive(root):\n    if root == None:\n        return (0, 0)\n\n    (left_diameter, left_height) = diameter_of_binary_tree_recursive(root.left)\n    (right_diameter, right_height) = diameter_of_binary_tree_recursive(root.right)\n    diameter = max(left_diameter, right_diameter, left_height + right_height)\n    height = max(left_height, right_height) + 1\n    return (diameter, height)\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root):\n    (diameter, height) = diameter_of_binary_tree_recursive(root)\n    return diameter\n\ndef diameter_of_binary_tree_recursive(root):\n    if root == None:\n        return (0, 0)\n\n    (left_diameter, left_height) = diameter_of_binary_tree_recursive(root.left)\n    (right_diameter, right_height) = diameter_of_binary_tree_recursive(root.right)\n    diameter = max(left_diameter, right_diameter, left_height + right_height)\n    height = max(left_height, right_height) + 1\n    return (diameter, height)", "entry_point": "diameter_of_binary_tree", "testcase": ["assert diameter_of_binary_tree(TreeNode(1, TreeNode(2), TreeNode(3, TreeNode(4), TreeNode(5)))) == 3", "assert diameter_of_binary_tree(TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(6), TreeNode(7)), TreeNode(5)), TreeNode(3))) == 4", "assert diameter_of_binary_tree(TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))) == 3"]}
{"seq_id": 1611226101, "instruction": "Write a python function to find the maximum value in a given list of numbers without using the built-in max() function.", "output": "Here is the code to solve this problem: \n```python\ndef max_num(nums):\n    if not nums:\n        return None\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    return max_val\n```", "code": "def max_num(nums):\n    if not nums:\n        return None\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    return max_val", "entry_point": "max_num", "testcase": ["assert max_num([1,2,3,4,5]) == 5", "assert max_num([-5,-2,-3,-1]) == -1", "assert max_num([100,200,300,400,500]) == 500"]}
{"seq_id": 21093203431, "instruction": "Write a function to find the kth smallest prime number in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef kth_smallest_prime(arr, k):\n    primes = [x for x in arr if is_prime(x)]\n    primes.sort()\n    if len(primes) < k:\n        return -1\n    return primes[k-1]\n```", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef kth_smallest_prime(arr, k):\n    primes = [x for x in arr if is_prime(x)]\n    primes.sort()\n    if len(primes) < k:\n        return -1\n    return primes[k-1]", "entry_point": "kth_smallest_prime", "testcase": ["assert kth_smallest_prime([4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24], 3) == -1", "assert kth_smallest_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31], 5) == 11", "assert kth_smallest_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31], 1) == 2"]}
{"seq_id": 32383096576, "instruction": "Write a function to find the maximum number in a list using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_recursive(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        max_rest = find_max_recursive(lst[1:])\n        return lst[0] if lst[0] > max_rest else max_rest\n```", "code": "def find_max_recursive(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        max_rest = find_max_recursive(lst[1:])\n        return lst[0] if lst[0] > max_rest else max_rest", "entry_point": "find_max_recursive", "testcase": ["assert find_max_recursive([5, 4, 3, 2, 1]) == 5", "assert find_max_recursive([1, 2, 3, 4, 5]) == 5", "assert find_max_recursive([-5, -4, -3, -2, -1]) == -1"]}
{"seq_id": 3081632711, "instruction": "Write a python function to convert a decimal number to hexadecimal representation.", "output": "Here is the code to solve this problem: \n```python\ndef to_hexadecimal(num):\n    mapps = '0123456789abcdef'\n    items = []\n    for k in range(8):\n        items.append(num & 15)\n        num = num >> 4\n        if not num: break\n    ans = '' \n    for item in items[::-1]:\n        ans += mapps[item]\n    return ans\n```", "code": "def to_hexadecimal(num):\n    mapps = '0123456789abcdef'\n    items = []\n    for k in range(8):\n        items.append(num & 15)\n        num = num >> 4\n        if not num: break\n    ans = '' \n    for item in items[::-1]:\n        ans += mapps[item]\n    return ans", "entry_point": "to_hexadecimal", "testcase": ["assert to_hexadecimal(16) == \"10\"", "assert to_hexadecimal(255) == \"ff\"", "assert to_hexadecimal(1024) == \"400\""]}
{"seq_id": 35361647994, "instruction": "Write a function that takes a list of words and a number n, and returns the n most frequent words in the list along with their frequencies.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef most_frequent_words(words, n):\n    word_counts = Counter(words)\n    return word_counts.most_common(n)\n```", "code": "from collections import Counter\n\ndef most_frequent_words(words, n):\n    word_counts = Counter(words)\n    return word_counts.most_common(n)", "entry_point": "most_frequent_words", "testcase": ["assert most_frequent_words([\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"apple\"], 2) == [(\"apple\", 3), (\"banana\", 2)]", "assert most_frequent_words([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"], 3) == [(\"one\", 1), (\"two\", 1), (\"three\", 1)]", "assert most_frequent_words([\"hello\", \"world\", \"hello\", \"python\", \"world\", \"hello\"], 3) == [(\"hello\", 3), (\"world\", 2), (\"python\", 1)]"]}
{"seq_id": 28965217108, "instruction": "Write a Python function to implement the Sieve of Eratosthenes algorithm and find all prime numbers up to a given number n.", "output": "Here is the code to solve this problem: \n```python\ndef sieve_primes(n):\n    sieve = [True] * (n + 1)\n    sieve[0:2] = [False, False]  # 0 and 1 are not prime numbers\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n + 1, i):\n                sieve[j] = False\n    return [i for i in range(n + 1) if sieve[i]]\n```", "code": "def sieve_primes(n):\n    sieve = [True] * (n + 1)\n    sieve[0:2] = [False, False]  # 0 and 1 are not prime numbers\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n + 1, i):\n                sieve[j] = False\n    return [i for i in range(n + 1) if sieve[i]]", "entry_point": "sieve_primes", "testcase": ["assert sieve_primes(10) == [2, 3, 5, 7]", "assert sieve_primes(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "assert sieve_primes(5) == [2, 3, 5]"]}
{"seq_id": 21975297761, "instruction": "Write a function to find the maximum score from a list of numbers and a specific index. The score is calculated by multiplying the minimum number in the subarray (excluding the number at the specific index) by the length of the subarray.", "output": "Here is the code to solve this problem: \n```python\nimport sys\n\ndef maximum_score(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    minN = nums[k]\n    i = k\n    j = k\n    ans = -sys.maxsize - 1\n    while (i > 0 or j < n - 1):\n        if (i == 0):\n            j += 1\n        elif j == n - 1:\n            i -= 1\n        elif nums[i-1] < nums[j+1]:\n            j += 1\n        else:\n            i -= 1\n        minN = min(minN, nums[i], nums[j])\n        ans = max(ans, minN * (j - i + 1))\n    return ans\n```", "code": "import sys\n\ndef maximum_score(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    minN = nums[k]\n    i = k\n    j = k\n    ans = -sys.maxsize - 1\n    while (i > 0 or j < n - 1):\n        if (i == 0):\n            j += 1\n        elif j == n - 1:\n            i -= 1\n        elif nums[i-1] < nums[j+1]:\n            j += 1\n        else:\n            i -= 1\n        minN = min(minN, nums[i], nums[j])\n        ans = max(ans, minN * (j - i + 1))\n    return ans", "entry_point": "maximum_score", "testcase": ["assert maximum_score([2, 1, 4, 5, 3], 3) == 9", "assert maximum_score([4, 4, 4, 4], 0) == 16", "assert maximum_score([1, 3, 4, 2], 2) == 6"]}
{"seq_id": 72071756745, "instruction": "Write a python function that takes a list of numbers as input and returns a new list with the numbers rounded to the nearest integer.", "output": "Here is the code to solve this problem: \n```python\ndef round_list(lst):\n    return [round(num) for num in lst]\n```", "code": "def round_list(lst):\n    return [round(num) for num in lst]", "entry_point": "round_list", "testcase": ["assert round_list([1.2, 2.5, 3.7, 4.4]) == [1, 2, 4, 4]", "assert round_list([9.9, 10.1, 11.2, 12.3]) == [10, 10, 11, 12]", "assert round_list([5.5, 6.6, 7.7, 8.8]) == [6, 7, 8, 9]"]}
{"seq_id": 13023128909, "instruction": "Write a function to check if the given string is a valid URL.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef check_url(url):\n    regex = re.compile(\n        r'^(?:http|https)://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, url) is not None\n```", "code": "import re\n\ndef check_url(url):\n    regex = re.compile(\n        r'^(?:http|https)://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, url) is not None", "entry_point": "check_url", "testcase": ["assert check_url(\"http://example.com/path/to/page?name=value&another=value\") == True", "assert check_url(\"www.example.com\") == False", "assert check_url(\"ftp://example.com\") == False", "assert check_url(\"https://example.com:8080/path/to/page#section\") == True", "assert check_url(\"https://www.example.com\") == True"]}
{"seq_id": 70460810041, "instruction": "Write a python function to find the number of ways to reach the top of a staircase with n steps, given that you can either climb 1 or 2 steps at a time.", "output": "Here is the code to solve this problem: \n```python\ndef count_ways(n):\n    if n <= 1:\n        return n\n    first, second = 1, 2\n    for i in range(2, n):\n        third = first + second\n        first, second = second, third\n    return second\n```", "code": "def count_ways(n):\n    if n <= 1:\n        return n\n    first, second = 1, 2\n    for i in range(2, n):\n        third = first + second\n        first, second = second, third\n    return second", "entry_point": "count_ways", "testcase": ["assert count_ways(4) == 5", "assert count_ways(3) == 3", "assert count_ways(2) == 2", "assert count_ways(1) == 1"]}
{"seq_id": 22870469135, "instruction": "Write a function to find the least common multiple (LCM) of two positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef least_common_multiple(a, b):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)\n```", "code": "def least_common_multiple(a, b):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    return a * b // gcd(a, b)", "entry_point": "least_common_multiple", "testcase": ["assert least_common_multiple(10, 25) == 50", "assert least_common_multiple(3, 7) == 21", "assert least_common_multiple(15, 20) == 60"]}
{"seq_id": 16859833827, "instruction": "Write a function to find the maximum length of a substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef max_unique_substring_length(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    \n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n```", "code": "def max_unique_substring_length(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    \n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length", "entry_point": "max_unique_substring_length", "testcase": ["assert max_unique_substring_length(\"bbbbb\") == 1", "assert max_unique_substring_length(\"abcabcbb\") == 3", "assert max_unique_substring_length(\"pwwkew\") == 3"]}
{"seq_id": 18245224828, "instruction": "Write a function to check if a given pattern matches a string in which each letter in the pattern is mapped to a non-empty substring in the string. This is similar to a word pattern match problem.", "output": "Here is the code to solve this problem: \n```python\ndef word_pattern_match(pattern, string):\n    d = {}\n    return helper(pattern, string, d)\n\ndef helper(pattern, string, d):\n    if not pattern:\n        if not string:\n            return True\n        else:\n            return False\n\n    p = pattern[0]\n    if p in d:\n        if string.startswith(d[p]) and helper(pattern[1:], string[len(d[p]):], d):\n            return True\n        else:\n            return False\n    else:\n        for k in range(1, len(string) - len(pattern) + 2):\n            if string[:k] not in d.values():\n                d[p] = string[:k]\n                if helper(pattern[1:], string[k:], d):\n                    return True\n                del d[p]\n\n    return False\n```", "code": "def word_pattern_match(pattern, string):\n    d = {}\n    return helper(pattern, string, d)\n\ndef helper(pattern, string, d):\n    if not pattern:\n        if not string:\n            return True\n        else:\n            return False\n\n    p = pattern[0]\n    if p in d:\n        if string.startswith(d[p]) and helper(pattern[1:], string[len(d[p]):], d):\n            return True\n        else:\n            return False\n    else:\n        for k in range(1, len(string) - len(pattern) + 2):\n            if string[:k] not in d.values():\n                d[p] = string[:k]\n                if helper(pattern[1:], string[k:], d):\n                    return True\n                del d[p]\n\n    return False", "entry_point": "word_pattern_match", "testcase": ["assert word_pattern_match(\"aaaa\", \"asdasdasdasd\") == True", "assert word_pattern_match(\"abab\", \"redblueredblue\") == True", "assert word_pattern_match(\"aabb\", \"xyzabcxzyabc\") == False"]}
{"seq_id": 70248724341, "instruction": "Write a python function to find the smallest substring that contains all the characters of a given string exactly once.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef smallest_Subsequence(s: str) -> str:\n    last = defaultdict(int)\n    for i, c in enumerate(s):\n        last[c] = i\n    \n    stack = []\n    seen = set()\n    for i, c in enumerate(s):\n        while stack and c < stack[-1] and i < last[stack[-1]] and c not in seen:\n            seen.remove(stack.pop())\n        if c not in seen:\n            seen.add(c)\n            stack.append(c)\n    \n    return ''.join(stack)\n```", "code": "from collections import defaultdict\n\ndef smallest_Subsequence(s: str) -> str:\n    last = defaultdict(int)\n    for i, c in enumerate(s):\n        last[c] = i\n    \n    stack = []\n    seen = set()\n    for i, c in enumerate(s):\n        while stack and c < stack[-1] and i < last[stack[-1]] and c not in seen:\n            seen.remove(stack.pop())\n        if c not in seen:\n            seen.add(c)\n            stack.append(c)\n    \n    return ''.join(stack)", "entry_point": "smallest_Subsequence", "testcase": ["assert smallest_Subsequence(\"bcabc\") == \"abc\"", "assert smallest_Subsequence(\"cbacdcbc\") == \"acdb\"", "assert smallest_Subsequence(\"abcd\") == \"abcd\""]}
{"seq_id": 28898045516, "instruction": "Write a function to find the shortest subarray with a given sum in an array of positive integers.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef min_subarray_len(target, nums):\n    i, n, s, result = 0, len(nums), 0, math.inf\n\n    for j in range(n):\n        s += nums[j]\n\n        while i <= j and s >= target:\n            result = min(j - i + 1, result)\n            s -= nums[i]\n            i += 1\n\n    return result if result != math.inf else 0\n```", "code": "import math\n\ndef min_subarray_len(target, nums):\n    i, n, s, result = 0, len(nums), 0, math.inf\n\n    for j in range(n):\n        s += nums[j]\n\n        while i <= j and s >= target:\n            result = min(j - i + 1, result)\n            s -= nums[i]\n            i += 1\n\n    return result if result != math.inf else 0", "entry_point": "min_subarray_len", "testcase": ["assert min_subarray_len(7, [2,3,1,2,4,3]) == 2", "assert min_subarray_len(11, [1,1,1,1,1,1,1,1]) == 0", "assert min_subarray_len(4, [1,4,4]) == 1"]}
{"seq_id": 71073739905, "instruction": "Write a function to return the smallest integer such that its square has a number of trailing zeroes equal to the given integer.", "output": "Here is the code to solve this problem: \n```python\ndef find_smallest_square_with_trailing_zeroes(n):\n    result = 1\n    for i in range(n):\n        result *= 5\n    return result\n```", "code": "def find_smallest_square_with_trailing_zeroes(n):\n    result = 1\n    for i in range(n):\n        result *= 5\n    return result", "entry_point": "find_smallest_square_with_trailing_zeroes", "testcase": ["assert find_smallest_square_with_trailing_zeroes(3) == 125", "assert find_smallest_square_with_trailing_zeroes(2) == 25", "assert find_smallest_square_with_trailing_zeroes(1) == 5"]}
{"seq_id": 14430979373, "instruction": "Write a python function to find the largest sum of non-adjacent numbers in a list. Numbers are separated by commas.", "output": "Here is the code to solve this problem: \n```python\ndef largest_sum(nums):\n    prev, curr = 0, 0\n    for num in nums:\n        prev, curr = curr, max(curr, prev + num)\n    return curr\n```", "code": "def largest_sum(nums):\n    prev, curr = 0, 0\n    for num in nums:\n        prev, curr = curr, max(curr, prev + num)\n    return curr", "entry_point": "largest_sum", "testcase": ["assert largest_sum([5,1,1,5]) == 10", "assert largest_sum([2,4,6,2,5]) == 13", "assert largest_sum([1,2,3,4,5,6]) == 12"]}
{"seq_id": 5601170616, "instruction": "Write a python function to find the sum of all odd elements in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef sum_Odd_Elements(list1):\n    sum = 0\n    for i in list1:\n        if i%2 != 0:\n            sum += i\n    return sum\n```", "code": "def sum_Odd_Elements(list1):\n    sum = 0\n    for i in list1:\n        if i%2 != 0:\n            sum += i\n    return sum", "entry_point": "sum_Odd_Elements", "testcase": ["assert sum_Odd_Elements([1,2,3,4,5]) == 9", "assert sum_Odd_Elements([2,4,6,8,10]) == 0", "assert sum_Odd_Elements([1,3,5,7,9]) == 25"]}
{"seq_id": 15251529557, "instruction": "Write a python function that takes a list of integers and an integer k, and returns the k most frequent elements in the list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef topKFrequent(nums, k):\n    hashmap = Counter(nums)\n    sortedMap = sorted(hashmap, key=hashmap.get, reverse=True)\n    return sortedMap[:k]\n```", "code": "from collections import Counter\n\ndef topKFrequent(nums, k):\n    hashmap = Counter(nums)\n    sortedMap = sorted(hashmap, key=hashmap.get, reverse=True)\n    return sortedMap[:k]", "entry_point": "topKFrequent", "testcase": ["assert topKFrequent([1], 1) == [1]", "assert topKFrequent([1,1,1,2,2,3], 2) == [1, 2]", "assert topKFrequent([4,1,2,2,3,3,3,4,4,4,4], 3) == [4, 3, 2]"]}
{"seq_id": 25696128125, "instruction": "Write a python function to encode a given string into a run-length encoding format. Run-length encoding is a form of data compression in which runs of data (that is, sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run.", "output": "Here is the code to solve this problem: \n```python\ndef run_length_encoding(input_string):\n    if not input_string:\n        return \"\"\n    result = []\n    count = 1\n    for i in range(1, len(input_string)):\n        if input_string[i] == input_string[i - 1]:\n            count += 1\n        else:\n            result.append(str(count) + input_string[i - 1])\n            count = 1\n    result.append(str(count) + input_string[-1])\n    return \"\".join(result)\n\n# Test cases\nassert run_length_encoding(\"aaaabcccaa\") == \"4a1b3c2a\"\nassert run_length_encoding(\"Python\") == \"1P1y1t1h1o1n\"\nassert run_length_encoding(\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\") == \"12W1B12W3B24W1B\"\n```", "code": "def run_length_encoding(input_string):\n    if not input_string:\n        return \"\"\n    result = []\n    count = 1\n    for i in range(1, len(input_string)):\n        if input_string[i] == input_string[i - 1]:\n            count += 1\n        else:\n            result.append(str(count) + input_string[i - 1])\n            count = 1\n    result.append(str(count) + input_string[-1])\n    return \"\".join(result)\n\n# Test cases\nassert run_length_encoding(\"aaaabcccaa\") == \"4a1b3c2a\"\nassert run_length_encoding(\"Python\") == \"1P1y1t1h1o1n\"\nassert run_length_encoding(\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\") == \"12W1B12W3B24W1B\"", "entry_point": "run_length_encoding", "testcase": ["assert run_length_encoding(\"Python\") == \"1P1y1t1h1o1n\"", "assert run_length_encoding(\"aaaabcccaa\") == \"4a1b3c2a\"", "assert run_length_encoding(\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\") == \"12W1B12W3B24W1B\""]}
{"seq_id": 6978845718, "instruction": "Write a python function to find whether a given list of integers is sorted in ascending order or not.", "output": "Here is the code to solve this problem: \n```python\ndef is_sorted(lst):\n  return lst == sorted(lst)\n```", "code": "def is_sorted(lst):\n  return lst == sorted(lst)", "entry_point": "is_sorted", "testcase": ["assert is_sorted([5,4,3,2,1]) == False", "assert is_sorted([1,2,3,4,5]) == True", "assert is_sorted([1,3,2,4,5]) == False"]}
{"seq_id": 20867851916, "instruction": "Write a function that takes a string and returns a dictionary with the frequency of each character in the string. The function should ignore case, so 'a' and 'A' should be considered the same character.", "output": "Here is the code to solve this problem: \n```python\ndef char_freq(s):\n    s = s.lower()\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq\n```", "code": "def char_freq(s):\n    s = s.lower()\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq", "entry_point": "char_freq", "testcase": ["assert char_freq(\"HelloWorld\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}", "assert char_freq(\"Mississippi\") == {'m': 1, 'i': 4, 's': 4, 'p': 2}", "assert char_freq(\"123321\") == {'1': 2, '2': 2, '3': 2}"]}
{"seq_id": 12020740749, "instruction": "Write a python function to check whether a given binary tree is a binary search tree (BST).", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_valid_BST(node, min=float('-inf'), max=float('inf')):\n    if node is None:\n        return True\n    if node.val <= min or node.val >= max:\n        return False\n    return is_valid_BST(node.left, min, node.val) and is_valid_BST(node.right, node.val, max)\n\ndef is_BST(root):\n    return is_valid_BST(root)\n\n# Test case 1\nroot1 = TreeNode(2, TreeNode(1), TreeNode(3))\nassert is_BST(root1) == True\n\n# Test case 2\nroot2 = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))\nassert is_BST(root2) == False\n\n# Test case 3\nroot3 = TreeNode(10, TreeNode(5), TreeNode(15))\nassert is_BST(root3) == True\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_valid_BST(node, min=float('-inf'), max=float('inf')):\n    if node is None:\n        return True\n    if node.val <= min or node.val >= max:\n        return False\n    return is_valid_BST(node.left, min, node.val) and is_valid_BST(node.right, node.val, max)\n\ndef is_BST(root):\n    return is_valid_BST(root)\n\n# Test case 1\nroot1 = TreeNode(2, TreeNode(1), TreeNode(3))\nassert is_BST(root1) == True\n\n# Test case 2\nroot2 = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))\nassert is_BST(root2) == False\n\n# Test case 3\nroot3 = TreeNode(10, TreeNode(5), TreeNode(15))\nassert is_BST(root3) == True", "entry_point": "is_BST", "testcase": ["assert is_BST(TreeNode(2, TreeNode(1), TreeNode(3))) == True", "assert is_BST(TreeNode(10, TreeNode(5), TreeNode(15))) == True", "assert is_BST(TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))) == False"]}
{"seq_id": 2525906167, "instruction": "Write a python function to find the longest subsequence of a given string that is also a palindrome.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_palindrome_subsequence(s):\n    def longest_palindrome_subsequence(str1):\n        str2 = str1[::-1]\n        n = len(str1)\n        m = len(str2)\n\n        dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n        for i in range(n):\n            dp[i][0] = 0\n        for j in range(m):\n            dp[0][j] = 0\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if str1[i - 1] == str2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[n][m]\n\n    return longest_palindrome_subsequence(s)\n```", "code": "def find_longest_palindrome_subsequence(s):\n    def longest_palindrome_subsequence(str1):\n        str2 = str1[::-1]\n        n = len(str1)\n        m = len(str2)\n\n        dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n        for i in range(n):\n            dp[i][0] = 0\n        for j in range(m):\n            dp[0][j] = 0\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if str1[i - 1] == str2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[n][m]\n\n    return longest_palindrome_subsequence(s)", "entry_point": "find_longest_palindrome_subsequence", "testcase": ["assert find_longest_palindrome_subsequence(\"abdbca\") == 5", "assert find_longest_palindrome_subsequence(\"cddpd\") == 3", "assert find_longest_palindrome_subsequence(\"pqr\") == 1"]}
{"seq_id": 46053156151, "instruction": "Write a python function to replace all occurrences of a substring in a given string with another substring.", "output": "Here is the code to solve this problem: \n```python\ndef replace_substring(string, old_substring, new_substring):\n  return string.replace(old_substring, new_substring)\n```", "code": "def replace_substring(string, old_substring, new_substring):\n  return string.replace(old_substring, new_substring)", "entry_point": "replace_substring", "testcase": ["assert replace_substring(\"Hello World\", \"World\", \"Python\") == \"Hello Python\"", "assert replace_substring(\"Hello World World\", \"World\", \"Python\") == \"Hello Python Python\"", "assert replace_substring(\"Hello\", \"World\", \"Python\") == \"Hello\""]}
{"seq_id": 30378591184, "instruction": "Write a python function to find all the possible substrings of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef all_substrings(str):\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    return substrings\n\n# test cases\nprint(all_substrings(\"abc\"))\nprint(all_substrings(\"xyz\"))\nprint(all_substrings(\"123\"))\n```", "code": "def all_substrings(str):\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    return substrings\n\n# test cases\nprint(all_substrings(\"abc\"))\nprint(all_substrings(\"xyz\"))\nprint(all_substrings(\"123\"))", "entry_point": "all_substrings", "testcase": ["assert all_substrings(\"123\") == [\"1\", \"12\", \"123\", \"2\", \"23\", \"3\"]", "assert all_substrings(\"abc\") == [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]", "assert all_substrings(\"xyz\") == [\"x\", \"xy\", \"xyz\", \"y\", \"yz\", \"z\"]"]}
{"seq_id": 22200838489, "instruction": "Write a python function to generate all the possible combinations of a given list of lists, where each element from one list will be combined with every other element from every other list.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef combine_lists(lists: List[List]) -> List[List]:\n    if not lists:\n        return []\n\n    # Initialize the result with the first list\n    result = [[item] for item in lists[0]]\n\n    # Iterate over the rest of the lists\n    for lst in lists[1:]:\n        # For each item in the current list, combine it with every result so far\n        result = [r + [item] for r in result for item in lst]\n\n    return result\n```", "code": "from typing import List\n\ndef combine_lists(lists: List[List]) -> List[List]:\n    if not lists:\n        return []\n\n    # Initialize the result with the first list\n    result = [[item] for item in lists[0]]\n\n    # Iterate over the rest of the lists\n    for lst in lists[1:]:\n        # For each item in the current list, combine it with every result so far\n        result = [r + [item] for r in result for item in lst]\n\n    return result", "entry_point": "combine_lists", "testcase": ["assert combine_lists([['dog', 'cat'], ['white', 'black']]) == [['dog', 'white'], ['dog', 'black'], ['cat', 'white'], ['cat', 'black']]", "assert combine_lists([[1, 2], [3, 4]]) == [[1, 3], [1, 4], [2, 3], [2, 4]]", "assert combine_lists([[1], ['a', 'b'], [True, False]]) == [[1, 'a', True], [1, 'a', False], [1, 'b', True], [1, 'b', False]]"]}
{"seq_id": 9656635451, "instruction": "Write a python function to find the minimum number of jumps required to reach the end of an array from the first position.", "output": "Here is the code to solve this problem: \n```python\ndef minJumps(arr):\n    n = len(arr)\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n```", "code": "def minJumps(arr):\n    n = len(arr)\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]", "entry_point": "minJumps", "testcase": ["assert minJumps([2,3,1,1,4]) == 2", "assert minJumps([10,9,8,7,6,5,4,3,2,1,0]) == 1", "assert minJumps([1,1,1,1,1]) == 4"]}
{"seq_id": 26917583965, "instruction": "Write a function that simulates rolling a dice. The function should take the number of sides on the dice as an argument and return a random number between 1 and the number of sides.", "output": "Here is the code to solve this problem: \n```python\nfrom random import randint\n\ndef roll_dice(sides):\n    return randint(1, sides)\n```", "code": "from random import randint\n\ndef roll_dice(sides):\n    return randint(1, sides)", "entry_point": "roll_dice", "testcase": ["assert roll_dice(20) in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "assert roll_dice(6) in [1, 2, 3, 4, 5, 6]", "assert roll_dice(100) in range(1,101)"]}
{"seq_id": 12665989786, "instruction": "Write a Python function named `count_subsequences` that takes two string arguments, `s` and `t`, and returns the number of times `t` occurs as a subsequence in `s`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.", "output": "Here is the code to solve this problem: \n```python\ndef count_subsequences(s: str, t: str) -> int:\n    m, n = len(s), len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[m][n]\n```", "code": "def count_subsequences(s: str, t: str) -> int:\n    m, n = len(s), len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[m][n]", "entry_point": "count_subsequences", "testcase": ["assert count_subsequences(\"abcde\", \"aec\") == 0", "assert count_subsequences(\"rabbbit\", \"rabbit\") == 3", "assert count_subsequences(\"babgbag\", \"bag\") == 5", "assert count_subsequences(\"abcde\", \"ace\") == 1"]}
{"seq_id": 11648653804, "instruction": "Write a function to check if the parentheses in the given string are balanced or not.", "output": "Here is the code to solve this problem: \n```python\ndef is_balanced_parentheses(s):\n    stack = []\n    opening = set(['(', '{', '['])\n    matching = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in opening:\n            stack.append(char)\n        elif stack and matching[char] == stack[-1]:\n            stack.pop()\n        else:\n            return False\n    \n    return stack == []\n```", "code": "def is_balanced_parentheses(s):\n    stack = []\n    opening = set(['(', '{', '['])\n    matching = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in opening:\n            stack.append(char)\n        elif stack and matching[char] == stack[-1]:\n            stack.pop()\n        else:\n            return False\n    \n    return stack == []", "entry_point": "is_balanced_parentheses", "testcase": ["assert is_balanced_parentheses(\"({[)]}\") == False", "assert is_balanced_parentheses(\"()\") == True", "assert is_balanced_parentheses(\"({[]})\") == True", "assert is_balanced_parentheses(\"(()\") == False"]}
{"seq_id": 11570560007, "instruction": "Write a function to count the number of anagrams of a given word that are present as substrings in a text string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef count_anagram_substrings(s1: str, s2: str) -> int:\n    if len(s1) > len(s2):\n        return 0\n\n    s1Count = defaultdict(int)\n    for c in s1:\n        s1Count[c] += 1\n\n    localCount = defaultdict(int)\n\n    start = 0\n    count = 0\n    for end in range(len(s2)):\n        endChar = s2[end]\n        localCount[endChar] += 1\n\n        if end - start + 1 == len(s1):\n            if localCount == s1Count:\n                count += 1\n\n            localCount[s2[start]] -= 1\n\n            if localCount[s2[start]] == 0:\n                localCount.pop(s2[start])\n\n            start += 1\n\n    return count\n```", "code": "from collections import defaultdict\n\ndef count_anagram_substrings(s1: str, s2: str) -> int:\n    if len(s1) > len(s2):\n        return 0\n\n    s1Count = defaultdict(int)\n    for c in s1:\n        s1Count[c] += 1\n\n    localCount = defaultdict(int)\n\n    start = 0\n    count = 0\n    for end in range(len(s2)):\n        endChar = s2[end]\n        localCount[endChar] += 1\n\n        if end - start + 1 == len(s1):\n            if localCount == s1Count:\n                count += 1\n\n            localCount[s2[start]] -= 1\n\n            if localCount[s2[start]] == 0:\n                localCount.pop(s2[start])\n\n            start += 1\n\n    return count", "entry_point": "count_anagram_substrings", "testcase": ["assert count_anagram_substrings(\"listen\", \"thisislisten\") == 1", "assert count_anagram_substrings(\"abc\", \"cbaebabacd\") == 2", "assert count_anagram_substrings(\"binary\", \"abinryobinary\") == 2"]}
{"seq_id": 36090058888, "instruction": "Write a function to find all possible permutations of a given list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef find_permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    permutations = []\n    for i in range(len(nums)):\n        remaining_nums = nums[:i] + nums[i+1:]\n        sub_permutations = find_permutations(remaining_nums)\n        for sub_permutation in sub_permutations:\n            permutations.append([nums[i]] + sub_permutation)\n    return permutations\n```", "code": "def find_permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    permutations = []\n    for i in range(len(nums)):\n        remaining_nums = nums[:i] + nums[i+1:]\n        sub_permutations = find_permutations(remaining_nums)\n        for sub_permutation in sub_permutations:\n            permutations.append([nums[i]] + sub_permutation)\n    return permutations", "entry_point": "find_permutations", "testcase": ["assert find_permutations([1]) == [[1]]", "assert find_permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "assert find_permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]"]}
{"seq_id": 32216077820, "instruction": "Write a function that takes a string as input and reverses the order of words in the string. A word is defined as a sequence of non-space characters. The words in the string will be separated by one or more space characters. The reversed string should not contain leading or trailing spaces and should only have a single space separating the words.", "output": "Here is the code to solve this problem: \n```python\ndef reverseWords(s):\n    words = s.strip().split()\n    return ' '.join(reversed(words))\n```", "code": "def reverseWords(s):\n    words = s.strip().split()\n    return ' '.join(reversed(words))", "entry_point": "reverseWords", "testcase": ["assert reverseWords(\"a good   example\") == \"example good a\"", "assert reverseWords(\"  hello world!  \") == \"world! hello\"", "assert reverseWords(\"  the sky is blue  \") == \"blue is sky the\""]}
{"seq_id": 8868820480, "instruction": "Write a function that finds the largest number in an array of integers that can be paired with its negative counterpart. If no such pair exists, return -1.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_max_pairable(nums):\n    c = Counter(nums)\n    maxVal = -1\n    for key, cnt in c.items():\n        tempVal = -key\n        if tempVal in c.keys():\n            maxVal = max(maxVal, abs(key))\n    return maxVal\n\nif __name__ == \"__main__\":\n    assert find_max_pairable([-3, 1, 2, 3, 4]) == 3\n    assert find_max_pairable([1, 2, 3, -1, -2, -3]) == 3\n    assert find_max_pairable([5, 6, -7, 8]) == -1\n```", "code": "from collections import Counter\n\ndef find_max_pairable(nums):\n    c = Counter(nums)\n    maxVal = -1\n    for key, cnt in c.items():\n        tempVal = -key\n        if tempVal in c.keys():\n            maxVal = max(maxVal, abs(key))\n    return maxVal\n\nif __name__ == \"__main__\":\n    assert find_max_pairable([-3, 1, 2, 3, 4]) == 3\n    assert find_max_pairable([1, 2, 3, -1, -2, -3]) == 3\n    assert find_max_pairable([5, 6, -7, 8]) == -1", "entry_point": "find_max_pairable", "testcase": ["assert find_max_pairable([-3, 1, 2, 3, 4]) == 3", "assert find_max_pairable([1, 2, 3, -1, -2, -3]) == 3", "assert find_max_pairable([5, 6, -7, 8]) == -1"]}
{"seq_id": 25569342424, "instruction": "Write a python function to find the n'th Centered Hexagonal Number. A centered hexagonal number, or hex number, is a centered figurate number that represents a hexagon with a dot in the center and all other dots surrounding the center dot in a hexagonal lattice.", "output": "Here is the code to solve this problem: \n```python\ndef centered_hexagonal(n):\n    return 3 * n * (n - 1) + 1\n```", "code": "def centered_hexagonal(n):\n    return 3 * n * (n - 1) + 1", "entry_point": "centered_hexagonal", "testcase": ["assert centered_hexagonal(2) == 7", "assert centered_hexagonal(1) == 1", "assert centered_hexagonal(3) == 19", "assert centered_hexagonal(5) == 61", "assert centered_hexagonal(4) == 37"]}
{"seq_id": 28609211431, "instruction": "Write a function to find the median of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef findMedianSortedArrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2] + nums[length // 2 - 1]) / 2\n    else:\n        return nums[length // 2]\n```", "code": "def findMedianSortedArrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2] + nums[length // 2 - 1]) / 2\n    else:\n        return nums[length // 2]", "entry_point": "findMedianSortedArrays", "testcase": ["assert findMedianSortedArrays([0, 0], [0, 0]) == 0.0", "assert findMedianSortedArrays([1, 3], [2]) == 2.0", "assert findMedianSortedArrays([1, 2], [3, 4]) == 2.5"]}
{"seq_id": 3800904894, "instruction": "Write a function to check if a string matches a pattern with support for '.' and '*' where '.' matches any single character and '*' matches zero or more of the preceding element.", "output": "Here is the code to solve this problem: \n```python\ndef match_pattern(s, p):\n    len_s = len(s)\n    len_p = len(p)\n    dp = [[False for _ in range(len_s + 1)] for _ in range(len_p + 1)]\n    dp[0][0] = True\n    for i in range(1, len_p + 1):\n        if p[i - 1] == '*' or p[i - 1] == '.':\n            dp[i][0] = dp[i - 2][0] if p[i - 1] == '*' else dp[i - 1][0]\n        else:\n            break\n    for i in range(1, len_p + 1):\n        for j in range(1, len_s + 1):\n            if p[i - 1] == s[j - 1] or p[i - 1] == '.':\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[i - 1] == '*':\n                dp[i][j] = dp[i - 2][j] or (dp[i][j - 1] if p[i - 2] == s[j - 1] or p[i - 2] == '.' else False)\n    return dp[-1][-1]\n```", "code": "def match_pattern(s, p):\n    len_s = len(s)\n    len_p = len(p)\n    dp = [[False for _ in range(len_s + 1)] for _ in range(len_p + 1)]\n    dp[0][0] = True\n    for i in range(1, len_p + 1):\n        if p[i - 1] == '*' or p[i - 1] == '.':\n            dp[i][0] = dp[i - 2][0] if p[i - 1] == '*' else dp[i - 1][0]\n        else:\n            break\n    for i in range(1, len_p + 1):\n        for j in range(1, len_s + 1):\n            if p[i - 1] == s[j - 1] or p[i - 1] == '.':\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[i - 1] == '*':\n                dp[i][j] = dp[i - 2][j] or (dp[i][j - 1] if p[i - 2] == s[j - 1] or p[i - 2] == '.' else False)\n    return dp[-1][-1]", "entry_point": "match_pattern", "testcase": ["assert match_pattern(\"ab\", \".*\")==True", "assert match_pattern(\"aa\", \"a\")==False", "assert match_pattern(\"mississippi\", \"mis*is*p*.\")==False"]}
{"seq_id": 42706613499, "instruction": "Write a Python function to find the maximum XOR of two numbers in a given list.", "output": "Here is the code to solve this problem: \n```python\nclass TrieNode:\n    def __init__(self):\n        self.bits = [None]*2\n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def getBinary(self, n):\n        b = \"{:032b}\".format(n)\n        return b\n\n    def insert(self, n):\n        binary = self.getBinary(n)\n        cur = self.root\n        \n        for i in binary:\n            bit = int(i)\n            if not cur.bits[bit]:\n                cur.bits[bit] = TrieNode()\n            cur = cur.bits[bit]\n            \n    def getMax(self, n):\n        num = ''\n        binary = self.getBinary(n)\n        cur = self.root\n\n        for i in binary:\n            bit = int(i)\n            if cur.bits[1-bit]:\n                num += str(1-bit)\n                cur = cur.bits[1-bit]\n            else:\n                num += str(bit)\n                cur = cur.bits[bit]\n                \n        return int(num, 2)\n\ndef max_xor(nums):\n    trie = Trie()\n    for i in nums:\n        trie.insert(i)\n    max_xor = 0\n    for i in nums:\n        max_xor = max(max_xor, trie.getMax(i) ^ i)\n    return max_xor\n```", "code": "class TrieNode:\n    def __init__(self):\n        self.bits = [None]*2\n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def getBinary(self, n):\n        b = \"{:032b}\".format(n)\n        return b\n\n    def insert(self, n):\n        binary = self.getBinary(n)\n        cur = self.root\n        \n        for i in binary:\n            bit = int(i)\n            if not cur.bits[bit]:\n                cur.bits[bit] = TrieNode()\n            cur = cur.bits[bit]\n            \n    def getMax(self, n):\n        num = ''\n        binary = self.getBinary(n)\n        cur = self.root\n\n        for i in binary:\n            bit = int(i)\n            if cur.bits[1-bit]:\n                num += str(1-bit)\n                cur = cur.bits[1-bit]\n            else:\n                num += str(bit)\n                cur = cur.bits[bit]\n                \n        return int(num, 2)\n\ndef max_xor(nums):\n    trie = Trie()\n    for i in nums:\n        trie.insert(i)\n    max_xor = 0\n    for i in nums:\n        max_xor = max(max_xor, trie.getMax(i) ^ i)\n    return max_xor", "entry_point": "max_xor", "testcase": ["assert max_xor([3, 10, 5, 25, 2, 8])==28", "assert max_xor([2,4])==6", "assert max_xor([0])==0"]}
{"seq_id": 40525627178, "instruction": "Write a function to find the length of the longest palindromic subsequence in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef lps(s):\n    n = len(s)\n    L = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]\n```", "code": "def lps(s):\n    n = len(s)\n    L = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]", "entry_point": "lps", "testcase": ["assert lps(\"GEEKSFORGEEKS\") == 5", "assert lps(\"BBABCBCAB\") == 7", "assert lps(\"AABCDEBAZ\") == 5"]}
{"seq_id": 80272710, "instruction": "Write a function to find the product of two largest numbers in a list. The list may contain positive and negative numbers. If the list contains less than two numbers, the function should return -1.", "output": "Here is the code to solve this problem: \n```python\ndef product_of_largest_two(nums):\n    if len(nums) < 2:\n        return -1\n    nums.sort()\n    return max(nums[-1]*nums[-2],nums[0]*nums[1])\n```", "code": "def product_of_largest_two(nums):\n    if len(nums) < 2:\n        return -1\n    nums.sort()\n    return max(nums[-1]*nums[-2],nums[0]*nums[1])", "entry_point": "product_of_largest_two", "testcase": ["assert product_of_largest_two([1])==(-1)", "assert product_of_largest_two([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==90", "assert product_of_largest_two([-1, -10, -5, -2])==50", "assert product_of_largest_two([-1, -2, 3, 4, 5, 6])==30"]}
{"seq_id": 6914064250, "instruction": "Write a function that takes a string and returns the longest substring of consecutive characters. If there are multiple substrings with the same maximum length, return the one that appears first.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consecutive_substring(s):\n    max_len = 1\n    max_substring = s[0]\n    curr_len = 1\n    curr_substring = s[0]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            curr_len += 1\n            curr_substring += s[i]\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n                max_substring = curr_substring\n            curr_len = 1\n            curr_substring = s[i]\n    if curr_len > max_len:\n        max_len = curr_len\n        max_substring = curr_substring\n    return max_substring\n```", "code": "def longest_consecutive_substring(s):\n    max_len = 1\n    max_substring = s[0]\n    curr_len = 1\n    curr_substring = s[0]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            curr_len += 1\n            curr_substring += s[i]\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n                max_substring = curr_substring\n            curr_len = 1\n            curr_substring = s[i]\n    if curr_len > max_len:\n        max_len = curr_len\n        max_substring = curr_substring\n    return max_substring", "entry_point": "longest_consecutive_substring", "testcase": ["assert longest_consecutive_substring(\"aabbbcc\")==\"bbb\"", "assert longest_consecutive_substring(\"aabbccdd\")==\"aa\"", "assert longest_consecutive_substring(\"aaabba\")==\"aaa\""]}
{"seq_id": 26006106912, "instruction": "Write a python function to check if a given binary tree is a binary search tree (BST).\n\nA binary search tree is a binary tree where for every node, all nodes in its left subtree have values less than the node's value, and all nodes in its right subtree have values greater than the node's value.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_BST(root):\n    def validate(node, low=-float('inf'), high=float('inf')):\n        if not node:\n            return True\n        if not (low < node.val < high):\n            return False\n        return (validate(node.left, low, node.val) and\n                validate(node.right, node.val, high))\n\n    return validate(root)\n\n# Check function with provided data points\ndef check_BST():\n    root1 = TreeNode(2, TreeNode(1), TreeNode(3))\n    assert is_BST(root1) == True, \"Test case 1 failed\"\n\n    root2 = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))\n    assert is_BST(root2) == False, \"Test case 2 failed\"\n\n    root3 = TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(7)), TreeNode(15))\n    assert is_BST(root3) == True, \"Test case 3 failed\"\n\n    print(\"All test cases passed!\")\n\ncheck_BST()\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_BST(root):\n    def validate(node, low=-float('inf'), high=float('inf')):\n        if not node:\n            return True\n        if not (low < node.val < high):\n            return False\n        return (validate(node.left, low, node.val) and\n                validate(node.right, node.val, high))\n\n    return validate(root)\n\n# Check function with provided data points\ndef check_BST():\n    root1 = TreeNode(2, TreeNode(1), TreeNode(3))\n    assert is_BST(root1) == True, \"Test case 1 failed\"\n\n    root2 = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))\n    assert is_BST(root2) == False, \"Test case 2 failed\"\n\n    root3 = TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(7)), TreeNode(15))\n    assert is_BST(root3) == True, \"Test case 3 failed\"\n\n    print(\"All test cases passed!\")\n\ncheck_BST()", "entry_point": "is_BST", "testcase": ["# Check function with provided data points", "", "    # Constructing the trees from the problem statement", "", "check_BST()", "", "", ""]}
{"seq_id": 6525701269, "instruction": "Write a function that takes a list of integers and returns a list of all sublists of the given list in reverse order.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_sublists(lst):\n    result = []\n    for i in range(len(lst) - 1, -1, -1):\n        result.append(lst[i:])\n    return result\n```", "code": "def reverse_sublists(lst):\n    result = []\n    for i in range(len(lst) - 1, -1, -1):\n        result.append(lst[i:])\n    return result", "entry_point": "reverse_sublists", "testcase": ["assert reverse_sublists([1, 2, 3]) == [[3], [2, 3], [1, 2, 3]]", "assert reverse_sublists([4, 5, 6, 7]) == [[7], [6, 7], [5, 6, 7], [4, 5, 6, 7]]", "assert reverse_sublists([8, 9]) == [[9], [8, 9]]"]}
{"seq_id": 19012032761, "instruction": "Write a python function to find the maximum difference between two elements in the array such that larger element appears after the smaller number in the array.", "output": "Here is the code to solve this problem: \n```python\ndef find_Max_Diff(array):\n    max_diff = 0\n    min_element = array[0]\n    for i in range(1, len(array)):\n        if (array[i] - min_element) > max_diff:\n            max_diff = array[i] - min_element\n        if array[i] < min_element:\n            min_element = array[i]\n    return max_diff\n```", "code": "def find_Max_Diff(array):\n    max_diff = 0\n    min_element = array[0]\n    for i in range(1, len(array)):\n        if (array[i] - min_element) > max_diff:\n            max_diff = array[i] - min_element\n        if array[i] < min_element:\n            min_element = array[i]\n    return max_diff", "entry_point": "find_Max_Diff", "testcase": ["assert find_Max_Diff([2, 3, 10, 6, 4, 8, 1]) == 8", "assert find_Max_Diff([1, 2, 3, 4, 5]) == 4", "assert find_Max_Diff([7, 9, 5, 6, 3, 2]) == 2"]}
{"seq_id": 28358437794, "instruction": "Write a function to find the missing intervals in a sorted list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing_intervals(nums, lower, upper):\n    def get_interval_str(start, end):\n        return str(start) if start == end else f\"{start}->{end}\"\n\n    missing_intervals = []\n    start = lower\n\n    for num in nums:\n        if num > start:\n            missing_intervals.append(get_interval_str(start, num - 1))\n        start = num + 1\n\n    if start <= upper:\n        missing_intervals.append(get_interval_str(start, upper))\n\n    return missing_intervals\n```", "code": "def find_missing_intervals(nums, lower, upper):\n    def get_interval_str(start, end):\n        return str(start) if start == end else f\"{start}->{end}\"\n\n    missing_intervals = []\n    start = lower\n\n    for num in nums:\n        if num > start:\n            missing_intervals.append(get_interval_str(start, num - 1))\n        start = num + 1\n\n    if start <= upper:\n        missing_intervals.append(get_interval_str(start, upper))\n\n    return missing_intervals", "entry_point": "find_missing_intervals", "testcase": ["assert find_missing_intervals([1, 3, 6, 9], 1, 9) == [\"2\", \"4->5\", \"7->8\"]", "assert find_missing_intervals([0, 1, 3, 50, 75], 0, 99) == [\"2\", \"4->49\", \"51->74\", \"76->99\"]", "assert find_missing_intervals([1, 2, 3, 4], 1, 4) == []"]}
{"seq_id": 72973352090, "instruction": "Write a function to reverse the order of words in a given sentence.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_sentence_order(sentence):\n    words = sentence.split()\n    reversed_words = \" \".join(reversed(words))\n    return reversed_words\n```", "code": "def reverse_sentence_order(sentence):\n    words = sentence.split()\n    reversed_words = \" \".join(reversed(words))\n    return reversed_words", "entry_point": "reverse_sentence_order", "testcase": ["assert reverse_sentence_order(\"Hello world\") == \"world Hello\"", "assert reverse_sentence_order(\"This is a test sentence\") == \"sentence test a is This\"", "assert reverse_sentence_order(\"The quick brown fox jumps over the lazy dog\") == \"dog lazy the over jumps fox brown quick The\""]}
{"seq_id": 42425619120, "instruction": "Write a function to convert an integer to a Roman numeral.", "output": "Here is the code to solve this problem: \n```python\ndef int_to_roman(num):\n    value = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    symbols = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // value[i]):\n            roman_num += symbols[i]\n            num -= value[i]\n        i += 1\n    return roman_num\n```", "code": "def int_to_roman(num):\n    value = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    symbols = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // value[i]):\n            roman_num += symbols[i]\n            num -= value[i]\n        i += 1\n    return roman_num", "entry_point": "int_to_roman", "testcase": ["assert int_to_roman(3)==(\"III\")", "assert int_to_roman(58)==(\"LVIII\")", "assert int_to_roman(1994)==(\"MCMXCIV\")"]}
{"seq_id": 2798236803, "instruction": "Write a function to find all occurrences of a given number in a list and return their indices. If the number is not found, return [-1].", "output": "Here is the code to solve this problem: \n```python\ndef find_occurrences(L, x):\n    a=L\n    answer=[]\n    cp=0\n    \n    while x in a:\n        if len(answer)==0:\n            p=a.index(x)\n            answer.append(p)\n            a=a[p+1:]\n            cp=p+1\n        else:\n            p=a.index(x)\n            answer.append(p+cp)\n            a=a[p+1:]\n            cp=cp+p+1\n    \n    if len(answer)==0:\n        answer=[-1]\n        \n    return answer\n```", "code": "def find_occurrences(L, x):\n    a=L\n    answer=[]\n    cp=0\n    \n    while x in a:\n        if len(answer)==0:\n            p=a.index(x)\n            answer.append(p)\n            a=a[p+1:]\n            cp=p+1\n        else:\n            p=a.index(x)\n            answer.append(p+cp)\n            a=a[p+1:]\n            cp=cp+p+1\n    \n    if len(answer)==0:\n        answer=[-1]\n        \n    return answer", "entry_point": "find_occurrences", "testcase": ["assert find_occurrences([1, 2, 3, 4, 5], 6)==[-1]", "assert find_occurrences([1, 2, 3, 2, 4, 2], 2)==[1, 3, 5]", "assert find_occurrences([10, 20, 30, 20, 40, 20], 20)==[1, 3, 5]"]}
{"seq_id": 70331268495, "instruction": "Write a function to return the maximum and minimum elements in the given list using map function.", "output": "Here is the code to solve this problem: \n```python\ndef list_max_min(nums):\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num, min_num\n```", "code": "def list_max_min(nums):\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num, min_num", "entry_point": "list_max_min", "testcase": ["assert list_max_min([1, 2, 3, 4, 5])==(5, 1)", "assert list_max_min([-1, -2, -3, -4, -5])==(-1, -5)", "assert list_max_min([100, 200, 300, -400, 500])==(500, -400)"]}
{"seq_id": 8713258149, "instruction": "Write a function to find the second minimum element in a given array of integers.", "output": "Here is the code to solve this problem: \n```python\ndef second_minimum(arr):\n    unique_nums = list(set(arr))\n    if len(unique_nums) < 2:\n        return None\n    unique_nums.sort()\n    return unique_nums[1]\n```", "code": "def second_minimum(arr):\n    unique_nums = list(set(arr))\n    if len(unique_nums) < 2:\n        return None\n    unique_nums.sort()\n    return unique_nums[1]", "entry_point": "second_minimum", "testcase": ["assert second_minimum([2, 2, 1, 2, 1]) == 2", "assert second_minimum([5, 3, 9, 1]) == 3", "assert second_minimum([10, 10, 10]) == None"]}
{"seq_id": 963998013, "instruction": "Write a function to find the nth hexagonal number.", "output": "Here is the code to solve this problem: \n```python\ndef hexagonal_number(n): \n\treturn n * (2 * n - 1)\n```", "code": "def hexagonal_number(n): \n\treturn n * (2 * n - 1)", "entry_point": "hexagonal_number", "testcase": ["assert hexagonal_number(2) == 6.0", "assert hexagonal_number(1) == 1.0", "assert hexagonal_number(4) == 28.0", "assert hexagonal_number(5) == 45.0", "assert hexagonal_number(3) == 15.0"]}
{"seq_id": 32620098252, "instruction": "Write a function to merge multiple sorted arrays into a single sorted array.", "output": "Here is the code to solve this problem: \n```python\ndef merge_sorted_arrays(arrays):\n    from heapq import heappush, heappop\n    min_heap = []\n    result = []\n    for i, array in enumerate(arrays):\n        heappush(min_heap, (array[0], i, 0))\n    while min_heap:\n        val, array_idx, element_idx = heappop(min_heap)\n        result.append(val)\n        if element_idx + 1 < len(arrays[array_idx]):\n            next_tuple = (arrays[array_idx][element_idx + 1],\n                          array_idx,\n                          element_idx + 1)\n            heappush(min_heap, next_tuple)\n    return result\n```", "code": "def merge_sorted_arrays(arrays):\n    from heapq import heappush, heappop\n    min_heap = []\n    result = []\n    for i, array in enumerate(arrays):\n        heappush(min_heap, (array[0], i, 0))\n    while min_heap:\n        val, array_idx, element_idx = heappop(min_heap)\n        result.append(val)\n        if element_idx + 1 < len(arrays[array_idx]):\n            next_tuple = (arrays[array_idx][element_idx + 1],\n                          array_idx,\n                          element_idx + 1)\n            heappush(min_heap, next_tuple)\n    return result", "entry_point": "merge_sorted_arrays", "testcase": ["assert merge_sorted_arrays([[1,4,5],[1,3,4],[2,6]]) == [1,1,2,3,4,4,5,6]", "assert merge_sorted_arrays([[1,2,8],[3,6,7],[4,5]]) == [1,2,3,4,5,6,7,8]", "assert merge_sorted_arrays([[1,3,5],[2,4,6]]) == [1,2,3,4,5,6]"]}
{"seq_id": 43177889565, "instruction": "Write a function to check if a given number is a perfect cube.\n\nA perfect cube is an integer that is the cube of an integer. For example, 27 is a perfect cube because it can be written as 3^3.", "output": "Here is the code to solve this problem: \n```python\ndef is_perfect_cube(n):\n    if n < 0:\n        return False\n    cube_root = round(n ** (1/3))\n    return cube_root ** 3 == n\n```", "code": "def is_perfect_cube(n):\n    if n < 0:\n        return False\n    cube_root = round(n ** (1/3))\n    return cube_root ** 3 == n", "entry_point": "is_perfect_cube", "testcase": ["assert is_perfect_cube(64) == True", "assert is_perfect_cube(27) == True", "assert is_perfect_cube(125) == True", "assert is_perfect_cube(0) == True", "assert is_perfect_cube(25) == False", "assert is_perfect_cube(1) == True"]}
{"seq_id": 40026026223, "instruction": "Write a function to find the number of distinct islands in a given grid. An island is surrounded by water and formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.", "output": "Here is the code to solve this problem: \n```python\ndef dfs(grid, i, j, direction, shape):\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n        return\n    grid[i][j] = 0\n    shape.append(direction)\n    dfs(grid, i + 1, j, \"D\", shape)\n    dfs(grid, i - 1, j, \"U\", shape)\n    dfs(grid, i, j + 1, \"R\", shape)\n    dfs(grid, i, j - 1, \"L\", shape)\n\ndef count_distinct_islands(grid):\n    shapes = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                shape = []\n                dfs(grid, i, j, \"S\", shape)\n                shapes.add(tuple(shape))\n    return len(shapes)\n```", "code": "def dfs(grid, i, j, direction, shape):\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n        return\n    grid[i][j] = 0\n    shape.append(direction)\n    dfs(grid, i + 1, j, \"D\", shape)\n    dfs(grid, i - 1, j, \"U\", shape)\n    dfs(grid, i, j + 1, \"R\", shape)\n    dfs(grid, i, j - 1, \"L\", shape)\n\ndef count_distinct_islands(grid):\n    shapes = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                shape = []\n                dfs(grid, i, j, \"S\", shape)\n                shapes.add(tuple(shape))\n    return len(shapes)", "entry_point": "count_distinct_islands", "testcase": ["assert count_distinct_islands([[1, 1, 0, 1, 1], [1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [1, 1, 0, 1, 1]]) == 3", "assert count_distinct_islands([[1, 1, 0, 1, 1], [1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [1, 1, 0, 1, 1], [0, 1, 0, 1, 0]]) == 4", "assert count_distinct_islands([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 1]]) == 1"]}
{"seq_id": 29630270514, "instruction": "Write a python function to count the number of palindrome substrings in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef count_palindrome_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        # Odd length palindromes\n        total_count += expand_around_center(i, i)\n        # Even length palindromes\n        total_count += expand_around_center(i, i+1)\n    return total_count\n```", "code": "def count_palindrome_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        # Odd length palindromes\n        total_count += expand_around_center(i, i)\n        # Even length palindromes\n        total_count += expand_around_center(i, i+1)\n    return total_count", "entry_point": "count_palindrome_substrings", "testcase": ["assert count_palindrome_substrings(\"abc\") == 3", "assert count_palindrome_substrings(\"aaa\") == 6", "assert count_palindrome_substrings(\"racecar\") == 10"]}
{"seq_id": 6567350539, "instruction": "Write a python function to return the number of nodes in the given binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef count_nodes(root):\n    if not root:\n        return 0\n    return 1 + count_nodes(root.left) + count_nodes(root.right)\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef count_nodes(root):\n    if not root:\n        return 0\n    return 1 + count_nodes(root.left) + count_nodes(root.right)", "entry_point": "count_nodes", "testcase": ["assert count_nodes(TreeNode(1, TreeNode(2), TreeNode(3))) == 3", "assert count_nodes(TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))) == 5", "assert count_nodes(TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5, TreeNode(7), TreeNode(8))), TreeNode(3))) == 7"]}
{"seq_id": 31557454686, "instruction": "Write a python function to convert a binary string to a decimal number. However, your function should handle not only standard binary strings (i.e., strings containing only '0' and '1') but also strings with additional characters, which should be ignored in the conversion process.", "output": "Here is the code to solve this problem: \n```python\ndef bin_to_dec(binary):\n    decimal, i, n = 0, 0, 0\n    binary = binary[::-1]\n    for bit in binary:\n        if bit == '0' or bit == '1':\n            decimal = decimal + int(bit) * pow(2, i)\n            i += 1\n    return decimal\n```", "code": "def bin_to_dec(binary):\n    decimal, i, n = 0, 0, 0\n    binary = binary[::-1]\n    for bit in binary:\n        if bit == '0' or bit == '1':\n            decimal = decimal + int(bit) * pow(2, i)\n            i += 1\n    return decimal", "entry_point": "bin_to_dec", "testcase": ["assert bin_to_dec(\"1010\") == 10", "assert bin_to_dec(\"abc\") == 0", "assert bin_to_dec(\"1010ab\") == 10", "assert bin_to_dec(\"a1b0c1\") == 5"]}
{"seq_id": 2190241371, "instruction": "Write a function that will determine if a fraction can be simplified to a terminating decimal. A terminating decimal is a decimal that ends and does not repeat. For example, 1/2 = 0.5, which is a terminating decimal. However, 1/3 = 0.33333..., which is not a terminating decimal. The function will take two integers as parameters, representing the numerator and denominator of the fraction. It will return 1 if the fraction can be simplified to a terminating decimal, and 2 if not.", "output": "Here is the code to solve this problem: \n```python\ndef findDivisor(n):\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0 :\n                if i == 2 or i == 5:\n                    continue\n                else :\n                    return False\n                break\n    return True\n\ndef findDiversorArray(n):\n    array = []\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0 :\n                n //= i\n                array.append(i)\n                break  \n    return array\n\ndef is_terminating_decimal(a, b):\n    aArray = findDiversorArray(a)\n    bArray = findDiversorArray(b)\n    for i in aArray:\n        if i in bArray:\n            bArray.remove(i)\n    for i in list(set(bArray)) :\n        if i != 2 and i != 5:\n            return 2\n    return 1\n```", "code": "def findDivisor(n):\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0 :\n                if i == 2 or i == 5:\n                    continue\n                else :\n                    return False\n                break\n    return True\n\ndef findDiversorArray(n):\n    array = []\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0 :\n                n //= i\n                array.append(i)\n                break  \n    return array\n\ndef is_terminating_decimal(a, b):\n    aArray = findDiversorArray(a)\n    bArray = findDiversorArray(b)\n    for i in aArray:\n        if i in bArray:\n            bArray.remove(i)\n    for i in list(set(bArray)) :\n        if i != 2 and i != 5:\n            return 2\n    return 1", "entry_point": "is_terminating_decimal", "testcase": ["assert is_terminating_decimal(1, 3) == 2", "assert is_terminating_decimal(1, 2) == 1", "assert is_terminating_decimal(3, 6) == 1", "assert is_terminating_decimal(5, 10) == 1", "assert is_terminating_decimal(1, 10) == 1"]}
{"seq_id": 74593032299, "instruction": "Write a function to implement a simplified version of a spell checker that corrects misspelled words based on a dictionary. The spell checker should replace each incorrect word with the correct one if the correct word is in the dictionary and it differs by one character from the incorrect one. If there are multiple possible corrections, return the lexicographically smallest one.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef spell_check(dictionary, word):\n    def one_char_diff(w1, w2):\n        diff = 0\n        for c1, c2 in zip(w1, w2):\n            if c1 != c2:\n                diff += 1\n                if diff > 1:\n                    return False\n        return diff == 1\n\n    candidates = [w for w in dictionary if one_char_diff(w, word)]\n    return min(candidates) if candidates else word\n```", "code": "from collections import defaultdict\n\ndef spell_check(dictionary, word):\n    def one_char_diff(w1, w2):\n        diff = 0\n        for c1, c2 in zip(w1, w2):\n            if c1 != c2:\n                diff += 1\n                if diff > 1:\n                    return False\n        return diff == 1\n\n    candidates = [w for w in dictionary if one_char_diff(w, word)]\n    return min(candidates) if candidates else word", "entry_point": "spell_check", "testcase": ["assert spell_check([\"cat\", \"bat\", \"rat\"], \"cot\") == \"cat\"", "assert spell_check([\"apple\", \"banana\", \"orange\"], \"appla\") == \"apple\"", "assert spell_check([\"hello\", \"world\"], \"hwllo\") == \"hello\""]}
{"seq_id": 29844552577, "instruction": "Write a python function to find the number of ways to express n as the sum of 1, 3, and 4.", "output": "Here is the code to solve this problem: \n```python\ndef ways_to_express(n):\n    if n == 1 or n == 2:\n        return 1\n    if n == 3:\n        return 2\n    ways = [0] * (n + 1)\n    ways[1], ways[2], ways[3] = 1, 1, 2\n    for i in range(4, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 3] + ways[i - 4]\n    return ways[n]\n```", "code": "def ways_to_express(n):\n    if n == 1 or n == 2:\n        return 1\n    if n == 3:\n        return 2\n    ways = [0] * (n + 1)\n    ways[1], ways[2], ways[3] = 1, 1, 2\n    for i in range(4, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 3] + ways[i - 4]\n    return ways[n]", "entry_point": "ways_to_express", "testcase": ["assert ways_to_express(1) == 1", "assert ways_to_express(2) == 1", "assert ways_to_express(3) == 2", "assert ways_to_express(4) == 3"]}
{"seq_id": 39032214968, "instruction": "Write a python function to find the number of islands in a given 2D binary grid.", "output": "Here is the code to solve this problem: \n```python\ndef numIslands(grid):\n    def dfs(i, j):\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n            return\n        grid[i][j] = 0\n        dfs(i+1, j)\n        dfs(i-1, j)\n        dfs(i, j+1)\n        dfs(i, j-1)\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    return count\n```", "code": "def numIslands(grid):\n    def dfs(i, j):\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n            return\n        grid[i][j] = 0\n        dfs(i+1, j)\n        dfs(i-1, j)\n        dfs(i, j+1)\n        dfs(i, j-1)\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    return count", "entry_point": "numIslands", "testcase": ["assert numIslands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 3", "assert numIslands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,1,0],[0,0,0,1,1]]) == 2", "assert numIslands([[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]]) == 1"]}
{"seq_id": 29292471404, "instruction": "Write a python function to find the largest sum of non-adjacent elements in an array.", "output": "Here is the code to solve this problem: \n```python\ndef largest_nonadjacent_sum(nums):\n    prev, curr = 0, 0\n    for num in nums:\n        prev, curr = curr, max(curr, prev + num)\n    return curr\n```", "code": "def largest_nonadjacent_sum(nums):\n    prev, curr = 0, 0\n    for num in nums:\n        prev, curr = curr, max(curr, prev + num)\n    return curr", "entry_point": "largest_nonadjacent_sum", "testcase": ["assert largest_nonadjacent_sum([1, 2, 3, 4, 5, 6]) == 12", "assert largest_nonadjacent_sum([2, 4, 6, 2, 5]) == 13", "assert largest_nonadjacent_sum([5, 1, 1, 5]) == 10", "assert largest_nonadjacent_sum([-8, 4, -3, 2, 3, 4]) == 10"]}
{"seq_id": 6059747314, "instruction": "Write a function to find the number of binary strings of length N without consecutive 1s.", "output": "Here is the code to solve this problem: \n```python\ndef no_consecutive_ones(N):\n    if N == 1:\n        return 2\n    a, b = 1, 2\n    for _ in range(2, N):\n        a, b = b, a + b\n    return a + b\n```", "code": "def no_consecutive_ones(N):\n    if N == 1:\n        return 2\n    a, b = 1, 2\n    for _ in range(2, N):\n        a, b = b, a + b\n    return a + b", "entry_point": "no_consecutive_ones", "testcase": ["assert no_consecutive_ones(3) == 5", "assert no_consecutive_ones(4) == 8", "assert no_consecutive_ones(2) == 3"]}
{"seq_id": 1185925844, "instruction": "Write a function to calculate the total number of ways you can make change for a given amount using a set of coin denominations.", "output": "Here is the code to solve this problem: \n```python\ndef make_change(amount, coins):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] += dp[x - coin]\n    return dp[amount]\n```", "code": "def make_change(amount, coins):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] += dp[x - coin]\n    return dp[amount]", "entry_point": "make_change", "testcase": ["assert make_change(5, [1, 2, 5]) == 4", "assert make_change(10, [10]) == 1", "assert make_change(3, [2]) == 0"]}
{"seq_id": 27382697404, "instruction": "Write a function to generate the smallest beautiful number greater than or equal to a given number. A beautiful number is a number that does not have any odd digits.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_beautiful_number(n):\n    \"\"\"\n    Generates the smallest beautiful number greater than or equal to n.\n    A beautiful number does not have any odd digits.\n    \"\"\"\n    # Convert the number to a string to easily manipulate its digits\n    n_str = str(n)\n    length = len(n_str)\n    \n    # Find the first odd digit in the number\n    for i in range(length):\n        if int(n_str[i]) % 2 != 0:\n            # Increment the digit by 1 if it's not '9'\n            if n_str[i] != '9':\n                n_str = n_str[:i] + str(int(n_str[i]) + 1) + '0' * (length - i - 1)\n                break\n            # If the digit is '9', increment the previous digit and handle the carry\n            else:\n                carry = 1\n                j = i - 1\n                while j >= 0 and carry == 1:\n                    if n_str[j] != '8':\n                        n_str = n_str[:j] + str(int(n_str[j]) + 1) + '0' * (i - j - 1)\n                        carry = 0\n                    else:\n                        n_str = n_str[:j] + '0' + n_str[j + 1:i] + '0' * (length - i)\n                        j -= 1\n                if j < 0 and carry == 1:\n                    n_str = '1' + '0' * length\n                break\n    \n    return int(n_str)\n```", "code": "def smallest_beautiful_number(n):\n    \"\"\"\n    Generates the smallest beautiful number greater than or equal to n.\n    A beautiful number does not have any odd digits.\n    \"\"\"\n    # Convert the number to a string to easily manipulate its digits\n    n_str = str(n)\n    length = len(n_str)\n    \n    # Find the first odd digit in the number\n    for i in range(length):\n        if int(n_str[i]) % 2 != 0:\n            # Increment the digit by 1 if it's not '9'\n            if n_str[i] != '9':\n                n_str = n_str[:i] + str(int(n_str[i]) + 1) + '0' * (length - i - 1)\n                break\n            # If the digit is '9', increment the previous digit and handle the carry\n            else:\n                carry = 1\n                j = i - 1\n                while j >= 0 and carry == 1:\n                    if n_str[j] != '8':\n                        n_str = n_str[:j] + str(int(n_str[j]) + 1) + '0' * (i - j - 1)\n                        carry = 0\n                    else:\n                        n_str = n_str[:j] + '0' + n_str[j + 1:i] + '0' * (length - i)\n                        j -= 1\n                if j < 0 and carry == 1:\n                    n_str = '1' + '0' * length\n                break\n    \n    return int(n_str)", "entry_point": "smallest_beautiful_number", "testcase": ["assert smallest_beautiful_number(98) == 100", "assert smallest_beautiful_number(123) == 200", "assert smallest_beautiful_number(999) == 1000"]}
{"seq_id": 28622019944, "instruction": "Write a python function to find the product of two numbers without using the multiplication operator.", "output": "Here is the code to solve this problem: \n```python\ndef multiply_without_asterisk(x, y):\n    result = 0\n    while(y > 0):\n        if(y & 1):\n            result = result + x\n        x = x << 1\n        y = y >> 1\n    return result\n```", "code": "def multiply_without_asterisk(x, y):\n    result = 0\n    while(y > 0):\n        if(y & 1):\n            result = result + x\n        x = x << 1\n        y = y >> 1\n    return result", "entry_point": "multiply_without_asterisk", "testcase": ["assert multiply_without_asterisk(18, 7) == 126", "assert multiply_without_asterisk(5, 4) == 20", "assert multiply_without_asterisk(123, 456) == 56088"]}
{"seq_id": 27240095757, "instruction": "Write a function to find the length of the longest substring with exactly k distinct characters.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef longest_substring_with_k_distinct_characters(s: str, k: int) -> int:\n    if not s or not k:\n        return 0\n\n    res = start = end = 0\n    seen = defaultdict(int)\n    for i, c in enumerate(s):\n        seen[c] += 1\n        if len(seen) <= k:\n            res = max(res, end-start+1)\n        else:\n            while len(seen) > k:\n                seen[s[start]] -= 1\n                if seen[s[start]] == 0:\n                    del seen[s[start]]\n                start += 1\n        end += 1\n    return res\n```", "code": "from collections import defaultdict\n\ndef longest_substring_with_k_distinct_characters(s: str, k: int) -> int:\n    if not s or not k:\n        return 0\n\n    res = start = end = 0\n    seen = defaultdict(int)\n    for i, c in enumerate(s):\n        seen[c] += 1\n        if len(seen) <= k:\n            res = max(res, end-start+1)\n        else:\n            while len(seen) > k:\n                seen[s[start]] -= 1\n                if seen[s[start]] == 0:\n                    del seen[s[start]]\n                start += 1\n        end += 1\n    return res", "entry_point": "longest_substring_with_k_distinct_characters", "testcase": ["assert longest_substring_with_k_distinct_characters(\"aabbcc\", 1) == 2", "assert longest_substring_with_k_distinct_characters(\"eceba\", 2) == 3", "assert longest_substring_with_k_distinct_characters(\"aa\", 1) == 2", "assert longest_substring_with_k_distinct_characters(\"aabbcc\", 3) == 6", "assert longest_substring_with_k_distinct_characters(\"aabacbebebe\", 3) == 7"]}
{"seq_id": 6240458737, "instruction": "Write a function to find the pair of parentheses in a given string that encloses the longest possible substring.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_substring(s):\n    stack = []\n    max_length = 0\n    max_pos = 0\n    for i, ch in enumerate(s):\n        if ch == '(':\n            stack.append(i)\n        elif ch == ')' and stack:\n            pos = stack.pop()\n            length = i - pos + 1\n            if length > max_length:\n                max_length = length\n                max_pos = pos\n    return '', max_pos, max_pos + max_length\n```", "code": "def find_longest_substring(s):\n    stack = []\n    max_length = 0\n    max_pos = 0\n    for i, ch in enumerate(s):\n        if ch == '(':\n            stack.append(i)\n        elif ch == ')' and stack:\n            pos = stack.pop()\n            length = i - pos + 1\n            if length > max_length:\n                max_length = length\n                max_pos = pos\n    return '', max_pos, max_pos + max_length", "entry_point": "find_longest_substring", "testcase": ["assert find_longest_substring('()()()()') == ('', 0, 2)", "assert find_longest_substring('((()))') == ('', 0, 6)", "assert find_longest_substring('(()())') == ('', 0, 6)", "assert find_longest_substring('()()()') == ('', 0, 2)"]}
{"seq_id": 24269600575, "instruction": "Write a function to find the spiral order traversal of a matrix.", "output": "Here is the code to solve this problem: \n```python\ndef spiralTraversal(matrix):\n    result = []\n    while matrix:\n        result += matrix.pop(0)\n        if matrix and matrix[0]:\n            for row in matrix:\n                result.append(row.pop())\n        if matrix:\n            result += matrix.pop()[::-1]\n        if matrix and matrix[0]:\n            for row in matrix[::-1]:\n                result.append(row.pop(0))\n    return result\n```", "code": "def spiralTraversal(matrix):\n    result = []\n    while matrix:\n        result += matrix.pop(0)\n        if matrix and matrix[0]:\n            for row in matrix:\n                result.append(row.pop())\n        if matrix:\n            result += matrix.pop()[::-1]\n        if matrix and matrix[0]:\n            for row in matrix[::-1]:\n                result.append(row.pop(0))\n    return result", "entry_point": "spiralTraversal", "testcase": ["assert spiralTraversal([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]", "assert spiralTraversal([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == [1, 2, 3, 4, 5, 10, 15, 14, 13, 12, 11, 6, 7, 8, 9]", "assert spiralTraversal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4, 5]"]}
{"seq_id": 688064499, "instruction": "Write a function to calculate the Fibonacci sequence up to a given number n.", "output": "Here is the code to solve this problem: \n```python\ndef fibonacci_sequence(n):\n  sequence = [0]\n  a, b = 0, 1\n  while b < n:\n    sequence.append(b)\n    a, b = b, a + b\n  return sequence\n```", "code": "def fibonacci_sequence(n):\n  sequence = [0]\n  a, b = 0, 1\n  while b < n:\n    sequence.append(b)\n    a, b = b, a + b\n  return sequence", "entry_point": "fibonacci_sequence", "testcase": ["assert fibonacci_sequence(15)==[0, 1, 1, 2, 3, 5, 8, 13]", "assert fibonacci_sequence(10)==[0, 1, 1, 2, 3, 5, 8]", "assert fibonacci_sequence(1)==[0]"]}
{"seq_id": 39730407082, "instruction": "Write a python function to find the largest element in a stack without removing any element from the stack.", "output": "Here is the code to solve this problem: \n```python\ndef largest_element_in_stack(stack):\n    return max(stack)\n```", "code": "def largest_element_in_stack(stack):\n    return max(stack)", "entry_point": "largest_element_in_stack", "testcase": ["assert largest_element_in_stack([1, 3, 5, 7, 9]) == 9", "assert largest_element_in_stack([10, 20, 30, 40, 50]) == 50", "assert largest_element_in_stack([5, 1, 4, 2, 3]) == 5"]}
{"seq_id": 3169134070, "instruction": "Write a function to convert a 2D matrix into a single list by spirally traversing the matrix.", "output": "Here is the code to solve this problem: \n```python\ndef spiral_matrix(matrix):\n    result = []\n    while matrix:\n        result += matrix.pop(0)\n        if matrix and matrix[0]:\n            for row in matrix:\n                result.append(row.pop())\n        if matrix:\n            result += matrix.pop()[::-1]\n        if matrix and matrix[0]:\n            for row in matrix[::-1]:\n                result.append(row.pop(0))\n    return result\n```", "code": "def spiral_matrix(matrix):\n    result = []\n    while matrix:\n        result += matrix.pop(0)\n        if matrix and matrix[0]:\n            for row in matrix:\n                result.append(row.pop())\n        if matrix:\n            result += matrix.pop()[::-1]\n        if matrix and matrix[0]:\n            for row in matrix[::-1]:\n                result.append(row.pop(0))\n    return result", "entry_point": "spiral_matrix", "testcase": ["assert spiral_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]", "assert spiral_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4, 5]", "assert spiral_matrix([[1]]) == [1]"]}
{"seq_id": 32296308066, "instruction": "Write a function to reverse a string in place. The function should not use any built-in reverse functions or create a new string. Instead, it should modify the original string directly.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_string_in_place(s):\n    chars = list(s)\n    left, right = 0, len(chars) - 1\n    while left < right:\n        chars[left], chars[right] = chars[right], chars[left]\n        left, right = left + 1, right - 1\n    return ''.join(chars)\n```", "code": "def reverse_string_in_place(s):\n    chars = list(s)\n    left, right = 0, len(chars) - 1\n    while left < right:\n        chars[left], chars[right] = chars[right], chars[left]\n        left, right = left + 1, right - 1\n    return ''.join(chars)", "entry_point": "reverse_string_in_place", "testcase": ["assert reverse_string_in_place(\"python\") == \"nohtyp\"", "assert reverse_string_in_place(\"12345\") == \"54321\"", "assert reverse_string_in_place(\"hello\") == \"olleh\""]}
{"seq_id": 36663340693, "instruction": "Write a function that matches a string that has an 'a' followed by three 'b's.", "output": "Here is the code to solve this problem: \n```python\nimport re\ndef text_match_three_b(text):\n        patterns = 'ab{3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'\n```", "code": "import re\ndef text_match_three_b(text):\n        patterns = 'ab{3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "entry_point": "text_match_three_b", "testcase": ["assert text_match_three_b(\"abbb\")==('Found a match!')", "assert text_match_three_b(\"ababab\")==('Not matched!')", "assert text_match_three_b(\"aabb\")==('Not matched!')"]}
{"seq_id": 7356539077, "instruction": "Write a python function to find the maximum number of water bottles that can be drunk given the total number of water bottles and the exchange policy. The exchange policy is that you can exchange 'numExchange' empty bottles for one full water bottle.", "output": "Here is the code to solve this problem: \n```python\ndef max_bottles(numBottles, numExchange):\n    drank = numBottles\n    empty = numBottles\n\n    while empty >= numExchange:\n        new_bottles = empty // numExchange\n        drank += new_bottles\n        empty = empty % numExchange + new_bottles\n\n    return drank\n```", "code": "def max_bottles(numBottles, numExchange):\n    drank = numBottles\n    empty = numBottles\n\n    while empty >= numExchange:\n        new_bottles = empty // numExchange\n        drank += new_bottles\n        empty = empty % numExchange + new_bottles\n\n    return drank", "entry_point": "max_bottles", "testcase": ["assert max_bottles(15, 4) == 19", "assert max_bottles(9, 3) == 13", "assert max_bottles(5, 5) == 6"]}
{"seq_id": 8800142396, "instruction": "Write a Python function to find the shortest distance between two nodes in a graph using Breadth First Search (BFS).", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef shortest_distance_bfs(graph, start, end):\n    queue = deque([(start, 0)])\n    visited = set()\n    \n    while queue:\n        current, distance = queue.popleft()\n        if current == end:\n            return distance\n        if current not in visited:\n            visited.add(current)\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    queue.append((neighbor, distance + 1))\n    return -1\n```", "code": "from collections import deque\n\ndef shortest_distance_bfs(graph, start, end):\n    queue = deque([(start, 0)])\n    visited = set()\n    \n    while queue:\n        current, distance = queue.popleft()\n        if current == end:\n            return distance\n        if current not in visited:\n            visited.add(current)\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    queue.append((neighbor, distance + 1))\n    return -1", "entry_point": "shortest_distance_bfs", "testcase": ["assert shortest_distance_bfs({'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}, 'B', 'D') == 1", "assert shortest_distance_bfs({'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}, 'D', 'E') == 2", "assert shortest_distance_bfs({'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}, 'A', 'F') == 2"]}
{"seq_id": 72139807030, "instruction": "Write a function to find the missing number in a given list of numbers which contains all numbers from 1 to n with one missing.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    list_sum = sum(nums)\n    return total_sum - list_sum\n```", "code": "def find_missing(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    list_sum = sum(nums)\n    return total_sum - list_sum", "entry_point": "find_missing", "testcase": ["assert find_missing([1, 3, 4, 5, 6]) == 2", "assert find_missing([2, 3, 4, 5, 6]) == 1", "assert find_missing([1, 2, 4, 5, 6]) == 3"]}
{"seq_id": 40616325038, "instruction": "Write a function to find the smallest palindrome larger than the given number.", "output": "Here is the code to solve this problem: \n```python\ndef next_palindrome(n):\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n\n```", "code": "def next_palindrome(n):\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n", "entry_point": "next_palindrome", "testcase": ["assert next_palindrome(123) == 131", "assert next_palindrome(531) == 535", "assert next_palindrome(1991) == 2002"]}
{"seq_id": 14325520469, "instruction": "Write a function that calculates the total number of set bits (1s) in the binary representation of all numbers from 1 to n.", "output": "Here is the code to solve this problem: \n```python\ndef total_set_bits(n):\n    total_bits = 0\n    for i in range(1, n+1):\n        total_bits += bin(i).count('1')\n    return total_bits\n```", "code": "def total_set_bits(n):\n    total_bits = 0\n    for i in range(1, n+1):\n        total_bits += bin(i).count('1')\n    return total_bits", "entry_point": "total_set_bits", "testcase": ["assert total_set_bits(3) == 4", "assert total_set_bits(6) == 9", "assert total_set_bits(5) == 7"]}
{"seq_id": 34180996165, "instruction": "Write a python function to find the smallest subarray with a given sum.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_subarray_with_given_sum(arr, target):\n    window_sum = 0\n    min_length = float('inf')\n    window_start = 0\n\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end]\n        while window_sum >= target:\n            min_length = min(min_length, window_end - window_start + 1)\n            window_sum -= arr[window_start]\n            window_start += 1\n\n    return min_length if min_length != float('inf') else 0\n```", "code": "def smallest_subarray_with_given_sum(arr, target):\n    window_sum = 0\n    min_length = float('inf')\n    window_start = 0\n\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end]\n        while window_sum >= target:\n            min_length = min(min_length, window_end - window_start + 1)\n            window_sum -= arr[window_start]\n            window_start += 1\n\n    return min_length if min_length != float('inf') else 0", "entry_point": "smallest_subarray_with_given_sum", "testcase": ["assert smallest_subarray_with_given_sum([2, 1, 5, 2, 3, 2], 7) == 2", "assert smallest_subarray_with_given_sum([3, 4, 1, 1, 6], 8) == 3", "assert smallest_subarray_with_given_sum([2, 1, 5, 2, 8], 7) == 1"]}
{"seq_id": 30347409212, "instruction": "Write a function to find the shortest path in a grid with obstacles and a given number of obstacles that can be eliminated. The grid is represented as a 2D list where 0 represents an empty space and 1 represents an obstacle. The function should return the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if the path does not exist.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef shortest_path(grid, k):\n    rows, cols = len(grid), len(grid[0])\n\n    if k >= rows - 1 + cols -1:\n        return rows + cols - 2\n    \n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    queue = deque([(0, 0, k, 0)])\n\n    visited = set([(0, 0, k)])\n\n    while queue:\n\n        x, y, remaining_k, path = queue.popleft()\n\n        if (x, y) == (rows-1, cols-1):\n            return path \n        \n        for direction in directions:\n            new_x = x + direction[0]\n            new_y = y + direction[1]\n\n            if (0 <= new_x < rows) and (0 <= new_y < cols):\n                new_k = remaining_k - grid[new_x][new_y]\n                    \n                if new_k >= 0 and (new_x, new_y, new_k) not in visited:\n                    visited.add((new_x, new_y, new_k))\n                    queue.append((new_x, new_y, new_k, path+1))\n            \n    return -1\n```", "code": "from collections import deque\n\ndef shortest_path(grid, k):\n    rows, cols = len(grid), len(grid[0])\n\n    if k >= rows - 1 + cols -1:\n        return rows + cols - 2\n    \n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    queue = deque([(0, 0, k, 0)])\n\n    visited = set([(0, 0, k)])\n\n    while queue:\n\n        x, y, remaining_k, path = queue.popleft()\n\n        if (x, y) == (rows-1, cols-1):\n            return path \n        \n        for direction in directions:\n            new_x = x + direction[0]\n            new_y = y + direction[1]\n\n            if (0 <= new_x < rows) and (0 <= new_y < cols):\n                new_k = remaining_k - grid[new_x][new_y]\n                    \n                if new_k >= 0 and (new_x, new_y, new_k) not in visited:\n                    visited.add((new_x, new_y, new_k))\n                    queue.append((new_x, new_y, new_k, path+1))\n            \n    return -1", "entry_point": "shortest_path", "testcase": ["assert shortest_path([[0,1,1],[1,1,1],[1,0,0]], 1) == -1", "assert shortest_path([[0,0,0],[0,0,0],[0,0,0]], 2) == 4", "assert shortest_path([[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], 1) == 6"]}
{"seq_id": 71840476762, "instruction": "Write a python function to calculate the sum of all the elements in a 2D list.", "output": "Here is the code to solve this problem: \n```python\ndef sum_2D_list(matrix):\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum\n```", "code": "def sum_2D_list(matrix):\n    total_sum = 0\n    for row in matrix:\n        total_sum += sum(row)\n    return total_sum", "entry_point": "sum_2D_list", "testcase": ["assert sum_2D_list([[1,2,3],[4,5,6],[7,8,9]])==45", "assert sum_2D_list([[1,2],[3,4]])==10", "assert sum_2D_list([[1,1,1],[1,1,1],[1,1,1]])==9"]}
{"seq_id": 38218376659, "instruction": "Write a function to find the longest palindromic substring in the given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_palindromic_substring(s):\n    if len(s) < 2:\n        return s\n    start = 0\n    max_length = 1\n    for i in range(len(s)):\n        if i - max_length >= 1 and s[i-max_length-1:i+1] == s[i-max_length-1:i+1][::-1]:\n            start = i - max_length - 1\n            max_length += 2\n            continue\n        if i - max_length >= 0 and s[i-max_length:i+1] == s[i-max_length:i+1][::-1]:\n            start = i - max_length\n            max_length += 1\n    return s[start:start + max_length]\n```", "code": "def longest_palindromic_substring(s):\n    if len(s) < 2:\n        return s\n    start = 0\n    max_length = 1\n    for i in range(len(s)):\n        if i - max_length >= 1 and s[i-max_length-1:i+1] == s[i-max_length-1:i+1][::-1]:\n            start = i - max_length - 1\n            max_length += 2\n            continue\n        if i - max_length >= 0 and s[i-max_length:i+1] == s[i-max_length:i+1][::-1]:\n            start = i - max_length\n            max_length += 1\n    return s[start:start + max_length]", "entry_point": "longest_palindromic_substring", "testcase": ["assert longest_palindromic_substring(\"cbbd\") == \"bb\"", "assert longest_palindromic_substring(\"babad\") == \"bab\"", "assert longest_palindromic_substring(\"ac\") == \"a\"", "assert longest_palindromic_substring(\"a\") == \"a\""]}
{"seq_id": 36405426813, "instruction": "Write a python function to find the two largest elements in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef two_largest(arr):\n    if len(arr) < 2:\n        return []\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return [max2, max1]\n```", "code": "def two_largest(arr):\n    if len(arr) < 2:\n        return []\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return [max2, max1]", "entry_point": "two_largest", "testcase": ["assert two_largest([1, 2, 3, 4, 5]) == [4, 5]", "assert two_largest([1, 2]) == [1, 2]", "assert two_largest([5, 4, 3, 2, 1]) == [4, 5]"]}
{"seq_id": 40040715605, "instruction": "Write a function to find the number of longest strictly increasing contiguous subarrays in an integer array.", "output": "Here is the code to solve this problem: \n```python\ndef count_longest_increasing_subarrays(arr):\n    if not arr:\n        return 0\n    max_len = 1\n    current_len = 1\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_len += 1\n        else:\n            if current_len > max_len:\n                max_len = current_len\n                count = 1\n            elif current_len == max_len:\n                count += 1\n            current_len = 1\n    if current_len > max_len:\n        max_len = current_len\n        count = 1\n    elif current_len == max_len:\n        count += 1\n    return count\n```", "code": "def count_longest_increasing_subarrays(arr):\n    if not arr:\n        return 0\n    max_len = 1\n    current_len = 1\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_len += 1\n        else:\n            if current_len > max_len:\n                max_len = current_len\n                count = 1\n            elif current_len == max_len:\n                count += 1\n            current_len = 1\n    if current_len > max_len:\n        max_len = current_len\n        count = 1\n    elif current_len == max_len:\n        count += 1\n    return count", "entry_point": "count_longest_increasing_subarrays", "testcase": ["assert count_longest_increasing_subarrays([1, 2, 3, 2, 3, 4, 5]) == 1", "assert count_longest_increasing_subarrays([1, 2, 2, 3, 4, 1, 2, 3, 4, 5, 5, 6]) == 1", "assert count_longest_increasing_subarrays([1, 2, 3, 4, 5]) == 1"]}
{"seq_id": 27190691459, "instruction": "Write a function to find the length of the longest balanced parenthesis substring in a given string. A balanced parenthesis substring has matching opening and closing parenthesis and can contain other balanced substrings inside it.", "output": "Here is the code to solve this problem: \n```python\ndef longest_balanced_parenthesis(s: str) -> int:\n    \"\"\"\n    :param s: A string containing only '(' and ')'.\n    :return: The length of the longest balanced parenthesis substring.\n    \"\"\"\n    stack = [-1]\n    max_length = 0\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        else:\n            stack.pop()\n            if not stack:\n                stack.append(i)\n            else:\n                max_length = max(max_length, i - stack[-1])\n    return max_length\n```", "code": "def longest_balanced_parenthesis(s: str) -> int:\n    \"\"\"\n    :param s: A string containing only '(' and ')'.\n    :return: The length of the longest balanced parenthesis substring.\n    \"\"\"\n    stack = [-1]\n    max_length = 0\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        else:\n            stack.pop()\n            if not stack:\n                stack.append(i)\n            else:\n                max_length = max(max_length, i - stack[-1])\n    return max_length", "entry_point": "longest_balanced_parenthesis", "testcase": ["assert longest_balanced_parenthesis(\"(()())\") == 6", "assert longest_balanced_parenthesis(\")()())\") == 4", "assert longest_balanced_parenthesis(\"()(()\") == 2", "assert longest_balanced_parenthesis(\"((())\") == 4"]}
{"seq_id": 22665186429, "instruction": "Write a python function to find the median of three given integers without using any built-in sorting function.", "output": "Here is the code to solve this problem: \n```python\ndef medianOfThree(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return b\n    elif b <= a <= c or c <= a <= b:\n        return a\n    else:\n        return c\n```", "code": "def medianOfThree(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return b\n    elif b <= a <= c or c <= a <= b:\n        return a\n    else:\n        return c", "entry_point": "medianOfThree", "testcase": ["assert medianOfThree(10, 10, 10) == 10", "assert medianOfThree(5, 1, 8) == 5", "assert medianOfThree(2, 7, 3) == 3"]}
{"seq_id": 10819726443, "instruction": "Write a function that converts a decimal number to its binary representation and vice versa. The function should take two parameters: the number to convert and a boolean flag indicating the direction of conversion. If the flag is True, convert from decimal to binary; if False, convert from binary to decimal.", "output": "Here is the code to solve this problem: \n```python\ndef decimal_binary_converter(number, to_binary=True):\n    if to_binary:\n        return bin(number).replace(\"0b\", \"\")\n    else:\n        return int(number, 2)\n```", "code": "def decimal_binary_converter(number, to_binary=True):\n    if to_binary:\n        return bin(number).replace(\"0b\", \"\")\n    else:\n        return int(number, 2)", "entry_point": "decimal_binary_converter", "testcase": ["assert decimal_binary_converter('1010', False) == 10", "assert decimal_binary_converter(10, True) == '1010'", "assert decimal_binary_converter('11111111', False) == 255", "assert decimal_binary_converter(255, True) == '11111111'"]}
{"seq_id": 12523338956, "instruction": "Write a Python function that finds the longest consecutive sequence of a single character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consecutive_char(s: str):\n    if not s:\n        return \"\", 0\n    \n    max_char = current_char = s[0]\n    max_length = current_length = 1\n    \n    for char in s[1:]:\n        if char == current_char:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n                max_char = current_char\n            current_char = char\n            current_length = 1\n    \n    if current_length > max_length:\n        max_length = current_length\n        max_char = current_char\n    \n    return max_char, max_length\n```", "code": "def longest_consecutive_char(s: str):\n    if not s:\n        return \"\", 0\n    \n    max_char = current_char = s[0]\n    max_length = current_length = 1\n    \n    for char in s[1:]:\n        if char == current_char:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n                max_char = current_char\n            current_char = char\n            current_length = 1\n    \n    if current_length > max_length:\n        max_length = current_length\n        max_char = current_char\n    \n    return max_char, max_length", "entry_point": "longest_consecutive_char", "testcase": ["assert longest_consecutive_char(\"aabbcc\") == (\"a\", 2)", "assert longest_consecutive_char(\"aabbbcc\") == (\"b\", 3)", "assert longest_consecutive_char(\"\") == (\"\", 0)", "assert longest_consecutive_char(\"abc\") == (\"a\", 1)"]}
{"seq_id": 44237153322, "instruction": "Write a python function to reverse the digits of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_number(n):\n    reverse = 0\n    while n > 0:\n        remainder = n % 10\n        reverse = (reverse * 10) + remainder\n        n = n // 10\n    return reverse\n```", "code": "def reverse_number(n):\n    reverse = 0\n    while n > 0:\n        remainder = n % 10\n        reverse = (reverse * 10) + remainder\n        n = n // 10\n    return reverse", "entry_point": "reverse_number", "testcase": ["assert reverse_number(12345) == 54321", "assert reverse_number(987654321) == 123456789", "assert reverse_number(100) == 1"]}
{"seq_id": 3088380570, "instruction": "Write a python function to merge two sorted arrays into one sorted array in-place without using extra space.", "output": "Here is the code to solve this problem: \n```python\ndef merge_arrays(nums1, m, nums2, n):\n    while m > 0 and n > 0:\n        if nums1[m - 1] > nums2[n - 1]:\n            nums1[m + n - 1] = nums1[m - 1]\n            m -= 1\n        else:\n            nums1[m + n - 1] = nums2[n - 1]\n            n -= 1\n    while n > 0:\n        nums1[n - 1] = nums2[n - 1]\n        n -= 1\n    return nums1\n```", "code": "def merge_arrays(nums1, m, nums2, n):\n    while m > 0 and n > 0:\n        if nums1[m - 1] > nums2[n - 1]:\n            nums1[m + n - 1] = nums1[m - 1]\n            m -= 1\n        else:\n            nums1[m + n - 1] = nums2[n - 1]\n            n -= 1\n    while n > 0:\n        nums1[n - 1] = nums2[n - 1]\n        n -= 1\n    return nums1", "entry_point": "merge_arrays", "testcase": ["assert merge_arrays([0], 0, [1], 1) == [1]", "assert merge_arrays([1,2,3,0,0,0], 3, [2,5,6], 3) == [1,2,2,3,5,6]", "assert merge_arrays([1,2,3,4,5,0,0,0,0], 5, [2,4,6,8], 4) == [1,2,2,3,4,4,5,6,8]"]}
{"seq_id": 552949511, "instruction": "Write a function that checks if a given string is a valid palindrome ignoring case, spaces, punctuation, and diacritics.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_palindrome_enhanced(s):\n    \"\"\"\n    Checks if the given string is a valid palindrome ignoring case, spaces, punctuation, and diacritics.\n\n    :param s: The string to be checked.\n    :type s: str\n    :return: True if the string is a valid palindrome, False otherwise.\n    :rtype: bool\n    \"\"\"\n    # Normalize the string (remove diacritics, convert to lowercase, remove spaces and punctuation)\n    normalized_str = re.sub(r'[\\W_]', '', s.lower())\n    # Check if the normalized string is a palindrome\n    return normalized_str == normalized_str[::-1]\n\n# Test cases\nassert is_palindrome_enhanced(\"A man, a plan, a canal: Panama\") == True\nassert is_palindrome_enhanced(\"No lemon, no melon\") == True\nassert is_palindrome_enhanced(\"Hello, world!\") == False\n```", "code": "import re\n\ndef is_palindrome_enhanced(s):\n    \"\"\"\n    Checks if the given string is a valid palindrome ignoring case, spaces, punctuation, and diacritics.\n\n    :param s: The string to be checked.\n    :type s: str\n    :return: True if the string is a valid palindrome, False otherwise.\n    :rtype: bool\n    \"\"\"\n    # Normalize the string (remove diacritics, convert to lowercase, remove spaces and punctuation)\n    normalized_str = re.sub(r'[\\W_]', '', s.lower())\n    # Check if the normalized string is a palindrome\n    return normalized_str == normalized_str[::-1]\n\n# Test cases\nassert is_palindrome_enhanced(\"A man, a plan, a canal: Panama\") == True\nassert is_palindrome_enhanced(\"No lemon, no melon\") == True\nassert is_palindrome_enhanced(\"Hello, world!\") == False", "entry_point": "is_palindrome_enhanced", "testcase": ["assert is_palindrome_enhanced(\"A man, a plan, a canal: Panama\") == True", "assert is_palindrome_enhanced(\"No lemon, no melon\") == True", "assert is_palindrome_enhanced(\"Hello, world!\") == False"]}
{"seq_id": 42642802135, "instruction": "Write a python function to get the largest number, smallest number, and the sum of all elements in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef analyze_list(nums):\n  largest = max(nums)\n  smallest = min(nums)\n  total_sum = sum(nums)\n  return (largest, smallest, total_sum)\n```", "code": "def analyze_list(nums):\n  largest = max(nums)\n  smallest = min(nums)\n  total_sum = sum(nums)\n  return (largest, smallest, total_sum)", "entry_point": "analyze_list", "testcase": ["assert analyze_list([1, 2, 3, 4, 5]) == (5, 1, 15)", "assert analyze_list([-1, -5, -3]) == (-1, -5, -9)", "assert analyze_list([10, -2, 3, 0]) == (10, -2, 11)"]}
{"seq_id": 72817486997, "instruction": "Write a function to find the intersection of two sets.", "output": "Here is the code to solve this problem: \n```python\ndef set_intersection(set1,set2):\n  return set1.intersection(set2)\n```", "code": "def set_intersection(set1,set2):\n  return set1.intersection(set2)", "entry_point": "set_intersection", "testcase": ["assert set_intersection({1,2,3,4,5},{4,5,6,7,8})=={4,5}", "assert set_intersection({10,20,30,40,50},{30,40,50,60,70})=={30,40,50}", "assert set_intersection({1,2,3},{4,5,6})==set()"]}
{"seq_id": 32001427261, "instruction": "Create a function to find the longest binary gap within a positive integer N. A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.\n\nFor example, number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap of length 1. The number 15 has binary representation 1111 and has no binary gaps.\n\nThe function should return the length of the longest binary gap. If N doesn't contain a binary gap, the function should return 0.", "output": "Here is the code to solve this problem: \n```python\ndef longest_binary_gap(N):\n    binary = bin(N)[2:]\n    longest_gap = 0\n    current_gap = 0\n    \n    for i in binary:\n        if i == '1':\n            if current_gap > longest_gap:\n                longest_gap = current_gap\n            current_gap = 0\n        else:\n            current_gap += 1\n\n    return longest_gap\n```", "code": "def longest_binary_gap(N):\n    binary = bin(N)[2:]\n    longest_gap = 0\n    current_gap = 0\n    \n    for i in binary:\n        if i == '1':\n            if current_gap > longest_gap:\n                longest_gap = current_gap\n            current_gap = 0\n        else:\n            current_gap += 1\n\n    return longest_gap", "entry_point": "longest_binary_gap", "testcase": ["assert longest_binary_gap(9) == 2", "assert longest_binary_gap(529) == 4", "assert longest_binary_gap(20) == 1", "assert longest_binary_gap(15) == 0"]}
{"seq_id": 32976977515, "instruction": "Write a python function to find the number of steps to reduce a number n to 1 by performing the following operations in each step:\n- If n is even, divide it by 2.\n- If n is odd, either increment or decrement it by 1.", "output": "Here is the code to solve this problem: \n```python\ndef reduce_to_one(n):\n    steps = 0\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            if n == 3 or n % 4 == 1:\n                n -= 1\n            else:\n                n += 1\n        steps += 1\n    return steps\n```", "code": "def reduce_to_one(n):\n    steps = 0\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            if n == 3 or n % 4 == 1:\n                n -= 1\n            else:\n                n += 1\n        steps += 1\n    return steps", "entry_point": "reduce_to_one", "testcase": ["assert reduce_to_one(3)==2", "assert reduce_to_one(4)==2", "assert reduce_to_one(15)==5"]}
{"seq_id": 10856889479, "instruction": "Write a function to find the minimum cost to connect all the given sticks. The cost of connecting two sticks is equal to the sum of their lengths. The function should return the minimum total cost required to connect all the sticks.", "output": "Here is the code to solve this problem: \n```python\nimport heapq as hq\r\n\r\ndef connect_sticks(sticks):\r\n    hq.heapify(sticks)\r\n    total_cost = 0\r\n    while len(sticks) > 1:\r\n        first_stick = hq.heappop(sticks)\r\n        second_stick = hq.heappop(sticks)\r\n        cost = first_stick + second_stick\r\n        total_cost += cost\r\n        hq.heappush(sticks, cost)\r\n    return total_cost\n```", "code": "import heapq as hq\r\n\r\ndef connect_sticks(sticks):\r\n    hq.heapify(sticks)\r\n    total_cost = 0\r\n    while len(sticks) > 1:\r\n        first_stick = hq.heappop(sticks)\r\n        second_stick = hq.heappop(sticks)\r\n        cost = first_stick + second_stick\r\n        total_cost += cost\r\n        hq.heappush(sticks, cost)\r\n    return total_cost", "entry_point": "connect_sticks", "testcase": ["assert connect_sticks([2,4,3])==14", "assert connect_sticks([5])==0", "assert connect_sticks([1,8,3,5])==30"]}
{"seq_id": 36508935433, "instruction": "Write a function to merge two sorted arrays into a single sorted array.", "output": "Here is the code to solve this problem: \n```python\ndef merge_sorted_arrays(arr1, arr2):\n    # Initialize an empty list to store the merged sorted array\n    merged_array = []\n    # Initialize two pointers to traverse the arrays\n    i, j = 0, 0\n    # Traverse both arrays\n    while i < len(arr1) and j < len(arr2):\n        # Compare the current elements of the two arrays and append the smaller one to the merged array\n        if arr1[i] < arr2[j]:\n            merged_array.append(arr1[i])\n            i += 1\n        else:\n            merged_array.append(arr2[j])\n            j += 1\n    # Append the remaining elements of the first array to the merged array\n    while i < len(arr1):\n        merged_array.append(arr1[i])\n        i += 1\n    # Append the remaining elements of the second array to the merged array\n    while j < len(arr2):\n        merged_array.append(arr2[j])\n        j += 1\n    # Return the merged sorted array\n    return merged_array\n```", "code": "def merge_sorted_arrays(arr1, arr2):\n    # Initialize an empty list to store the merged sorted array\n    merged_array = []\n    # Initialize two pointers to traverse the arrays\n    i, j = 0, 0\n    # Traverse both arrays\n    while i < len(arr1) and j < len(arr2):\n        # Compare the current elements of the two arrays and append the smaller one to the merged array\n        if arr1[i] < arr2[j]:\n            merged_array.append(arr1[i])\n            i += 1\n        else:\n            merged_array.append(arr2[j])\n            j += 1\n    # Append the remaining elements of the first array to the merged array\n    while i < len(arr1):\n        merged_array.append(arr1[i])\n        i += 1\n    # Append the remaining elements of the second array to the merged array\n    while j < len(arr2):\n        merged_array.append(arr2[j])\n        j += 1\n    # Return the merged sorted array\n    return merged_array", "entry_point": "merge_sorted_arrays", "testcase": ["assert merge_sorted_arrays([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_arrays([1, 3, 5, 7], [2, 4, 6]) == [1, 2, 3, 4, 5, 6, 7]", "assert merge_sorted_arrays([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 1, 2, 2, 3, 3, 4, 4]"]}
{"seq_id": 17677906855, "instruction": "Write a python function to find the number of valid parentheses strings of length n.", "output": "Here is the code to solve this problem: \n```python\ndef count_parentheses(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n```", "code": "def count_parentheses(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]", "entry_point": "count_parentheses", "testcase": ["assert count_parentheses(3) == 5", "assert count_parentheses(4) == 14", "assert count_parentheses(5) == 42"]}
{"seq_id": 14895857456, "instruction": "Write a function that takes two lists, `keys` and `values`, and returns a new dictionary. The keys of the dictionary are the elements of `keys`, and the values are the corresponding elements of `values`. If `keys` is longer than `values`, the remaining keys should be mapped to `None`.", "output": "Here is the code to solve this problem: \n```python\ndef combine_keys_values(keys, values):\n    dict_new = {}\n    for i in range(len(keys)):\n        dict_new[keys[i]] = values[i] if i < len(values) else None\n    return dict_new\n```", "code": "def combine_keys_values(keys, values):\n    dict_new = {}\n    for i in range(len(keys)):\n        dict_new[keys[i]] = values[i] if i < len(values) else None\n    return dict_new", "entry_point": "combine_keys_values", "testcase": ["assert combine_keys_values(['a', 'b', 'c'], [1, 2]) == {'a': 1, 'b': 2, 'c': None}", "assert combine_keys_values(['x', 'y', 'z'], [10, 20, 30]) == {'x': 10, 'y': 20, 'z': 30}", "assert combine_keys_values(['one', 'two', 'three'], [True, False]) == {'one': True, 'two': False, 'three': None}"]}
{"seq_id": 73283665800, "instruction": "Write a function to check if a number is a perfect square.", "output": "Here is the code to solve this problem: \n```python\ndef isPerfectSquare(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    i = 1\n    while num > 0:\n        num -= i\n        i += 2\n    return num == 0\n```", "code": "def isPerfectSquare(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    i = 1\n    while num > 0:\n        num -= i\n        i += 2\n    return num == 0", "entry_point": "isPerfectSquare", "testcase": ["assert isPerfectSquare(25) == True", "assert isPerfectSquare(16) == True", "assert isPerfectSquare(14) == False"]}
{"seq_id": 35220579014, "instruction": "Write a python function to find the next greater permutation of the given number.\n\nFor example, if the input number is 123, the next greater permutation is 132. If the input number is 321, the next greater permutation is 123 (since 321 is the highest possible permutation of these digits).", "output": "Here is the code to solve this problem: \n```python\ndef next_permutation(n):\n    num_list = list(str(n))\n    i = len(num_list) - 2\n    while i >= 0:\n        if num_list[i] < num_list[i + 1]:\n            break\n        i -= 1\n    if i >= 0:\n        j = len(num_list) - 1\n        while j > i:\n            if num_list[j] > num_list[i]:\n                break\n            j -= 1\n        num_list[i], num_list[j] = num_list[j], num_list[i]\n        num_list[i + 1:] = reversed(num_list[i + 1:])\n    else:\n        num_list.reverse()\n    return int(\"\".join(num_list))\n```", "code": "def next_permutation(n):\n    num_list = list(str(n))\n    i = len(num_list) - 2\n    while i >= 0:\n        if num_list[i] < num_list[i + 1]:\n            break\n        i -= 1\n    if i >= 0:\n        j = len(num_list) - 1\n        while j > i:\n            if num_list[j] > num_list[i]:\n                break\n            j -= 1\n        num_list[i], num_list[j] = num_list[j], num_list[i]\n        num_list[i + 1:] = reversed(num_list[i + 1:])\n    else:\n        num_list.reverse()\n    return int(\"\".join(num_list))", "entry_point": "next_permutation", "testcase": ["assert next_permutation(321) == 123", "assert next_permutation(123) == 132", "assert next_permutation(278) == 287"]}
{"seq_id": 29710412383, "instruction": "Write a python function to find the smallest number in a given list of integers using a heap data structure.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef smallest_number_heap(numbers):\n    heapq.heapify(numbers)\n    return numbers[0]\n```", "code": "import heapq\n\ndef smallest_number_heap(numbers):\n    heapq.heapify(numbers)\n    return numbers[0]", "entry_point": "smallest_number_heap", "testcase": ["assert smallest_number_heap([45, 12, 100, 1, 89]) == 1", "assert smallest_number_heap([88, 55, 33, 22, 11]) == 11", "assert smallest_number_heap([12, 34, 1, 2, 3]) == 1"]}
{"seq_id": 4957629488, "instruction": "Write a function to find the n-th Fibonacci number.", "output": "Here is the code to solve this problem: \n```python\ndef find_fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n```", "code": "def find_fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b", "entry_point": "find_fibonacci", "testcase": ["assert find_fibonacci(2) == 1", "assert find_fibonacci(3) == 2", "assert find_fibonacci(5) == 5", "assert find_fibonacci(10) == 55", "assert find_fibonacci(1) == 1", "assert find_fibonacci(6) == 8", "assert find_fibonacci(4) == 3"]}
{"seq_id": 71759174195, "instruction": "Write a python function that takes a string as input and returns the maximum number of palindromic substrings that can be formed by partitioning the string. A palindromic substring is a substring that reads the same backward as forward.", "output": "Here is the code to solve this problem: \n```python\ndef max_palindromic_substrings(text: str) -> int:\n\n    def dfs(i, j):  # \u8ba1\u7b97 text[i: j + 1] \u5b50\u95ee\u9898\n        if i > j: return 0\n        if i == j:\n            return 1\n        m = j - i + 1\n        k = 1\n        res = 1\n        while k <= m // 2:\n            if text[i: i + k] == text[j - k + 1 : j + 1]:\n                res = max(res, dfs(i + k, j - k) + 2)\n            k += 1\n        return res\n    return dfs(0, len(text) - 1)\n```", "code": "def max_palindromic_substrings(text: str) -> int:\n\n    def dfs(i, j):  # \u8ba1\u7b97 text[i: j + 1] \u5b50\u95ee\u9898\n        if i > j: return 0\n        if i == j:\n            return 1\n        m = j - i + 1\n        k = 1\n        res = 1\n        while k <= m // 2:\n            if text[i: i + k] == text[j - k + 1 : j + 1]:\n                res = max(res, dfs(i + k, j - k) + 2)\n            k += 1\n        return res\n    return dfs(0, len(text) - 1)", "entry_point": "max_palindromic_substrings", "testcase": ["assert max_palindromic_substrings(\"ghiabcdefhelloadamhelloabcdefghi\") == 7", "assert max_palindromic_substrings(\"antaprezatepzapreanta\") == 11", "assert max_palindromic_substrings(\"merchant\") == 1"]}
{"seq_id": 18395512678, "instruction": "Write a python function to check if the given number is a power of 4 or not.", "output": "Here is the code to solve this problem: \n```python\ndef is_power_of_four(num):\n    if num <= 0:\n        return False\n    while num != 1:\n        if num % 4 != 0:\n            return False\n        num = num / 4\n    return True\n```", "code": "def is_power_of_four(num):\n    if num <= 0:\n        return False\n    while num != 1:\n        if num % 4 != 0:\n            return False\n        num = num / 4\n    return True", "entry_point": "is_power_of_four", "testcase": ["assert is_power_of_four(15) == False", "assert is_power_of_four(64) == True", "assert is_power_of_four(16) == True"]}
{"seq_id": 13632437309, "instruction": "Write a python function to find the count of maximum points on same line from the given list of points.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\nfrom math import gcd\n\ndef max_points(points):\n    def find_slope(p1, p2):\n        if p1[0] - p2[0] == 0:\n            return float('inf')\n        return (p1[1] - p2[1]) / (p1[0] - p2[0])\n\n    max_points_on_line = 0\n    for i in range(len(points)):\n        slopes = defaultdict(int)\n        duplicate_points = 1\n        for j in range(i+1, len(points)):\n            if points[i] == points[j]:\n                duplicate_points += 1\n            else:\n                slopes[find_slope(points[i], points[j])] += 1\n        max_points_on_line = max(max_points_on_line, (max(slopes.values()) if slopes else 0) + duplicate_points)\n\n    return max_points_on_line if max_points_on_line > 0 else len(points)\n```", "code": "from collections import defaultdict\nfrom math import gcd\n\ndef max_points(points):\n    def find_slope(p1, p2):\n        if p1[0] - p2[0] == 0:\n            return float('inf')\n        return (p1[1] - p2[1]) / (p1[0] - p2[0])\n\n    max_points_on_line = 0\n    for i in range(len(points)):\n        slopes = defaultdict(int)\n        duplicate_points = 1\n        for j in range(i+1, len(points)):\n            if points[i] == points[j]:\n                duplicate_points += 1\n            else:\n                slopes[find_slope(points[i], points[j])] += 1\n        max_points_on_line = max(max_points_on_line, (max(slopes.values()) if slopes else 0) + duplicate_points)\n\n    return max_points_on_line if max_points_on_line > 0 else len(points)", "entry_point": "max_points", "testcase": ["assert max_points([(1,1),(2,2),(3,3)]) == 3", "assert max_points([(1,1),(3,2),(5,3),(4,1),(2,3),(1,4)]) == 4", "assert max_points([(0,0),(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)]) == 7"]}
{"seq_id": 30925726771, "instruction": "Write a python function to find the second largest number in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef second_largest_number(numbers):\n    if len(numbers) < 2:\n        return None\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[-2]\n```", "code": "def second_largest_number(numbers):\n    if len(numbers) < 2:\n        return None\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[-2]", "entry_point": "second_largest_number", "testcase": ["assert second_largest_number([1, 2, 3, 4, 5]) == 4", "assert second_largest_number([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 9", "assert second_largest_number([10]) == None", "assert second_largest_number([2, 2, 2, 2]) == None", "assert second_largest_number([10, 9]) == 9"]}
{"seq_id": 29966220386, "instruction": "Write a python function to check if a given list of coordinates lies on a straight line.", "output": "Here is the code to solve this problem: \n```python\ndef check_straight_line(coordinates):\n    if len(coordinates) <= 2:\n        return True\n    initialized = False\n    a = b = c = 0\n    it = iter(coordinates)\n\n    x1, y1 = next(it)\n\n    for x2, y2 in it:\n        if x1 == x2 and y2 == y1:\n            continue\n        if not initialized:\n            a = y1 - y2\n            b = x2 - x1\n            c = x1 * y2 - y1 * x2\n            initialized = True\n        elif a * x2 + b * y2 + c != 0:\n            return False\n    return True\n```", "code": "def check_straight_line(coordinates):\n    if len(coordinates) <= 2:\n        return True\n    initialized = False\n    a = b = c = 0\n    it = iter(coordinates)\n\n    x1, y1 = next(it)\n\n    for x2, y2 in it:\n        if x1 == x2 and y2 == y1:\n            continue\n        if not initialized:\n            a = y1 - y2\n            b = x2 - x1\n            c = x1 * y2 - y1 * x2\n            initialized = True\n        elif a * x2 + b * y2 + c != 0:\n            return False\n    return True", "entry_point": "check_straight_line", "testcase": ["assert check_straight_line([[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]) == True", "assert check_straight_line([[1,1],[2,2],[3,3]]) == True", "assert check_straight_line([[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]) == False"]}
{"seq_id": 71691549301, "instruction": "Write a function that takes a list of integers as input and returns a new list with only the prime numbers from the original list.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_numbers(numbers):\n    return [num for num in numbers if is_prime(num)]\n```", "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_numbers(numbers):\n    return [num for num in numbers if is_prime(num)]", "entry_point": "get_prime_numbers", "testcase": ["assert get_prime_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 5, 7]", "assert get_prime_numbers([11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) == [11, 13, 17, 19, 23, 29, 31, 37, 41, 43]", "assert get_prime_numbers([4, 6, 8, 10, 12, 14, 16, 18, 20]) == []"]}
{"seq_id": 786275998, "instruction": "Write a function that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward. The function should ignore case, spaces, and punctuation.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef check_palindrome(text):\n    # Remove all non-alphanumeric characters and convert to lowercase\n    cleaned_text = re.sub(r'[^A-Za-z0-9]', '', text).lower()\n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]\n```", "code": "import re\n\ndef check_palindrome(text):\n    # Remove all non-alphanumeric characters and convert to lowercase\n    cleaned_text = re.sub(r'[^A-Za-z0-9]', '', text).lower()\n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]", "entry_point": "check_palindrome", "testcase": ["assert check_palindrome(\"Hello, World!\") == False", "assert check_palindrome(\"No lemon, no melon\") == True", "assert check_palindrome(\"A man, a plan, a canal: Panama\") == True", "assert check_palindrome(\"Madam, in Eden, I'm Adam\") == True"]}
{"seq_id": 29678700953, "instruction": "Write a python function that takes two lists of integers and merges them into a single list, sorting the combined list in ascending order. The first list has 'm' elements and the second list has 'n' elements. The function should modify the first list in-place to accommodate the merged and sorted result.", "output": "Here is the code to solve this problem: \n```python\ndef merge_lists(nums1, m, nums2, n):\n    while m > 0 and n > 0:\n        if nums1[m - 1] >= nums2[n - 1]:\n            nums1[m + n - 1] = nums1[m - 1]\n            m -= 1\n        else:\n            nums1[m + n - 1] = nums2[n - 1]\n            n -= 1\n    while n > 0:\n        nums1[n - 1] = nums2[n - 1]\n        n -= 1\n    return nums1\n```", "code": "def merge_lists(nums1, m, nums2, n):\n    while m > 0 and n > 0:\n        if nums1[m - 1] >= nums2[n - 1]:\n            nums1[m + n - 1] = nums1[m - 1]\n            m -= 1\n        else:\n            nums1[m + n - 1] = nums2[n - 1]\n            n -= 1\n    while n > 0:\n        nums1[n - 1] = nums2[n - 1]\n        n -= 1\n    return nums1", "entry_point": "merge_lists", "testcase": ["assert merge_lists([1,2,3,0,0,0], 3, [2,5,6], 3) == [1,2,2,3,5,6]", "assert merge_lists([1,0], 1, [2], 1) == [1,2]", "assert merge_lists([0], 0, [1], 1) == [1]"]}
{"seq_id": 12020721919, "instruction": "Write a function to determine if a given string is a permutation of a palindrome.", "output": "Here is the code to solve this problem: \n```python\ndef is_permutation_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    counts = {}\n    for char in s:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    odd_counts = 0\n    for count in counts.values():\n        if count % 2 != 0:\n            odd_counts += 1\n    return odd_counts <= 1\n```", "code": "def is_permutation_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    counts = {}\n    for char in s:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    odd_counts = 0\n    for count in counts.values():\n        if count % 2 != 0:\n            odd_counts += 1\n    return odd_counts <= 1", "entry_point": "is_permutation_palindrome", "testcase": ["assert is_permutation_palindrome(\"Tact Coa\") == True", "assert is_permutation_palindrome(\"A man a plan a canal Panama\") == True", "assert is_permutation_palindrome(\"Not a Palindrome\") == False"]}
{"seq_id": 40124753830, "instruction": "Write a python function to find all the anagrams of a given string in a given list of strings.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_Anagrams(word_list, pattern):\n    pattern_count = Counter(pattern)\n    pattern_length = len(pattern)\n    result = []\n\n    for i in range(len(word_list)):\n        if pattern_length <= len(word_list[i]):\n            for j in range(len(word_list[i]) - pattern_length + 1):\n                if Counter(word_list[i][j:j+pattern_length]) == pattern_count:\n                    result.append(word_list[i])\n                    break\n\n    return result\n```", "code": "from collections import Counter\n\ndef find_Anagrams(word_list, pattern):\n    pattern_count = Counter(pattern)\n    pattern_length = len(pattern)\n    result = []\n\n    for i in range(len(word_list)):\n        if pattern_length <= len(word_list[i]):\n            for j in range(len(word_list[i]) - pattern_length + 1):\n                if Counter(word_list[i][j:j+pattern_length]) == pattern_count:\n                    result.append(word_list[i])\n                    break\n\n    return result", "entry_point": "find_Anagrams", "testcase": ["assert find_Anagrams([\"cinema\",\"iceman\",\"manice\",\"emacni\"], \"iceman\") == [\"cinema\", \"iceman\", \"manice\", \"emacni\"]", "assert find_Anagrams([\"abc\",\"bac\",\"bca\",\"xyz\"], \"abc\") == [\"abc\", \"bac\", \"bca\"]", "assert find_Anagrams([\"bat\",\"tab\",\"cat\",\"tac\"], \"tab\") == [\"bat\", \"tab\"]"]}
{"seq_id": 23664452013, "instruction": "Write a python function to find the number of subarrays in a given array that have a sum divisible by K.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef count_subarrays(arr, k):\n    count = 0\n    n = len(arr)\n    sum = 0\n    mod = defaultdict(lambda:0)\n    mod[0] = 1\n    for i in range(n):\n        sum += arr[i]\n        mod[sum % k] += 1\n    for i in mod:\n        count += (mod[i]*(mod[i] - 1))//2\n    return count\n```", "code": "from collections import defaultdict\n\ndef count_subarrays(arr, k):\n    count = 0\n    n = len(arr)\n    sum = 0\n    mod = defaultdict(lambda:0)\n    mod[0] = 1\n    for i in range(n):\n        sum += arr[i]\n        mod[sum % k] += 1\n    for i in mod:\n        count += (mod[i]*(mod[i] - 1))//2\n    return count", "entry_point": "count_subarrays", "testcase": ["assert count_subarrays([4,5,0,-2,-3,1], 5) == 7", "assert count_subarrays([1,2,3], 6) == 1", "assert count_subarrays([5], 9) == 0"]}
{"seq_id": 16127512230, "instruction": "Write a function to calculate the total damage dealt by a series of attacks in a game. In this game, each attack has a damage value and a cooldown period. If a player performs an attack, they must wait for the cooldown period to pass before they can perform another attack. The damage dealt by an attack is applied instantly. Calculate the total damage dealt by a series of attacks.\n\nFor example, given the following list of attacks and their cooldown periods:\nattacks = [(10, 2), (20, 3), (15, 1), (10, 2)]\nwhere each tuple represents (damage, cooldown), the total damage dealt would be calculated as follows:\n- At time 0, the first attack deals 10 damage.\n- At time 2, the second attack deals 20 damage (cooldown of 2).\n- At time 5, the third attack deals 15 damage (cooldown of 3 + previous cooldown).\n- At time 6, the fourth attack deals 10 damage (cooldown of 1).\n\nThe total damage dealt is 10 + 20 + 15 + 10 = 55.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_total_damage(attacks):\n    total_damage = 0\n    current_time = 0\n    for damage, cooldown in attacks:\n        current_time += cooldown\n        total_damage += damage\n    return total_damage\n```", "code": "def calculate_total_damage(attacks):\n    total_damage = 0\n    current_time = 0\n    for damage, cooldown in attacks:\n        current_time += cooldown\n        total_damage += damage\n    return total_damage", "entry_point": "calculate_total_damage", "testcase": ["assert calculate_total_damage([(25, 3), (30, 2), (35, 1)]) == 90", "assert calculate_total_damage([(10, 2), (20, 3), (15, 1), (10, 2)]) == 55", "assert calculate_total_damage([(5, 1), (10, 2), (15, 1), (20, 2)]) == 50"]}
{"seq_id": 41862681766, "instruction": "Write a python function to find the minimum number of swaps required to sort a list.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef min_swaps_sort(arr: List[int]) -> int:\n    n = len(arr)\n    count = 0\n    temp_arr = arr.copy()\n    temp_arr.sort()\n    visited = [False] * n\n\n    for i in range(n):\n        if visited[i] or temp_arr[i] == arr[i]:\n            continue\n\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = temp_arr.index(arr[j])\n            cycle_size += 1\n\n        if cycle_size > 0:\n            count += (cycle_size - 1)  \n\n    return count\n```", "code": "from typing import List\n\ndef min_swaps_sort(arr: List[int]) -> int:\n    n = len(arr)\n    count = 0\n    temp_arr = arr.copy()\n    temp_arr.sort()\n    visited = [False] * n\n\n    for i in range(n):\n        if visited[i] or temp_arr[i] == arr[i]:\n            continue\n\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = temp_arr.index(arr[j])\n            cycle_size += 1\n\n        if cycle_size > 0:\n            count += (cycle_size - 1)  \n\n    return count", "entry_point": "min_swaps_sort", "testcase": ["assert min_swaps_sort([4,3,2,1]) == 2", "assert min_swaps_sort([1,5,4,3,2]) == 2", "assert min_swaps_sort([7,6,5,8]) == 1"]}
{"seq_id": 37912624106, "instruction": "Write a function to find the pairs of indices (i, j) in an array where arr[i] + arr[j] is divisible by a given number k, and i < j. The function should return the count of such pairs.", "output": "Here is the code to solve this problem: \n```python\ndef find_divisible_pairs(nums, k):\n    count = 0\n    remainder_counts = [0] * k\n\n    for num in nums:\n        remainder = num % k\n        complement = k - remainder\n\n        if remainder == 0:\n            count += remainder_counts[0]\n        else:\n            count += remainder_counts[complement % k]\n\n        remainder_counts[remainder] += 1\n\n    return count\n```", "code": "def find_divisible_pairs(nums, k):\n    count = 0\n    remainder_counts = [0] * k\n\n    for num in nums:\n        remainder = num % k\n        complement = k - remainder\n\n        if remainder == 0:\n            count += remainder_counts[0]\n        else:\n            count += remainder_counts[complement % k]\n\n        remainder_counts[remainder] += 1\n\n    return count", "entry_point": "find_divisible_pairs", "testcase": ["assert find_divisible_pairs([4, 3, 5, 1, 2], 7) == 2", "assert find_divisible_pairs([10, 20, 30, 40, 50], 10) == 10", "assert find_divisible_pairs([1, 3, 2, 6, 1, 2], 3) == 5"]}
{"seq_id": 39134583078, "instruction": "Write a python function to find the number of unique pairs of numbers in a given list that add up to a specific target number.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique_pairs(arr, target):\n    seen = {}\n    pairs = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pairs.add((min(num, complement), max(num, complement)))\n        seen[num] = True\n    return len(pairs)\n```", "code": "def count_unique_pairs(arr, target):\n    seen = {}\n    pairs = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pairs.add((min(num, complement), max(num, complement)))\n        seen[num] = True\n    return len(pairs)", "entry_point": "count_unique_pairs", "testcase": ["assert count_unique_pairs([1, 3, 2, 2, 3, 4], 5) == 2", "assert count_unique_pairs([1, 5, 7, -1], 6) == 2", "assert count_unique_pairs([1, 5, 7, -1, 5], 6) == 2"]}
{"seq_id": 26212827936, "instruction": "Write a function to check if a course schedule is possible based on prerequisites. The function takes in two parameters: the number of courses and a list of prerequisites where each prerequisite is represented as a list of two courses, with the second course being a prerequisite for the first course. The function should return True if it is possible to complete all courses based on the given prerequisites, and False otherwise.", "output": "Here is the code to solve this problem: \n```python\ndef canFinish(numCourses, prerequisites):\n    def dfs(i, adjacency, flags):\n        if flags[i] == -1: return True\n        if flags[i] == 1: return False\n        flags[i] = 1\n        for j in adjacency[i]:\n            if not dfs(j, adjacency, flags): return False\n        flags[i] = -1\n        return True\n\n    adjacency = [[] for _ in range(numCourses)]\n    flags = [0 for _ in range(numCourses)]\n    for cur, pre in prerequisites:\n        adjacency[pre].append(cur)\n    for i in range(numCourses):\n        if not dfs(i, adjacency, flags): return False\n    return True\n\nprint(canFinish(2, [[1,0]])) # Expected: True\nprint(canFinish(2, [[1,0],[0,1]])) # Expected: False\nprint(canFinish(3, [[1,0],[2,1]])) # Expected: True\n```", "code": "def canFinish(numCourses, prerequisites):\n    def dfs(i, adjacency, flags):\n        if flags[i] == -1: return True\n        if flags[i] == 1: return False\n        flags[i] = 1\n        for j in adjacency[i]:\n            if not dfs(j, adjacency, flags): return False\n        flags[i] = -1\n        return True\n\n    adjacency = [[] for _ in range(numCourses)]\n    flags = [0 for _ in range(numCourses)]\n    for cur, pre in prerequisites:\n        adjacency[pre].append(cur)\n    for i in range(numCourses):\n        if not dfs(i, adjacency, flags): return False\n    return True\n\nprint(canFinish(2, [[1,0]])) # Expected: True\nprint(canFinish(2, [[1,0],[0,1]])) # Expected: False\nprint(canFinish(3, [[1,0],[2,1]])) # Expected: True", "entry_point": "canFinish", "testcase": ["assert canFinish(2, [[1,0],[0,1]]) == False", "assert canFinish(2, [[1,0]]) == True", "assert canFinish(3, [[1,0],[2,1]]) == True"]}
{"seq_id": 14817855138, "instruction": "Write a function to find the maximum profit from stock prices given a limit on the number of transactions.", "output": "Here is the code to solve this problem: \n```python\ndef max_profit_with_k_transactions(prices, k):\n    if not prices:\n        return 0\n\n    n = len(prices)\n    if k > n // 2:\n        return max_profit(prices)\n\n    dp = [[[0, 0] for _ in range(k + 1)] for _ in range(n)]\n    for i in range(n):\n        dp[i][0][0] = 0\n        dp[i][0][1] = float(\"-inf\")\n    for i in range(k):\n        dp[0][i + 1][0] = 0\n        dp[0][i + 1][1] = -prices[0]\n\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i])\n            dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i])\n    return dp[n - 1][k][0]\n\ndef max_profit(prices):\n    profit = 0\n    for i in range(1, len(prices)):\n        profit += max(0, prices[i] - prices[i - 1])\n    return profit\n```", "code": "def max_profit_with_k_transactions(prices, k):\n    if not prices:\n        return 0\n\n    n = len(prices)\n    if k > n // 2:\n        return max_profit(prices)\n\n    dp = [[[0, 0] for _ in range(k + 1)] for _ in range(n)]\n    for i in range(n):\n        dp[i][0][0] = 0\n        dp[i][0][1] = float(\"-inf\")\n    for i in range(k):\n        dp[0][i + 1][0] = 0\n        dp[0][i + 1][1] = -prices[0]\n\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i])\n            dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i])\n    return dp[n - 1][k][0]\n\ndef max_profit(prices):\n    profit = 0\n    for i in range(1, len(prices)):\n        profit += max(0, prices[i] - prices[i - 1])\n    return profit", "entry_point": "max_profit_with_k_transactions", "testcase": ["assert max_profit_with_k_transactions([100, 180, 260, 310, 40, 535, 695], 3) == 865", "assert max_profit_with_k_transactions([10, 22, 5, 75, 65, 80], 2) == 87", "assert max_profit_with_k_transactions([7, 1, 5, 3, 6, 4], 3) == 7"]}
{"seq_id": 41433768571, "instruction": "Write a python function to convert a Roman numeral string to an integer.", "output": "Here is the code to solve this problem: \n```python\ndef roman_to_int(s):\n    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n        else:\n            int_val += rom_val[s[i]]\n    return int_val\n```", "code": "def roman_to_int(s):\n    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n        else:\n            int_val += rom_val[s[i]]\n    return int_val", "entry_point": "roman_to_int", "testcase": ["assert roman_to_int('LVIII') == 58", "assert roman_to_int('IX') == 9", "assert roman_to_int('IV') == 4", "assert roman_to_int('III') == 3", "assert roman_to_int('MCMXCIV') == 1994"]}
{"seq_id": 29334566160, "instruction": "Write a function to find the four numbers in an array that sum up to a given target. The function should return a list of all possible quadruplets that sum up to the target. Assume that there is exactly one solution.", "output": "Here is the code to solve this problem: \n```python\ndef fourSum(nums, target):\n    n = len(nums)\n    nums.sort()\n    res = []\n    for i in range(n - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n\n        for j in range(i + 1, n - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n\n            l = j + 1\n            r = n - 1\n            while l < r:\n                s = nums[i] + nums[j] + nums[l] + nums[r]\n                if s == target:\n                    res.append([nums[i], nums[j], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l - 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r + 1]:\n                        r -= 1\n                elif s < target:\n                    l += 1\n                else:\n                    r -= 1\n    return res\n```", "code": "def fourSum(nums, target):\n    n = len(nums)\n    nums.sort()\n    res = []\n    for i in range(n - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n\n        for j in range(i + 1, n - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n\n            l = j + 1\n            r = n - 1\n            while l < r:\n                s = nums[i] + nums[j] + nums[l] + nums[r]\n                if s == target:\n                    res.append([nums[i], nums[j], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l - 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r + 1]:\n                        r -= 1\n                elif s < target:\n                    l += 1\n                else:\n                    r -= 1\n    return res", "entry_point": "fourSum", "testcase": ["assert fourSum([0,0,0,0], 0) == [[0, 0, 0, 0]]", "assert fourSum([2,2,2,2,2], 8) == [[2, 2, 2, 2]]", "assert fourSum([1,0,-1,0,-2,2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]"]}
{"seq_id": 19739462258, "instruction": "Write a python function to count the number of anagrams of a given word that appear in a given list of words.", "output": "Here is the code to solve this problem: \n```python\ndef count_anagrams(word_list, target):\n    target_sorted = sorted(target)\n    count = 0\n    for word in word_list:\n        if sorted(word) == target_sorted:\n            count += 1\n    return count\n```", "code": "def count_anagrams(word_list, target):\n    target_sorted = sorted(target)\n    count = 0\n    for word in word_list:\n        if sorted(word) == target_sorted:\n            count += 1\n    return count", "entry_point": "count_anagrams", "testcase": ["assert count_anagrams(['act', 'cat', 'tac', 'god', 'dog', 'odg'], 'tac') == 3", "assert count_anagrams(['act', 'cat', 'tac', 'god', 'dog', 'odg'], 'cat') == 3", "assert count_anagrams(['act', 'cat', 'tac', 'god', 'dog', 'odg'], 'god') == 3"]}
{"seq_id": 73096285178, "instruction": "Write a function to find the first unique character in a given string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import OrderedDict\n\ndef firstUniqueChar(s):\n    char_order = OrderedDict()\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            char_order[char] = True\n            \n    for char in char_order:\n        if char_count[char] == 1:\n            return s.index(char)\n    return -1\n```", "code": "from collections import OrderedDict\n\ndef firstUniqueChar(s):\n    char_order = OrderedDict()\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            char_order[char] = True\n            \n    for char in char_order:\n        if char_count[char] == 1:\n            return s.index(char)\n    return -1", "entry_point": "firstUniqueChar", "testcase": ["assert firstUniqueChar(\"loveleetcode\") == 2", "assert firstUniqueChar(\"leetcode\") == 0", "assert firstUniqueChar(\"aabb\") == -1"]}
{"seq_id": 34944051212, "instruction": "Write a function to find the largest number in a list that is smaller than a given number and divisible by a given divisor.", "output": "Here is the code to solve this problem: \n```python\ndef largest_divisible_number(arr, target, divisor):\n  valid_numbers = [num for num in arr if num < target and num % divisor == 0]\n  if valid_numbers:\n    return max(valid_numbers)\n  return -1\n```", "code": "def largest_divisible_number(arr, target, divisor):\n  valid_numbers = [num for num in arr if num < target and num % divisor == 0]\n  if valid_numbers:\n    return max(valid_numbers)\n  return -1", "entry_point": "largest_divisible_number", "testcase": ["assert largest_divisible_number([10, 20, 30, 40], 50, 10) == 40", "assert largest_divisible_number([5, 10, 15, 20], 25, 5) == 20", "assert largest_divisible_number([2, 4, 6, 8], 12, 2) == 8"]}
{"seq_id": 12958339320, "instruction": "Write a python function to find the maximum sum of a contiguous subarray with no duplicates.", "output": "Here is the code to solve this problem: \n```python\ndef max_sum(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_sum = current_sum = nums[0]\n    start = end = 0\n    for i in range(1, len(nums)):\n        if nums[i] in nums[start:end]:\n            start += 1\n            current_sum -= nums[start-1]\n        else:\n            current_sum += nums[i]\n            end += 1\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n\nprint(max_sum([1,2,3,4]))\nprint(max_sum([2,3,5,1,4]))\nprint(max_sum([-1, -2, -3, -4]))\n```", "code": "def max_sum(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_sum = current_sum = nums[0]\n    start = end = 0\n    for i in range(1, len(nums)):\n        if nums[i] in nums[start:end]:\n            start += 1\n            current_sum -= nums[start-1]\n        else:\n            current_sum += nums[i]\n            end += 1\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n\nprint(max_sum([1,2,3,4]))\nprint(max_sum([2,3,5,1,4]))\nprint(max_sum([-1, -2, -3, -4]))", "entry_point": "max_sum", "testcase": ["assert max_sum([1,2,3,4]) == 10", "assert max_sum([2,3,5,1,4]) == 15", "assert max_sum([-1, -2, -3, -4]) == -1"]}
{"seq_id": 24756450148, "instruction": "Write a function to find the number of connected components in an undirected graph.\n\nGiven a list of edges representing an undirected graph, write a function to find the number of connected components in the graph. A connected component is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef find_connected_components(edges):\n    graph = defaultdict(list)\n    visited = set()\n    components = 0\n    \n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n        \n    def dfs(node):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor)\n                \n    for node in graph:\n        if node not in visited:\n            dfs(node)\n            components += 1\n                \n    return components\n```", "code": "from collections import defaultdict\n\ndef find_connected_components(edges):\n    graph = defaultdict(list)\n    visited = set()\n    components = 0\n    \n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n        \n    def dfs(node):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor)\n                \n    for node in graph:\n        if node not in visited:\n            dfs(node)\n            components += 1\n                \n    return components", "entry_point": "find_connected_components", "testcase": ["assert find_connected_components([[0, 1], [1, 2], [2, 3], [3, 0]]) == 1", "assert find_connected_components([[1, 2], [2, 3], [4, 5], [5, 6]]) == 2", "assert find_connected_components([[0, 1], [1, 2], [3, 4]]) == 2"]}
{"seq_id": 73849077673, "instruction": "Write a python function to find the first non-repeating character in a given string.", "output": "Here is the code to solve this problem: \n```python\nimport collections\ndef firstUniqChar(s):\n    if s == \"\":\n        return -1\n    elif len(s) == 1:\n        return 0\n    elif len(set(s)) == 1:\n        return -1\n    x1 = dict(collections.Counter(s))\n    for i in range(len(s)):\n        if x1[s[i]] == 1:\n            return i\n    return -1\n```", "code": "import collections\ndef firstUniqChar(s):\n    if s == \"\":\n        return -1\n    elif len(s) == 1:\n        return 0\n    elif len(set(s)) == 1:\n        return -1\n    x1 = dict(collections.Counter(s))\n    for i in range(len(s)):\n        if x1[s[i]] == 1:\n            return i\n    return -1", "entry_point": "firstUniqChar", "testcase": ["assert firstUniqChar(\"loveleetcode\") == 2", "assert firstUniqChar(\"aadadaad\") == -1", "assert firstUniqChar(\"leetcode\") == 0"]}
{"seq_id": 1633813158, "instruction": "Write a function that converts a decimal number to its equivalent in a specified base (between 2 and 16, inclusive). The function should return the string representation of the number in the new base.", "output": "Here is the code to solve this problem: \n```python\ndef convert_base(num, base):\n    digits = \"0123456789ABCDEF\"\n    result = ''\n    while num > 0:\n        result = digits[num % base] + result\n        num = num // base\n    return result\n```", "code": "def convert_base(num, base):\n    digits = \"0123456789ABCDEF\"\n    result = ''\n    while num > 0:\n        result = digits[num % base] + result\n        num = num // base\n    return result", "entry_point": "convert_base", "testcase": ["assert convert_base(10, 2) == '1010'", "assert convert_base(255, 16) == 'FF'", "assert convert_base(127, 8) == '177'"]}
{"seq_id": 73903696948, "instruction": "Write a python function to find the kth smallest element in an unsorted array using a min heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef kth_smallest(nums, k):\n    heapq.heapify(nums)\n    for _ in range(k-1):\n        heapq.heappop(nums)\n    return heapq.heappop(nums)\n\nprint(kth_smallest([3, 2, 1, 5, 6, 4], 2))  # 2\nprint(kth_smallest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4))  # 3\nprint(kth_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))  # 8\n```", "code": "import heapq\n\ndef kth_smallest(nums, k):\n    heapq.heapify(nums)\n    for _ in range(k-1):\n        heapq.heappop(nums)\n    return heapq.heappop(nums)\n\nprint(kth_smallest([3, 2, 1, 5, 6, 4], 2))  # 2\nprint(kth_smallest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4))  # 3\nprint(kth_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))  # 8", "entry_point": "kth_smallest", "testcase": ["assert kth_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == 8", "assert kth_smallest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 3", "assert kth_smallest([3, 2, 1, 5, 6, 4], 2) == 2"]}
{"seq_id": 13541119673, "instruction": "Write a python function to check if a given string is a valid HTML tag.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_html_tag(html_string):\n    stack = []\n    i = 0\n    while i < len(html_string):\n        if html_string[i] == '<':\n            if i + 1 < len(html_string) and html_string[i + 1] == '/':\n                if len(stack) == 0:\n                    return False\n                if stack.pop() != html_string[i + 2:html_string.find('>', i + 2)]:\n                    return False\n                i = html_string.find('>', i) + 1\n            else:\n                j = i + 1\n                while j < len(html_string) and html_string[j] != '>':\n                    j += 1\n                if j == len(html_string):\n                    return False\n                tag = html_string[i + 1:j]\n                if len(stack) > 0 and stack[-1] == tag:\n                    return False\n                stack.append(tag)\n                i = j + 1\n        else:\n            i += 1\n    return len(stack) == 0\n```", "code": "def is_valid_html_tag(html_string):\n    stack = []\n    i = 0\n    while i < len(html_string):\n        if html_string[i] == '<':\n            if i + 1 < len(html_string) and html_string[i + 1] == '/':\n                if len(stack) == 0:\n                    return False\n                if stack.pop() != html_string[i + 2:html_string.find('>', i + 2)]:\n                    return False\n                i = html_string.find('>', i) + 1\n            else:\n                j = i + 1\n                while j < len(html_string) and html_string[j] != '>':\n                    j += 1\n                if j == len(html_string):\n                    return False\n                tag = html_string[i + 1:j]\n                if len(stack) > 0 and stack[-1] == tag:\n                    return False\n                stack.append(tag)\n                i = j + 1\n        else:\n            i += 1\n    return len(stack) == 0", "entry_point": "is_valid_html_tag", "testcase": ["assert is_valid_html_tag(\"<div></p>\") == False", "assert is_valid_html_tag(\"<div></div>\") == True", "assert is_valid_html_tag(\"<div><p>\") == False", "assert is_valid_html_tag(\"<div class='container' id='main'>This is a test<div>\") == False"]}
{"seq_id": 70996379059, "instruction": "Write a Python function to find the maximum and minimum numbers from a sequence of numbers.\nNote: Do not use built-in functions max() and min().", "output": "Here is the code to solve this problem: \n```python\ndef max_min(data):\n    max_val = data[0]\n    min_val = data[0]\n    for num in data[1:]:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return (max_val, min_val)\n```", "code": "def max_min(data):\n    max_val = data[0]\n    min_val = data[0]\n    for num in data[1:]:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return (max_val, min_val)", "entry_point": "max_min", "testcase": ["assert max_min([5]) == (5, 5)", "assert max_min([1, 2, 3, 4, 5]) == (5, 1)", "assert max_min([-5, -2, -3, -1]) == (-1, -5)"]}
{"seq_id": 21373026563, "instruction": "Write a function to find the Fibonacci sequence up to n using a generator.", "output": "Here is the code to solve this problem: \n```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n```", "code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b", "entry_point": "list", "testcase": ["assert list(fibonacci(5)) == [0, 1, 1, 2, 3]", "assert list(fibonacci(10)) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "assert list(fibonacci(1)) == [0]"]}
{"seq_id": 73087802945, "instruction": "Write a function to find the first non-repeating character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef find_first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n```", "code": "def find_first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None", "entry_point": "find_first_non_repeating_char", "testcase": ["assert find_first_non_repeating_char(\"\") == None", "assert find_first_non_repeating_char(\"aabcc\") == \"b\"", "assert find_first_non_repeating_char(\"aaabbbccc\") == None", "assert find_first_non_repeating_char(\"programming\") == \"p\"", "assert find_first_non_repeating_char(\"hello\") == \"h\""]}
{"seq_id": 3177144911, "instruction": "Write a python function to find the number of unique binary search trees that can be created with n nodes.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique_bst(n):\n    if n <= 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n```", "code": "def count_unique_bst(n):\n    if n <= 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]", "entry_point": "count_unique_bst", "testcase": ["assert count_unique_bst(4) == 14", "assert count_unique_bst(5) == 42", "assert count_unique_bst(3) == 5"]}
{"seq_id": 74854114874, "instruction": "Write a function to find the k largest elements in a list using a heap.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef find_k_largest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n```", "code": "import heapq\n\ndef find_k_largest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap", "entry_point": "find_k_largest", "testcase": ["assert find_k_largest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4) == [5, 5, 6, 9]", "assert find_k_largest([10, 7, 8, 9, 1, 5], 3) == [8, 9, 10]", "assert find_k_largest([3, 2, 1], 2) == [2, 3]"]}
{"seq_id": 26952705538, "instruction": "Write a python function to find the number of pairs in a list that have a difference of k.", "output": "Here is the code to solve this problem: \n```python\ndef kdpiaa(lis, k):\n    result = 0\n    flag = []\n    if k == 0:\n        for i in lis:\n            if i not in flag:\n                flag.append(i)\n                if lis.count(i) >= 2:\n                    result += 1\n        return result\n    elif k < 0:\n        return 0\n    else:\n        temp = list(set(lis))\n        temp.sort()\n        for i in temp:\n            if i + k in temp:\n                result += 1\n        return result\n```", "code": "def kdpiaa(lis, k):\n    result = 0\n    flag = []\n    if k == 0:\n        for i in lis:\n            if i not in flag:\n                flag.append(i)\n                if lis.count(i) >= 2:\n                    result += 1\n        return result\n    elif k < 0:\n        return 0\n    else:\n        temp = list(set(lis))\n        temp.sort()\n        for i in temp:\n            if i + k in temp:\n                result += 1\n        return result", "entry_point": "kdpiaa", "testcase": ["assert kdpiaa([1, 5, 3, 4, 2], 1) == 4", "assert kdpiaa([1, 2, 3, 4, 5], -1) == 0", "assert kdpiaa([3, 1, 4, 1, 5], 0) == 1"]}
{"seq_id": 75246705945, "instruction": "Write a python function to find the nth row of Pascal's triangle.", "output": "Here is the code to solve this problem: \n```python\ndef pascal_row(n):\n    row = [1] * (n + 1)\n    for i in range(1, n + 1):\n        row[i] = int(row[i-1] * (n - i + 1) / i)\n    return row\n```", "code": "def pascal_row(n):\n    row = [1] * (n + 1)\n    for i in range(1, n + 1):\n        row[i] = int(row[i-1] * (n - i + 1) / i)\n    return row", "entry_point": "pascal_row", "testcase": ["assert pascal_row(1) == [1, 1]", "assert pascal_row(0) == [1]", "assert pascal_row(4) == [1, 4, 6, 4, 1]", "assert pascal_row(3) == [1, 3, 3, 1]"]}
{"seq_id": 11195656044, "instruction": "Write a function to check if two events conflict with each other. Each event is represented as a list of two strings, indicating the start and end times in \"HH:MM\" format.", "output": "Here is the code to solve this problem: \n```python\ndef check_conflict(event1, event2):\n    start1 = int(event1[0].replace(':', ''))\n    end1 = int(event1[1].replace(':', ''))\n    start2 = int(event2[0].replace(':', ''))\n    end2 = int(event2[1].replace(':', ''))\n    if start1 < end2 and end1 > start2:\n        return True\n    else:\n        return False\n```", "code": "def check_conflict(event1, event2):\n    start1 = int(event1[0].replace(':', ''))\n    end1 = int(event1[1].replace(':', ''))\n    start2 = int(event2[0].replace(':', ''))\n    end2 = int(event2[1].replace(':', ''))\n    if start1 < end2 and end1 > start2:\n        return True\n    else:\n        return False", "entry_point": "check_conflict", "testcase": ["assert check_conflict([\"09:00\", \"10:00\"], [\"09:30\", \"11:00\"]) == True", "assert check_conflict([\"10:00\", \"11:00\"], [\"11:00\", \"12:00\"]) == False", "assert check_conflict([\"12:00\", \"13:00\"], [\"12:30\", \"13:30\"]) == True"]}
{"seq_id": 23520921287, "instruction": "Write a function to check if a given string represents a valid date in the format 'YYYY-MM-DD'.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_date(date_str):\n    # Function to check if a given string represents a valid date in the format 'YYYY-MM-DD'\n    try:\n        year, month, day = map(int, date_str.split('-'))\n        if year < 1 or month < 1 or month > 12 or day < 1:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day > 29:\n                    return False\n            elif day > 28:\n                return False\n        elif day > 31:\n            return False\n        return True\n    except ValueError:\n        return False\n```", "code": "def is_valid_date(date_str):\n    # Function to check if a given string represents a valid date in the format 'YYYY-MM-DD'\n    try:\n        year, month, day = map(int, date_str.split('-'))\n        if year < 1 or month < 1 or month > 12 or day < 1:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day > 29:\n                    return False\n            elif day > 28:\n                return False\n        elif day > 31:\n            return False\n        return True\n    except ValueError:\n        return False", "entry_point": "is_valid_date", "testcase": ["assert is_valid_date(\"2022-02-29\") == False", "assert is_valid_date(\"2021-04-31\") == False", "assert is_valid_date(\"2020-02-29\") == True", "assert is_valid_date(\"2021-12-31\") == True"]}
{"seq_id": 41155328916, "instruction": "Write a python function to find the longest common substring between two strings.", "output": "Here is the code to solve this problem: \n```python\ndef longestCommonSubstring(s1, s2):\n    len1, len2 = len(s1), len(s2)\n    grid = [[0 for _ in range(len2+1)] for _ in range(len1+1)]\n    result = \"\"\n    max_length = 0\n    for r in range(1, len1+1):\n        for c in range(1, len2+1):\n            if s1[r-1] == s2[c-1]:\n                grid[r][c] = grid[r-1][c-1] + 1\n                if grid[r][c] > max_length:\n                    max_length = grid[r][c]\n                    result = s1[r-max_length:r]\n            else:\n                grid[r][c] = 0\n    return result\n```", "code": "def longestCommonSubstring(s1, s2):\n    len1, len2 = len(s1), len(s2)\n    grid = [[0 for _ in range(len2+1)] for _ in range(len1+1)]\n    result = \"\"\n    max_length = 0\n    for r in range(1, len1+1):\n        for c in range(1, len2+1):\n            if s1[r-1] == s2[c-1]:\n                grid[r][c] = grid[r-1][c-1] + 1\n                if grid[r][c] > max_length:\n                    max_length = grid[r][c]\n                    result = s1[r-max_length:r]\n            else:\n                grid[r][c] = 0\n    return result", "entry_point": "longestCommonSubstring", "testcase": ["assert longestCommonSubstring(\"abcdxyz\", \"xyzabcd\") == \"abcd\"", "assert longestCommonSubstring(\"geeksfor\", \"geeks\") == \"geeks\"", "assert longestCommonSubstring(\"zxabcdezy\", \"yzabcdezx\") == \"abcdez\""]}
{"seq_id": 31042016430, "instruction": "Write a function to generate the nth row of Pascal's triangle.", "output": "Here is the code to solve this problem: \n```python\ndef pascal_row(n):\n    if n==0:\n        return [1]\n    if n==1:\n        return [1,1]\n\n    last = [1,1]\n    for _ in range(2, n + 1):\n        row = []\n        for i in range(len(last) - 1):\n            row.append(last[i] + last[i + 1])\n        row.insert(0, 1)\n        row.append(1)\n        last=row\n\n    return last\n```", "code": "def pascal_row(n):\n    if n==0:\n        return [1]\n    if n==1:\n        return [1,1]\n\n    last = [1,1]\n    for _ in range(2, n + 1):\n        row = []\n        for i in range(len(last) - 1):\n            row.append(last[i] + last[i + 1])\n        row.insert(0, 1)\n        row.append(1)\n        last=row\n\n    return last", "entry_point": "pascal_row", "testcase": ["assert pascal_row(0)==[1]", "assert pascal_row(5)==[1,5,10,10,5,1]", "assert pascal_row(1)==[1,1]", "assert pascal_row(3)==[1,3,3,1]"]}
{"seq_id": 70173797808, "instruction": "Write a python function to find the smallest repeating subsequence in a string.", "output": "Here is the code to solve this problem: \n```python\ndef find_smallest_repeating_subsequence(s):\n    for i in range(1, len(s) // 2 + 1):\n        if len(s) % i == 0:\n            if s[:i] * (len(s) // i) == s:\n                return s[:i]\n    return s\n```", "code": "def find_smallest_repeating_subsequence(s):\n    for i in range(1, len(s) // 2 + 1):\n        if len(s) % i == 0:\n            if s[:i] * (len(s) // i) == s:\n                return s[:i]\n    return s", "entry_point": "find_smallest_repeating_subsequence", "testcase": ["assert find_smallest_repeating_subsequence(\"abcdabcdabcd\") == \"abcd\"", "assert find_smallest_repeating_subsequence(\"ababab\") == \"ab\"", "assert find_smallest_repeating_subsequence(\"abcabcabcabc\") == \"abc\""]}
{"seq_id": 5202166951, "instruction": "Write a function to merge two sorted lists into a single sorted list.", "output": "Here is the code to solve this problem: \n```python\ndef merge_lists(list1, list2):\n    i, j = 0, 0\n    result = []\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    result += list1[i:]\n    result += list2[j:]\n    return result\n```", "code": "def merge_lists(list1, list2):\n    i, j = 0, 0\n    result = []\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    result += list1[i:]\n    result += list2[j:]\n    return result", "entry_point": "merge_lists", "testcase": ["assert merge_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists([1, 3, 9], [2, 6, 8]) == [1, 2, 3, 6, 8, 9]", "assert merge_lists([1, 3, 5, 7], [2, 4, 6]) == [1, 2, 3, 4, 5, 6, 7]"]}
{"seq_id": 35509566793, "instruction": "Write a python function to calculate the number of valid parentheses strings of length n.\nA valid parentheses string is a string that consists of only '(' and ')' and satisfies the following conditions:\n1. The number of '(' and ')' are equal.\n2. Every '(' is closed by a corresponding ')'.", "output": "Here is the code to solve this problem: \n```python\ndef number_of_valid_parentheses(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n```", "code": "def number_of_valid_parentheses(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]", "entry_point": "number_of_valid_parentheses", "testcase": ["assert number_of_valid_parentheses(3) == 5", "assert number_of_valid_parentheses(5) == 42", "assert number_of_valid_parentheses(4) == 14"]}
{"seq_id": 19098051712, "instruction": "Write a function to find the number of pairs in a list that can be formed from the same number.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef find_same_number_pairs(nums):\n    count=Counter(nums)\n    output=[]\n    remain=0\n    total=0\n    for i in count:\n        if count[i]:\n            total+=count[i]//2\n            remain+=count[i]%2\n    output.append(total)\n    output.append(remain)\n    return output\n```", "code": "from collections import Counter\n\ndef find_same_number_pairs(nums):\n    count=Counter(nums)\n    output=[]\n    remain=0\n    total=0\n    for i in count:\n        if count[i]:\n            total+=count[i]//2\n            remain+=count[i]%2\n    output.append(total)\n    output.append(remain)\n    return output", "entry_point": "find_same_number_pairs", "testcase": ["assert find_same_number_pairs([1,1,1,1]) == [2,0]", "assert find_same_number_pairs([1,2,3,4,5]) == [0,5]", "assert find_same_number_pairs([10,2,5,10,10,5]) == [2,2]"]}
{"seq_id": 4581657350, "instruction": "Write a python function that generates a random password with the given length and character types. The password should contain at least one lowercase letter, one uppercase letter, one digit, and one special character.", "output": "Here is the code to solve this problem: \n```python\nimport string\nimport random\n\ndef generate_password(length=12):\n    if length < 4:\n        raise ValueError(\"Password length must be at least 4.\")\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n    password = []\n    password.append(random.choice(string.ascii_lowercase))\n    password.append(random.choice(string.ascii_uppercase))\n    password.append(random.choice(string.digits))\n    password.append(random.choice(string.punctuation))\n    for _ in range(length-4):\n        password.append(random.choice(all_chars))\n    random.shuffle(password)\n    return ''.join(password)\n```", "code": "import string\nimport random\n\ndef generate_password(length=12):\n    if length < 4:\n        raise ValueError(\"Password length must be at least 4.\")\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n    password = []\n    password.append(random.choice(string.ascii_lowercase))\n    password.append(random.choice(string.ascii_uppercase))\n    password.append(random.choice(string.digits))\n    password.append(random.choice(string.punctuation))\n    for _ in range(length-4):\n        password.append(random.choice(all_chars))\n    random.shuffle(password)\n    return ''.join(password)", "entry_point": "generate_password", "testcase": ["assert generate_password(8) != generate_password(8)", "assert len(generate_password(10)) == 10", "assert any(char.isdigit() for char in generate_password(12)) == True", "assert any(char.islower() for char in generate_password(12)) == True", "assert any(char.isupper() for char in generate_password(12)) == True", "assert any(char in string.punctuation for char in generate_password(12)) == True"]}
{"seq_id": 9565527813, "instruction": "Write a function to calculate the shortest path from a source city to a destination city given a list of flights and a maximum number of stops.", "output": "Here is the code to solve this problem: \n```python\ndef findCheapestPrice(n, flights, src, dst, K):\n    flightMap = {}\n    for s, d, p in flights:\n        if s not in flightMap:\n            flightMap[s] = []\n        flightMap[s].append((d, p))\n            \n    cache = {}\n    return findCheapestPriceHelper(n, flightMap, src, dst, K, cache)\n\ndef findCheapestPriceHelper(n, flightMap, src, dst, K, cache):\n    if K == -1:\n        return -1\n    \n    if (src, K) in cache:\n        return cache[(src, K)]\n    \n    minPrice = -1\n    if src not in flightMap:\n        return -1\n    \n    for d, p in flightMap[src]:\n        if d == dst:\n            if minPrice == -1 or p < minPrice:\n                minPrice = p\n        else:\n            r = findCheapestPriceHelper(n, flightMap, d, dst, K-1, cache)\n            if r != -1:\n                price = p + r\n                if minPrice == -1 or price < minPrice:\n                    minPrice = price\n            \n    cache[(src, K)] = minPrice\n    return minPrice\n```", "code": "def findCheapestPrice(n, flights, src, dst, K):\n    flightMap = {}\n    for s, d, p in flights:\n        if s not in flightMap:\n            flightMap[s] = []\n        flightMap[s].append((d, p))\n            \n    cache = {}\n    return findCheapestPriceHelper(n, flightMap, src, dst, K, cache)\n\ndef findCheapestPriceHelper(n, flightMap, src, dst, K, cache):\n    if K == -1:\n        return -1\n    \n    if (src, K) in cache:\n        return cache[(src, K)]\n    \n    minPrice = -1\n    if src not in flightMap:\n        return -1\n    \n    for d, p in flightMap[src]:\n        if d == dst:\n            if minPrice == -1 or p < minPrice:\n                minPrice = p\n        else:\n            r = findCheapestPriceHelper(n, flightMap, d, dst, K-1, cache)\n            if r != -1:\n                price = p + r\n                if minPrice == -1 or price < minPrice:\n                    minPrice = price\n            \n    cache[(src, K)] = minPrice\n    return minPrice", "entry_point": "findCheapestPrice", "testcase": ["assert findCheapestPrice(3, [[0,1,100],[1,2,100],[0,2,500]], 0, 2, 0) == 500", "assert findCheapestPrice(3, [[0,1,100],[1,2,100],[0,2,500]], 0, 2, 1) == 200", "assert findCheapestPrice(3, [[0,1,100],[1,2,100],[0,2,500]], 0, 1, 1) == 100"]}
{"seq_id": 17540343588, "instruction": "Write a function to find the shortest repeating pattern in a given string. If no repeating pattern is found, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef shortest_pattern(str):\n    length = len(str)\n    for x in range(1, length//2 + 1):\n        if length % x == 0:\n            if str[:x] * (length//x) == str:\n                return x\n    return -1\n```", "code": "def shortest_pattern(str):\n    length = len(str)\n    for x in range(1, length//2 + 1):\n        if length % x == 0:\n            if str[:x] * (length//x) == str:\n                return x\n    return -1", "entry_point": "shortest_pattern", "testcase": ["assert shortest_pattern(\"abcabcabcabc\") == 3 ", "assert shortest_pattern(\"abcdabcdabcd\") == 4", "assert shortest_pattern(\"abc\") == -1", "assert shortest_pattern(\"abcabcabcabcabc\") == 3 "]}
{"seq_id": 39440447238, "instruction": "Write a function to determine if two rectangles intersect with each other. The rectangles are represented as tuples with (x, y) coordinates of the top-left corner and the width and height (w, h).", "output": "Here is the code to solve this problem: \n```python\ndef check_intersection(rect1, rect2):\n    x1, y1, w1, h1 = rect1\n    x2, y2, w2, h2 = rect2\n\n    if x1 + w1 < x2 or x2 + w2 < x1:\n        return False\n    if y1 + h1 < y2 or y2 + h2 < y1:\n        return False\n    return True\n```", "code": "def check_intersection(rect1, rect2):\n    x1, y1, w1, h1 = rect1\n    x2, y2, w2, h2 = rect2\n\n    if x1 + w1 < x2 or x2 + w2 < x1:\n        return False\n    if y1 + h1 < y2 or y2 + h2 < y1:\n        return False\n    return True", "entry_point": "check_intersection", "testcase": ["assert check_intersection((0,0,2,2), (1,1,2,2)) == True", "assert check_intersection((-3,-3,3,3), (0,0,2,2)) == True", "assert check_intersection((0,0,1,1), (2,2,2,2)) == False"]}
{"seq_id": 74582240403, "instruction": "Write a python function to find the number of equal numbers from four given integers.", "output": "Here is the code to solve this problem: \n```python\ndef test_four_equal(a, b, c, d):\n  result= set([a,b,c,d])\n  if len(result)==4:\n    return 0\n  else:\n    return (5-len(result))\n```", "code": "def test_four_equal(a, b, c, d):\n  result= set([a,b,c,d])\n  if len(result)==4:\n    return 0\n  else:\n    return (5-len(result))", "entry_point": "test_four_equal", "testcase": ["assert test_four_equal(1,1,1,1) == 4", "assert test_four_equal(-1,-2,-3,-4) == 0", "assert test_four_equal(1,2,2,3) == 2"]}
{"seq_id": 26187952479, "instruction": "Write a function to find the longest common subsequence of two strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_subsequence(x, y):\n    m = len(x)\n    n = len(y)\n\n    L = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif x[i-1] == y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    return L[m][n]\n```", "code": "def longest_common_subsequence(x, y):\n    m = len(x)\n    n = len(y)\n\n    L = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif x[i-1] == y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    return L[m][n]", "entry_point": "longest_common_subsequence", "testcase": ["assert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\")==4", "assert longest_common_subsequence(\"ABCDEF\", \"ACDE\")==4", "assert longest_common_subsequence(\"ABCBDAB\", \"BDCAB\")==4"]}
{"seq_id": 32143187129, "instruction": "Write a python function to find the median of two sorted arrays. The overall run time complexity should be O(log(min(m,n))).", "output": "Here is the code to solve this problem: \n```python\ndef median(nums1, nums2):\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n\n    x, y = len(nums1), len(nums2)\n    low = 0\n    high = x\n\n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = (x + y + 1) // 2 - partitionX\n\n        maxLeftX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\n        minRightX = float('inf') if partitionX == x else nums1[partitionX]\n\n        maxLeftY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\n        minRightY = float('inf') if partitionY == y else nums2[partitionY]\n\n        if maxLeftX <= minRightY and maxLeftY <= minRightX:\n            if (x + y) % 2 == 0:\n                return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2\n            else:\n                return max(maxLeftX, maxLeftY)\n        elif maxLeftX > minRightY:\n            high = partitionX - 1\n        else:\n            low = partitionX + 1\n```", "code": "def median(nums1, nums2):\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n\n    x, y = len(nums1), len(nums2)\n    low = 0\n    high = x\n\n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = (x + y + 1) // 2 - partitionX\n\n        maxLeftX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\n        minRightX = float('inf') if partitionX == x else nums1[partitionX]\n\n        maxLeftY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\n        minRightY = float('inf') if partitionY == y else nums2[partitionY]\n\n        if maxLeftX <= minRightY and maxLeftY <= minRightX:\n            if (x + y) % 2 == 0:\n                return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2\n            else:\n                return max(maxLeftX, maxLeftY)\n        elif maxLeftX > minRightY:\n            high = partitionX - 1\n        else:\n            low = partitionX + 1", "entry_point": "median", "testcase": ["assert median([1,2], [3,4]) == 2.5", "assert median([1,3], [2]) == 2", "assert median([1,3], [2,7]) == 2.5"]}
{"seq_id": 29080252121, "instruction": "Write a function to find the transpose of a given matrix.", "output": "Here is the code to solve this problem: \n```python\ndef transpose_matrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Create a new matrix with the dimensions swapped\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    \n    # Fill in the new matrix with the transposed values\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    \n    return transposed\n```", "code": "def transpose_matrix(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Create a new matrix with the dimensions swapped\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    \n    # Fill in the new matrix with the transposed values\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    \n    return transposed", "entry_point": "transpose_matrix", "testcase": ["assert transpose_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "assert transpose_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]", "assert transpose_matrix([[1, 2, 3]]) == [[1], [2], [3]]"]}
{"seq_id": 37465398635, "instruction": "Write a function to find the middle element of a singly linked list. If the list has an even number of elements, return the second middle element.", "output": "Here is the code to solve this problem: \n```python\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef find_middle_element(arr):\n    # Creating a linked list from the given array\n    head = ListNode(arr[0])\n    current = head\n    for i in range(1, len(arr)):\n        current.next = ListNode(arr[i])\n        current = current.next\n    \n    # Finding the middle element\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        fast = fast.next.next\n        slow = slow.next\n    \n    # Returning the value of the middle element\n    if fast is not None:\n        return slow.val\n    else:\n        return slow.val\n\nassert find_middle_element([1, 2, 3, 4, 5]) == 3\nassert find_middle_element([1, 2, 3, 4, 5, 6]) == 4\nassert find_middle_element([10, 20, 30, 40, 50, 60, 70]) == 40\n```", "code": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef find_middle_element(arr):\n    # Creating a linked list from the given array\n    head = ListNode(arr[0])\n    current = head\n    for i in range(1, len(arr)):\n        current.next = ListNode(arr[i])\n        current = current.next\n    \n    # Finding the middle element\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        fast = fast.next.next\n        slow = slow.next\n    \n    # Returning the value of the middle element\n    if fast is not None:\n        return slow.val\n    else:\n        return slow.val\n\nassert find_middle_element([1, 2, 3, 4, 5]) == 3\nassert find_middle_element([1, 2, 3, 4, 5, 6]) == 4\nassert find_middle_element([10, 20, 30, 40, 50, 60, 70]) == 40", "entry_point": "find_middle_element", "testcase": ["assert find_middle_element([1, 2, 3, 4, 5]) == 3", "assert find_middle_element([1, 2, 3, 4, 5, 6]) == 4", "assert find_middle_element([10, 20, 30, 40, 50, 60, 70]) == 40"]}
{"seq_id": 19077452163, "instruction": "Write a python function to find the factorial of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)\n```", "code": "def fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)", "entry_point": "fact", "testcase": ["assert fact(5) == 120", "assert fact(3) == 6", "assert fact(1) == 1"]}
{"seq_id": 8699678149, "instruction": "Write a function to check if a string is an isogram. An isogram is a word or phrase without a repeating letter.", "output": "Here is the code to solve this problem: \n```python\ndef is_isogram(string):\n    string = string.lower()\n    for char in string:\n        if string.count(char) > 1:\n            return False\n    return True\n```", "code": "def is_isogram(string):\n    string = string.lower()\n    for char in string:\n        if string.count(char) > 1:\n            return False\n    return True", "entry_point": "is_isogram", "testcase": ["assert is_isogram(\"Dermatoglyphics\") == True", "assert is_isogram(\"moOse\") == False", "assert is_isogram(\"aba\") == False"]}
{"seq_id": 39381920105, "instruction": "Write a function to calculate the difference between the maximum element and the minimum element in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_difference(nums):\n    max_element = max(nums)\n    min_element = min(nums)\n    return max_element - min_element\n```", "code": "def calculate_difference(nums):\n    max_element = max(nums)\n    min_element = min(nums)\n    return max_element - min_element", "entry_point": "calculate_difference", "testcase": ["assert calculate_difference([2, 4, 6, 8, 10]) == 8", "assert calculate_difference([1, 3, 6, 10]) == 9", "assert calculate_difference([5, 5, 5, 5]) == 0"]}
{"seq_id": 24795493818, "instruction": "Write a function that implements the Josephus problem. In this problem, people are standing in a circle waiting to be executed. Counting begins at a specified point in the circle and proceeds around the circle in a specified direction. After a specified number of people are skipped, the next person is executed. The procedure is repeated with the remaining people, starting with the next person, going in the same direction and skipping the same number of people, until only one person remains, and is freed.", "output": "Here is the code to solve this problem: \n```python\ndef josephus(n, k):\n    if (n == 1):\n        return 1\n    else:\n        return (josephus(n - 1, k) + k-1) % n + 1\n```", "code": "def josephus(n, k):\n    if (n == 1):\n        return 1\n    else:\n        return (josephus(n - 1, k) + k-1) % n + 1", "entry_point": "josephus", "testcase": ["assert josephus(7, 3) == 4", "assert josephus(41, 3) == 31", "assert josephus(1, 30) == 1", "assert josephus(5, 2) == 3"]}
{"seq_id": 5384805455, "instruction": "Write a function to remove all occurrences of a specified value from a given list and return the modified list.", "output": "Here is the code to solve this problem: \n```python\ndef remove_value(lst, value):\n    return [x for x in lst if x != value]\n```", "code": "def remove_value(lst, value):\n    return [x for x in lst if x != value]", "entry_point": "remove_value", "testcase": ["assert remove_value(['apple', 'banana', 'apple', 'cherry'], 'apple') == ['banana', 'cherry']", "assert remove_value([5, 6, 7, 5, 8, 5], 5) == [6, 7, 8]", "assert remove_value([1, 2, 3, 2, 4, 2], 2) == [1, 3, 4]"]}
{"seq_id": 15259521281, "instruction": "Write a function to check if a list of integers is strictly increasing.", "output": "Here is the code to solve this problem: \n```python\ndef is_strictly_increasing(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n```", "code": "def is_strictly_increasing(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True", "entry_point": "is_strictly_increasing", "testcase": ["assert is_strictly_increasing([1, 2, 2, 3, 4]) == False", "assert is_strictly_increasing([5, 6, 7, 8, 10]) == True", "assert is_strictly_increasing([1, 2, 3, 4, 5]) == True", "assert is_strictly_increasing([10, 9, 8, 7, 6]) == False"]}
{"seq_id": 7992515576, "instruction": "Write a function to convert a list of integers into a single integer by concatenating the digits of the integers.", "output": "Here is the code to solve this problem: \n```python\ndef convert_list_to_int(int_list):\n    result = 0\n    multiplier = 1\n    for i in reversed(int_list):\n        result += i * multiplier\n        multiplier *= 10 ** len(str(i))\n    return result\n```", "code": "def convert_list_to_int(int_list):\n    result = 0\n    multiplier = 1\n    for i in reversed(int_list):\n        result += i * multiplier\n        multiplier *= 10 ** len(str(i))\n    return result", "entry_point": "convert_list_to_int", "testcase": ["assert convert_list_to_int([1, 23, 456]) == 123456", "assert convert_list_to_int([0, 27, 398]) == 27398", "assert convert_list_to_int([11, 12, 13]) == 111213"]}
{"seq_id": 1085128469, "instruction": "Write a python function to perform flood fill algorithm on a given image. The function should take an image represented as a list of lists of integers, a starting pixel coordinates (sr, sc), and a new color. The function should replace the color of the starting pixel and all its same colored neighbors (top, bottom, left, right) recursively.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef floodFill(image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:\n    tempColor = image[sr][sc]\n        \n    if tempColor == newColor:\n        return image\n        \n    def changeColor(image, row, column, newColor, tempColor):\n        if row < 0 or column < 0 or row >= len(image) or column >= len(image[0]) or image[row][column] != tempColor:\n            return \n        image[row][column] = newColor\n            \n        if row > 0:\n            changeColor(image, row-1, column, newColor, tempColor)\n        if column > 0:\n            changeColor(image, row, column-1, newColor, tempColor)\n        if row < len(image):\n            changeColor(image, row+1, column, newColor, tempColor)\n        if column < len(image[0]):\n            changeColor(image, row, column+1, newColor, tempColor)\n        # return image\n        \n    changeColor(image, sr, sc, newColor, tempColor)\n        \n    return image\n```", "code": "from typing import List\n\ndef floodFill(image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:\n    tempColor = image[sr][sc]\n        \n    if tempColor == newColor:\n        return image\n        \n    def changeColor(image, row, column, newColor, tempColor):\n        if row < 0 or column < 0 or row >= len(image) or column >= len(image[0]) or image[row][column] != tempColor:\n            return \n        image[row][column] = newColor\n            \n        if row > 0:\n            changeColor(image, row-1, column, newColor, tempColor)\n        if column > 0:\n            changeColor(image, row, column-1, newColor, tempColor)\n        if row < len(image):\n            changeColor(image, row+1, column, newColor, tempColor)\n        if column < len(image[0]):\n            changeColor(image, row, column+1, newColor, tempColor)\n        # return image\n        \n    changeColor(image, sr, sc, newColor, tempColor)\n        \n    return image", "entry_point": "floodFill", "testcase": ["assert floodFill([[1,1,1],[1,1,0],[1,0,1]], 1, 1, 2) == [[2,2,2],[2,2,0],[2,0,1]]", "assert floodFill([[1,1,1],[1,1,1],[1,1,1]], 1, 1, 2) == [[2,2,2],[2,2,2],[2,2,2]]", "assert floodFill([[0,0,0],[0,0,0]], 0, 0, 1) == [[1,1,1],[1,1,1]]"]}
{"seq_id": 36221848997, "instruction": "Write a python function to find the number of good pairs in a list of numbers. A pair (i, j) is called good if nums[i] == nums[j] and i < j.", "output": "Here is the code to solve this problem: \n```python\ndef count_good_pairs(nums):\n    key = {}\n    res = 0\n    for i in nums:\n      if i in key:\n        res += key[i]\n        key[i] += 1\n      else:\n        key[i] = 1\n    return res\n```", "code": "def count_good_pairs(nums):\n    key = {}\n    res = 0\n    for i in nums:\n      if i in key:\n        res += key[i]\n        key[i] += 1\n      else:\n        key[i] = 1\n    return res", "entry_point": "count_good_pairs", "testcase": ["assert count_good_pairs([1,2,3]) == 0", "assert count_good_pairs([1,1,1,1]) == 6", "assert count_good_pairs([1,2,3,1,1,3]) == 4"]}
{"seq_id": 19365498054, "instruction": "Write a function that takes a string and a set of words, then finds all starting indices of the substring in the string that is a concatenation of each word in the set exactly once and without any intervening characters.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef findSubstring(s, words):\n    if not words:\n        return []\n    counter = Counter(words)\n    unit = len(words[0])\n    ans = []\n    window = unit * len(words)\n\n    for margin in range(unit):\n        sub_counter = Counter()\n        score = 0\n        for cur in range(margin, margin+window, unit):\n            word = s[cur:cur+unit]\n            if word in counter:\n                sub_counter[word] += 1\n                if sub_counter[word] <= counter[word]:\n                    score += 1\n\n        if score == len(words):\n            ans.append(margin)\n\n        for start in range(margin, len(s), unit):\n            removed_word = s[start:start+unit]\n            if removed_word in counter:\n                sub_counter[removed_word] -= 1\n                if sub_counter[removed_word] < counter[removed_word]:\n                    score -= 1\n\n            added_word = s[start+window: start+window+unit]\n            if added_word in counter:\n                sub_counter[added_word] += 1\n                if sub_counter[added_word] <= counter[added_word]:\n                    score += 1\n            if score == len(words):\n                ans.append(start+unit)\n    return ans\n```", "code": "from collections import Counter\n\ndef findSubstring(s, words):\n    if not words:\n        return []\n    counter = Counter(words)\n    unit = len(words[0])\n    ans = []\n    window = unit * len(words)\n\n    for margin in range(unit):\n        sub_counter = Counter()\n        score = 0\n        for cur in range(margin, margin+window, unit):\n            word = s[cur:cur+unit]\n            if word in counter:\n                sub_counter[word] += 1\n                if sub_counter[word] <= counter[word]:\n                    score += 1\n\n        if score == len(words):\n            ans.append(margin)\n\n        for start in range(margin, len(s), unit):\n            removed_word = s[start:start+unit]\n            if removed_word in counter:\n                sub_counter[removed_word] -= 1\n                if sub_counter[removed_word] < counter[removed_word]:\n                    score -= 1\n\n            added_word = s[start+window: start+window+unit]\n            if added_word in counter:\n                sub_counter[added_word] += 1\n                if sub_counter[added_word] <= counter[added_word]:\n                    score += 1\n            if score == len(words):\n                ans.append(start+unit)\n    return ans", "entry_point": "findSubstring", "testcase": ["assert findSubstring(\"barfoothefoobarman\", [\"foo\",\"bar\"]) == [0,9]", "assert findSubstring(\"wordgoodgoodgoodbestword\", [\"word\",\"good\",\"best\",\"word\"]) == []", "assert findSubstring(\"barfoofoobarthefoobarman\", [\"bar\",\"foo\",\"the\"]) == [6,9,12]"]}
{"seq_id": 71456096884, "instruction": "Write a function to find the largest product of consecutive elements in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef largest_product_consecutive(nums):\n    if not nums:\n        return 0\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(nums[i], max_product * nums[i], min_product * nums[i])\n        min_product = min(nums[i], temp * nums[i], min_product * nums[i])\n        result = max(result, max_product)\n    return result\n```", "code": "def largest_product_consecutive(nums):\n    if not nums:\n        return 0\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(nums[i], max_product * nums[i], min_product * nums[i])\n        min_product = min(nums[i], temp * nums[i], min_product * nums[i])\n        result = max(result, max_product)\n    return result", "entry_point": "largest_product_consecutive", "testcase": ["assert largest_product_consecutive([-2, 0, -1]) == 0", "assert largest_product_consecutive([1, 2, 3, 4, 5]) == 120", "assert largest_product_consecutive([2, 3, -2, 4]) == 6"]}
{"seq_id": 15971187233, "instruction": "Write a function to find the maximum performance of a team in a company. The performance of a team is calculated by the product of the minimum efficiency of the team members and the sum of their speeds. The function should take the number of employees, a list of their speeds, a list of their efficiencies, and the number of team members as input and return the maximum performance of a team.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef max_team_performance(n, speeds, efficiencies, k):\n    sm, ans, heap = 0, 0, []\n    for eff, speed in sorted(zip(efficiencies, speeds), key=lambda x: -x[0]):\n        if len(heap) > k - 1: sm -= heapq.heappop(heap)\n        heapq.heappush(heap, speed)\n        sm += speed\n        ans = max(ans, sm * eff)\n    return ans % (10**9 + 7)\n```", "code": "import heapq\n\ndef max_team_performance(n, speeds, efficiencies, k):\n    sm, ans, heap = 0, 0, []\n    for eff, speed in sorted(zip(efficiencies, speeds), key=lambda x: -x[0]):\n        if len(heap) > k - 1: sm -= heapq.heappop(heap)\n        heapq.heappush(heap, speed)\n        sm += speed\n        ans = max(ans, sm * eff)\n    return ans % (10**9 + 7)", "entry_point": "max_team_performance", "testcase": ["assert max_team_performance(6, [2,10,3,1,5,8], [5,4,3,9,7,2], 4) == 72", "assert max_team_performance(6, [2,10,3,1,5,8], [5,4,3,9,7,2], 2) == 60", "assert max_team_performance(6, [2,10,3,1,5,8], [5,4,3,9,7,2], 3) == 68"]}
{"seq_id": 17635218338, "instruction": "Write a function to find the shortest subarray with a given sum using a sliding window algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef shortest_subarray(nums, target):\n    n = len(nums)\n    min_len = float(\"inf\")\n    left = 0\n    current_sum = 0\n\n    for right in range(n):\n        current_sum += nums[right]\n\n        while current_sum >= target:\n            min_len = min(min_len, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n\n    return min_len if min_len != float(\"inf\") else 0\n```", "code": "def shortest_subarray(nums, target):\n    n = len(nums)\n    min_len = float(\"inf\")\n    left = 0\n    current_sum = 0\n\n    for right in range(n):\n        current_sum += nums[right]\n\n        while current_sum >= target:\n            min_len = min(min_len, right - left + 1)\n            current_sum -= nums[left]\n            left += 1\n\n    return min_len if min_len != float(\"inf\") else 0", "entry_point": "shortest_subarray", "testcase": ["assert shortest_subarray([1, 4, 4], 4) == 1", "assert shortest_subarray([2, 3, 1, 2, 4, 3], 7) == 2", "assert shortest_subarray([1, 1, 1, 1, 1, 1, 1, 1], 11) == 0"]}
{"seq_id": 40157731087, "instruction": "Write a python function to convert a list of numbers into a single number by concatenating their digits.", "output": "Here is the code to solve this problem: \n```python\ndef concatenate_numbers(numbers):\n    result = int(\"\".join(map(str, numbers)))\n    return result\n```", "code": "def concatenate_numbers(numbers):\n    result = int(\"\".join(map(str, numbers)))\n    return result", "entry_point": "concatenate_numbers", "testcase": ["assert concatenate_numbers([1, 2, 3, 4]) == 1234", "assert concatenate_numbers([5, 6, 7, 8, 9]) == 56789", "assert concatenate_numbers([10, 11, 12]) == 101112"]}
{"seq_id": 43145863850, "instruction": "Write a function that takes two lists of integers as input and returns the number of pairs of numbers, one from each list, that multiply to form a perfect square.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef numTriplets(nums1, nums2):\n\td1 = defaultdict(int)\n\td2 = defaultdict(int)\n\tfor i in nums1:\n\t\td1[i * i] += 1\n\tfor i in nums2:\n\t\td2[i * i] += 1\n\tres = 0\n\tfor i in range(len(nums1)):\n\t\tfor j in range(i + 1, len(nums1)):\n\t\t\tp = nums1[i] * nums1[j]\n\t\t\tif p in d2:\n\t\t\t\tres += d2[p]\n\tfor i in range(len(nums2)):\n\t\tfor j in range(i + 1, len(nums2)):\n\t\t\tp = nums2[i] * nums2[j]\n\t\t\tif p in d1:\n\t\t\t\tres += d1[p]\n\treturn res\n```", "code": "from collections import defaultdict\n\ndef numTriplets(nums1, nums2):\n\td1 = defaultdict(int)\n\td2 = defaultdict(int)\n\tfor i in nums1:\n\t\td1[i * i] += 1\n\tfor i in nums2:\n\t\td2[i * i] += 1\n\tres = 0\n\tfor i in range(len(nums1)):\n\t\tfor j in range(i + 1, len(nums1)):\n\t\t\tp = nums1[i] * nums1[j]\n\t\t\tif p in d2:\n\t\t\t\tres += d2[p]\n\tfor i in range(len(nums2)):\n\t\tfor j in range(i + 1, len(nums2)):\n\t\t\tp = nums2[i] * nums2[j]\n\t\t\tif p in d1:\n\t\t\t\tres += d1[p]\n\treturn res", "entry_point": "numTriplets", "testcase": ["assert numTriplets([1, 1], [1, 1, 1]) == 9", "assert numTriplets([7, 4], [5, 2, 8]) == 1", "assert numTriplets([7, 7, 8, 3], [1, 2, 9, 7]) == 2"]}
{"seq_id": 74866386583, "instruction": "Write a python function to find the largest subarray sum from a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_Largest_Subarray_Sum(nums):\n    if not nums:\n        return 0\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```", "code": "def find_Largest_Subarray_Sum(nums):\n    if not nums:\n        return 0\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "entry_point": "find_Largest_Subarray_Sum", "testcase": ["assert find_Largest_Subarray_Sum([1]) == 1", "assert find_Largest_Subarray_Sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6", "assert find_Largest_Subarray_Sum([5, 4, -1, 7, 8]) == 23"]}
{"seq_id": 72310538645, "instruction": "Write a function to check if a given number is a Strong number. A strong number is a number in which the sum of the factorial of its digits is equal to the original number.", "output": "Here is the code to solve this problem: \n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef is_strong_number(num):\n    original_num = num\n    sum_of_factorials = 0\n    while num > 0:\n        digit = num % 10\n        sum_of_factorials += factorial(digit)\n        num //= 10\n    return sum_of_factorials == original_num\n```", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef is_strong_number(num):\n    original_num = num\n    sum_of_factorials = 0\n    while num > 0:\n        digit = num % 10\n        sum_of_factorials += factorial(digit)\n        num //= 10\n    return sum_of_factorials == original_num", "entry_point": "is_strong_number", "testcase": ["assert is_strong_number(123) == False", "assert is_strong_number(145) == True", "assert is_strong_number(1) == True"]}
{"seq_id": 38289929485, "instruction": "Write a function that takes an integer `n` and returns the number of ways to write `n` as the sum of consecutive positive integers.\n\nFor example, given `n = 5`, there are two ways to write it as the sum of consecutive positive integers: `2 + 3` and `5` itself. Thus, the function should return 2.", "output": "Here is the code to solve this problem: \n```python\ndef count_consecutive_sums(n):\n    count = 0\n    for i in range(1, n):\n        sum = 0\n        while sum < n:\n            sum += i\n            i += 1\n        if sum == n:\n            count += 1\n    return count + 1 # Adding 1 for the case when n itself is a consecutive sum\n```", "code": "def count_consecutive_sums(n):\n    count = 0\n    for i in range(1, n):\n        sum = 0\n        while sum < n:\n            sum += i\n            i += 1\n        if sum == n:\n            count += 1\n    return count + 1 # Adding 1 for the case when n itself is a consecutive sum", "entry_point": "count_consecutive_sums", "testcase": ["assert count_consecutive_sums(9) == 3", "assert count_consecutive_sums(5) == 2", "assert count_consecutive_sums(15) == 4"]}
{"seq_id": 36395443739, "instruction": "Write a python function to find the most frequent element in a list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef most_frequent(lst):\n    if not lst:\n        return None\n    data = Counter(lst)\n    get_mode = dict(data)\n    mode = [k for k, v in get_mode.items() if v == max(list(data.values()))]\n    if len(mode) == len(lst):\n        return None\n    else:\n        return mode[0]\n```", "code": "from collections import Counter\n\ndef most_frequent(lst):\n    if not lst:\n        return None\n    data = Counter(lst)\n    get_mode = dict(data)\n    mode = [k for k, v in get_mode.items() if v == max(list(data.values()))]\n    if len(mode) == len(lst):\n        return None\n    else:\n        return mode[0]", "entry_point": "most_frequent", "testcase": ["assert most_frequent([1,2,3,4,4,4,4,5]) == 4", "assert most_frequent(['apple','banana','apple','cherry']) == 'apple'", "assert most_frequent([1,2,3]) == None"]}
{"seq_id": 30467464667, "instruction": "Write a python function to find the most common element in a list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef most_common(lst):\n    data = Counter(lst)\n    return data.most_common(1)[0][0]\n```", "code": "from collections import Counter\n\ndef most_common(lst):\n    data = Counter(lst)\n    return data.most_common(1)[0][0]", "entry_point": "most_common", "testcase": ["assert most_common(['apple', 'banana', 'apple', 'orange', 'banana', 'banana']) == 'banana'", "assert most_common([1, 2, 2, 3, 3, 3]) == 3", "assert most_common([10, 20, 20, 30, 30, 30, 30]) == 30"]}
{"seq_id": 73782777491, "instruction": "Write a python function to check if a given graph is bipartite using BFS.\n\nA graph is bipartite if the vertex set of G can be partitioned into two non-empty sets A and B such that every edge in G connects a vertex in A to a vertex in B.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\ndef isBipartite(graph: list[list[int]]) -> bool:\n    if not graph:\n        return True\n    colorArray = [0] * len(graph)\n    for vertex in range(len(graph)):\n        if colorArray[vertex] == 0:\n            queue = deque()\n            colorArray[vertex] = 1\n            queue.append([colorArray[vertex], graph[vertex]])\n            while queue:\n                color, adjList = queue.popleft()\n                for adjNode in adjList:\n                    if color == colorArray[adjNode]:\n                        return False\n                    if colorArray[adjNode] == 0:\n                        colorArray[adjNode] = color*-1\n                        queue.append([colorArray[adjNode], graph[adjNode]])\n    return True\n```", "code": "from collections import deque\ndef isBipartite(graph: list[list[int]]) -> bool:\n    if not graph:\n        return True\n    colorArray = [0] * len(graph)\n    for vertex in range(len(graph)):\n        if colorArray[vertex] == 0:\n            queue = deque()\n            colorArray[vertex] = 1\n            queue.append([colorArray[vertex], graph[vertex]])\n            while queue:\n                color, adjList = queue.popleft()\n                for adjNode in adjList:\n                    if color == colorArray[adjNode]:\n                        return False\n                    if colorArray[adjNode] == 0:\n                        colorArray[adjNode] = color*-1\n                        queue.append([colorArray[adjNode], graph[adjNode]])\n    return True", "entry_point": "isBipartite", "testcase": ["assert isBipartite([[1,2,3],[0,2],[0,1,3],[0,2]]) == False", "assert isBipartite([[],[]]) == True", "assert isBipartite([[1,3],[0,2],[1,3],[0,2]]) == True"]}
{"seq_id": 71446583393, "instruction": "Write a python function to validate if a given string is a valid URL.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n```", "code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None", "entry_point": "is_valid_URL", "testcase": ["assert is_valid_URL(\"http://www.example.com\") == True", "assert is_valid_URL(\"www.example.com\") == False", "assert is_valid_URL(\"https://www.example.com\") == True", "assert is_valid_URL(\"http://\") == False", "assert is_valid_URL(\"example.com\") == False", "assert is_valid_URL(\"http://example.com\") == True", "assert is_valid_URL(\"ftp://www.example.com\") == True"]}
{"seq_id": 41618373036, "instruction": "Write a python function to find the number of ways to reach the last cell of a grid from the first cell of the grid. You can move either right or diagonally at any point in time.", "output": "Here is the code to solve this problem: \n```python\ndef grid_ways(m, n):\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(m):\n        dp[0][i] = 1\n    for i in range(n):\n        dp[i][0] = 1\n\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]\n```", "code": "def grid_ways(m, n):\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(m):\n        dp[0][i] = 1\n    for i in range(n):\n        dp[i][0] = 1\n\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]", "entry_point": "grid_ways", "testcase": ["assert grid_ways(3, 3) == 6", "assert grid_ways(2, 3) == 3", "assert grid_ways(3, 2) == 3"]}
{"seq_id": 13643270737, "instruction": "Write a python function to count the number of valid words in a list. A word is valid if it follows the babbling rules: \"aya\", \"ye\", \"woo\", \"ma\" can be used once in a row but not consecutively.", "output": "Here is the code to solve this problem: \n```python\ndef count_valid_words(babbling):\n    answer = 0\n    words = ['aya', 'ye', 'woo', 'ma']\n    \n    for i in babbling:\n        last_word = ''\n        valid = True\n        while len(i) > 0:\n            found = False\n            for word in words:\n                if i.startswith(word) and word != last_word:\n                    i = i[len(word):]\n                    last_word = word\n                    found = True\n                    break\n            if not found:\n                valid = False\n                break\n        if valid:\n            answer += 1\n    \n    return answer\n```", "code": "def count_valid_words(babbling):\n    answer = 0\n    words = ['aya', 'ye', 'woo', 'ma']\n    \n    for i in babbling:\n        last_word = ''\n        valid = True\n        while len(i) > 0:\n            found = False\n            for word in words:\n                if i.startswith(word) and word != last_word:\n                    i = i[len(word):]\n                    last_word = word\n                    found = True\n                    break\n            if not found:\n                valid = False\n                break\n        if valid:\n            answer += 1\n    \n    return answer", "entry_point": "count_valid_words", "testcase": ["assert count_valid_words([\"aya\", \"mama\", \"woo\"]) == 2", "assert count_valid_words([\"ayaa\", \"oooo\", \"woo\"]) == 1", "assert count_valid_words([\"aya\", \"ayaye\", \"yee\", \"yemayo\", \"wooma\"]) == 3"]}
{"seq_id": 23087556506, "instruction": "Write a function to check if a given number is a perfect power, i.e., it can be expressed as a^b where a and b are integers greater than 1.", "output": "Here is the code to solve this problem: \n```python\ndef is_perfect_power(n):\n    if n <= 1:\n        return False\n    for a in range(2, int(n**0.5)+1):\n        b = 2\n        while a**b <= n:\n            if a**b == n:\n                return True\n            b += 1\n    return False\n```", "code": "def is_perfect_power(n):\n    if n <= 1:\n        return False\n    for a in range(2, int(n**0.5)+1):\n        b = 2\n        while a**b <= n:\n            if a**b == n:\n                return True\n            b += 1\n    return False", "entry_point": "is_perfect_power", "testcase": ["assert is_perfect_power(4) == True", "assert is_perfect_power(16) == True", "assert is_perfect_power(18) == False", "assert is_perfect_power(81) == True", "assert is_perfect_power(64) == True"]}
{"seq_id": 867690209, "instruction": "Write a python function to find the maximum product of three numbers in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_of_three(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])\n```", "code": "def max_product_of_three(nums):\n    nums.sort()\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])", "entry_point": "max_product_of_three", "testcase": ["assert max_product_of_three([-10, -10, 5, 2])==500", "assert max_product_of_three([1, 2, 3])==6", "assert max_product_of_three([1, 2, 3, 4, 5])==60"]}
{"seq_id": 32719753969, "instruction": "Write a function to find the shortest path to get all keys in a grid. The grid is represented as a list of strings, where each character represents a cell. The character '@' represents the starting position, lowercase letters represent keys, uppercase letters represent locked doors, and '#' represents walls. A door can only be opened if the corresponding key has been collected. The function should return the number of steps required to collect all the keys. If it is impossible to collect all the keys, return -1.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\nfrom typing import List, Set, Tuple, Deque\n\ndef shortest_path_all_keys(grid: List[str]) -> int:\n    all_keys: Set[str] = set()\n    all_doors: Set[str] = set()\n    q: Deque[Tuple[int, int, int]] = deque()\n    total_number_of_keys: int = 0\n\n    real_grid: List[List[str]] = [list(row) for row in grid]\n    for row in range(len(real_grid)):\n        for col in range(len(real_grid[row])):\n            cell = real_grid[row][col]\n\n            if cell == '@':\n                q.append((row, col, 0))\n            elif cell.islower():\n                total_number_of_keys |= 1 << (ord(cell) - ord('a'))\n                all_keys.add(cell)\n            elif cell.isupper():\n                all_doors.add(cell)\n\n    visited: Set[Tuple[int, int, int]] = set()\n    steps: int = 0\n\n    while q:\n        for _ in range(len(q)):\n            row, col, keys = q.popleft()\n\n            if real_grid[row][col] in all_keys:\n                keys |= 1 << (ord(real_grid[row][col]) - ord('a'))\n\n                if keys == total_number_of_keys:\n                    return steps\n\n            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_row, new_col = row + dr, col + dc\n                if (\n                    min(new_row, new_col) < 0 or new_row >= len(real_grid) or new_col >= len(real_grid[new_row])\n                    or real_grid[new_row][new_col] == '#'\n                    or (new_row, new_col, keys) in visited\n                ):\n                    continue\n\n                if real_grid[new_row][new_col] in all_doors:\n                    mask = 1 << (ord(real_grid[new_row][new_col].lower()) - ord('a'))\n                    if keys & mask != mask:\n                        continue\n\n                q.append((new_row, new_col, keys))\n                visited.add((new_row, new_col, keys))\n\n        steps += 1\n\n    return -1\n```", "code": "from collections import deque\nfrom typing import List, Set, Tuple, Deque\n\ndef shortest_path_all_keys(grid: List[str]) -> int:\n    all_keys: Set[str] = set()\n    all_doors: Set[str] = set()\n    q: Deque[Tuple[int, int, int]] = deque()\n    total_number_of_keys: int = 0\n\n    real_grid: List[List[str]] = [list(row) for row in grid]\n    for row in range(len(real_grid)):\n        for col in range(len(real_grid[row])):\n            cell = real_grid[row][col]\n\n            if cell == '@':\n                q.append((row, col, 0))\n            elif cell.islower():\n                total_number_of_keys |= 1 << (ord(cell) - ord('a'))\n                all_keys.add(cell)\n            elif cell.isupper():\n                all_doors.add(cell)\n\n    visited: Set[Tuple[int, int, int]] = set()\n    steps: int = 0\n\n    while q:\n        for _ in range(len(q)):\n            row, col, keys = q.popleft()\n\n            if real_grid[row][col] in all_keys:\n                keys |= 1 << (ord(real_grid[row][col]) - ord('a'))\n\n                if keys == total_number_of_keys:\n                    return steps\n\n            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_row, new_col = row + dr, col + dc\n                if (\n                    min(new_row, new_col) < 0 or new_row >= len(real_grid) or new_col >= len(real_grid[new_row])\n                    or real_grid[new_row][new_col] == '#'\n                    or (new_row, new_col, keys) in visited\n                ):\n                    continue\n\n                if real_grid[new_row][new_col] in all_doors:\n                    mask = 1 << (ord(real_grid[new_row][new_col].lower()) - ord('a'))\n                    if keys & mask != mask:\n                        continue\n\n                q.append((new_row, new_col, keys))\n                visited.add((new_row, new_col, keys))\n\n        steps += 1\n\n    return -1", "entry_point": "shortest_path_all_keys", "testcase": ["assert shortest_path_all_keys([\"@..aA\", \"..B#.\", \"....b\"]) == 6", "assert shortest_path_all_keys([\"@.a..\", \"###.#\", \"b.A.B\"]) == 8", "assert shortest_path_all_keys([\"@Aa\"]) == -1", "assert shortest_path_all_keys([\"@abcdeABCDEFf\"]) == -1", "assert shortest_path_all_keys([\".#......###..#.\", \".###C..#...b...\", \"..#..#.........\", \".........#.....\", \".....@#.#......\", \"#.##...#..##...\", \"..d#...a...#...\", \"..###..........\", \"........#....#.\", \"..#.#..#...c#.#\", \"D#..........#.#\", \"............#A.\", \"..#..##...#....\", \"#...#..#..B....\", \".....##.....#..\"]) == 35", "assert shortest_path_all_keys([\"..Ff..#..e.#...\", \".....#.##...#..\", \"....#.#...#....\", \"##.......##...#\", \"...@#.##....#..\", \"#........b.....\", \"..#...#.....##.\", \".#....#E...#...\", \"......A.#D.#...\", \"...#...#..#....\", \"...a.#B#.......\", \".......c.....#.\", \"....#...C#...#.\", \"##.#.....d..#..\", \".#..#......#...\"]) == 42"]}
{"seq_id": 23339465782, "instruction": "Write a python function to find the intersection of two given arrays.", "output": "Here is the code to solve this problem: \n```python\ndef intersection_arrays(arr1, arr2):\n    result = []\n    for num in arr1:\n        if num in arr2 and num not in result:\n            result.append(num)\n    return result\n```", "code": "def intersection_arrays(arr1, arr2):\n    result = []\n    for num in arr1:\n        if num in arr2 and num not in result:\n            result.append(num)\n    return result", "entry_point": "intersection_arrays", "testcase": ["assert intersection_arrays([10, 15, 20, 25], [20, 25, 30, 35]) == [20, 25]", "assert intersection_arrays([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]", "assert intersection_arrays([2, 4, 6, 8], [1, 3, 5, 7]) == []"]}
{"seq_id": 10680055823, "instruction": "Write a python function to check if a given string is a concatenation of all the strings in a given list in any order.", "output": "Here is the code to solve this problem: \n```python\ndef isConcatenation(s, words):\n    \"\"\"\n    :type s: str\n    :type words: List[str]\n    :rtype: bool\n    \"\"\"\n    w = ''\n    i = 0\n    while len(w) < len(s) and i < len(words):\n        w += words[i]\n        i += 1\n    if w == s:\n        return True\n    return False\n```", "code": "def isConcatenation(s, words):\n    \"\"\"\n    :type s: str\n    :type words: List[str]\n    :rtype: bool\n    \"\"\"\n    w = ''\n    i = 0\n    while len(w) < len(s) and i < len(words):\n        w += words[i]\n        i += 1\n    if w == s:\n        return True\n    return False", "entry_point": "isConcatenation", "testcase": ["assert isConcatenation(\"hello\", [\"he\", \"ll\", \"o\"]) == True", "assert isConcatenation(\"algorithm\", [\"algo\", \"rithm\", \"a\", \"m\"]) == True", "assert isConcatenation(\"programming\", [\"pro\", \"gram\", \"ming\"]) == True", "assert isConcatenation(\"test\", [\"t\", \"e\", \"s\"]) == False", "assert isConcatenation(\"python\", [\"py\", \"th\", \"o\", \"n\"]) == True", "assert isConcatenation(\"code\", [\"co\", \"d\", \"e\"]) == True"]}
{"seq_id": 29522473089, "instruction": "Write a python function to check if a list of words is sorted according to alien dictionary rules.\n\nAn alien dictionary is a dictionary where the alphabetical order might be different than the English one. You are given the order of the alphabet in the alien dictionary and a list of words. Your task is to check if the list of words is sorted according to the alien dictionary rules.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef isAlienSorted(words: List[str], order: str) -> bool:\n    order_dictionary = {l:i for i,l in enumerate(order)}\n    for w1 , w2 in zip(words, words[1:]):\n        for char1, char2 in zip(w1,w2):\n            if char1 != char2:\n                if order_dictionary[char1] > order_dictionary[char2]:return False\n                break\n        if w1.startswith(w2) and w1 != w2:\n            return False\n    return True\n```", "code": "from typing import List\n\ndef isAlienSorted(words: List[str], order: str) -> bool:\n    order_dictionary = {l:i for i,l in enumerate(order)}\n    for w1 , w2 in zip(words, words[1:]):\n        for char1, char2 in zip(w1,w2):\n            if char1 != char2:\n                if order_dictionary[char1] > order_dictionary[char2]:return False\n                break\n        if w1.startswith(w2) and w1 != w2:\n            return False\n    return True", "entry_point": "isAlienSorted", "testcase": ["assert isAlienSorted([\"word\",\"world\",\"row\"], \"worldabcefghijkmnpqstuvxyz\") == False", "assert isAlienSorted([\"hello\",\"leetcode\"], \"hlabcdefgijkmnopqrstuvwxyz\") == True", "assert isAlienSorted([\"apple\",\"app\"], \"abcdefghijklmnopqrstuvwxyz\") == False"]}
{"seq_id": 35192731786, "instruction": "Write a function to find the next palindrome number for a given number. A palindrome number is a number that remains the same when its digits are reversed.", "output": "Here is the code to solve this problem: \n```python\ndef next_palindrome(n):\n    if str(n) == str(n)[::-1]:\n        n += 1\n    while str(n) != str(n)[::-1]:\n        n += 1\n    return n\n```", "code": "def next_palindrome(n):\n    if str(n) == str(n)[::-1]:\n        n += 1\n    while str(n) != str(n)[::-1]:\n        n += 1\n    return n", "entry_point": "next_palindrome", "testcase": ["assert next_palindrome(678) == 686", "assert next_palindrome(123) == 131", "assert next_palindrome(999) == 1001"]}
{"seq_id": 10891375730, "instruction": "Write a function to find the maximum number of candies that can be distributed to children given that each child can only receive one candy, and some children may not receive a candy if there are not enough candies. The function should take two inputs: a list of integers representing the sweetness of the candies, and an integer representing the number of children. The goal is to maximize the total sweetness of the candies distributed.", "output": "Here is the code to solve this problem: \n```python\ndef max_candy_sweetness(candies, num_children):\n    candies.sort(reverse=True)\n    total_sweetness = 0\n    for i in range(num_children):\n        if i < len(candies):\n            total_sweetness += candies[i]\n    return total_sweetness\n```", "code": "def max_candy_sweetness(candies, num_children):\n    candies.sort(reverse=True)\n    total_sweetness = 0\n    for i in range(num_children):\n        if i < len(candies):\n            total_sweetness += candies[i]\n    return total_sweetness", "entry_point": "max_candy_sweetness", "testcase": ["assert max_candy_sweetness([1,1,1,1], 4) == 4", "assert max_candy_sweetness([1,2,3,4,5], 3) == 12", "assert max_candy_sweetness([5,7,3,9,10], 2) == 19"]}
{"seq_id": 23069915257, "instruction": "Create a function to reverse a linked list.", "output": "Here is the code to solve this problem: \n```python\nclass Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\ndef reverse_linked_list(head):\n    reversed_list = []\n    while head:\n        reversed_list.append(head.data)\n        head = head.next\n    return reversed_list[::-1]\n```", "code": "class Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\ndef reverse_linked_list(head):\n    reversed_list = []\n    while head:\n        reversed_list.append(head.data)\n        head = head.next\n    return reversed_list[::-1]", "entry_point": "reverse_linked_list", "testcase": ["assert reverse_linked_list(Node(4, Node(5, Node(6, Node(7)))))==[7, 6, 5, 4]", "assert reverse_linked_list(Node(1, Node(2, Node(3))))==[3, 2, 1]", "assert reverse_linked_list(Node(8, Node(9, Node(10, Node(11, Node(12))))))==[12, 11, 10, 9, 8]"]}
{"seq_id": 33918245118, "instruction": "Write a python function to find the longest subsequence of consecutive integers in the given list. If there are multiple subsequence with the same length, return the one that appears first.", "output": "Here is the code to solve this problem: \n```python\ndef longest_subsequence(nums):\n    nums.sort()\n    longest, current = 1, 1\n    start, start_temp = nums[0], nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1] + 1:\n            current += 1\n        elif nums[i] != nums[i - 1]:\n            if current > longest:\n                longest = current\n                start = start_temp\n            current = 1\n            start_temp = nums[i]\n    if current > longest:\n        start = start_temp\n        longest = current\n    return list(range(start, start + longest))\n```", "code": "def longest_subsequence(nums):\n    nums.sort()\n    longest, current = 1, 1\n    start, start_temp = nums[0], nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1] + 1:\n            current += 1\n        elif nums[i] != nums[i - 1]:\n            if current > longest:\n                longest = current\n                start = start_temp\n            current = 1\n            start_temp = nums[i]\n    if current > longest:\n        start = start_temp\n        longest = current\n    return list(range(start, start + longest))", "entry_point": "longest_subsequence", "testcase": ["assert longest_subsequence([10, 11, 7, 8, 9, 12]) == [7, 8, 9, 10, 11, 12]", "assert longest_subsequence([1, 2, 3, 5, 6, 7, 8, 10]) == [5, 6, 7, 8]", "assert longest_subsequence([1, 3, 5, 7, 9]) == [1]"]}
{"seq_id": 11189975450, "instruction": "Write a python function to compress a given string by counting the occurrences of each character.", "output": "Here is the code to solve this problem: \n```python\ndef string_compression(s):\n    if len(s) == 0:\n        return \"\"\n    compressed = []\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            compressed.append(s[i-1] + str(count))\n            count = 1\n    compressed.append(s[-1] + str(count))\n    return \"\".join(compressed)\n```", "code": "def string_compression(s):\n    if len(s) == 0:\n        return \"\"\n    compressed = []\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            compressed.append(s[i-1] + str(count))\n            count = 1\n    compressed.append(s[-1] + str(count))\n    return \"\".join(compressed)", "entry_point": "string_compression", "testcase": ["assert string_compression(\"aabcccccaaa\") == \"a2b1c5a3\"", "assert string_compression(\"abc\") == \"a1b1c1\"", "assert string_compression(\"aabbcc\") == \"a2b2c2\""]}
{"seq_id": 5780716809, "instruction": "Write a Python function to find the maximum and minimum values in a given list of tuples based on the second element of each tuple.", "output": "Here is the code to solve this problem: \n```python\ndef max_min_tuple(tuplist):\n    # Sorting the list of tuples based on the second element\n    sorted_list = sorted(tuplist, key=lambda x: x[1])\n    # Returning the first (minimum) and last (maximum) elements\n    return (sorted_list[-1], sorted_list[0])\n```", "code": "def max_min_tuple(tuplist):\n    # Sorting the list of tuples based on the second element\n    sorted_list = sorted(tuplist, key=lambda x: x[1])\n    # Returning the first (minimum) and last (maximum) elements\n    return (sorted_list[-1], sorted_list[0])", "entry_point": "max_min_tuple", "testcase": ["assert max_min_tuple([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]) == ((2, 5), (2, 1))", "assert max_min_tuple([(5, 3), (2, 6), (9, 8), (4, 4), (7, 7)]) == ((9, 8), (5, 3))", "assert max_min_tuple([(3, 5), (2, 2), (4, 4), (1, 3), (5, 5)]) == ((5, 5), (2, 2))"]}
{"seq_id": 33786363837, "instruction": "Write a python function to find the maximum path sum in a given binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass BinaryTree:\n    def __init__(self, root_val, left=None, right=None):\n        self.val = root_val\n        self.left = left\n        self.right = right\n\ndef max_Path_Sum(root):\n    max_sum = [float('-inf')]\n    def dfs(node):\n        if not node:\n            return 0\n        left, right = max(0, dfs(node.left)), max(0, dfs(node.right))\n        max_sum[0] = max(max_sum[0], left + right + node.val)\n        return max(left, right) + node.val\n    dfs(root)\n    return max_sum[0]\n```", "code": "class BinaryTree:\n    def __init__(self, root_val, left=None, right=None):\n        self.val = root_val\n        self.left = left\n        self.right = right\n\ndef max_Path_Sum(root):\n    max_sum = [float('-inf')]\n    def dfs(node):\n        if not node:\n            return 0\n        left, right = max(0, dfs(node.left)), max(0, dfs(node.right))\n        max_sum[0] = max(max_sum[0], left + right + node.val)\n        return max(left, right) + node.val\n    dfs(root)\n    return max_sum[0]", "entry_point": "max_Path_Sum", "testcase": ["assert max_Path_Sum(BinaryTree(-10, BinaryTree(9), BinaryTree(20, BinaryTree(15), BinaryTree(7)))) == 42", "assert max_Path_Sum(BinaryTree(1, BinaryTree(2, BinaryTree(3), BinaryTree(4)), BinaryTree(2, None, BinaryTree(4)))) == 13", "assert max_Path_Sum(BinaryTree(1, BinaryTree(2), BinaryTree(3))) == 6"]}
{"seq_id": 14119540706, "instruction": "Write a python function to find the minimum absolute difference between any two elements in an array.", "output": "Here is the code to solve this problem: \n```python\ndef min_abs_diff(arr, n): \n    arr.sort() \n    min_diff = float(\"inf\") \n    for i in range(n - 1): \n        if arr[i + 1] - arr[i] < min_diff: \n            min_diff = arr[i + 1] - arr[i] \n    return min_diff\n```", "code": "def min_abs_diff(arr, n): \n    arr.sort() \n    min_diff = float(\"inf\") \n    for i in range(n - 1): \n        if arr[i + 1] - arr[i] < min_diff: \n            min_diff = arr[i + 1] - arr[i] \n    return min_diff", "entry_point": "min_abs_diff", "testcase": ["assert min_abs_diff([2, 5, 7, 11, 13, 17], 6) == 2", "assert min_abs_diff([1, 3, 6, 10, 15], 5) == 2", "assert min_abs_diff([4, 7, 9, 11, 13, 17], 6) == 2"]}
{"seq_id": 41232775590, "instruction": "Write a python function to generate the shortest path in a directed graph from a given source node using Dijkstra's Algorithm. The graph is represented as a dictionary where the keys are the nodes and the values are dictionaries representing the edges and their weights.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef shortest_path_dijkstra(graph, start, end):\n    # Initialize the distance dictionary with positive infinity for all vertices except the start vertex\n    distances = {vertex: float('infinity') for vertex in graph}\n    distances[start] = 0\n    # Initialize the path dictionary with None for all vertices\n    path = {vertex: None for vertex in graph}\n    \n    # Create a priority queue and insert the start vertex with distance 0\n    priority_queue = [(0, start)]\n    \n    while priority_queue:\n        # Get the vertex with the smallest distance from the priority queue\n        current_distance, current_vertex = heapq.heappop(priority_queue)\n        \n        # If we have reached the end vertex, we can stop\n        if current_vertex == end:\n            break\n        \n        # Iterate over the neighbors of the current vertex\n        for neighbor, weight in graph[current_vertex].items():\n            # Calculate the distance to the neighbor through the current vertex\n            distance = current_distance + weight\n            # If this distance is smaller than the previously stored distance, update the distance and the path\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                path[neighbor] = current_vertex\n                # Insert the neighbor into the priority queue with the new distance\n                heapq.heappush(priority_queue, (distance, neighbor))\n    \n    # Reconstruct the shortest path\n    shortest_path = []\n    current_vertex = end\n    while current_vertex:\n        shortest_path.append(current_vertex)\n        current_vertex = path[current_vertex]\n    shortest_path.reverse()\n    \n    return [distances[end], shortest_path]\n```", "code": "import heapq\n\ndef shortest_path_dijkstra(graph, start, end):\n    # Initialize the distance dictionary with positive infinity for all vertices except the start vertex\n    distances = {vertex: float('infinity') for vertex in graph}\n    distances[start] = 0\n    # Initialize the path dictionary with None for all vertices\n    path = {vertex: None for vertex in graph}\n    \n    # Create a priority queue and insert the start vertex with distance 0\n    priority_queue = [(0, start)]\n    \n    while priority_queue:\n        # Get the vertex with the smallest distance from the priority queue\n        current_distance, current_vertex = heapq.heappop(priority_queue)\n        \n        # If we have reached the end vertex, we can stop\n        if current_vertex == end:\n            break\n        \n        # Iterate over the neighbors of the current vertex\n        for neighbor, weight in graph[current_vertex].items():\n            # Calculate the distance to the neighbor through the current vertex\n            distance = current_distance + weight\n            # If this distance is smaller than the previously stored distance, update the distance and the path\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                path[neighbor] = current_vertex\n                # Insert the neighbor into the priority queue with the new distance\n                heapq.heappush(priority_queue, (distance, neighbor))\n    \n    # Reconstruct the shortest path\n    shortest_path = []\n    current_vertex = end\n    while current_vertex:\n        shortest_path.append(current_vertex)\n        current_vertex = path[current_vertex]\n    shortest_path.reverse()\n    \n    return [distances[end], shortest_path]", "entry_point": "shortest_path_dijkstra", "testcase": ["assert shortest_path_dijkstra({\"A\": {\"B\": 1}, \"B\": {\"C\": 1}, \"C\": {\"D\": 1}, \"D\": {}}, \"A\", \"D\") == [3, ['A', 'B', 'C', 'D']]", "assert shortest_path_dijkstra({\"A\": {\"B\": 1, \"C\": 4}, \"B\": {\"C\": 2, \"D\": 1}, \"C\": {\"D\": 1}, \"D\": {}}, \"A\", \"D\") == [2, ['A', 'B', 'D']]", "assert shortest_path_dijkstra({\"A\": {\"B\": 1, \"C\": 4}, \"B\": {\"C\": 2, \"D\": 5}, \"C\": {\"D\": 1}, \"D\": {}}, \"A\", \"D\") == [4, ['A', 'B', 'C', 'D']]"]}
{"seq_id": 74966726078, "instruction": "Write a function to find the largest binary search tree (BST) subtree in a given binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef largest_bst_subtree(root):\n    inf = float('inf')\n\n    def largestBST(node):\n        if not node:\n            return [0, inf, -inf]\n        n1, l1, l2 = largestBST(node.left)\n        n2, r1, r2 = largestBST(node.right)\n        if node.val > l2 and node.val < r1:\n            return [1 + n1 + n2, min(node.val, l1), max(node.val, r2)]\n        else:\n            return [max(n1, n2), -inf, inf]\n    return largestBST(root)[0]\n\n# Helper function to create tree from list\ndef create_tree(arr):\n    if not arr:\n        return None\n    root = TreeNode(arr[0])\n    queue = [root]\n    front = 0\n    index = 1\n    while index < len(arr):\n        node = queue[front]\n        front = front + 1\n\n        item = arr[index]\n        index = index + 1\n        if item is not None:\n            left_number = item\n            node.left = TreeNode(left_number)\n            queue.append(node.left)\n\n        if index >= len(arr):\n            break\n\n        item = arr[index]\n        index = index + 1\n        if item is not None:\n            right_number = item\n            node.right = TreeNode(right_number)\n            queue.append(node.right)\n    return root\n\n# Test cases\nroot1 = create_tree([10,5,15,1,8,None,7])\nassert largest_bst_subtree(root1) == 3\n\nroot2 = create_tree([5,4,6,None,1,None,7])\nassert largest_bst_subtree(root2) == 2\n\nroot3 = create_tree([1,1,1,1,1,1,1])\nassert largest_bst_subtree(root3) == 1\n```", "code": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef largest_bst_subtree(root):\n    inf = float('inf')\n\n    def largestBST(node):\n        if not node:\n            return [0, inf, -inf]\n        n1, l1, l2 = largestBST(node.left)\n        n2, r1, r2 = largestBST(node.right)\n        if node.val > l2 and node.val < r1:\n            return [1 + n1 + n2, min(node.val, l1), max(node.val, r2)]\n        else:\n            return [max(n1, n2), -inf, inf]\n    return largestBST(root)[0]\n\n# Helper function to create tree from list\ndef create_tree(arr):\n    if not arr:\n        return None\n    root = TreeNode(arr[0])\n    queue = [root]\n    front = 0\n    index = 1\n    while index < len(arr):\n        node = queue[front]\n        front = front + 1\n\n        item = arr[index]\n        index = index + 1\n        if item is not None:\n            left_number = item\n            node.left = TreeNode(left_number)\n            queue.append(node.left)\n\n        if index >= len(arr):\n            break\n\n        item = arr[index]\n        index = index + 1\n        if item is not None:\n            right_number = item\n            node.right = TreeNode(right_number)\n            queue.append(node.right)\n    return root\n\n# Test cases\nroot1 = create_tree([10,5,15,1,8,None,7])\nassert largest_bst_subtree(root1) == 3\n\nroot2 = create_tree([5,4,6,None,1,None,7])\nassert largest_bst_subtree(root2) == 2\n\nroot3 = create_tree([1,1,1,1,1,1,1])\nassert largest_bst_subtree(root3) == 1", "entry_point": "largest_bst_subtree", "testcase": ["# Input: [10,5,15,1,8,null,7]", "# Example 1", "#      / \\   \\ ", "#        10 ", "#      1   8   7", "# Output: 3", "#        / \\ ", "# Explanation: The Largest BST Subtree in this case is the highlighted one.", "#       5  15 ", "", "#              The return value is the subtree's size, which is 3.", "# Example 2", "# Input: [5,4,6,null,1,null,7]", "#        5 ", "", "#       4  6 ", "", "#        \\   \\ ", "# Explanation: The Largest BST Subtree in this case is the highlighted one.", "#              The return value is the subtree's size, which is 2.", "# Output: 2", "", "#         1   7", "# Example 3", "# Input: [1,1,1,1,1,1,1]", "# Explanation: The Largest BST Subtree in this case is the highlighted one.", "#      / \\   \\ ", "# Output: 1", "#        / \\ ", "#        1 ", "#      1   1   1", "#       1  1 ", "#        / \\ ", "", "#              The return value is the subtree's size, which is 1."]}
{"seq_id": 35731269877, "instruction": "Write a python function to find the smallest number evenly divisible by all numbers from 1 to n.", "output": "Here is the code to solve this problem: \n```python\nfrom math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find_smallest_divisible(n):\n    return reduce(lcm, range(1, n + 1))\n\nprint(find_smallest_divisible(10)) #2520\nprint(find_smallest_divisible(5)) #60\nprint(find_smallest_divisible(20)) #232792560\n```", "code": "from math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef find_smallest_divisible(n):\n    return reduce(lcm, range(1, n + 1))\n\nprint(find_smallest_divisible(10)) #2520\nprint(find_smallest_divisible(5)) #60\nprint(find_smallest_divisible(20)) #232792560", "entry_point": "find_smallest_divisible", "testcase": ["assert find_smallest_divisible(20) == 232792560", "assert find_smallest_divisible(5) == 60", "assert find_smallest_divisible(10) == 2520"]}
{"seq_id": 32418684048, "instruction": "Write a python function that groups elements of a list based on a given group size and returns a list of groups.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef group_elements(lst: List[int], group_size: int) -> List[List[int]]:\n    ans = []\n    temp = []\n    for i, num in enumerate(lst):\n        temp.append(num)\n        if (i+1) % group_size == 0:\n            ans.append(temp)\n            temp = []\n    if temp:\n        ans.append(temp)\n    return ans\n```", "code": "from typing import List\n\ndef group_elements(lst: List[int], group_size: int) -> List[List[int]]:\n    ans = []\n    temp = []\n    for i, num in enumerate(lst):\n        temp.append(num)\n        if (i+1) % group_size == 0:\n            ans.append(temp)\n            temp = []\n    if temp:\n        ans.append(temp)\n    return ans", "entry_point": "group_elements", "testcase": ["assert group_elements([10,20,30,40,50,60,70,80,90], 1) == [[10],[20],[30],[40],[50],[60],[70],[80],[90]]", "assert group_elements([1,3,4,7,8,9], 2) == [[1,3],[4,7],[8,9]]", "assert group_elements([1,2,3,4,5,6,7,8], 3) == [[1,2,3],[4,5,6],[7,8]]"]}
{"seq_id": 27401998272, "instruction": "Write a function to convert a string of digits to the corresponding integer value. However, the string might contain digits in a different base (not necessarily base 10). Your function should take the string and the base as inputs and return the integer value.", "output": "Here is the code to solve this problem: \n```python\ndef convert_base_to_int(s: str, base: int) -> int:\n    result = 0\n    for i, n in enumerate(s[::-1]):\n        result += (ord(n) - (ord('0') if n.isdigit() else ord('A') - 10)) * pow(base, i)\n    return result\n```", "code": "def convert_base_to_int(s: str, base: int) -> int:\n    result = 0\n    for i, n in enumerate(s[::-1]):\n        result += (ord(n) - (ord('0') if n.isdigit() else ord('A') - 10)) * pow(base, i)\n    return result", "entry_point": "convert_base_to_int", "testcase": ["assert convert_base_to_int('101', 2) == 5", "assert convert_base_to_int('Z', 36) == 35", "assert convert_base_to_int('1A', 16) == 26"]}
{"seq_id": 71866634830, "instruction": "Write a python function to find the smallest repeating subsequence in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_repeating_subseq(s):\n    for length in range(1, len(s)//2 + 1):\n        if len(s) % length == 0:\n            if s[:length]*(len(s)//length) == s:\n                return s[:length]\n    return s\n```", "code": "def smallest_repeating_subseq(s):\n    for length in range(1, len(s)//2 + 1):\n        if len(s) % length == 0:\n            if s[:length]*(len(s)//length) == s:\n                return s[:length]\n    return s", "entry_point": "smallest_repeating_subseq", "testcase": ["assert smallest_repeating_subseq(\"xyz\") == \"xyz\"", "assert smallest_repeating_subseq(\"abcabcabc\") == \"abc\"", "assert smallest_repeating_subseq(\"abababab\") == \"ab\"", "assert smallest_repeating_subseq(\"abcdabcd\") == \"abcd\""]}
{"seq_id": 16556396035, "instruction": "Write a Python function that finds the length of the longest substring with at most two distinct characters given a string.", "output": "Here is the code to solve this problem: \n```python\ndef length_of_longest_substring_two_distinct(s):\n    if len(s) <= 2:\n        return len(s)\n    dic = {}\n    dic[s[0]] = 0\n    dic[s[1]] = 1\n    current = 2\n    max_length = current\n    for i in range(2,len(s)):\n        if (s[i] in dic) or (len(dic.keys()) == 1):\n            dic[s[i]] = i\n            current += 1\n        else:\n            char1,char2 = dic.keys()\n            former = char1 if dic[char1] < dic[char2] else char2\n            former_index = dic[former]\n            del dic[former]\n            dic[s[i]] = i\n            current = i - former_index\n        max_length = max_length if max_length > current else current\n    return max_length\n```", "code": "def length_of_longest_substring_two_distinct(s):\n    if len(s) <= 2:\n        return len(s)\n    dic = {}\n    dic[s[0]] = 0\n    dic[s[1]] = 1\n    current = 2\n    max_length = current\n    for i in range(2,len(s)):\n        if (s[i] in dic) or (len(dic.keys()) == 1):\n            dic[s[i]] = i\n            current += 1\n        else:\n            char1,char2 = dic.keys()\n            former = char1 if dic[char1] < dic[char2] else char2\n            former_index = dic[former]\n            del dic[former]\n            dic[s[i]] = i\n            current = i - former_index\n        max_length = max_length if max_length > current else current\n    return max_length", "entry_point": "length_of_longest_substring_two_distinct", "testcase": ["assert length_of_longest_substring_two_distinct(\"abcba\") == 3", "assert length_of_longest_substring_two_distinct(\"eceba\") == 3", "assert length_of_longest_substring_two_distinct(\"ccaabbb\") == 5"]}
{"seq_id": 6374715663, "instruction": "Write a python function to find the longest sequence of consecutive zeros in a binary string that is surrounded by ones at both ends.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consecutive_zeros(binary_str):\n    max_zeros = 0\n    current_zeros = 0\n    in_sequence = False\n\n    for bit in binary_str:\n        if bit == '1':\n            if in_sequence:\n                max_zeros = max(max_zeros, current_zeros)\n                current_zeros = 0\n                in_sequence = False\n        else:\n            if not in_sequence and binary_str[binary_str.index(bit) - 1] == '1':\n                in_sequence = True\n            if in_sequence:\n                current_zeros += 1\n\n    return max_zeros\n```", "code": "def longest_consecutive_zeros(binary_str):\n    max_zeros = 0\n    current_zeros = 0\n    in_sequence = False\n\n    for bit in binary_str:\n        if bit == '1':\n            if in_sequence:\n                max_zeros = max(max_zeros, current_zeros)\n                current_zeros = 0\n                in_sequence = False\n        else:\n            if not in_sequence and binary_str[binary_str.index(bit) - 1] == '1':\n                in_sequence = True\n            if in_sequence:\n                current_zeros += 1\n\n    return max_zeros", "entry_point": "longest_consecutive_zeros", "testcase": ["assert longest_consecutive_zeros(\"1001101000110\") == 3", "assert longest_consecutive_zeros(\"10000001\") == 6", "assert longest_consecutive_zeros(\"1010101\") == 1", "assert longest_consecutive_zeros(\"1111111\") == 0"]}
{"seq_id": 13152431144, "instruction": "Write a Python function to check if a given string is a pangram or not. A pangram is a sentence using every letter of the alphabet at least once.", "output": "Here is the code to solve this problem: \n```python\ndef checkIfPangram(sentence: str) -> bool:\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    for char in alpha:\n        if char not in sentence.lower():\n            return False\n    return True\n```", "code": "def checkIfPangram(sentence: str) -> bool:\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    for char in alpha:\n        if char not in sentence.lower():\n            return False\n    return True", "entry_point": "checkIfPangram", "testcase": ["assert checkIfPangram(\"The quick brown fox jumps over the lazy dog\") == True", "assert checkIfPangram(\"Pack my box with five dozen liquor jugs\") == True", "assert checkIfPangram(\"Python Programming\") == False"]}
{"seq_id": 14228589017, "instruction": "Write a function to find the minimum number of moves required for a car to reach a target position starting from position 0. The car can move forward or backward by a power of 2 (1, 2, 4, 8, 16, ...) in one move. The car can also change direction in one move without moving.", "output": "Here is the code to solve this problem: \n```python\ndef minimum_moves(target):\n    if target == 0:\n        return 0\n    k = target.bit_length()\n    if target == (1 << k) - 1:\n        return k\n    else:\n        dp = [0] * (target+1)\n        for i in range(1, target+1):\n            k = i.bit_length()\n            if i == (1 << k) - 1:\n                dp[i] = k\n            else:\n                dp[i] = k + 1 + dp[((1 << k) - 1) - i]\n                for j in range(k-1):\n                    dp[i] = min(dp[i], (k-1) + 1 + j + 1 + dp[i - ((1 << (k-1)) - (1 << j))])\n        return dp[target]\n\n# Test cases\nprint(minimum_moves(1)) # Expected: 1\nprint(minimum_moves(3)) # Expected: 2\nprint(minimum_moves(6)) # Expected: 5\n```", "code": "def minimum_moves(target):\n    if target == 0:\n        return 0\n    k = target.bit_length()\n    if target == (1 << k) - 1:\n        return k\n    else:\n        dp = [0] * (target+1)\n        for i in range(1, target+1):\n            k = i.bit_length()\n            if i == (1 << k) - 1:\n                dp[i] = k\n            else:\n                dp[i] = k + 1 + dp[((1 << k) - 1) - i]\n                for j in range(k-1):\n                    dp[i] = min(dp[i], (k-1) + 1 + j + 1 + dp[i - ((1 << (k-1)) - (1 << j))])\n        return dp[target]\n\n# Test cases\nprint(minimum_moves(1)) # Expected: 1\nprint(minimum_moves(3)) # Expected: 2\nprint(minimum_moves(6)) # Expected: 5", "entry_point": "minimum_moves", "testcase": ["assert minimum_moves(1) == 1", "assert minimum_moves(3) == 2", "assert minimum_moves(6) == 5"]}
{"seq_id": 33073018857, "instruction": "Write a function to determine if a string is a valid pin name according to specific rules. A valid pin name must satisfy the following conditions:\n1. It must start with a letter.\n2. It can contain any number of letters followed by a single digit or nothing.\n3. It can contain a single underscore (_) followed by any number of letters or digits.\n\nFor example:\n- \"pin1\" is valid.\n- \"pin_name2\" is valid.\n- \"_pin3\" is valid.\n- \"4pin\" is not valid.\n- \"pin_name_2\" is not valid.\n- \"pin__name\" is not valid.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef is_valid_pin_name(pin_name):\n    pattern = r'^[a-zA-Z]+[a-zA-Z0-9]*(_[a-zA-Z0-9]+)?$|^[a-zA-Z]+[a-zA-Z0-9]*$'\n    return bool(re.match(pattern, pin_name))\n```", "code": "import re\n\ndef is_valid_pin_name(pin_name):\n    pattern = r'^[a-zA-Z]+[a-zA-Z0-9]*(_[a-zA-Z0-9]+)?$|^[a-zA-Z]+[a-zA-Z0-9]*$'\n    return bool(re.match(pattern, pin_name))", "entry_point": "is_valid_pin_name", "testcase": ["assert is_valid_pin_name(\"pin1\") == True", "assert is_valid_pin_name(\"pin_name2\") == True", "assert is_valid_pin_name(\"pin_name_2\") == False", "assert is_valid_pin_name(\"pin__name\") == False", "assert is_valid_pin_name(\"4pin\") == False"]}
{"seq_id": 3748586180, "instruction": "Write a function that takes a list of integers and returns the maximum product of two adjacent elements.", "output": "Here is the code to solve this problem: \n```python\ndef max_adjacent_product(input_list):\n    max_product = float('-inf')\n    for i in range(len(input_list) - 1):\n        product = input_list[i] * input_list[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product\n```", "code": "def max_adjacent_product(input_list):\n    max_product = float('-inf')\n    for i in range(len(input_list) - 1):\n        product = input_list[i] * input_list[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product", "entry_point": "max_adjacent_product", "testcase": ["assert max_adjacent_product([3, 6, -2, -5, 7, 3]) == 21", "assert max_adjacent_product([5, 6, -4, 2, 3, 2, -23]) == 30", "assert max_adjacent_product([0, -1, 1, 24, 1, -4, 8, 10]) == 80"]}
{"seq_id": 70452281492, "instruction": "Write a function to find the maximum difference between two prime numbers in a given list of integers. If no prime numbers are present, the function should return None.", "output": "Here is the code to solve this problem: \n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef max_prime_diff(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return None\n    primes.sort()\n    return max(primes[i] - primes[0] for i in range(1, len(primes)))\n```", "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef max_prime_diff(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return None\n    primes.sort()\n    return max(primes[i] - primes[0] for i in range(1, len(primes)))", "entry_point": "max_prime_diff", "testcase": ["assert max_prime_diff([2, 11, 23, 37, 41, 53]) == 51", "assert max_prime_diff([2, 3, 5, 7, 11, 13, 17, 19]) == 17", "assert max_prime_diff([4, 6, 8, 10, 12, 14, 16]) == None"]}
{"seq_id": 57439348, "instruction": "Write a function that calculates the product of the maximum subsequence of non-adjacent numbers in a list. For example, given the list [5, 1, 2, 4, 6], the maximum product is 30 (5 * 6).", "output": "Here is the code to solve this problem: \n```python\ndef max_product_subsequence(nums):\n    if not nums:\n        return 1\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    if n > 1:\n        dp[1] = max(nums[0], nums[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], nums[i], dp[i-2] * nums[i])\n    return max(dp)\n```", "code": "def max_product_subsequence(nums):\n    if not nums:\n        return 1\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    if n > 1:\n        dp[1] = max(nums[0], nums[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], nums[i], dp[i-2] * nums[i])\n    return max(dp)", "entry_point": "max_product_subsequence", "testcase": ["assert max_product_subsequence([5, 10, 5, 10, 5]) == 125  # 5 * 5 * 5", "assert max_product_subsequence([10, 3, 1, 9, 2]) == 90  # 10 * 9", "assert max_product_subsequence([0, 0, 0, 0]) == 0", "assert max_product_subsequence([]) == 1"]}
{"seq_id": 39031213339, "instruction": "Write a function to remove all occurrences of a given element from a list.", "output": "Here is the code to solve this problem: \n```python\ndef remove_element(lst, element):\n    return [i for i in lst if i != element]\n```", "code": "def remove_element(lst, element):\n    return [i for i in lst if i != element]", "entry_point": "remove_element", "testcase": ["assert remove_element(['apple', 'banana', 'apple', 'cherry'], 'apple') == ['banana', 'cherry']", "assert remove_element([True, False, True, True], True) == [False]", "assert remove_element([1, 2, 3, 2, 4, 2], 2) == [1, 3, 4]"]}
{"seq_id": 41359583330, "instruction": "Write a python function to find the number of divisors of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef divisors_count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```", "code": "def divisors_count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "entry_point": "divisors_count", "testcase": ["assert divisors_count(11) == 2", "assert divisors_count(10) == 4", "assert divisors_count(28) == 6"]}
{"seq_id": 15229476235, "instruction": "Write a python function to find the largest sum of non-adjacent elements in a given array.", "output": "Here is the code to solve this problem: \n```python\ndef largest_Sum_Non_Adjacent(arr):\n    incl = 0\n    excl = 0\n     \n    for i in arr:\n        new_excl = excl if excl>incl else incl\n         \n        incl = excl + i\n        excl = new_excl\n         \n    return (excl if excl>incl else incl)\n```", "code": "def largest_Sum_Non_Adjacent(arr):\n    incl = 0\n    excl = 0\n     \n    for i in arr:\n        new_excl = excl if excl>incl else incl\n         \n        incl = excl + i\n        excl = new_excl\n         \n    return (excl if excl>incl else incl)", "entry_point": "largest_Sum_Non_Adjacent", "testcase": ["assert largest_Sum_Non_Adjacent([1,2,3,4,5,6]) == 12", "assert largest_Sum_Non_Adjacent([2,4,6,2,5]) == 13", "assert largest_Sum_Non_Adjacent([5,1,1,5]) == 10"]}
{"seq_id": 32424899451, "instruction": "Write a function to find the minimum cuts needed for a palindrome partitioning of a string. A palindrome partitioning of a string S is a partitioning of S such that every substring of the partition is a palindrome. You are given a string of lowercase letters and the task is to find the minimum cuts needed for palindrome partitioning.", "output": "Here is the code to solve this problem: \n```python\nimport sys\n\ndef min_palindrome_cuts(s):\n    n = len(s)\n    dp = [False] * n\n    cut = [0] * n\n\n    def is_pal(i, j):\n        while i < j:\n            if s[i] != s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n\n    for i in range(n):\n        min_cut = sys.maxsize\n        for j in range(i+1):\n            if is_pal(j, i):\n                cuts = 0 if j == 0 else cut[j-1] + 1\n                min_cut = min(min_cut, cuts)\n        cut[i] = min_cut\n    return cut[n-1]\n\n# Test cases\nassert min_palindrome_cuts(\"aab\") == 1\nassert min_palindrome_cuts(\"a\") == 0\nassert min_palindrome_cuts(\"aa\") == 0\nassert min_palindrome_cuts(\"ab\") == 1\nassert min_palindrome_cuts(\"abc\") == 2\n```", "code": "import sys\n\ndef min_palindrome_cuts(s):\n    n = len(s)\n    dp = [False] * n\n    cut = [0] * n\n\n    def is_pal(i, j):\n        while i < j:\n            if s[i] != s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n\n    for i in range(n):\n        min_cut = sys.maxsize\n        for j in range(i+1):\n            if is_pal(j, i):\n                cuts = 0 if j == 0 else cut[j-1] + 1\n                min_cut = min(min_cut, cuts)\n        cut[i] = min_cut\n    return cut[n-1]\n\n# Test cases\nassert min_palindrome_cuts(\"aab\") == 1\nassert min_palindrome_cuts(\"a\") == 0\nassert min_palindrome_cuts(\"aa\") == 0\nassert min_palindrome_cuts(\"ab\") == 1\nassert min_palindrome_cuts(\"abc\") == 2", "entry_point": "min_palindrome_cuts", "testcase": ["assert min_palindrome_cuts(\"aab\") == 1", "assert min_palindrome_cuts(\"ab\") == 1", "assert min_palindrome_cuts(\"a\") == 0", "assert min_palindrome_cuts(\"aa\") == 0", "assert min_palindrome_cuts(\"abc\") == 2"]}
{"seq_id": 14088256256, "instruction": "Write a python function to find the most common element in a given list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef most_common(lst):\n    data = Counter(lst)\n    return data.most_common(1)[0][0]\n```", "code": "from collections import Counter\n\ndef most_common(lst):\n    data = Counter(lst)\n    return data.most_common(1)[0][0]", "entry_point": "most_common", "testcase": ["assert most_common([1,2,2,3,3,3]) == 3", "assert most_common(['a','b','b','c','c','c','c']) == 'c'", "assert most_common([4,4,4,5,6,7,7,7,7]) == 7"]}
{"seq_id": 11189051320, "instruction": "Write a function to find the maximum number of k distinct positive integers that can be chosen from the array such that their sum is less than or equal to a given number m.", "output": "Here is the code to solve this problem: \n```python\ndef max_k_sum(nums, m, k):\n    nums.sort()\n    j = 0\n    for i in range(len(nums)):\n        if sum(nums[i:i+k]) > m:\n            j = i\n            break\n    if j == 0:\n        return k if sum(nums[-k:]) <= m else k-1\n    else:\n        return max_k_sum(nums[:j], m, k)\n```", "code": "def max_k_sum(nums, m, k):\n    nums.sort()\n    j = 0\n    for i in range(len(nums)):\n        if sum(nums[i:i+k]) > m:\n            j = i\n            break\n    if j == 0:\n        return k if sum(nums[-k:]) <= m else k-1\n    else:\n        return max_k_sum(nums[:j], m, k)", "entry_point": "max_k_sum", "testcase": ["assert max_k_sum([1, 2, 3, 4, 5], 10, 3) == 3", "assert max_k_sum([5, 4, 3, 2, 1], 12, 3) == 3", "assert max_k_sum([1, 2, 3, 4, 5], 5, 3) == 2"]}
{"seq_id": 10300244497, "instruction": "Write a python function to find the kth smallest element in a given unsorted list.", "output": "Here is the code to solve this problem: \n```python\ndef findKthSmallest(nums, k):\n    k = k - 1\n\n    def quick_sort(l, r):\n        pivot = nums[r]\n        p = l\n        for i in range(l, r):\n            if nums[i] < pivot:\n                nums[p], nums[i] = nums[i], nums[p]\n                p += 1\n        nums[p], nums[r] = nums[r], nums[p]\n        if k < p:\n            return quick_sort(l, p-1)\n        elif k > p:\n            return quick_sort(p+1, r)\n        else:\n            return nums[p]\n\n    return quick_sort(0, len(nums) - 1)\n\n\nif __name__ == '__main__':\n    nums = [3, 2, 1, 2, 4]\n    k = 2\n    ans = findKthSmallest(nums, k)\n    print(ans)\n```", "code": "def findKthSmallest(nums, k):\n    k = k - 1\n\n    def quick_sort(l, r):\n        pivot = nums[r]\n        p = l\n        for i in range(l, r):\n            if nums[i] < pivot:\n                nums[p], nums[i] = nums[i], nums[p]\n                p += 1\n        nums[p], nums[r] = nums[r], nums[p]\n        if k < p:\n            return quick_sort(l, p-1)\n        elif k > p:\n            return quick_sort(p+1, r)\n        else:\n            return nums[p]\n\n    return quick_sort(0, len(nums) - 1)\n\n\nif __name__ == '__main__':\n    nums = [3, 2, 1, 2, 4]\n    k = 2\n    ans = findKthSmallest(nums, k)\n    print(ans)", "entry_point": "findKthSmallest", "testcase": ["assert findKthSmallest([7, 10, 4, 3, 20, 15], 3) == 7", "assert findKthSmallest([3, 2, 1, 2, 4], 2) == 2", "assert findKthSmallest([1, 2, 3], 1) == 1"]}
{"seq_id": 36465044418, "instruction": "Write a function that takes a list of numbers and returns a new list with the numbers rounded to the nearest even integer.", "output": "Here is the code to solve this problem: \n```python\ndef round_to_even(numbers):\n    return [round(num) if round(num) % 2 == 0 else round(num) + 1 if num > round(num) else round(num) - 1 for num in numbers]\n```", "code": "def round_to_even(numbers):\n    return [round(num) if round(num) % 2 == 0 else round(num) + 1 if num > round(num) else round(num) - 1 for num in numbers]", "entry_point": "round_to_even", "testcase": ["assert round_to_even([5.6, 6.5, 7.5, 8.4]) == [6, 6, 8, 8]", "assert round_to_even([1.5, 2.3, 3.7, 4.5]) == [2, 2, 4, 4]", "assert round_to_even([9.1, 10.9, 11.5, 12.5]) == [10, 10, 12, 12]"]}
{"seq_id": 38131727749, "instruction": "Write a python function to find the shortest subarray whose sum is greater than or equal to a given target sum. If no such subarray exists, return 0.", "output": "Here is the code to solve this problem: \n```python\ndef shortestSubarray(A, K):\n    n, left, right, sumTillNow, minLength = len(A), 0, 0, 0, float('inf')\n    while right < n:\n        sumTillNow += A[right]\n        while sumTillNow >= K:\n            minLength = min(minLength, right - left + 1)\n            sumTillNow -= A[left]\n            left += 1\n        right += 1\n    return minLength if minLength != float('inf') else 0\n```", "code": "def shortestSubarray(A, K):\n    n, left, right, sumTillNow, minLength = len(A), 0, 0, 0, float('inf')\n    while right < n:\n        sumTillNow += A[right]\n        while sumTillNow >= K:\n            minLength = min(minLength, right - left + 1)\n            sumTillNow -= A[left]\n            left += 1\n        right += 1\n    return minLength if minLength != float('inf') else 0", "entry_point": "shortestSubarray", "testcase": ["assert shortestSubarray([2,3,1,2,4,3], 7) == 2", "assert shortestSubarray([1,1,1,1,1,1,1,1], 11) == 0", "assert shortestSubarray([1,4,4], 4) == 1"]}
{"seq_id": 7842675803, "instruction": "Write a function to compute the nth number in the Newman-Conway Sequence. The sequence starts with P(1) = 1 and P(2) = 1. For all n > 2, P(n) = P(P(n - 1)) + P(n - P(n - 1)).", "output": "Here is the code to solve this problem: \n```python\ndef newman_conway(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    sequence = [0, 1, 1]  # Initialize the sequence with the first two values\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n    return sequence[n]\n```", "code": "def newman_conway(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    sequence = [0, 1, 1]  # Initialize the sequence with the first two values\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n    return sequence[n]", "entry_point": "newman_conway", "testcase": ["assert newman_conway(1) == 1", "assert newman_conway(3) == 2", "assert newman_conway(2) == 1", "assert newman_conway(5) == 3", "assert newman_conway(4) == 2", "assert newman_conway(7) == 4", "assert newman_conway(6) == 4"]}
{"seq_id": 31743794380, "instruction": "Write a python function to check whether a given array can be partitioned into two subsets of equal sum.", "output": "Here is the code to solve this problem: \n```python\ndef canPartition(nums):\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]\n```", "code": "def canPartition(nums):\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n    return dp[target]", "entry_point": "canPartition", "testcase": ["assert canPartition([1, 2, 3, 5]) == False", "assert canPartition([3, 3, 3, 4, 5]) == True", "assert canPartition([1, 5, 11, 5]) == True"]}
{"seq_id": 2003754717, "instruction": "Write a function to find the maximum number of fruits that can be picked from a tree row in a given range, where you can only pick fruits from trees that are not too far apart. Each tree contains a certain type of fruit, and you are only allowed to pick two types of fruits. The trees are represented as a list of integers, where each integer represents the type of fruit on the tree. The range within which you can pick fruits is represented by two integers.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef pick_fruits(tree_row, range_start, range_end):\n    fruit_types = defaultdict(int)\n    max_fruits = 0\n    left = 0\n\n    for right in range(len(tree_row)):\n        fruit_types[tree_row[right]] += 1\n\n        while len(fruit_types) > 2:\n            fruit_types[tree_row[left]] -= 1\n            if fruit_types[tree_row[left]] == 0:\n                del fruit_types[tree_row[left]]\n            left += 1\n\n        max_fruits = max(max_fruits, right - left + 1)\n\n    return max_fruits if max_fruits >= range_start and max_fruits <= range_end else 0\n```", "code": "from collections import defaultdict\n\ndef pick_fruits(tree_row, range_start, range_end):\n    fruit_types = defaultdict(int)\n    max_fruits = 0\n    left = 0\n\n    for right in range(len(tree_row)):\n        fruit_types[tree_row[right]] += 1\n\n        while len(fruit_types) > 2:\n            fruit_types[tree_row[left]] -= 1\n            if fruit_types[tree_row[left]] == 0:\n                del fruit_types[tree_row[left]]\n            left += 1\n\n        max_fruits = max(max_fruits, right - left + 1)\n\n    return max_fruits if max_fruits >= range_start and max_fruits <= range_end else 0", "entry_point": "pick_fruits", "testcase": ["assert pick_fruits([1,2,1], 3, 3) == 3", "assert pick_fruits([1,2,3,2,2], 3, 5) == 4", "assert pick_fruits([0,1,2,2], 3, 4) == 3", "assert pick_fruits([3,3,3,1,2,1,1,2,3,3,4], 4, 7) == 5"]}
{"seq_id": 17978477027, "instruction": "Write a python function to find out the number of ways to reach the last cell of a grid from the first cell using only right and down moves.", "output": "Here is the code to solve this problem: \n```python\ndef num_of_ways(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return num_of_ways(m-1, n) + num_of_ways(m, n-1)\n```", "code": "def num_of_ways(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return num_of_ways(m-1, n) + num_of_ways(m, n-1)", "entry_point": "num_of_ways", "testcase": ["assert num_of_ways(3, 3) == 6", "assert num_of_ways(2, 2) == 2", "assert num_of_ways(4, 4) == 20"]}
{"seq_id": 31766688363, "instruction": "Write a python function to find the subarray with the largest sum in an array.", "output": "Here is the code to solve this problem: \n```python\ndef find_subarray(arr):\n    max_so_far = arr[0]\n    current_max = arr[0]\n\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], current_max + arr[i])\n        max_so_far = max(max_so_far, current_max)\n\n    return max_so_far\n```", "code": "def find_subarray(arr):\n    max_so_far = arr[0]\n    current_max = arr[0]\n\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], current_max + arr[i])\n        max_so_far = max(max_so_far, current_max)\n\n    return max_so_far", "entry_point": "find_subarray", "testcase": ["assert find_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) == 7", "assert find_subarray([-2, -3, -1]) == -1", "assert find_subarray([-2, -5, 6, -2, -3, 1, 5, -6]) == 7"]}
{"seq_id": 14761629762, "instruction": "Write a python function to find the smallest number that can be formed from the digits of a given positive integer.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_num(num):\n    num_str = str(num)\n    num_list = list(num_str)\n    num_list.sort()\n    num_list = [int(i) for i in num_list if i != '0']\n    smallest_num = int(''.join(map(str, num_list)))\n    return smallest_num\n```", "code": "def smallest_num(num):\n    num_str = str(num)\n    num_list = list(num_str)\n    num_list.sort()\n    num_list = [int(i) for i in num_list if i != '0']\n    smallest_num = int(''.join(map(str, num_list)))\n    return smallest_num", "entry_point": "smallest_num", "testcase": ["assert smallest_num(12345) == 12345", "assert smallest_num(111) == 111", "assert smallest_num(54023) == 2345"]}
{"seq_id": 38421355368, "instruction": "Write a function to find the total number of continuous subarrays within an array whose sum equals to a given target.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef subarray_count(nums, target):\n    counter = Counter()\n    counter[0] = 1\n    sum_acc, ans = 0, 0\n    \n    for i, item in enumerate(nums):\n        sum_acc += nums[i]\n        if sum_acc - target in counter:\n            ans += counter[sum_acc - target]\n        \n        counter[sum_acc] += 1\n        \n    return ans\n```", "code": "from collections import Counter\n\ndef subarray_count(nums, target):\n    counter = Counter()\n    counter[0] = 1\n    sum_acc, ans = 0, 0\n    \n    for i, item in enumerate(nums):\n        sum_acc += nums[i]\n        if sum_acc - target in counter:\n            ans += counter[sum_acc - target]\n        \n        counter[sum_acc] += 1\n        \n    return ans", "entry_point": "subarray_count", "testcase": ["assert subarray_count([1, 1, 1], 2) == 2", "assert subarray_count([1, 2, 3], 3) == 2", "assert subarray_count([10, 2, -2, -20, 10], -10) == 3"]}
{"seq_id": 44003507152, "instruction": "Write a function to find the maximum product of two integers in a list.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_two_integers(lst):\n    lst.sort()\n    return max(lst[0] * lst[1], lst[-1] * lst[-2])\n\nassert max_product_two_integers([1, 5, 7, -2, 3]) == 35\nassert max_product_two_integers([-10, -20, 1, 3]) == 200\nassert max_product_two_integers([0, 2, 3]) == 6\n```", "code": "def max_product_two_integers(lst):\n    lst.sort()\n    return max(lst[0] * lst[1], lst[-1] * lst[-2])\n\nassert max_product_two_integers([1, 5, 7, -2, 3]) == 35\nassert max_product_two_integers([-10, -20, 1, 3]) == 200\nassert max_product_two_integers([0, 2, 3]) == 6", "entry_point": "max_product_two_integers", "testcase": ["assert max_product_two_integers([-10, -20, 1, 3]) == 200", "assert max_product_two_integers([1, 5, 7, -2, 3]) == 35", "assert max_product_two_integers([0, 2, 3]) == 6"]}
{"seq_id": 20511887977, "instruction": "Write a function to check if a given list of integers is a valid mountain array. A valid mountain array is defined as an array where it increases and then decreases, and the peak cannot be the first or last element. For example, [1, 3, 5, 4, 2] is a valid mountain array, but [3, 5, 5] and [0, 3, 2, 1] are not.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_mountain(arr):\n    if len(arr) < 3:\n        return False\n    peak = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            peak = i\n        else:\n            break\n    if peak == 0 or peak == len(arr) - 1:\n        return False\n    for i in range(peak, len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            return False\n    return True\n```", "code": "def is_valid_mountain(arr):\n    if len(arr) < 3:\n        return False\n    peak = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            peak = i\n        else:\n            break\n    if peak == 0 or peak == len(arr) - 1:\n        return False\n    for i in range(peak, len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            return False\n    return True", "entry_point": "is_valid_mountain", "testcase": ["assert is_valid_mountain([2, 1]) == False", "assert is_valid_mountain([3, 5, 5]) == False", "assert is_valid_mountain([1, 3, 5, 4, 2]) == True", "assert is_valid_mountain([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == True"]}
{"seq_id": 18441941960, "instruction": "Write a function to check if a string can be rearranged to form a palindrome by ensuring that no two adjacent characters are the same.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\nimport heapq\n\ndef rearrange_palindrome(s):\n    counter = Counter(s)\n    pq = []\n    for char, freq in counter.items():\n        heapq.heappush(pq, (-freq, char))\n    last_char = None\n    while pq:\n        freq, char = heapq.heappop(pq)\n        if last_char == char:\n            if not pq:\n                return False\n            next_freq, next_char = heapq.heappop(pq)\n            if next_freq < 0:\n                heapq.heappush(pq, (next_freq+1, next_char))\n            last_char = char\n            heapq.heappush(pq, (freq, char))\n        else:\n            last_char = char\n            if freq < -1:\n                heapq.heappush(pq, (freq+1, char))\n    return True\n```", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_palindrome(s):\n    counter = Counter(s)\n    pq = []\n    for char, freq in counter.items():\n        heapq.heappush(pq, (-freq, char))\n    last_char = None\n    while pq:\n        freq, char = heapq.heappop(pq)\n        if last_char == char:\n            if not pq:\n                return False\n            next_freq, next_char = heapq.heappop(pq)\n            if next_freq < 0:\n                heapq.heappush(pq, (next_freq+1, next_char))\n            last_char = char\n            heapq.heappush(pq, (freq, char))\n        else:\n            last_char = char\n            if freq < -1:\n                heapq.heappush(pq, (freq+1, char))\n    return True", "entry_point": "rearrange_palindrome", "testcase": ["assert rearrange_palindrome(\"aaab\") == False", "assert rearrange_palindrome(\"abcba\") == True", "assert rearrange_palindrome(\"aabb\") == True"]}
{"seq_id": 5472790831, "instruction": "Write a function to count the number of unique sub-sequences in a given string. A sub-sequence is a sequence that can be derived from the string by deleting some or no elements without changing the order of the remaining elements.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique_subsequences(s: str) -> int:\n    # Initialize an array to keep track of the number of sub-sequences\n    # ending with a specific character.\n    subseqs = [0]*26\n    # Initialize the total number of sub-sequences as 0.\n    total_subseqs = 0\n\n    for char in s:\n        # The current character's ASCII value minus 'a' gives the index.\n        idx = ord(char) - ord('a')\n        # The number of sub-sequences ending with the current character\n        # is the total number of sub-sequences so far plus 1.\n        subseqs[idx] = total_subseqs + 1\n        # Update the total number of sub-sequences.\n        total_subseqs += subseqs[idx]\n\n    # The total number of sub-sequences is the final answer.\n    return total_subseqs\n```", "code": "def count_unique_subsequences(s: str) -> int:\n    # Initialize an array to keep track of the number of sub-sequences\n    # ending with a specific character.\n    subseqs = [0]*26\n    # Initialize the total number of sub-sequences as 0.\n    total_subseqs = 0\n\n    for char in s:\n        # The current character's ASCII value minus 'a' gives the index.\n        idx = ord(char) - ord('a')\n        # The number of sub-sequences ending with the current character\n        # is the total number of sub-sequences so far plus 1.\n        subseqs[idx] = total_subseqs + 1\n        # Update the total number of sub-sequences.\n        total_subseqs += subseqs[idx]\n\n    # The total number of sub-sequences is the final answer.\n    return total_subseqs", "entry_point": "count_unique_subsequences", "testcase": ["assert count_unique_subsequences(\"abc\") == 7", "# The valid sub-sequences are: \"\", \"a\", \"b\", \"ab\", \"ba\", \"aba\".", "# The valid sub-sequences are: \"\", \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", \"abc\".", "", "# The valid sub-sequences are: \"\", \"a\", \"aa\", \"aaa\".", ""]}
{"seq_id": 1816606310, "instruction": "Write a python function to find the day of the week for a given date. The date will be given in the format of \"Month Day, Year\". For example, \"January 1, 2020\". Assume that the input date will always be valid and in the correct format.", "output": "Here is the code to solve this problem: \n```python\nimport datetime\n\ndef find_day_of_week(date):\n    day = datetime.datetime.strptime(date, '%B %d, %Y').weekday()\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][day]\n```", "code": "import datetime\n\ndef find_day_of_week(date):\n    day = datetime.datetime.strptime(date, '%B %d, %Y').weekday()\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][day]", "entry_point": "find_day_of_week", "testcase": ["assert find_day_of_week(\"January 1, 2020\")==\"Wednesday\"", "assert find_day_of_week(\"December 25, 2021\")==\"Saturday\"", "assert find_day_of_week(\"July 4, 2022\")==\"Monday\""]}
{"seq_id": 13412520122, "instruction": "Write a function to find the nearest palindrome number for a given number. If there are two nearest palindromes, the function should return the smallest one.", "output": "Here is the code to solve this problem: \n```python\ndef nearest_palindrome(n):\n    l = len(n)\n    if l == 1:\n        return str(int(n) - 1)\n\n    candidates = set(( ( \"1\"+\"0\"*(l-1)+\"1\" ), \"9\"*(l-1) ))\n    prefix = int( n[:int((l+1)/2)] )\n\n    for i in map(str, (prefix -1, prefix, prefix + 1)):\n        candidates.add(i+[i,i[:-1]][l & 1][::-1])\n    candidates.discard(n)\n\n    return min(candidates, key=lambda x: (abs(int(x) - int(n)), int(x)))\n```", "code": "def nearest_palindrome(n):\n    l = len(n)\n    if l == 1:\n        return str(int(n) - 1)\n\n    candidates = set(( ( \"1\"+\"0\"*(l-1)+\"1\" ), \"9\"*(l-1) ))\n    prefix = int( n[:int((l+1)/2)] )\n\n    for i in map(str, (prefix -1, prefix, prefix + 1)):\n        candidates.add(i+[i,i[:-1]][l & 1][::-1])\n    candidates.discard(n)\n\n    return min(candidates, key=lambda x: (abs(int(x) - int(n)), int(x)))", "entry_point": "nearest_palindrome", "testcase": ["assert nearest_palindrome(\"1\") == \"0\"", "assert nearest_palindrome(\"100\") == \"99\"", "assert nearest_palindrome(\"123\") == \"121\""]}
{"seq_id": 69890810873, "instruction": "Write a function to convert date strings from \"Day Month Year\" format to \"YYYY-MM-DD\" format. The day should be in numerical format, the month should be the numerical equivalent of the three-letter abbreviation and the year should be a four-digit number.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef date_conversion(date):\n  months = {'Jan' : '01', 'Feb' : '02', 'Mar' : '03', 'Apr': '04', 'May' : '05', 'Jun': '06', 'Jul': '07', 'Aug': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\n\n  day = re.findall('\\d+st|\\d+nd|\\d+rd|\\d+th', date)\n  day = day[0].replace('st', '').replace('nd', '').replace('rd', '').replace('th', '')\n  if len(day)==1: \n    day = '0' + day\n\n  month = months[date.split()[1]]\n  year = date.split()[2]\n\n  return year + '-' + month + '-' + day\n```", "code": "import re\n\ndef date_conversion(date):\n  months = {'Jan' : '01', 'Feb' : '02', 'Mar' : '03', 'Apr': '04', 'May' : '05', 'Jun': '06', 'Jul': '07', 'Aug': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}\n\n  day = re.findall('\\d+st|\\d+nd|\\d+rd|\\d+th', date)\n  day = day[0].replace('st', '').replace('nd', '').replace('rd', '').replace('th', '')\n  if len(day)==1: \n    day = '0' + day\n\n  month = months[date.split()[1]]\n  year = date.split()[2]\n\n  return year + '-' + month + '-' + day", "entry_point": "date_conversion", "testcase": ["assert date_conversion(\"2nd Jan 1999\")==\"1999-01-02\"", "assert date_conversion(\"11th Mar 2000\")==\"2000-03-11\"", "assert date_conversion(\"21st Oct 2015\")==\"2015-10-21\""]}
{"seq_id": 6241646468, "instruction": "Write a function to find the nth pentatope number.", "output": "Here is the code to solve this problem: \n```python\ndef pentatope_number(n): \n\treturn (n * (n + 1) * (n + 2) * (n + 3)) / 24\n```", "code": "def pentatope_number(n): \n\treturn (n * (n + 1) * (n + 2) * (n + 3)) / 24", "entry_point": "pentatope_number", "testcase": ["assert pentatope_number(5) == 70.0", "assert pentatope_number(6) == 126.0", "assert pentatope_number(7) == 210.0"]}
{"seq_id": 9319342525, "instruction": "Write a python function to shift the elements of a list by a given number of positions to the left. For example, if the list is [1, 2, 3, 4, 5] and the number of positions is 2, the function should return [3, 4, 5, 1, 2].", "output": "Here is the code to solve this problem: \n```python\ndef shift_list_left(arr, positions):\n    \"\"\"\n    Shifts the elements of a list to the left by a given number of positions.\n\n    :param arr: List of elements to shift.\n    :param positions: Number of positions to shift the elements to the left.\n    :return: Shifted list.\n    \"\"\"\n    n = len(arr)\n    positions = positions % n\n    return arr[positions:] + arr[:positions]\n```", "code": "def shift_list_left(arr, positions):\n    \"\"\"\n    Shifts the elements of a list to the left by a given number of positions.\n\n    :param arr: List of elements to shift.\n    :param positions: Number of positions to shift the elements to the left.\n    :return: Shifted list.\n    \"\"\"\n    n = len(arr)\n    positions = positions % n\n    return arr[positions:] + arr[:positions]", "entry_point": "shift_list_left", "testcase": ["assert shift_list_left([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]", "assert shift_list_left([10, 20, 30, 40, 50], 3) == [40, 50, 10, 20, 30]", "assert shift_list_left(['a', 'b', 'c', 'd'], 1) == ['b', 'c', 'd', 'a']"]}
{"seq_id": 3553895013, "instruction": "Write a function that checks if a given string is a valid password based on certain criteria. A valid password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character from the set: !@#$%^&*()-_=+{}[]|\\:;\"'<>,.?/~`.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef password_validation(password):\n    if len(password) < 8:\n        return False\n    if not re.search(\"[a-z]\", password):\n        return False\n    if not re.search(\"[A-Z]\", password):\n        return False\n    if not re.search(\"[0-9]\", password):\n        return False\n    if not re.search(\"[!@#$%^&*()-_=+{}\\\\[\\\\]|\\\\;:'\\\"<>,.?/~`]\", password):\n        return False\n    return True\n```", "code": "import re\n\ndef password_validation(password):\n    if len(password) < 8:\n        return False\n    if not re.search(\"[a-z]\", password):\n        return False\n    if not re.search(\"[A-Z]\", password):\n        return False\n    if not re.search(\"[0-9]\", password):\n        return False\n    if not re.search(\"[!@#$%^&*()-_=+{}\\\\[\\\\]|\\\\;:'\\\"<>,.?/~`]\", password):\n        return False\n    return True", "entry_point": "password_validation", "testcase": ["assert password_validation(\"password\") == False", "assert password_validation(\"Pa$$w0rd\") == True", "assert password_validation(\"P@$$w0rd!\") == True", "assert password_validation(\"P@$$word\") == False", "assert password_validation(\"P@$$w0\") == False"]}
{"seq_id": 22087792674, "instruction": "Write a python function to find the maximum number of non-overlapping intervals from a given list of intervals.", "output": "Here is the code to solve this problem: \n```python\ndef max_non_overlapping_intervals(intervals):\n    if not intervals:\n        return 0\n\n    intervals.sort(key=lambda x: x[1])\n    count = 1\n    end = intervals[0][1]\n\n    for start, end_ in intervals[1:]:\n        if start >= end:\n            count += 1\n            end = end_\n\n    return count\n```", "code": "def max_non_overlapping_intervals(intervals):\n    if not intervals:\n        return 0\n\n    intervals.sort(key=lambda x: x[1])\n    count = 1\n    end = intervals[0][1]\n\n    for start, end_ in intervals[1:]:\n        if start >= end:\n            count += 1\n            end = end_\n\n    return count", "entry_point": "max_non_overlapping_intervals", "testcase": ["assert max_non_overlapping_intervals([[1,3],[1,4],[1,5]]) == 1", "assert max_non_overlapping_intervals([[1,2],[7,8],[4,5]]) == 3", "assert max_non_overlapping_intervals([[1,2],[2,3],[3,4],[1,3]]) == 3"]}
{"seq_id": 27426571566, "instruction": "Write a function to return the kth to last element of a singly linked list. You may assume that the list has at least k elements.", "output": "Here is the code to solve this problem: \n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.length = 0\n\n    def append(self, value):\n        new_node = Node(value)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            self.tail.next = new_node\n            self.tail = new_node\n        self.length += 1\n\n    def kth_to_last(self, k):\n        slow = self.head\n        fast = self.head\n        for _ in range(k):\n            fast = fast.next\n        while fast is not None:\n            slow = slow.next\n            fast = fast.next\n        return slow.value\n\ndef kth_to_last(k, lst):\n    ll = LinkedList()\n    for elem in lst:\n        ll.append(elem)\n    return ll.kth_to_last(k)\n```", "code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.length = 0\n\n    def append(self, value):\n        new_node = Node(value)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            self.tail.next = new_node\n            self.tail = new_node\n        self.length += 1\n\n    def kth_to_last(self, k):\n        slow = self.head\n        fast = self.head\n        for _ in range(k):\n            fast = fast.next\n        while fast is not None:\n            slow = slow.next\n            fast = fast.next\n        return slow.value\n\ndef kth_to_last(k, lst):\n    ll = LinkedList()\n    for elem in lst:\n        ll.append(elem)\n    return ll.kth_to_last(k)", "entry_point": "kth_to_last", "testcase": ["assert kth_to_last(2, [1,2,3,4,5]) == 4", "assert kth_to_last(1, [10, 20, 30, 40, 50]) == 50", "assert kth_to_last(3, [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7"]}
{"seq_id": 1520459693, "instruction": "Write a function to check if a given array is a permutation. A permutation is an array containing each element from 1 to N once, and only once.", "output": "Here is the code to solve this problem: \n```python\ndef is_permutation(A):\n    n = len(A)\n    if n == 1:\n        return True\n    A.sort()\n    for i in range(n - 1):\n        if A[i] == A[i + 1] or A[i] != i + 1:\n            return False\n    return True\n```", "code": "def is_permutation(A):\n    n = len(A)\n    if n == 1:\n        return True\n    A.sort()\n    for i in range(n - 1):\n        if A[i] == A[i + 1] or A[i] != i + 1:\n            return False\n    return True", "entry_point": "is_permutation", "testcase": ["assert is_permutation([1, 2, 3, 4, 5]) == True", "assert is_permutation([4, 1, 3, 2, 5]) == True", "assert is_permutation([1]) == True", "assert is_permutation([0, 1, 2, 3, 4]) == False", "assert is_permutation([1, 2, 3, 5, 5]) == False"]}
{"seq_id": 28809692656, "instruction": "Write a function to find the mode(s) in a list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef mode(nums):\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    max_count = max(counts.values())\n    modes = [k for k, v in counts.items() if v == max_count]\n    return modes\n```", "code": "def mode(nums):\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    max_count = max(counts.values())\n    modes = [k for k, v in counts.items() if v == max_count]\n    return modes", "entry_point": "mode", "testcase": ["assert mode([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert mode([1, 1, 2, 2, 3, 3]) == [1, 2, 3]", "assert mode([1, 2, 2, 3, 4, 4, 4]) == [4]", "assert mode([1, 1, 2, 3, 3, 3, 4, 4, 4, 4]) == [4]"]}
{"seq_id": 6324102705, "instruction": "Write a function to remove all occurrences of a given character from a string.", "output": "Here is the code to solve this problem: \n```python\ndef remove_character(string, char):\n  return string.replace(char, '')\n```", "code": "def remove_character(string, char):\n  return string.replace(char, '')", "entry_point": "remove_character", "testcase": ["assert remove_character('hello world', 'o')=='hell wrld'", "assert remove_character('1234567890', '3')=='124567890'", "assert remove_character('python programming', 'm')=='python prograing'"]}
{"seq_id": 72969299662, "instruction": "Write a function to check if a given undirected graph is a tree or not. A tree is a connected graph with no cycles.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef is_tree(num_nodes, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [False] * num_nodes\n    if has_cycle(graph, visited, -1, 0):\n        return False\n    \n    for v in visited:\n        if not v:\n            return False\n    return True\n\ndef has_cycle(graph, visited, parent, node):\n    visited[node] = True\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            if has_cycle(graph, visited, node, neighbor):\n                return True\n        elif neighbor != parent:\n            return True\n    return False\n```", "code": "from collections import defaultdict\n\ndef is_tree(num_nodes, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [False] * num_nodes\n    if has_cycle(graph, visited, -1, 0):\n        return False\n    \n    for v in visited:\n        if not v:\n            return False\n    return True\n\ndef has_cycle(graph, visited, parent, node):\n    visited[node] = True\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            if has_cycle(graph, visited, node, neighbor):\n                return True\n        elif neighbor != parent:\n            return True\n    return False", "entry_point": "is_tree", "testcase": ["assert is_tree(5, [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]) == False", "assert is_tree(5, [[0, 1], [0, 2], [0, 3], [1, 4]]) == True", "assert is_tree(3, [[0, 1], [1, 2]]) == True", "assert is_tree(3, [[0, 1], [1, 2], [2, 0]]) == False"]}
{"seq_id": 23945128292, "instruction": "Write a function to find the sum of unique elements in a given list.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_unique_elements(nums):\n    num_count = {}\n    for n in nums:\n        if n in num_count:\n            num_count[n] += 1\n        else:\n            num_count[n] = 1\n    ans = 0\n    for n in num_count:\n        if num_count[n] == 1:\n            ans += n\n    return ans\n```", "code": "def sum_of_unique_elements(nums):\n    num_count = {}\n    for n in nums:\n        if n in num_count:\n            num_count[n] += 1\n        else:\n            num_count[n] = 1\n    ans = 0\n    for n in num_count:\n        if num_count[n] == 1:\n            ans += n\n    return ans", "entry_point": "sum_of_unique_elements", "testcase": ["assert sum_of_unique_elements([1, 2, 3, 2]) == 4", "assert sum_of_unique_elements([1, 2, 3, 4, 5]) == 15", "assert sum_of_unique_elements([1, 1, 1, 1, 1]) == 0"]}
{"seq_id": 4129011136, "instruction": "Write a python function to find the smallest positive integer that does not appear in the list.", "output": "Here is the code to solve this problem: \n```python\ndef find_smallest_missing(nums):\n    nums = set(nums)\n    smallest = 1\n    while smallest in nums:\n        smallest += 1\n    return smallest\n```", "code": "def find_smallest_missing(nums):\n    nums = set(nums)\n    smallest = 1\n    while smallest in nums:\n        smallest += 1\n    return smallest", "entry_point": "find_smallest_missing", "testcase": ["assert find_smallest_missing([1, 2, 3]) == 4", "assert find_smallest_missing([7, 8, 9, 11, 12]) == 1", "assert find_smallest_missing([3, 4, -1, 1]) == 2"]}
{"seq_id": 19207828618, "instruction": "Write a python function to find the maximum sum of a subarray with the length of k.", "output": "Here is the code to solve this problem: \n```python\ndef max_sub_array_of_size_k(k, arr):\n    max_sum = 0\n    window_sum = 0\n    window_start = 0\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end] \n        if window_end >= k-1:\n            max_sum = max(max_sum, window_sum)\n            window_sum -= arr[window_start]\n            window_start += 1\n    return max_sum\n```", "code": "def max_sub_array_of_size_k(k, arr):\n    max_sum = 0\n    window_sum = 0\n    window_start = 0\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end] \n        if window_end >= k-1:\n            max_sum = max(max_sum, window_sum)\n            window_sum -= arr[window_start]\n            window_start += 1\n    return max_sum", "entry_point": "max_sub_array_of_size_k", "testcase": ["assert max_sub_array_of_size_k(3, [2, 1, 5, 1, 3, 2]) == 9", "assert max_sub_array_of_size_k(1, [2, 3, 4, 1, 5]) == 5", "assert max_sub_array_of_size_k(2, [2, 3, 4, 1, 5]) == 7"]}
{"seq_id": 75052991376, "instruction": "Write a function that takes a positive integer n, and returns the nth row of Pascal's triangle.", "output": "Here is the code to solve this problem: \n```python\ndef nth_pascal_row(n):\n    row = [1]\n    for _ in range(n):\n        row = [x + y for x, y in zip([0]+row, row+[0])]\n    return row\n```", "code": "def nth_pascal_row(n):\n    row = [1]\n    for _ in range(n):\n        row = [x + y for x, y in zip([0]+row, row+[0])]\n    return row", "entry_point": "nth_pascal_row", "testcase": ["assert nth_pascal_row(3)==[1, 3, 3, 1] ", "assert nth_pascal_row(5)==[1, 5, 10, 10, 5, 1]", "assert nth_pascal_row(4)==[1, 4, 6, 4, 1] "]}
{"seq_id": 34298356254, "instruction": "Write a function that takes a string as an argument and returns the number of times the letter 'a' appears in the string.", "output": "Here is the code to solve this problem: \n```python\ndef count_letter_a(word):\n    count = 0\n    for letter in word:\n        if letter == 'a':\n            count += 1\n    return count\n```", "code": "def count_letter_a(word):\n    count = 0\n    for letter in word:\n        if letter == 'a':\n            count += 1\n    return count", "entry_point": "count_letter_a", "testcase": ["assert count_letter_a(\"apple\") == 1", "assert count_letter_a(\"banana\") == 3", "assert count_letter_a(\"\") == 0"]}
{"seq_id": 36296589529, "instruction": "Write a python function to find the maximum number of non-overlapping subarrays with sum zero.", "output": "Here is the code to solve this problem: \n```python\ndef max_subarrays_with_zero_sum(arr):\n    max_count = 0\n    curr_sum = 0\n    prefix_sum = {0: 1}\n    for num in arr:\n        curr_sum += num\n        if curr_sum in prefix_sum:\n            max_count += prefix_sum[curr_sum]\n            prefix_sum[curr_sum] += 1\n        else:\n            prefix_sum[curr_sum] = 1\n    return max_count\n```", "code": "def max_subarrays_with_zero_sum(arr):\n    max_count = 0\n    curr_sum = 0\n    prefix_sum = {0: 1}\n    for num in arr:\n        curr_sum += num\n        if curr_sum in prefix_sum:\n            max_count += prefix_sum[curr_sum]\n            prefix_sum[curr_sum] += 1\n        else:\n            prefix_sum[curr_sum] = 1\n    return max_count", "entry_point": "max_subarrays_with_zero_sum", "testcase": ["assert max_subarrays_with_zero_sum([1, 2, -2, 3]) == 1", "assert max_subarrays_with_zero_sum([1, 2, -3, 3]) == 2", "assert max_subarrays_with_zero_sum([4, 2, -1, -1, 2, -3]) == 2"]}
{"seq_id": 9113981015, "instruction": "Write a python function to find the next power of 2 of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef next_power_of_2(n):\n    \"\"\"\n    Calculate the next power of 2 for a given number.\n    :param n: an integer\n    :return: next power of 2 as an integer\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n & (n-1) == 0:\n        return n\n    else:\n        return 1 << (n-1).bit_length()\n```", "code": "def next_power_of_2(n):\n    \"\"\"\n    Calculate the next power of 2 for a given number.\n    :param n: an integer\n    :return: next power of 2 as an integer\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n & (n-1) == 0:\n        return n\n    else:\n        return 1 << (n-1).bit_length()", "entry_point": "next_power_of_2", "testcase": ["assert next_power_of_2(16) == 16", "assert next_power_of_2(5) == 8", "assert next_power_of_2(10) == 16"]}
{"seq_id": 38282470279, "instruction": "Write a function to return the number of days in a given month.", "output": "Here is the code to solve this problem: \n```python\ndef days_in_month(month, year_type):\n    if month in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return 31\n    elif month in ['April', 'June', 'September', 'November']:\n        return 30\n    elif month == 'February':\n        if year_type == 'leap year':\n            return 29\n        else:\n            return 28\n    else:\n        return None\n```", "code": "def days_in_month(month, year_type):\n    if month in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return 31\n    elif month in ['April', 'June', 'September', 'November']:\n        return 30\n    elif month == 'February':\n        if year_type == 'leap year':\n            return 29\n        else:\n            return 28\n    else:\n        return None", "entry_point": "days_in_month", "testcase": ["assert days_in_month('April', 'common year') == 30", "assert days_in_month('February', 'leap year') == 29", "assert days_in_month('July', 'leap year') == 31"]}
{"seq_id": 15574920688, "instruction": "Write a function to find the maximum number in each row of a given 2D array.", "output": "Here is the code to solve this problem: \n```python\ndef max_in_rows(matrix):\n    result = []\n    for row in matrix:\n        result.append(max(row))\n    return result\n```", "code": "def max_in_rows(matrix):\n    result = []\n    for row in matrix:\n        result.append(max(row))\n    return result", "entry_point": "max_in_rows", "testcase": ["assert max_in_rows([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [1, 2, 3]", "assert max_in_rows([[10, 2, 5], [3, 8, 1], [6, 7, 4]]) == [10, 8, 7]", "assert max_in_rows([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]"]}
{"seq_id": 18551234989, "instruction": "Write a python function to find the maximum and minimum numbers in a list.", "output": "Here is the code to solve this problem: \n```python\ndef max_min(lst):\n    max_val = max(lst)\n    min_val = min(lst)\n    return max_val, min_val\n```", "code": "def max_min(lst):\n    max_val = max(lst)\n    min_val = min(lst)\n    return max_val, min_val", "entry_point": "max_min", "testcase": ["assert max_min([100, 200, 300, -100, 50]) == (300, -100)", "assert max_min([15, 22, 84, 14, 88, 23]) == (88, 14)", "assert max_min([4, 2, 9, 7, 5, 6]) == (9, 2)"]}
{"seq_id": 1161982133, "instruction": "Write a python function to find the number of ways to reach the last cell of a grid from the first cell using only right and down moves. The grid can be of any dimension.", "output": "Here is the code to solve this problem: \n```python\ndef grid_ways(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return grid_ways(m-1, n) + grid_ways(m, n-1)\n```", "code": "def grid_ways(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return grid_ways(m-1, n) + grid_ways(m, n-1)", "entry_point": "grid_ways", "testcase": ["assert grid_ways(2, 3) == 3", "assert grid_ways(2, 2) == 2", "assert grid_ways(3, 3) == 6"]}
{"seq_id": 43212823553, "instruction": "Write a function to find the maximum and minimum sum possible by choosing a subsequence of length 'k' from a given list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef max_min_sum(list1, k):\n    list1.sort()\n    max_sum = sum(list1[-k:])\n    min_sum = sum(list1[:k])\n    return (max_sum, min_sum)\n```", "code": "def max_min_sum(list1, k):\n    list1.sort()\n    max_sum = sum(list1[-k:])\n    min_sum = sum(list1[:k])\n    return (max_sum, min_sum)", "entry_point": "max_min_sum", "testcase": ["assert max_min_sum([1,2,3,4,5,6,7,8,9], 3) == (24, 6)", "assert max_min_sum([10,20,30,40,50], 2) == (90, 30)", "assert max_min_sum([1,1,1,1,1,1], 4) == (4, 4)"]}
{"seq_id": 24269603265, "instruction": "Write a python function to find the maximum product of a subarray in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef maxProductSubarray(nums):\n    if not nums:\n        return 0\n\n    n = len(nums)\n    max_dp = [0] * n\n    min_dp = [0] * n\n    max_dp[0] = min_dp[0] = nums[0]\n    for i in range(1, n):\n        max_dp[i] = max(nums[i], max_dp[i - 1] * nums[i], min_dp[i - 1] * nums[i])\n        min_dp[i] = min(nums[i], max_dp[i - 1] * nums[i], min_dp[i - 1] * nums[i])\n    \n    return max(max_dp)\n\nassert maxProductSubarray([2,3,-2,4]) == 6\nassert maxProductSubarray([-2,0,-1]) == 0\nassert maxProductSubarray([-2,3,-4]) == 24\n```", "code": "def maxProductSubarray(nums):\n    if not nums:\n        return 0\n\n    n = len(nums)\n    max_dp = [0] * n\n    min_dp = [0] * n\n    max_dp[0] = min_dp[0] = nums[0]\n    for i in range(1, n):\n        max_dp[i] = max(nums[i], max_dp[i - 1] * nums[i], min_dp[i - 1] * nums[i])\n        min_dp[i] = min(nums[i], max_dp[i - 1] * nums[i], min_dp[i - 1] * nums[i])\n    \n    return max(max_dp)\n\nassert maxProductSubarray([2,3,-2,4]) == 6\nassert maxProductSubarray([-2,0,-1]) == 0\nassert maxProductSubarray([-2,3,-4]) == 24", "entry_point": "maxProductSubarray", "testcase": ["assert maxProductSubarray([2,3,-2,4]) == 6", "assert maxProductSubarray([-2,3,-4]) == 24", "assert maxProductSubarray([-2,0,-1]) == 0"]}
{"seq_id": 7116786356, "instruction": "Write a function to find the length of the longest increasing subsequence in a given array.", "output": "Here is the code to solve this problem: \n```python\ndef longest_increasing_subsequence(nums):\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```", "code": "def longest_increasing_subsequence(nums):\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "entry_point": "longest_increasing_subsequence", "testcase": ["assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1", "assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4", "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4"]}
{"seq_id": 347383763, "instruction": "Write a python function to find the nth term of the Lucas series.", "output": "Here is the code to solve this problem: \n```python\ndef nth_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```", "code": "def nth_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "entry_point": "nth_lucas", "testcase": ["assert nth_lucas(5) == 11", "assert nth_lucas(1) == 1", "assert nth_lucas(0) == 2"]}
{"seq_id": 26007010012, "instruction": "Write a python function to find the number of binary strings of given length that are not containing \"00\" as a substring.", "output": "Here is the code to solve this problem: \n```python\ndef no_00(n):\n    if n == 1:\n        return 2\n    a, b = 1, 2\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n```", "code": "def no_00(n):\n    if n == 1:\n        return 2\n    a, b = 1, 2\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "entry_point": "no_00", "testcase": ["assert no_00(1) == 2", "assert no_00(3) == 5", "assert no_00(2) == 3"]}
{"seq_id": 28042397355, "instruction": "Write a python function to find the number of distinct palindromic substrings in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef find_palindromic_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        total_count += expand_around_center(i, i)  # odd length palindromes\n        total_count += expand_around_center(i, i + 1)  # even length palindromes\n    return total_count\n```", "code": "def find_palindromic_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        total_count += expand_around_center(i, i)  # odd length palindromes\n        total_count += expand_around_center(i, i + 1)  # even length palindromes\n    return total_count", "entry_point": "find_palindromic_substrings", "testcase": ["assert find_palindromic_substrings(\"abba\") == 6", "assert find_palindromic_substrings(\"aaa\") == 6", "assert find_palindromic_substrings(\"abc\") == 3"]}
{"seq_id": 23484127467, "instruction": "Write a python function to find the first pair of numbers in an array that add up to a given sum.", "output": "Here is the code to solve this problem: \n```python\ndef find_pair(arr, target_sum):\n    hash_set = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in hash_set:\n            return [complement, num]\n        hash_set.add(num)\n    return []\n```", "code": "def find_pair(arr, target_sum):\n    hash_set = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in hash_set:\n            return [complement, num]\n        hash_set.add(num)\n    return []", "entry_point": "find_pair", "testcase": ["assert find_pair([11, 15, 2, 7], 9) == [2, 7]", "assert find_pair([1, 5, 3, 4, 2], 6) == [1, 5]", "assert find_pair([4, 3, 2, 3, 4], 6) == [4, 2]"]}
{"seq_id": 19434228727, "instruction": "Write a function that checks if a given tree is a binary search tree.\n\nA binary search tree has the property that all nodes in the left subtree of a node have values less than the node's value and all nodes in the right subtree have values greater than the node's value.", "output": "Here is the code to solve this problem: \n```python\ndef is_binary_search_tree(root, min_val=float('-inf'), max_val=float('inf')):\n    if root is None:\n        return True\n\n    if not (root.val > min_val and root.val < max_val):\n        return False\n\n    return (is_binary_search_tree(root.left, min_val, root.val) and\n            is_binary_search_tree(root.right, root.val, max_val))\n```", "code": "def is_binary_search_tree(root, min_val=float('-inf'), max_val=float('inf')):\n    if root is None:\n        return True\n\n    if not (root.val > min_val and root.val < max_val):\n        return False\n\n    return (is_binary_search_tree(root.left, min_val, root.val) and\n            is_binary_search_tree(root.right, root.val, max_val))", "entry_point": "is_binary_search_tree", "testcase": ["    assert is_binary_search_tree(root3) == True", "    root3.right.right = TreeNode(17)", "    root3.right.left = TreeNode(12)", "    root3.left.right = TreeNode(7)", "    root3.left.left = TreeNode(3)", "    root3.right = TreeNode(15)", "    root3.left = TreeNode(5)", "    root3 = TreeNode(10)", "    # Test case 3: A more complex binary search tree", "", "    assert is_binary_search_tree(root2) == False", "    root2.left.right = TreeNode(4)", "    root2.left.left = TreeNode(1)", "    root2.right = TreeNode(2)", "    root2.left = TreeNode(3)", "    root2 = TreeNode(5)", "    # Test case 2: A binary tree that is not a binary search tree", "", "    assert is_binary_search_tree(root1) == True", "    root1.left.right = TreeNode(4)", "    root1.left.left = TreeNode(2)", "    root1.right = TreeNode(7)", "    root1.left = TreeNode(3)", "    root1 = TreeNode(5)", "    # Test case 1: A simple binary search tree", ""]}
{"seq_id": 9625837577, "instruction": "Write a function to merge two sorted lists into a single sorted list.", "output": "Here is the code to solve this problem: \n```python\ndef merge_sorted_lists(list1, list2):\n    result = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    result += list1[i:]\n    result += list2[j:]\n    return result\n```", "code": "def merge_sorted_lists(list1, list2):\n    result = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    result += list1[i:]\n    result += list2[j:]\n    return result", "entry_point": "merge_sorted_lists", "testcase": ["assert merge_sorted_lists([1,3,5],[2,4,6]) == [1,2,3,4,5,6]", "assert merge_sorted_lists([1,3,5,7],[2,4,6,8]) == [1,2,3,4,5,6,7,8]", "assert merge_sorted_lists([1,2,3],[1,2,3]) == [1,1,2,2,3,3]"]}
{"seq_id": 35694399243, "instruction": "Write a python function to convert a given string from snake_case to CamelCase.", "output": "Here is the code to solve this problem: \n```python\ndef snake_to_camel(s):\n    components = s.split('_')\n    return ''.join(x.title() for x in components)\n```", "code": "def snake_to_camel(s):\n    components = s.split('_')\n    return ''.join(x.title() for x in components)", "entry_point": "snake_to_camel", "testcase": ["assert snake_to_camel(\"this_is_a_test_string\") == \"ThisIsATestString\"", "assert snake_to_camel(\"snake_to_camel\") == \"SnakeToCamel\"", "assert snake_to_camel(\"hello_world\") == \"HelloWorld\""]}
{"seq_id": 37307321617, "instruction": "Write a function that takes a string representing a number and returns the number with commas as thousands separators.", "output": "Here is the code to solve this problem: \n```python\ndef number_with_commas(number_str):\n    num = int(number_str)\n    return format(num, ',')\n```", "code": "def number_with_commas(number_str):\n    num = int(number_str)\n    return format(num, ',')", "entry_point": "number_with_commas", "testcase": ["assert number_with_commas(\"123\")==\"123\"", "assert number_with_commas(\"0\")==\"0\"", "assert number_with_commas(\"123456789\")==\"123,456,789\"", "assert number_with_commas(\"1234567\")==\"1,234,567\""]}
{"seq_id": 18814667065, "instruction": "Write a function to reverse a string in place.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_string_in_place(s):\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left, right = left + 1, right - 1\n    return s\n```", "code": "def reverse_string_in_place(s):\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left, right = left + 1, right - 1\n    return s", "entry_point": "reverse_string_in_place", "testcase": ["assert reverse_string_in_place(list(\"hello\"))==list(\"olleh\")", "assert reverse_string_in_place(list(\"world\"))==list(\"dlrow\")", "assert reverse_string_in_place(list(\"python\"))==list(\"nohtyp\")"]}
{"seq_id": 34116018772, "instruction": "Write a function that takes two hexadecimal strings as input and returns their sum as a hexadecimal string.", "output": "Here is the code to solve this problem: \n```python\ndef addHexadecimal(a: str, b: str) -> str:\n    # Convert hexadecimal strings to integers\n    num1 = int(a, 16)\n    num2 = int(b, 16)\n    \n    # Add the numbers\n    result = num1 + num2\n    \n    # Convert the result back to a hexadecimal string and return\n    return hex(result)[2:].upper()\n```", "code": "def addHexadecimal(a: str, b: str) -> str:\n    # Convert hexadecimal strings to integers\n    num1 = int(a, 16)\n    num2 = int(b, 16)\n    \n    # Add the numbers\n    result = num1 + num2\n    \n    # Convert the result back to a hexadecimal string and return\n    return hex(result)[2:].upper()", "entry_point": "addHexadecimal", "testcase": ["assert addHexadecimal('1A', '2B') == '45'", "assert addHexadecimal('F0', 'F0') == '1E0'", "assert addHexadecimal('A1', 'B2') == '153'"]}
{"seq_id": 14558278949, "instruction": "Write a python function to count the number of unique pairs in an array that sum up to a given target.", "output": "Here is the code to solve this problem: \n```python\ndef count_unique_pairs(arr,target):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] + arr[right] == target:\n            count += 1\n            left += 1\n            right -= 1\n            while left < right and arr[left] == arr[left - 1]:\n                left += 1\n            while left < right and arr[right] == arr[right + 1]:\n                right -= 1\n        elif arr[left] + arr[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return count\n```", "code": "def count_unique_pairs(arr,target):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] + arr[right] == target:\n            count += 1\n            left += 1\n            right -= 1\n            while left < right and arr[left] == arr[left - 1]:\n                left += 1\n            while left < right and arr[right] == arr[right + 1]:\n                right -= 1\n        elif arr[left] + arr[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return count", "entry_point": "count_unique_pairs", "testcase": ["assert count_unique_pairs([1,1,1,1],2) == 1", "assert count_unique_pairs([1,5,7,-1],6) == 2", "assert count_unique_pairs([1,5,7,10],12) == 1"]}
{"seq_id": 18814801565, "instruction": "Write a python function to replace all the negative numbers in a given list with zero.", "output": "Here is the code to solve this problem: \n```python\ndef replace_negative(lst):\n    for i in range(len(lst)):\n        if lst[i]<0:\n            lst[i]=0\n    return lst\n```", "code": "def replace_negative(lst):\n    for i in range(len(lst)):\n        if lst[i]<0:\n            lst[i]=0\n    return lst", "entry_point": "replace_negative", "testcase": ["assert replace_negative([1, -2, 3, -4, 5, -6]) == [1, 0, 3, 0, 5, 0]", "assert replace_negative([-1, -2, -3, -4, -5]) == [0, 0, 0, 0, 0]", "assert replace_negative([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"]}
{"seq_id": 4374368515, "instruction": "Write a python function to find the number of subarrays having sum exactly equal to k.", "output": "Here is the code to solve this problem: \n```python\ndef findSubArraySum(arr, k):\n    count = 0\n    current_sum = 0\n    hash_table = dict()\n \n    for i in range(0, len(arr)):\n        current_sum = current_sum + arr[i]\n \n        if current_sum == k:\n            count += 1\n \n        if (current_sum - k) in hash_table:\n            count += hash_table[current_sum-k]\n \n        if current_sum in hash_table:\n            hash_table[current_sum] += 1\n        else:\n            hash_table[current_sum] = 1\n \n    return count\n```", "code": "def findSubArraySum(arr, k):\n    count = 0\n    current_sum = 0\n    hash_table = dict()\n \n    for i in range(0, len(arr)):\n        current_sum = current_sum + arr[i]\n \n        if current_sum == k:\n            count += 1\n \n        if (current_sum - k) in hash_table:\n            count += hash_table[current_sum-k]\n \n        if current_sum in hash_table:\n            hash_table[current_sum] += 1\n        else:\n            hash_table[current_sum] = 1\n \n    return count", "entry_point": "findSubArraySum", "testcase": ["assert findSubArraySum([10,2,-2,-20,10], -10) == 3", "assert findSubArraySum([1,2,3], 3) == 2", "assert findSubArraySum([9,4,20,3,10,5], 33) == 2"]}
{"seq_id": 23918095744, "instruction": "Write a function to find the longest subarray with equal number of 0's and 1's.", "output": "Here is the code to solve this problem: \n```python\ndef longestSubarray(arr):\n    max_len = 0\n    count = 0\n    sum_map = {0: -1}\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count -= 1\n        else:\n            count += 1\n        if count in sum_map:\n            max_len = max(max_len, i - sum_map[count])\n        else:\n            sum_map[count] = i\n    return max_len\n```", "code": "def longestSubarray(arr):\n    max_len = 0\n    count = 0\n    sum_map = {0: -1}\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count -= 1\n        else:\n            count += 1\n        if count in sum_map:\n            max_len = max(max_len, i - sum_map[count])\n        else:\n            sum_map[count] = i\n    return max_len", "entry_point": "longestSubarray", "testcase": ["assert longestSubarray([0,0,1,1,0]) == 4", "assert longestSubarray([1,0,1,1,1,0,0]) == 6", "assert longestSubarray([0,1,0,1,0,1,1]) == 6"]}
{"seq_id": 37648689434, "instruction": "Write a function to find the sum of the first n terms of the series 1 + 1/4 + 1/9 + 1/16 + ...", "output": "Here is the code to solve this problem: \n```python\ndef series_sum(n):\n    sum = 0.0\n    for i in range(1, n+1):\n        sum += 1/(i*i)\n    return sum\n```", "code": "def series_sum(n):\n    sum = 0.0\n    for i in range(1, n+1):\n        sum += 1/(i*i)\n    return sum", "entry_point": "series_sum", "testcase": ["assert series_sum(3) == 1.3611111111111112", "assert series_sum(1) == 1.0", "assert series_sum(2) == 1.25", "assert series_sum(4) == 1.4236111111111112"]}
{"seq_id": 32619302012, "instruction": "Write a function to find the smallest element that appears more than once in a list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef smallest_duplicate(lst):\n    freq = Counter(lst)\n    duplicates = [num for num, count in freq.items() if count > 1]\n    return min(duplicates) if duplicates else None\n```", "code": "from collections import Counter\n\ndef smallest_duplicate(lst):\n    freq = Counter(lst)\n    duplicates = [num for num, count in freq.items() if count > 1]\n    return min(duplicates) if duplicates else None", "entry_point": "smallest_duplicate", "testcase": ["assert smallest_duplicate([2, 3, 1, 0, 2, 4, 3]) == 2", "assert smallest_duplicate([5, 3, 2, 1, 2, 1]) == 1", "assert smallest_duplicate([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == None"]}
{"seq_id": 15519769459, "instruction": "Write a python function to find the kth smallest element in a given unsorted array using QuickSelect algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef partition(arr, low, high):\n    i = (low-1)\n    pivot = arr[high]\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\n\n\ndef quickselect(arr, low, high, k):\n    if (k > 0 and k <= high - low + 1):\n        pivot_index = partition(arr, low, high)\n        if (pivot_index-low == k-1):\n            return arr[pivot_index]\n        if (pivot_index-low > k-1):\n            return quickselect(arr, low, pivot_index-1, k)\n        return quickselect(arr, pivot_index+1, high, k-pivot_index+low-1)\n    return float('inf')\n\ndef find_kth_smallest(arr, k):\n    return quickselect(arr, 0, len(arr)-1, k)\n```", "code": "def partition(arr, low, high):\n    i = (low-1)\n    pivot = arr[high]\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\n\n\ndef quickselect(arr, low, high, k):\n    if (k > 0 and k <= high - low + 1):\n        pivot_index = partition(arr, low, high)\n        if (pivot_index-low == k-1):\n            return arr[pivot_index]\n        if (pivot_index-low > k-1):\n            return quickselect(arr, low, pivot_index-1, k)\n        return quickselect(arr, pivot_index+1, high, k-pivot_index+low-1)\n    return float('inf')\n\ndef find_kth_smallest(arr, k):\n    return quickselect(arr, 0, len(arr)-1, k)", "entry_point": "find_kth_smallest", "testcase": ["assert find_kth_smallest([7, 10, 4, 3, 20, 15], 4) == 10", "assert find_kth_smallest([7, 10, 4, 3, 20, 15], 3) == 7", "assert find_kth_smallest([12, 3, 5, 7, 19], 2) == 5"]}
{"seq_id": 70446157236, "instruction": "Write a python function to find the greatest common divisor (GCD) and least common multiple (LCM) of two numbers.", "output": "Here is the code to solve this problem: \n```python\ndef gcd_lcm(n, m):\n    # Greatest Common Divisor (GCD)\n    gcd = 1\n    for i in range(1, min(n, m) + 1):\n        if n % i == 0 and m % i == 0:\n            gcd = i\n\n    # Least Common Multiple (LCM)\n    lcm = (n * m) // gcd\n\n    return (gcd, lcm)\n```", "code": "def gcd_lcm(n, m):\n    # Greatest Common Divisor (GCD)\n    gcd = 1\n    for i in range(1, min(n, m) + 1):\n        if n % i == 0 and m % i == 0:\n            gcd = i\n\n    # Least Common Multiple (LCM)\n    lcm = (n * m) // gcd\n\n    return (gcd, lcm)", "entry_point": "gcd_lcm", "testcase": ["assert gcd_lcm(5, 7) == (1, 35)", "assert gcd_lcm(12, 18) == (6, 36)", "assert gcd_lcm(20, 25) == (5, 100)"]}
{"seq_id": 72363474169, "instruction": "Write a python function to find the number of ways to reach the last cell of a grid of size N * M from the first cell. You can only move right or down.", "output": "Here is the code to solve this problem: \n```python\ndef countPaths(n, m):\n    if n == 1 or m == 1:\n        return 1\n    return countPaths(n-1, m) + countPaths(n, m-1)\n```", "code": "def countPaths(n, m):\n    if n == 1 or m == 1:\n        return 1\n    return countPaths(n-1, m) + countPaths(n, m-1)", "entry_point": "countPaths", "testcase": ["assert countPaths(2, 2) == 2", "assert countPaths(1, 1) == 1", "assert countPaths(3, 3) == 6"]}
{"seq_id": 2220256427, "instruction": "Write a python function to find the number of distinct substrings of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef distinct_substrings(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return len(substrings)\n```", "code": "def distinct_substrings(s):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return len(substrings)", "entry_point": "distinct_substrings", "testcase": ["assert distinct_substrings(\"abcd\") == 10", "assert distinct_substrings(\"aaa\") == 3", "assert distinct_substrings(\"abc\") == 6"]}
{"seq_id": 32240255007, "instruction": "Write a python function to calculate the number of unique permutations of a given string.", "output": "Here is the code to solve this problem: \n```python\nfrom math import factorial\n\ndef unique_permutations(s):\n    count = [0] * 256 # Assuming ASCII character set\n    for i in s:\n        count[ord(i)] += 1\n    n = len(s)\n    result = factorial(n)\n    for i in range(256):\n        result //= factorial(count[i])\n    return result\n```", "code": "from math import factorial\n\ndef unique_permutations(s):\n    count = [0] * 256 # Assuming ASCII character set\n    for i in s:\n        count[ord(i)] += 1\n    n = len(s)\n    result = factorial(n)\n    for i in range(256):\n        result //= factorial(count[i])\n    return result", "entry_point": "unique_permutations", "testcase": ["assert unique_permutations(\"aabb\") == 6", "assert unique_permutations(\"abcd\") == 24", "assert unique_permutations(\"1112\") == 4", "assert unique_permutations(\"1111\") == 1"]}
{"seq_id": 11340165656, "instruction": "Write a function to reverse the elements of a list of strings.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_list_strings(list_strings):\n  return list_strings[::-1]\n```", "code": "def reverse_list_strings(list_strings):\n  return list_strings[::-1]", "entry_point": "reverse_list_strings", "testcase": ["assert reverse_list_strings([\"hello\", \"world\"]) == [\"world\", \"hello\"]", "assert reverse_list_strings([\"python\", \"programming\", \"is\", \"fun\"]) == [\"fun\", \"is\", \"programming\", \"python\"]", "assert reverse_list_strings([\"a\", \"b\", \"c\", \"d\"]) == [\"d\", \"c\", \"b\", \"a\"]"]}
{"seq_id": 7054783306, "instruction": "Write a python function to find the number of ways to reach the nth stair using either 1 or 2 steps.", "output": "Here is the code to solve this problem: \n```python\ndef num_Ways(n): \n    if n <= 1: \n        return n \n    first, second = 1, 2\n    for i in range(2, n): \n        third = first + second \n        first = second \n        second = third \n    return second\n```", "code": "def num_Ways(n): \n    if n <= 1: \n        return n \n    first, second = 1, 2\n    for i in range(2, n): \n        third = first + second \n        first = second \n        second = third \n    return second", "entry_point": "num_Ways", "testcase": ["assert num_Ways(4) == 5", "assert num_Ways(3) == 3", "assert num_Ways(5) == 8"]}
{"seq_id": 35483500442, "instruction": "Write a function that takes a list of numbers and returns a new list with the numbers rounded to the nearest integer.", "output": "Here is the code to solve this problem: \n```python\ndef round_list(lst):\n    return [round(num) for num in lst]\n```", "code": "def round_list(lst):\n    return [round(num) for num in lst]", "entry_point": "round_list", "testcase": ["assert round_list([2.1, 3.3, 4.7]) == [2, 3, 5]", "assert round_list([3.5, 4.6, 7.2]) == [4, 5, 7]", "assert round_list([1.5, 2.5, 3.5]) == [2, 2, 4]"]}
{"seq_id": 40085725608, "instruction": "Write a function to find the height of a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        return max(left_height, right_height) + 1\n```", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        return max(left_height, right_height) + 1", "entry_point": "height", "testcase": ["assert height(TreeNode(1, TreeNode(2), TreeNode(3))) == 2", "assert height(TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))) == 3", "assert height(TreeNode(1)) == 1", "assert height(None) == 0"]}
{"seq_id": 1472474578, "instruction": "Write a function to perform heap sort on a given list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef heapify(nums, heap_size, root_index):  \n    largest = root_index\n    left_child = (2 * root_index) + 1\n    right_child = (2 * root_index) + 2\n\n    if left_child < heap_size and nums[left_child] > nums[largest]:\n        largest = left_child\n\n    if right_child < heap_size and nums[right_child] > nums[largest]:\n        largest = right_child\n\n    if largest != root_index:\n        nums[root_index], nums[largest] = nums[largest], nums[root_index]\n        heapify(nums, heap_size, largest)\n\ndef heap_sort(nums):\n    n = len(nums)\n\n    for i in range(n, -1, -1):\n        heapify(nums, n, i)\n\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n\n    return nums\n```", "code": "def heapify(nums, heap_size, root_index):  \n    largest = root_index\n    left_child = (2 * root_index) + 1\n    right_child = (2 * root_index) + 2\n\n    if left_child < heap_size and nums[left_child] > nums[largest]:\n        largest = left_child\n\n    if right_child < heap_size and nums[right_child] > nums[largest]:\n        largest = right_child\n\n    if largest != root_index:\n        nums[root_index], nums[largest] = nums[largest], nums[root_index]\n        heapify(nums, heap_size, largest)\n\ndef heap_sort(nums):\n    n = len(nums)\n\n    for i in range(n, -1, -1):\n        heapify(nums, n, i)\n\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n\n    return nums", "entry_point": "heap_sort", "testcase": ["assert heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])==[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]", "assert heap_sort([12, 11, 13, 5, 6, 7])==[5, 6, 7, 11, 12, 13]", "assert heap_sort([8, 5, 3, 9, 1, 4, 7])==[1, 3, 4, 5, 7, 8, 9]"]}
{"seq_id": 34940599321, "instruction": "Write a function to detect if a given list contains any duplicate elements. If there are duplicates, the function should return a dictionary with the duplicate elements as keys and their counts as values. If there are no duplicates, return an empty dictionary.", "output": "Here is the code to solve this problem: \n```python\ndef detect_duplicates(nums):\n    mp = {}\n    for n in nums:\n        if n in mp:\n            mp[n] += 1\n        else:\n            mp[n] = 1\n    duplicates = {k: v for k, v in mp.items() if v > 1}\n    return duplicates\n```", "code": "def detect_duplicates(nums):\n    mp = {}\n    for n in nums:\n        if n in mp:\n            mp[n] += 1\n        else:\n            mp[n] = 1\n    duplicates = {k: v for k, v in mp.items() if v > 1}\n    return duplicates", "entry_point": "detect_duplicates", "testcase": ["assert detect_duplicates([1, 2, 3, 2, 4, 5, 5]) == {2: 2, 5: 2}", "assert detect_duplicates([1, 2, 3, 4, 5]) == {}", "assert detect_duplicates([1, 2, 3, 4, 4, 4, 4, 5, 5]) == {4: 4, 5: 2}", "assert detect_duplicates([1, 1, 1, 1, 1]) == {1: 5}"]}
{"seq_id": 41694476269, "instruction": "Write a function that takes a list of integers and returns a new list with the second smallest unique number removed. If there is no second smallest unique number, the original list should be returned.", "output": "Here is the code to solve this problem: \n```python\ndef remove_second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return numbers\n    unique_numbers.sort()\n    second_smallest = unique_numbers[1]\n    return [num for num in numbers if num != second_smallest]\n```", "code": "def remove_second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return numbers\n    unique_numbers.sort()\n    second_smallest = unique_numbers[1]\n    return [num for num in numbers if num != second_smallest]", "entry_point": "remove_second_smallest", "testcase": ["assert remove_second_smallest([1,2,3,4,5]) == [1,3,4,5]", "assert remove_second_smallest([]) == []", "assert remove_second_smallest([5,3,2,4,1]) == [5,3,4,1]", "assert remove_second_smallest([1,2,1]) == [1,1]"]}
{"seq_id": 23424645120, "instruction": "Write a python function to find the longest subsequence of a given string where the characters are in alphabetical order.", "output": "Here is the code to solve this problem: \n```python\ndef longest_ordered_subsequence(s):\n    if not s:\n        return \"\"\n    max_len = 1\n    start = 0\n    max_start = 0\n    for i in range(1, len(s)):\n        if s[i] < s[i - 1]:\n            if i - start > max_len:\n                max_len = i - start\n                max_start = start\n            start = i\n    if len(s) - start > max_len:\n        max_len = len(s) - start\n        max_start = start\n    return s[max_start:max_start + max_len]\n```", "code": "def longest_ordered_subsequence(s):\n    if not s:\n        return \"\"\n    max_len = 1\n    start = 0\n    max_start = 0\n    for i in range(1, len(s)):\n        if s[i] < s[i - 1]:\n            if i - start > max_len:\n                max_len = i - start\n                max_start = start\n            start = i\n    if len(s) - start > max_len:\n        max_len = len(s) - start\n        max_start = start\n    return s[max_start:max_start + max_len]", "entry_point": "longest_ordered_subsequence", "testcase": ["assert longest_ordered_subsequence(\"zyx\") == \"z\"", "assert longest_ordered_subsequence(\"abc\") == \"abc\"", "assert longest_ordered_subsequence(\"abcbcad\") == \"abc\""]}
{"seq_id": 10734805598, "instruction": "Write a python function to find the longest substring without repeating characters.", "output": "Here is the code to solve this problem: \n```python\ndef longest_Substring(s: str) -> int:\n    sub_set = {}\n    left = 0\n    max_len = 0\n    for right in range(len(s)):\n        if s[right] in sub_set:\n            left = max(sub_set[s[right]] + 1, left)\n        sub_set[s[right]] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n```", "code": "def longest_Substring(s: str) -> int:\n    sub_set = {}\n    left = 0\n    max_len = 0\n    for right in range(len(s)):\n        if s[right] in sub_set:\n            left = max(sub_set[s[right]] + 1, left)\n        sub_set[s[right]] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len", "entry_point": "longest_Substring", "testcase": ["assert longest_Substring(\"abcabcbb\") == 3", "assert longest_Substring(\"bbbbb\") == 1", "assert longest_Substring(\"pwwkew\") == 3"]}
{"seq_id": 32920337135, "instruction": "Write a python function to find the number of ways to express a number as a sum of consecutive positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef find_consecutive_sums(target):\n    count = 0\n    for start in range(1, target):\n        sum = 0\n        while sum < target:\n            sum += start\n            start += 1\n        if sum == target:\n            count += 1\n    return count\n```", "code": "def find_consecutive_sums(target):\n    count = 0\n    for start in range(1, target):\n        sum = 0\n        while sum < target:\n            sum += start\n            start += 1\n        if sum == target:\n            count += 1\n    return count", "entry_point": "find_consecutive_sums", "testcase": ["assert find_consecutive_sums(9) == 2", "assert find_consecutive_sums(1) == 0", "assert find_consecutive_sums(15) == 3"]}
{"seq_id": 35818609698, "instruction": "Write a function to find the sum of all odd numbers less than n.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_odd(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n    return sum\n```", "code": "def sum_of_odd(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n    return sum", "entry_point": "sum_of_odd", "testcase": ["assert sum_of_odd(10) == 25", "assert sum_of_odd(15) == 49", "assert sum_of_odd(20) == 100"]}
{"seq_id": 3471927427, "instruction": "Write a function to find the sum of unique elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef sum_unique(lst):\n    unique_elements = set(lst)\n    sum_of_unique = 0\n    for element in unique_elements:\n        if lst.count(element) == 1:\n            sum_of_unique += element\n    return sum_of_unique\n```", "code": "def sum_unique(lst):\n    unique_elements = set(lst)\n    sum_of_unique = 0\n    for element in unique_elements:\n        if lst.count(element) == 1:\n            sum_of_unique += element\n    return sum_of_unique", "entry_point": "sum_unique", "testcase": ["assert sum_unique([3, 3, 3, 3, 3]) == 0", "assert sum_unique([1, 2, 3, 2, 1, 5]) == 8", "assert sum_unique([10, 20, 30, 20, 10, 40]) == 70"]}
{"seq_id": 40285559947, "instruction": "Write a python function to find the number of ways to make a change of a given amount using a set of coin denominations.", "output": "Here is the code to solve this problem: \n```python\ndef ways_to_change(amount, coins):\n    ways = [0] * (amount + 1)\n    ways[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            ways[i] += ways[i - coin]\n    return ways[amount]\n```", "code": "def ways_to_change(amount, coins):\n    ways = [0] * (amount + 1)\n    ways[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            ways[i] += ways[i - coin]\n    return ways[amount]", "entry_point": "ways_to_change", "testcase": ["assert ways_to_change(4, [1, 2, 3]) == 4", "assert ways_to_change(11, [9]) == 0", "assert ways_to_change(10, [2, 5, 3, 6]) == 5"]}
{"seq_id": 364918005, "instruction": "Write a function to find the number of times a given target value appears in a list using binary search algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef count_target(nums, target):\n    def find_left(nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def find_right(nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n\n    left = find_left(nums, target)\n    if left == len(nums) or nums[left] != target:\n        return 0\n    right = find_right(nums, target)\n    return right - left + 1\n```", "code": "def count_target(nums, target):\n    def find_left(nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def find_right(nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n\n    left = find_left(nums, target)\n    if left == len(nums) or nums[left] != target:\n        return 0\n    right = find_right(nums, target)\n    return right - left + 1", "entry_point": "count_target", "testcase": ["assert count_target([1, 2, 2, 2, 3, 4, 5], 2) == 3", "assert count_target([1, 1, 1, 1, 1, 1, 1], 1) == 7", "assert count_target([1, 2, 3, 4, 5, 6, 7], 8) == 0"]}
{"seq_id": 6957546013, "instruction": "Write a python function to find the number of divisors of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef num_Divisors(n):\n    front = []\n    back = []\n    root = int(n**(1/2))\n    for i in range(1, root+1):\n        if (n%i == 0) and (i*i != n):\n            front.append(i)\n    if root*root == n:\n        back.append(root)\n    for f in list(reversed(front)):\n        back.append(n/f)\n    return len(front + back)\n```", "code": "def num_Divisors(n):\n    front = []\n    back = []\n    root = int(n**(1/2))\n    for i in range(1, root+1):\n        if (n%i == 0) and (i*i != n):\n            front.append(i)\n    if root*root == n:\n        back.append(root)\n    for f in list(reversed(front)):\n        back.append(n/f)\n    return len(front + back)", "entry_point": "num_Divisors", "testcase": ["assert num_Divisors(10) == 4", "assert num_Divisors(28) == 6", "assert num_Divisors(11) == 2"]}
{"seq_id": 781233425, "instruction": "Write a python function to remove duplicates from a sorted doubly linked list.", "output": "Here is the code to solve this problem: \n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\ndef remove_duplicates_from_doubly_linked_list(arr):\n    if len(arr) == 0:\n        return []\n    head = Node(arr[0])\n    current = head\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            current.next = Node(arr[i])\n            current.next.prev = current\n            current = current.next\n    result = []\n    while head:\n        result.append(head.data)\n        head = head.next\n    return result\n```", "code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\ndef remove_duplicates_from_doubly_linked_list(arr):\n    if len(arr) == 0:\n        return []\n    head = Node(arr[0])\n    current = head\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            current.next = Node(arr[i])\n            current.next.prev = current\n            current = current.next\n    result = []\n    while head:\n        result.append(head.data)\n        head = head.next\n    return result", "entry_point": "remove_duplicates_from_doubly_linked_list", "testcase": ["assert remove_duplicates_from_doubly_linked_list([1,1,2,3,3]) == [1,2,3]", "assert remove_duplicates_from_doubly_linked_list([1,1,1,1,1]) == [1]", "assert remove_duplicates_from_doubly_linked_list([1,2,3,4,5]) == [1,2,3,4,5]"]}
{"seq_id": 13874457713, "instruction": "Write a function to find the maximum number of meetings that can be accommodated in a single room given their start and end times.", "output": "Here is the code to solve this problem: \n```python\ndef max_meetings(meetings):\n    \"\"\"\n    :param meetings: List of tuples (start_time, end_time)\n    :return: Maximum number of meetings that can be accommodated in a single room\n    \"\"\"\n    # Sort the meetings based on their end times\n    meetings.sort(key=lambda x: x[1])\n    \n    # Initialize the count of maximum meetings and the end time of the last meeting\n    max_meetings_count = 0\n    last_meeting_end_time = float('-inf')\n    \n    # Iterate through the sorted meetings\n    for start_time, end_time in meetings:\n        # Check if the current meeting can be accommodated\n        if start_time >= last_meeting_end_time:\n            # Increment the count of maximum meetings\n            max_meetings_count += 1\n            # Update the end time of the last meeting\n            last_meeting_end_time = end_time\n            \n    return max_meetings_count\n```", "code": "def max_meetings(meetings):\n    \"\"\"\n    :param meetings: List of tuples (start_time, end_time)\n    :return: Maximum number of meetings that can be accommodated in a single room\n    \"\"\"\n    # Sort the meetings based on their end times\n    meetings.sort(key=lambda x: x[1])\n    \n    # Initialize the count of maximum meetings and the end time of the last meeting\n    max_meetings_count = 0\n    last_meeting_end_time = float('-inf')\n    \n    # Iterate through the sorted meetings\n    for start_time, end_time in meetings:\n        # Check if the current meeting can be accommodated\n        if start_time >= last_meeting_end_time:\n            # Increment the count of maximum meetings\n            max_meetings_count += 1\n            # Update the end time of the last meeting\n            last_meeting_end_time = end_time\n            \n    return max_meetings_count", "entry_point": "max_meetings", "testcase": ["assert max_meetings([(1,2), (2,3), (3,4), (1,3)]) == 3", "assert max_meetings([(1,4), (2,3), (3,6)]) == 2", "assert max_meetings([(1,3), (2,4), (3,5)]) == 2"]}
{"seq_id": 7106495861, "instruction": "Write a function to find the sum of all elements in a list that are located at odd indices.", "output": "Here is the code to solve this problem: \n```python\ndef odd_index_sum(lst):\n    sum = 0\n    for i in range(1, len(lst), 2):\n        sum += lst[i]\n    return sum\n```", "code": "def odd_index_sum(lst):\n    sum = 0\n    for i in range(1, len(lst), 2):\n        sum += lst[i]\n    return sum", "entry_point": "odd_index_sum", "testcase": ["assert odd_index_sum([5, 15, 25, 35, 45])==50", "assert odd_index_sum([10, 20, 30, 40, 50])==60", "assert odd_index_sum([1, 2, 3, 4, 5])==6"]}
{"seq_id": 43649630531, "instruction": "Write a python function to find the second lowest grade in a list of grades.", "output": "Here is the code to solve this problem: \n```python\ndef second_lowest_grade(grades):\n    unique_grades = list(set(grades))\n    unique_grades.sort()\n    return unique_grades[1]\n```", "code": "def second_lowest_grade(grades):\n    unique_grades = list(set(grades))\n    unique_grades.sort()\n    return unique_grades[1]", "entry_point": "second_lowest_grade", "testcase": ["assert second_lowest_grade([10, 15, 20, 25, 30, 35, 40, 45, 50, 55]) == 15", "assert second_lowest_grade([30, 40, 50, 60, 70, 80, 90, 100, 20, 10]) == 20", "assert second_lowest_grade([5, 10, 5, 20, 10, 15, 20, 25, 30, 35]) == 10"]}
{"seq_id": 69794392586, "instruction": "Write a function that checks if a given string matches a specified regular expression pattern.", "output": "Here is the code to solve this problem: \n```python\ndef check_pattern_match(text: str, pattern: str) -> bool:\n    import re\n    pattern = \"^\" + pattern + \"$\"\n    return bool(re.match(pattern, text))\n```", "code": "def check_pattern_match(text: str, pattern: str) -> bool:\n    import re\n    pattern = \"^\" + pattern + \"$\"\n    return bool(re.match(pattern, text))", "entry_point": "check_pattern_match", "testcase": ["assert check_pattern_match(\"aab\", \"c*a*b\") == True", "assert check_pattern_match(\"mississippi\", \"mis*is*p*.\") == False", "assert check_pattern_match(\"abcd\", \"d*\") == False"]}
{"seq_id": 26536421349, "instruction": "Write a function to calculate the length of the longest balanced parentheses substring in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_balanced_parentheses(s: str) -> int:\n    max_len = 0\n    stack = [-1]\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            stack.pop()\n            if len(stack) == 0:\n                stack.append(i)\n            else:\n                max_len = max(max_len, i - stack[len(stack)-1])\n    return max_len\n```", "code": "def longest_balanced_parentheses(s: str) -> int:\n    max_len = 0\n    stack = [-1]\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            stack.pop()\n            if len(stack) == 0:\n                stack.append(i)\n            else:\n                max_len = max(max_len, i - stack[len(stack)-1])\n    return max_len", "entry_point": "longest_balanced_parentheses", "testcase": ["assert longest_balanced_parentheses(\"(()\") == 2", "assert longest_balanced_parentheses(\")()())\") == 4", "assert longest_balanced_parentheses(\"\") == 0"]}
{"seq_id": 1510780691, "instruction": "Write a python function to find the smallest positive number that is evenly divisible by all of the numbers from 1 to n.", "output": "Here is the code to solve this problem: \n```python\ndef divisible_number(n):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        lcm = (x*y)//gcd(x,y)\n        return lcm\n\n    num = 1\n    for i in range(1, n + 1):\n        num = lcm(num, i)\n    return num\n```", "code": "def divisible_number(n):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        lcm = (x*y)//gcd(x,y)\n        return lcm\n\n    num = 1\n    for i in range(1, n + 1):\n        num = lcm(num, i)\n    return num", "entry_point": "divisible_number", "testcase": ["assert divisible_number(10) == 2520", "assert divisible_number(15) == 360360", "assert divisible_number(20) == 232792560"]}
{"seq_id": 34113300851, "instruction": "Write a function that takes a list of integers as input and returns all possible subsets of that list. Subsets can be of any length from 0 to the length of the input list. The subsets should be returned in a list of lists, where each inner list represents a single subset.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef subsets(nums: List[int]) -> List[List[int]]:\n    res = []\n    for bit in range(0, 1 << len(nums)):\n        tmp = []\n        idx = 0\n        while bit > 0:\n            if bit & 1:\n                tmp.append(nums[idx])\n            bit >>= 1\n            idx += 1\n        res.append(tmp)\n    return res\n```", "code": "from typing import List\n\ndef subsets(nums: List[int]) -> List[List[int]]:\n    res = []\n    for bit in range(0, 1 << len(nums)):\n        tmp = []\n        idx = 0\n        while bit > 0:\n            if bit & 1:\n                tmp.append(nums[idx])\n            bit >>= 1\n            idx += 1\n        res.append(tmp)\n    return res", "entry_point": "subsets", "testcase": ["assert subsets([4, 5, 6]) == [[], [4], [5], [4, 5], [6], [4, 6], [5, 6], [4, 5, 6]]", "assert subsets([0]) == [[], [0]]", "assert subsets([1, 2, 3]) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]"]}
{"seq_id": 11943654630, "instruction": "Write a python function to find the closest pair of points in a 2D plane. The function should take a list of tuples, where each tuple represents the (x, y) coordinates of a point, and return the two points that are closest to each other. The distance between two points is calculated using the Euclidean distance formula: sqrt((x2 - x1)^2 + (y2 - y1)^2).", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef closest_points(points):\n    points.sort()\n    closest = [(2 << 31) - 1, None, None]\n    for i in range(len(points) - 1):\n        for j in range(i + 1, len(points)):\n            distance = math.sqrt((points[j][0] - points[i][0])**2 + (points[j][1] - points[i][1])**2)\n            if distance < closest[0]:\n                closest = [distance, points[i], points[j]]\n    return (closest[1], closest[2])\n```", "code": "import math\n\ndef closest_points(points):\n    points.sort()\n    closest = [(2 << 31) - 1, None, None]\n    for i in range(len(points) - 1):\n        for j in range(i + 1, len(points)):\n            distance = math.sqrt((points[j][0] - points[i][0])**2 + (points[j][1] - points[i][1])**2)\n            if distance < closest[0]:\n                closest = [distance, points[i], points[j]]\n    return (closest[1], closest[2])", "entry_point": "closest_points", "testcase": ["assert closest_points([(0, 0), (1, 1), (2, 2), (3, 3)]) == ((0, 0), (1, 1))", "assert closest_points([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0.5, 0.5)]) == ((0, 0), (0.5, 0.5))", "assert closest_points([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]) == ((0, 0), (1, 1))"]}
{"seq_id": 2013810863, "instruction": "Write a function that checks if it's possible to divide a list of integers into consecutive subsequences of length k. A consecutive subsequence is a sequence of integers where each integer is one more than the previous integer.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef isPossibleDivide(nums, k):\n    # If the length of nums is not divisible by k, return False\n    if len(nums) % k != 0:\n        return False\n    # Count the frequency of each number in nums\n    num_counts = Counter(nums)\n    # Sort the keys of num_counts\n    sorted_keys = sorted(num_counts.keys())\n    # Iterate over the sorted keys\n    for key in sorted_keys:\n        # If the current key's count is non-zero\n        if num_counts[key] > 0:\n            # Iterate over the next k-1 numbers\n            for i in range(1, k):\n                # Check if the next number exists and has enough count\n                if key + i in num_counts and num_counts[key + i] >= num_counts[key]:\n                    num_counts[key + i] -= num_counts[key]\n                else:\n                    return False\n    # If all checks pass, return True\n    return True\n```", "code": "from collections import Counter\n\ndef isPossibleDivide(nums, k):\n    # If the length of nums is not divisible by k, return False\n    if len(nums) % k != 0:\n        return False\n    # Count the frequency of each number in nums\n    num_counts = Counter(nums)\n    # Sort the keys of num_counts\n    sorted_keys = sorted(num_counts.keys())\n    # Iterate over the sorted keys\n    for key in sorted_keys:\n        # If the current key's count is non-zero\n        if num_counts[key] > 0:\n            # Iterate over the next k-1 numbers\n            for i in range(1, k):\n                # Check if the next number exists and has enough count\n                if key + i in num_counts and num_counts[key + i] >= num_counts[key]:\n                    num_counts[key + i] -= num_counts[key]\n                else:\n                    return False\n    # If all checks pass, return True\n    return True", "entry_point": "isPossibleDivide", "testcase": ["assert isPossibleDivide([1,2,3,3,4,4,5,6], 4) == True", "assert isPossibleDivide([1,2,3,4], 3) == False", "assert isPossibleDivide([3,2,1,2,3,4,3,4,5,9,10,11], 3) == True"]}
{"seq_id": 5710278455, "instruction": "Write a function to find the missing number in a list of consecutive numbers.", "output": "Here is the code to solve this problem: \n```python\ndef find_missing_num(lst):\n    n = len(lst) + 1\n    total = n * (n + 1) // 2\n    for num in lst:\n        total -= num\n    return total\n```", "code": "def find_missing_num(lst):\n    n = len(lst) + 1\n    total = n * (n + 1) // 2\n    for num in lst:\n        total -= num\n    return total", "entry_point": "find_missing_num", "testcase": ["assert find_missing_num([1, 3, 4, 5]) == 2", "assert find_missing_num([1, 2, 3, 5]) == 4", "assert find_missing_num([2, 3, 4, 5]) == 1"]}
{"seq_id": 37236218280, "instruction": "Write a function to find the number of times a particular character appears consecutively in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef count_consecutive_char(char, string):\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    return max(max_count, count)\n```", "code": "def count_consecutive_char(char, string):\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    return max(max_count, count)", "entry_point": "count_consecutive_char", "testcase": ["assert count_consecutive_char('b', 'aaabbbccc') == 3", "assert count_consecutive_char('c', 'aaabbbccc') == 3", "assert count_consecutive_char('a', 'aaabbbccc') == 3", "assert count_consecutive_char('d', 'aaabbbccc') == 0"]}
{"seq_id": 35110246935, "instruction": "Write a function to find the last occurrence of a substring in a string and return its index. If the substring is not found, return -1. Do not use in-built functions like find or rfind.", "output": "Here is the code to solve this problem: \n```python\ndef last_occurrence(haystack, needle):\n    if len(needle) > len(haystack):\n        return -1\n    for i in range(len(haystack) - 1, -1, -1):\n        if haystack[i:i+len(needle)] == needle:\n            return i\n    return -1\n```", "code": "def last_occurrence(haystack, needle):\n    if len(needle) > len(haystack):\n        return -1\n    for i in range(len(haystack) - 1, -1, -1):\n        if haystack[i:i+len(needle)] == needle:\n            return i\n    return -1", "entry_point": "last_occurrence", "testcase": ["assert last_occurrence(\"Hello World\", \"o\") == 7", "assert last_occurrence(\"Hellooo World\", \"o\") == 9", "assert last_occurrence(\"abcdef\", \"f\") == 5", "assert last_occurrence(\"Hello World\", \"world\") == -1", "assert last_occurrence(\"abcdef\", \"g\") == -1"]}
{"seq_id": 2342581061, "instruction": "Write a python function to find the kth smallest element in a given unsorted list.", "output": "Here is the code to solve this problem: \n```python\ndef kth_Smallest(arr, k):\n    arr.sort()\n    return arr[k-1]\n```", "code": "def kth_Smallest(arr, k):\n    arr.sort()\n    return arr[k-1]", "entry_point": "kth_Smallest", "testcase": ["assert kth_Smallest([7, 10, 4, 3, 20, 15], 3) == 7", "assert kth_Smallest([12, 3, 5, 7, 19], 2) == 5", "assert kth_Smallest([7, 10, 4, 3, 20, 15], 4) == 10"]}
{"seq_id": 40152278138, "instruction": "Write a python function to find the maximum absolute difference between the left and right maximum values for each index in the given array.\n\n**Function signature:** `def max_abs_diff(array: List[int]) -> int:`\n- **Input:** An array of integers `array` (2 \u2264 |array| \u2264 10^5)\n- **Output:** An integer representing the maximum absolute difference between the left and right maximum values for any index in the array.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List\n\ndef max_abs_diff(array: List[int]) -> int:\n    if not array or len(array) < 2:\n        return 0\n\n    left_max = array[0]\n    left_maxes = [left_max]\n    for i in range(1, len(array)):\n        if array[i] > left_max:\n            left_max = array[i]\n        left_maxes.append(left_max)\n\n    right_max = array[-1]\n    right_maxes = [right_max]\n    for i in range(len(array) - 2, -1, -1):\n        if array[i] > right_max:\n            right_max = array[i]\n        right_maxes.insert(0, right_max)\n\n    max_diff = 0\n    for i in range(len(array)):\n        max_diff = max(max_diff, abs(left_maxes[i] - right_maxes[i]))\n\n    return max_diff\n```", "code": "from typing import List\n\ndef max_abs_diff(array: List[int]) -> int:\n    if not array or len(array) < 2:\n        return 0\n\n    left_max = array[0]\n    left_maxes = [left_max]\n    for i in range(1, len(array)):\n        if array[i] > left_max:\n            left_max = array[i]\n        left_maxes.append(left_max)\n\n    right_max = array[-1]\n    right_maxes = [right_max]\n    for i in range(len(array) - 2, -1, -1):\n        if array[i] > right_max:\n            right_max = array[i]\n        right_maxes.insert(0, right_max)\n\n    max_diff = 0\n    for i in range(len(array)):\n        max_diff = max(max_diff, abs(left_maxes[i] - right_maxes[i]))\n\n    return max_diff", "entry_point": "max_abs_diff", "testcase": ["assert max_abs_diff([1, 2, 3, 4, 5]) == 4", "assert max_abs_diff([9, 8, 7, 6, 5]) == 4", "assert max_abs_diff([45, 23, 78, 12, 23, 98, 11]) == 87"]}
{"seq_id": 23332297818, "instruction": "Write a function to find the total number of boomerangs in a given list of points. A boomerang is defined as a set of three points that are not collinear, which means the distance from the first point to the second is not equal to the distance from the second point to the third. The function should return the total number of boomerangs that can be formed from the given list of points.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef numberOfBoomerangs(points):\n    total = 0\n    for i in range(len(points)):\n        distance = defaultdict(int)\n        for j in range(len(points)):\n            dis = (points[j][0] - points[i][0])**2 + (points[j][1] - points[i][1])**2\n            distance[dis] += 1\n        for num in distance.values():\n            total += num * (num - 1)\n    return total\n```", "code": "from collections import defaultdict\n\ndef numberOfBoomerangs(points):\n    total = 0\n    for i in range(len(points)):\n        distance = defaultdict(int)\n        for j in range(len(points)):\n            dis = (points[j][0] - points[i][0])**2 + (points[j][1] - points[i][1])**2\n            distance[dis] += 1\n        for num in distance.values():\n            total += num * (num - 1)\n    return total", "entry_point": "numberOfBoomerangs", "testcase": ["assert numberOfBoomerangs([[1,1],[2,2],[3,3]]) == 2", "assert numberOfBoomerangs([[0,0],[1,0],[2,0]]) == 2", "assert numberOfBoomerangs([[1,1]]) == 0"]}
{"seq_id": 36607477518, "instruction": "Write a function to find the maximum value in a list of tuples based on the second element of each tuple.", "output": "Here is the code to solve this problem: \n```python\ndef find_max_value(test_list):\n  res = max(test_list, key=lambda x: x[1])[1]\n  return (res)\n```", "code": "def find_max_value(test_list):\n  res = max(test_list, key=lambda x: x[1])[1]\n  return (res)", "entry_point": "find_max_value", "testcase": ["assert find_max_value([(1, 3), (2, 2), (3, 1)]) == 3", "assert find_max_value([(4, 10), (5, 5), (6, 15)]) == 15", "assert find_max_value([(7, 20), (8, 18), (9, 25)]) == 25"]}
{"seq_id": 12100511158, "instruction": "Write a function to find the length of the longest wiggle subsequence of a given sequence. A wiggle sequence is defined as a sequence where the difference between successive numbers strictly alternates between positive and negative. The sequence must start with a positive difference.\n\nFor example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) are positive, negative, positive, negative, and positive.", "output": "Here is the code to solve this problem: \n```python\ndef wiggleMaxLength(nums):\n    lenN, i = len(nums), 1\n    while i < lenN and nums[i] == nums[i-1]: i += 1\n    if i == lenN: return 1\n    up, ans = nums[i-1] > nums[i], 1\n    while i < lenN:\n        if (up and nums[i] < nums[i-1]) or (not up and nums[i] > nums[i-1]):\n            up = not up\n            ans += 1\n        i += 1\n    return ans\n```", "code": "def wiggleMaxLength(nums):\n    lenN, i = len(nums), 1\n    while i < lenN and nums[i] == nums[i-1]: i += 1\n    if i == lenN: return 1\n    up, ans = nums[i-1] > nums[i], 1\n    while i < lenN:\n        if (up and nums[i] < nums[i-1]) or (not up and nums[i] > nums[i-1]):\n            up = not up\n            ans += 1\n        i += 1\n    return ans", "entry_point": "wiggleMaxLength", "testcase": ["assert wiggleMaxLength([1,7,4,9,2,5])==6", "assert wiggleMaxLength([1,17,5,10,13,15,10,5,16,8])==7", "assert wiggleMaxLength([1,2,3,4,5,6,7,8,9])==2"]}
{"seq_id": 329262203, "instruction": "Write a python function that takes a list of integers as input and returns the second largest number in the list.", "output": "Here is the code to solve this problem: \n```python\ndef second_largest_number(arr):\n    if len(arr) < 2:\n        return None\n    first_largest = second_largest = float('-inf')\n    for num in arr:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n    return second_largest if second_largest != float('-inf') else None\n```", "code": "def second_largest_number(arr):\n    if len(arr) < 2:\n        return None\n    first_largest = second_largest = float('-inf')\n    for num in arr:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n    return second_largest if second_largest != float('-inf') else None", "entry_point": "second_largest_number", "testcase": ["assert second_largest_number([5, 1, 2, 9, 4]) == 5", "assert second_largest_number([1, 2, 3, 4, 5]) == 4", "assert second_largest_number([100]) == None", "assert second_largest_number([10, 20, 20, 30, 40]) == 30"]}
{"seq_id": 32353311329, "instruction": "Write a function to find the length of the shortest subarray that needs to be sorted in order for the whole array to become sorted.", "output": "Here is the code to solve this problem: \n```python\ndef findUnsortedSubarray(nums):\n    sorted_nums = sorted(nums)\n    start, end = -1, -1\n    for i in range(len(nums)):\n        if nums[i] != sorted_nums[i] and start == -1:\n            start = i\n        elif nums[i] != sorted_nums[i]:\n            end = i\n\n    if start == -1:\n        return 0\n    else:\n        return end - start + 1\n```", "code": "def findUnsortedSubarray(nums):\n    sorted_nums = sorted(nums)\n    start, end = -1, -1\n    for i in range(len(nums)):\n        if nums[i] != sorted_nums[i] and start == -1:\n            start = i\n        elif nums[i] != sorted_nums[i]:\n            end = i\n\n    if start == -1:\n        return 0\n    else:\n        return end - start + 1", "entry_point": "findUnsortedSubarray", "testcase": ["assert findUnsortedSubarray([2, 6, 4, 8, 10, 9, 15]) == 5", "assert findUnsortedSubarray([1, 2, 3, 4]) == 0", "assert findUnsortedSubarray([1]) == 0", "assert findUnsortedSubarray([1, 3, 2, 2, 2]) == 4"]}
{"seq_id": 12120495253, "instruction": "Write a function to find the length of the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    \n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n```", "code": "def longest_substring(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    \n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length", "entry_point": "longest_substring", "testcase": ["assert longest_substring(\"au\") == 2", "assert longest_substring(\" \") == 1", "assert longest_substring(\"pwwkew\") == 3", "assert longest_substring(\"bbbbb\") == 1", "assert longest_substring(\"abcabcbb\") == 3"]}
{"seq_id": 70433904756, "instruction": "Write a python function to find the number of ways to make a change for a given amount using given coins.", "output": "Here is the code to solve this problem: \n```python\ndef make_change(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    return dp[amount]\n```", "code": "def make_change(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    return dp[amount]", "entry_point": "make_change", "testcase": ["assert make_change([1, 2, 5], 5) == 4", "assert make_change([2], 3) == 0", "assert make_change([1], 0) == 1"]}
{"seq_id": 5437195339, "instruction": "Write a function to find the length of the longest substring that can be obtained by replacing at most k characters in the given string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef longest_substring_with_k_replacements(s, k):\n    max_len = 0\n    max_char_count = 0\n    left = 0\n    char_count = defaultdict(int)\n    \n    for right in range(len(s)):\n        char_count[s[right]] += 1\n        max_char_count = max(max_char_count, char_count[s[right]])\n        \n        if (right - left + 1) - max_char_count > k:\n            char_count[s[left]] -= 1\n            left += 1\n        \n        max_len = max(max_len, right - left + 1)\n    \n    return max_len\n```", "code": "from collections import defaultdict\n\ndef longest_substring_with_k_replacements(s, k):\n    max_len = 0\n    max_char_count = 0\n    left = 0\n    char_count = defaultdict(int)\n    \n    for right in range(len(s)):\n        char_count[s[right]] += 1\n        max_char_count = max(max_char_count, char_count[s[right]])\n        \n        if (right - left + 1) - max_char_count > k:\n            char_count[s[left]] -= 1\n            left += 1\n        \n        max_len = max(max_len, right - left + 1)\n    \n    return max_len", "entry_point": "longest_substring_with_k_replacements", "testcase": ["assert longest_substring_with_k_replacements(\"BAAAB\", 2)==5", "assert longest_substring_with_k_replacements(\"ABAB\", 2)==4", "assert longest_substring_with_k_replacements(\"AABABBA\", 1)==4"]}
{"seq_id": 17123362502, "instruction": "Create a function that takes a string as input and returns the number of unique words in that string. A word is defined as a sequence of characters separated by spaces. The function should ignore case sensitivity and punctuation.", "output": "Here is the code to solve this problem: \n```python\nimport re\n\ndef unique_word_counter(sentence):\n    words = re.findall(r'\\b\\w+\\b', sentence.lower())\n    return len(set(words))\n```", "code": "import re\n\ndef unique_word_counter(sentence):\n    words = re.findall(r'\\b\\w+\\b', sentence.lower())\n    return len(set(words))", "entry_point": "unique_word_counter", "testcase": ["assert unique_word_counter(\"The quick brown fox jumps over the lazy dog.\") == 8", "assert unique_word_counter(\"Hello, hello, HELLO, how are you doing?\") == 5", "assert unique_word_counter(\"The cat sat on the mat.\") == 5"]}
{"seq_id": 19795251324, "instruction": "Write a Python function `find_four_sum` that takes in a list of integers `nums` and an integer `target` and returns all unique quadruplets in the list which gives the sum of target.", "output": "Here is the code to solve this problem: \n```python\ndef find_four_sum(nums, target):\n    nums.sort()\n    result = []\n    nums_length = len(nums)\n    for i in range(nums_length):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, nums_length):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left, right = j+1, nums_length-1\n            while left < right:\n                sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if sum == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result\n```", "code": "def find_four_sum(nums, target):\n    nums.sort()\n    result = []\n    nums_length = len(nums)\n    for i in range(nums_length):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, nums_length):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left, right = j+1, nums_length-1\n            while left < right:\n                sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if sum == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result", "entry_point": "find_four_sum", "testcase": ["assert find_four_sum([2, 2, 2, 2, 2], 8) == [[2, 2, 2, 2]]", "assert find_four_sum([0, 0, 0, 0], 0) == [[0, 0, 0, 0]]", "assert find_four_sum([1, 0, -1, 0, -2, 2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]"]}
{"seq_id": 33211285130, "instruction": "Write a python function to find the k most frequent words in a given list of words.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef top_k_frequent_words(words, k):\n    freq_table = Counter(words)\n    ans_table = freq_table.most_common()\n    ans = []\n    for key, _ in ans_table:\n        if k <= 0:\n            break\n        k -= 1\n        ans.append(key)\n    return ans\n```", "code": "from collections import Counter\n\ndef top_k_frequent_words(words, k):\n    freq_table = Counter(words)\n    ans_table = freq_table.most_common()\n    ans = []\n    for key, _ in ans_table:\n        if k <= 0:\n            break\n        k -= 1\n        ans.append(key)\n    return ans", "entry_point": "top_k_frequent_words", "testcase": ["assert top_k_frequent_words([\"a\", \"b\", \"c\", \"d\", \"e\"], 3) == [\"a\", \"b\", \"c\"]", "assert top_k_frequent_words([\"hello\", \"world\", \"hello\"], 1) == [\"hello\"]", "assert top_k_frequent_words([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"], 2) == [\"banana\", \"apple\"]"]}
{"seq_id": 14077119609, "instruction": "Write a python function to find the largest palindrome number that can be made by multiplying two 3-digit numbers.", "output": "Here is the code to solve this problem: \n```python\ndef largest_palindrome(n):\n    max_num = int('9' * n)\n    min_num = int('1' + '0' * (n - 1))\n    max_palindrome = 0\n\n    for i in range(max_num, min_num - 1, -1):\n        for j in range(i, min_num - 1, -1):\n            product = i * j\n            if product <= max_palindrome:\n                break\n            if str(product) == str(product)[::-1]:\n                max_palindrome = product\n    return max_palindrome\n```", "code": "def largest_palindrome(n):\n    max_num = int('9' * n)\n    min_num = int('1' + '0' * (n - 1))\n    max_palindrome = 0\n\n    for i in range(max_num, min_num - 1, -1):\n        for j in range(i, min_num - 1, -1):\n            product = i * j\n            if product <= max_palindrome:\n                break\n            if str(product) == str(product)[::-1]:\n                max_palindrome = product\n    return max_palindrome", "entry_point": "largest_palindrome", "testcase": ["assert largest_palindrome(3) == 906609", "assert largest_palindrome(2) == 9009", "assert largest_palindrome(1) == 9"]}
{"seq_id": 38069383954, "instruction": "Write a function to find the longest palindromic substring in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_palindromic_substring(s):\n    if len(s) < 2:\n        return s\n\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left+1:right]\n\n    longest_palindrome = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        palindrome1 = expand_around_center(i, i)\n        # Even length palindromes\n        palindrome2 = expand_around_center(i, i+1)\n\n        # Update the longest palindrome found\n        longer_palindrome = palindrome1 if len(palindrome1) > len(palindrome2) else palindrome2\n        if len(longer_palindrome) > len(longest_palindrome):\n            longest_palindrome = longer_palindrome\n\n    return longest_palindrome\n```", "code": "def longest_palindromic_substring(s):\n    if len(s) < 2:\n        return s\n\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left+1:right]\n\n    longest_palindrome = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        palindrome1 = expand_around_center(i, i)\n        # Even length palindromes\n        palindrome2 = expand_around_center(i, i+1)\n\n        # Update the longest palindrome found\n        longer_palindrome = palindrome1 if len(palindrome1) > len(palindrome2) else palindrome2\n        if len(longer_palindrome) > len(longest_palindrome):\n            longest_palindrome = longer_palindrome\n\n    return longest_palindrome", "entry_point": "longest_palindromic_substring", "testcase": ["assert longest_palindromic_substring(\"ac\") == \"a\"", "assert longest_palindromic_substring(\"a\") == \"a\"", "assert longest_palindromic_substring(\"cbbd\") == \"bb\"", "assert longest_palindromic_substring(\"babad\") == \"bab\""]}
{"seq_id": 24735718048, "instruction": "Write a python function to find the largest product of two integers in a list.", "output": "Here is the code to solve this problem: \n```python\ndef largest_product(arr):\n    if len(arr) < 2:\n        return None\n\n    arr.sort()\n\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])\n```", "code": "def largest_product(arr):\n    if len(arr) < 2:\n        return None\n\n    arr.sort()\n\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])", "entry_point": "largest_product", "testcase": ["assert largest_product([0,2,3]) == 6", "assert largest_product([1,4,3,6,7,0]) == 42", "assert largest_product([-1,-2,-3,-4]) == 12"]}
{"seq_id": 1694500296, "instruction": "Write a function to find the first non-repeating character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return \"None\"\n```", "code": "def non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return \"None\"", "entry_point": "non_repeating_char", "testcase": ["assert non_repeating_char(\"aabbcc\")==\"None\"", "assert non_repeating_char(\"aabbccddeeffg\")==\"g\"", "assert non_repeating_char(\"abcdcaf\")==\"b\""]}
{"seq_id": 30521622307, "instruction": "Write a function that takes a list of strings and returns the length of the longest one.", "output": "Here is the code to solve this problem: \n```python\ndef length_of_longest(lst):\n    if not lst:  # Check if the list is empty\n        return 0\n    return max(len(word) for word in lst)\n```", "code": "def length_of_longest(lst):\n    if not lst:  # Check if the list is empty\n        return 0\n    return max(len(word) for word in lst)", "entry_point": "length_of_longest", "testcase": ["assert length_of_longest([\"hello\", \"world\", \"python\"]) == 6", "assert length_of_longest([\"a\", \"bb\", \"ccc\"]) == 3", "assert length_of_longest([\"short\", \"longer\", \"longest\"]) == 7"]}
{"seq_id": 40376565573, "instruction": "Write a function to find the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_non_repeating_substring(s):\n    char_set = set()\n    start = 0\n    end = 0\n    max_len = 0\n    max_start = 0\n\n    while end < len(s):\n        if s[end] not in char_set:\n            char_set.add(s[end])\n            end += 1\n            if end - start > max_len:\n                max_len = end - start\n                max_start = start\n        else:\n            char_set.remove(s[start])\n            start += 1\n\n    return s[max_start:max_start + max_len]\n```", "code": "def longest_non_repeating_substring(s):\n    char_set = set()\n    start = 0\n    end = 0\n    max_len = 0\n    max_start = 0\n\n    while end < len(s):\n        if s[end] not in char_set:\n            char_set.add(s[end])\n            end += 1\n            if end - start > max_len:\n                max_len = end - start\n                max_start = start\n        else:\n            char_set.remove(s[start])\n            start += 1\n\n    return s[max_start:max_start + max_len]", "entry_point": "longest_non_repeating_substring", "testcase": ["assert longest_non_repeating_substring(\"bbbbb\") == \"b\"", "assert longest_non_repeating_substring(\"pwwkew\") == \"wke\"", "assert longest_non_repeating_substring(\"abcabcbb\") == \"abc\""]}
{"seq_id": 1614388527, "instruction": "Write a python function that converts a number from base 10 to a specified base (between 2 and 36) and returns the result as a string.", "output": "Here is the code to solve this problem: \n```python\ndef base_converter(number, base):\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    while number > 0:\n        remainder = number % base\n        result = digits[remainder] + result\n        number = number // base\n    return result or \"0\"\n```", "code": "def base_converter(number, base):\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    while number > 0:\n        remainder = number % base\n        result = digits[remainder] + result\n        number = number // base\n    return result or \"0\"", "entry_point": "base_converter", "testcase": ["assert base_converter(10, 2) == '1010'", "assert base_converter(255, 16) == 'FF'", "assert base_converter(1000, 8) == '1750'"]}
{"seq_id": 40604140327, "instruction": "Write a function to find the decimal equivalent of the most significant bit (MSB) of a given 32-bit integer.", "output": "Here is the code to solve this problem: \n```python\ndef msb_decimal_value(num):\n    for i in range(31, -1, -1):\n        if num & (1 << i):\n            return 1 << i\n```", "code": "def msb_decimal_value(num):\n    for i in range(31, -1, -1):\n        if num & (1 << i):\n            return 1 << i", "entry_point": "msb_decimal_value", "testcase": ["assert msb_decimal_value(13) == 8", "assert msb_decimal_value(1023) == 512", "assert msb_decimal_value(256) == 256"]}
{"seq_id": 3886892947, "instruction": "Write a function that takes a list of integers and a window size as input. The function should return a new list where each element is the maximum value found in a sliding window of the given size over the input list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef max_in_sliding_window(nums, window_size):\n    if not nums or window_size <= 0:\n        return []\n\n    result = []\n    window = deque()\n\n    for i in range(len(nums)):\n        # Remove elements smaller than the current from the window\n        while window and nums[i] >= nums[window[-1]]:\n            window.pop()\n\n        # Add current element's index to the window\n        window.append(i)\n\n        # Remove the leftmost element if it's outside the current window\n        if window[0] <= i - window_size:\n            window.popleft()\n\n        # Add the maximum element of the current window to the result\n        if i >= window_size - 1:\n            result.append(nums[window[0]])\n\n    return result\n```", "code": "from collections import deque\n\ndef max_in_sliding_window(nums, window_size):\n    if not nums or window_size <= 0:\n        return []\n\n    result = []\n    window = deque()\n\n    for i in range(len(nums)):\n        # Remove elements smaller than the current from the window\n        while window and nums[i] >= nums[window[-1]]:\n            window.pop()\n\n        # Add current element's index to the window\n        window.append(i)\n\n        # Remove the leftmost element if it's outside the current window\n        if window[0] <= i - window_size:\n            window.popleft()\n\n        # Add the maximum element of the current window to the result\n        if i >= window_size - 1:\n            result.append(nums[window[0]])\n\n    return result", "entry_point": "max_in_sliding_window", "testcase": ["assert max_in_sliding_window([1, -1], 2) == [1]", "assert max_in_sliding_window([1], 1) == [1]", "assert max_in_sliding_window([9, 11], 2) == [11]", "assert max_in_sliding_window([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7]", "assert max_in_sliding_window([4, -2], 2) == [4]"]}
{"seq_id": 4368165547, "instruction": "Write a python function to find the longest common subsequence between two strings.\n\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The longest common subsequence (LCS) problem is finding the longest subsequence present in both strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_subsequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [['' for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + str1[i - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], key=len)\n    return dp[m][n]\n```", "code": "def longest_common_subsequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [['' for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + str1[i - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], key=len)\n    return dp[m][n]", "entry_point": "longest_common_subsequence", "testcase": ["assert longest_common_subsequence('ABCBDAB', 'BDCAB') == 'BCAB'", "assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 'GTAB'", "assert longest_common_subsequence('ABC', 'AC') == 'AC'"]}
{"seq_id": 4133850265, "instruction": "Write a python function to find the length of the longest consecutive elements sequence in an array of integers.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consequtive_sequence(nums):\n    if not nums:\n        return 0\n\n    nums = set(nums)\n    longest_streak = 0\n\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in nums:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak\n```", "code": "def longest_consequtive_sequence(nums):\n    if not nums:\n        return 0\n\n    nums = set(nums)\n    longest_streak = 0\n\n    for num in nums:\n        if num - 1 not in nums:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in nums:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak", "entry_point": "longest_consequtive_sequence", "testcase": ["assert longest_consequtive_sequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9", "assert longest_consequtive_sequence([10, 5, 12]) == 1", "assert longest_consequtive_sequence([100, 4, 200, 1, 3, 2]) == 4"]}
{"seq_id": 5778863399, "instruction": "Write a function that takes a string and returns a dictionary where the keys are the characters in the string and the values are the frequency of the characters in the string.", "output": "Here is the code to solve this problem: \n```python\ndef char_freq(string):\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n```", "code": "def char_freq(string):\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq", "entry_point": "char_freq", "testcase": ["assert char_freq(\"python\") == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "assert char_freq(\"hello\") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}", "assert char_freq(\"apple\") == {'a': 1, 'p': 2, 'l': 1, 'e': 1}"]}
{"seq_id": 33323557653, "instruction": "Write a Python function to count the number of prime numbers within a given range.", "output": "Here is the code to solve this problem: \n```python\ndef count_primes(n):\n    if n < 2:\n        return 0\n    primes = [1] * n\n    primes[0] = primes[1] = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i*i:n:i] = [0] * len(primes[i*i:n:i])\n    return sum(primes)\n```", "code": "def count_primes(n):\n    if n < 2:\n        return 0\n    primes = [1] * n\n    primes[0] = primes[1] = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i*i:n:i] = [0] * len(primes[i*i:n:i])\n    return sum(primes)", "entry_point": "count_primes", "testcase": ["assert count_primes(10) == 4", "assert count_primes(20) == 8", "assert count_primes(30) == 10"]}
{"seq_id": 14865632045, "instruction": "Write a python function to convert a number from base 10 to a given base between 2 and 36.", "output": "Here is the code to solve this problem: \n```python\ndef base_converter(num, base):\n    convert_string = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if num < base:\n        return convert_string[num]\n    else:\n        return base_converter(num // base, base) + convert_string[num % base]\n```", "code": "def base_converter(num, base):\n    convert_string = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if num < base:\n        return convert_string[num]\n    else:\n        return base_converter(num // base, base) + convert_string[num % base]", "entry_point": "base_converter", "testcase": ["assert base_converter(8, 2) == '1000'", "assert base_converter(7, 2) == '111'", "assert base_converter(8, 3) == '22'"]}
{"seq_id": 671498747, "instruction": "Write a python function that finds the median of a list of numbers. If the list has an even number of items, return the average of the two middle numbers.", "output": "Here is the code to solve this problem: \n```python\ndef find_median(lst):\n    lst.sort()\n    n = len(lst)\n    if n % 2 == 0:\n        return (lst[n//2 - 1] + lst[n//2]) / 2\n    else:\n        return lst[n//2]\n```", "code": "def find_median(lst):\n    lst.sort()\n    n = len(lst)\n    if n % 2 == 0:\n        return (lst[n//2 - 1] + lst[n//2]) / 2\n    else:\n        return lst[n//2]", "entry_point": "find_median", "testcase": ["assert find_median([1, 3, 5]) == 3", "assert find_median([7, 3, 5, 1]) == 4", "assert find_median([10, 20, 30, 40, 50]) == 30", "assert find_median([1, 2, 3, 4]) == 2.5"]}
{"seq_id": 28077605172, "instruction": "Write a Python function that finds and returns all unique quadruplets [a, b, c, d] in the given array such that a + b + c + d = target. The quadruplets must be returned in ascending order and without duplicates.", "output": "Here is the code to solve this problem: \n```python\ndef four_sum(nums, target):\n    nums.sort()\n    result = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left, right = j + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result\n```", "code": "def four_sum(nums, target):\n    nums.sort()\n    result = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left, right = j + 1, len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n                elif total < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result", "entry_point": "four_sum", "testcase": ["assert four_sum([1, 2, 3, 4, 5], 10) == [[1, 2, 3, 4]]", "assert four_sum([2, 2, 2, 2, 2], 8) == [[2, 2, 2, 2]]", "assert four_sum([1, 0, -1, 0, -2, 2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]"]}
{"seq_id": 43930073724, "instruction": "Write a function to find the longest consecutive substring of a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_consecutive_substring(string):\n    max_length = 0\n    max_substring = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if len(substring) > max_length and substring == ''.join(sorted(substring)) and len(set(substring)) == len(substring):\n                max_length = len(substring)\n                max_substring = substring\n    return max_substring\n```", "code": "def longest_consecutive_substring(string):\n    max_length = 0\n    max_substring = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if len(substring) > max_length and substring == ''.join(sorted(substring)) and len(set(substring)) == len(substring):\n                max_length = len(substring)\n                max_substring = substring\n    return max_substring", "entry_point": "longest_consecutive_substring", "testcase": ["assert longest_consecutive_substring('aabcabcabcabc') == 'abc'", "assert longest_consecutive_substring('ababcabcabcabcabc') == 'abc'", "assert longest_consecutive_substring('abcabcabc') == 'abc'", "assert longest_consecutive_substring('ababcabcabc') == 'abc'", "assert longest_consecutive_substring('ababcabcabcabcabcabc') == 'abc'", "assert longest_consecutive_substring('ababcabcabcabcabcabcabcabc') == 'abc'", "assert longest_consecutive_substring('ababcabcabcabcabcabcabc') == 'abc'"]}
{"seq_id": 9017950684, "instruction": "Write a python function to find the number of ways to reach the last cell of a grid from the first cell using only allowed moves.", "output": "Here is the code to solve this problem: \n```python\ndef grid_ways(N, M):\n    if N == 1 or M == 1:\n        return 1\n    return grid_ways(N-1, M) + grid_ways(N, M-1)\n```", "code": "def grid_ways(N, M):\n    if N == 1 or M == 1:\n        return 1\n    return grid_ways(N-1, M) + grid_ways(N, M-1)", "entry_point": "grid_ways", "testcase": ["assert grid_ways(1, 10) == 1", "assert grid_ways(2, 3) == 3", "assert grid_ways(3, 3) == 6"]}
{"seq_id": 70676322377, "instruction": "Write a python function to find the smallest positive integer value that cannot be represented as the sum of any subset of a given list of positive integers.", "output": "Here is the code to solve this problem: \n```python\ndef smallest_missing(arr):\n    arr.sort()\n    smallest_missing = 1\n    for num in arr:\n        if num > smallest_missing:\n            break\n        smallest_missing += num\n    return smallest_missing\n```", "code": "def smallest_missing(arr):\n    arr.sort()\n    smallest_missing = 1\n    for num in arr:\n        if num > smallest_missing:\n            break\n        smallest_missing += num\n    return smallest_missing", "entry_point": "smallest_missing", "testcase": ["assert smallest_missing([1, 3, 6, 10]) == 2", "assert smallest_missing([1, 2, 3]) == 7", "assert smallest_missing([1, 1, 3, 4]) == 10"]}
{"seq_id": 34075032465, "instruction": "Write a python function to convert a column number to its corresponding column title as it appears in an Excel sheet.", "output": "Here is the code to solve this problem: \n```python\ndef convert_to_title(columnNumber: int) -> str:\n    alphabet = [\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n    ]\n\n    result = \"\"\n\n    while columnNumber > 0:\n        result = alphabet[(columnNumber - 1) % 26] + result\n        columnNumber = (columnNumber - 1) // 26\n\n    return result\n```", "code": "def convert_to_title(columnNumber: int) -> str:\n    alphabet = [\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n    ]\n\n    result = \"\"\n\n    while columnNumber > 0:\n        result = alphabet[(columnNumber - 1) % 26] + result\n        columnNumber = (columnNumber - 1) // 26\n\n    return result", "entry_point": "convert_to_title", "testcase": ["assert convert_to_title(1) == \"A\"", "assert convert_to_title(28) == \"AB\"", "assert convert_to_title(701) == \"ZY\"", "assert convert_to_title(2147483647) == \"FXSHRXW\""]}
{"seq_id": 32717973465, "instruction": "Write a function that takes a binary tree in the form of a list representing its level-order traversal and returns the tree with two swapped nodes recovered in-place. The input list represents the binary tree level by level, from left to right, and None values represent missing nodes. The function should handle cases where the tree may have been partially corrupted by having two nodes swapped, as if by a rogue process.", "output": "Here is the code to solve this problem: \n```python\nfrom typing import List, Optional\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef level_order(root: Optional[TreeNode]) -> List[Optional[int]]:\n    if not root:\n        return []\n    result, current = [], [root]\n    while current:\n        next_level = []\n        for node in current:\n            result.append(node.val)\n            if node.left:\n                next_level.append(node.left)\n            if node.right:\n                next_level.append(node.right)\n        current = next_level\n    return result\n\ndef recover_tree(tree_list: List[Optional[int]]) -> None:\n    nodes = []\n    for val in tree_list:\n        if val is not None:\n            nodes.append(TreeNode(val))\n        else:\n            nodes.append(None)\n    \n    def build_tree(nodes, index=0):\n        if index >= len(nodes):\n            return None\n        if nodes[index] is None:\n            return None\n        root = nodes[index]\n        root.left = build_tree(nodes, 2 * index + 1)\n        root.right = build_tree(nodes, 2 * index + 2)\n        return root\n    \n    def recover_in_place(root: TreeNode):\n        if not root:\n            return\n        INF = 1e10\n        visited_node = TreeNode(-INF)\n        wrong_node1 = wrong_node2 = None\n        cur_node = root\n        while cur_node:\n            if cur_node.left:\n                rightest_leaf = cur_node.left\n                while rightest_leaf.right is not None and rightest_leaf.right is not cur_node:\n                    rightest_leaf = rightest_leaf.right\n                \n                if rightest_leaf.right is None:\n                    rightest_leaf.right = cur_node\n                    cur_node = cur_node.left\n                else:\n                    rightest_leaf.right = None\n                    if visited_node.val > cur_node.val:\n                        if not wrong_node1:\n                            wrong_node1 = visited_node\n                            wrong_node2 = cur_node\n                        else:\n                            wrong_node2 = cur_node\n                            break\n                    visited_node = cur_node\n                    cur_node = cur_node.right\n            else:\n                if visited_node.val > cur_node.val:\n                    if not wrong_node1:\n                        wrong_node1 = visited_node\n                        wrong_node2 = cur_node\n                    else:\n                        wrong_node2 = cur_node\n                        break\n                visited_node = cur_node\n                cur_node = cur_node.right \n               \n        if wrong_node1:\n            wrong_node1.val, wrong_node2.val = wrong_node2.val, wrong_node1.val\n\n        return None\n\n    root = build_tree(nodes)\n    recover_in_place(root)\n    return None\n```", "code": "from typing import List, Optional\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef level_order(root: Optional[TreeNode]) -> List[Optional[int]]:\n    if not root:\n        return []\n    result, current = [], [root]\n    while current:\n        next_level = []\n        for node in current:\n            result.append(node.val)\n            if node.left:\n                next_level.append(node.left)\n            if node.right:\n                next_level.append(node.right)\n        current = next_level\n    return result\n\ndef recover_tree(tree_list: List[Optional[int]]) -> None:\n    nodes = []\n    for val in tree_list:\n        if val is not None:\n            nodes.append(TreeNode(val))\n        else:\n            nodes.append(None)\n    \n    def build_tree(nodes, index=0):\n        if index >= len(nodes):\n            return None\n        if nodes[index] is None:\n            return None\n        root = nodes[index]\n        root.left = build_tree(nodes, 2 * index + 1)\n        root.right = build_tree(nodes, 2 * index + 2)\n        return root\n    \n    def recover_in_place(root: TreeNode):\n        if not root:\n            return\n        INF = 1e10\n        visited_node = TreeNode(-INF)\n        wrong_node1 = wrong_node2 = None\n        cur_node = root\n        while cur_node:\n            if cur_node.left:\n                rightest_leaf = cur_node.left\n                while rightest_leaf.right is not None and rightest_leaf.right is not cur_node:\n                    rightest_leaf = rightest_leaf.right\n                \n                if rightest_leaf.right is None:\n                    rightest_leaf.right = cur_node\n                    cur_node = cur_node.left\n                else:\n                    rightest_leaf.right = None\n                    if visited_node.val > cur_node.val:\n                        if not wrong_node1:\n                            wrong_node1 = visited_node\n                            wrong_node2 = cur_node\n                        else:\n                            wrong_node2 = cur_node\n                            break\n                    visited_node = cur_node\n                    cur_node = cur_node.right\n            else:\n                if visited_node.val > cur_node.val:\n                    if not wrong_node1:\n                        wrong_node1 = visited_node\n                        wrong_node2 = cur_node\n                    else:\n                        wrong_node2 = cur_node\n                        break\n                visited_node = cur_node\n                cur_node = cur_node.right \n               \n        if wrong_node1:\n            wrong_node1.val, wrong_node2.val = wrong_node2.val, wrong_node1.val\n\n        return None\n\n    root = build_tree(nodes)\n    recover_in_place(root)\n    return None", "entry_point": "recover_tree", "testcase": ["assert recover_tree([1, 2, 3]) == None  # No nodes swapped, no action needed.", "assert recover_tree([1, 3, None, 2]) == None  # Swapped nodes 2 and 3.", "assert recover_tree([3, 1, 4, None, None, 2]) == None  # Swapped nodes 1 and 2."]}
{"seq_id": 71093240524, "instruction": "Write a python function to find the maximum length of a subarray with a given sum.", "output": "Here is the code to solve this problem: \n```python\ndef max_length_subarray_with_sum(arr, target_sum):\n    max_length = 0\n    current_sum = 0\n    start_index = 0\n    sum_index_dict = {0: -1}\n\n    for i, num in enumerate(arr):\n        current_sum += num\n\n        if current_sum - target_sum in sum_index_dict:\n            start_index = sum_index_dict[current_sum - target_sum] + 1\n            max_length = max(max_length, i - start_index + 1)\n\n        if current_sum not in sum_index_dict:\n            sum_index_dict[current_sum] = i\n\n    return max_length\n```", "code": "def max_length_subarray_with_sum(arr, target_sum):\n    max_length = 0\n    current_sum = 0\n    start_index = 0\n    sum_index_dict = {0: -1}\n\n    for i, num in enumerate(arr):\n        current_sum += num\n\n        if current_sum - target_sum in sum_index_dict:\n            start_index = sum_index_dict[current_sum - target_sum] + 1\n            max_length = max(max_length, i - start_index + 1)\n\n        if current_sum not in sum_index_dict:\n            sum_index_dict[current_sum] = i\n\n    return max_length", "entry_point": "max_length_subarray_with_sum", "testcase": ["assert max_length_subarray_with_sum([1, 2, 3, 4, 5], 9) == 3", "assert max_length_subarray_with_sum([1, -1, 5, -2, 3], 3) == 4", "assert max_length_subarray_with_sum([-2, -1, 2, 1], 1) == 2"]}
{"seq_id": 42497054392, "instruction": "Write a python function to check if a number can be rearranged to form a power of 2.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\ndef reorderedPowerOf2(n):\n        c = Counter([int(i) for i in str(n)])\n        N, i = 0,0\n        while N <= 10**9:\n            N = 2 ** i\n            d = Counter([int(i) for i in str(N)])\n            if c == d: return True\n            i += 1\n        return False\n```", "code": "from collections import Counter\ndef reorderedPowerOf2(n):\n        c = Counter([int(i) for i in str(n)])\n        N, i = 0,0\n        while N <= 10**9:\n            N = 2 ** i\n            d = Counter([int(i) for i in str(N)])\n            if c == d: return True\n            i += 1\n        return False", "entry_point": "reorderedPowerOf2", "testcase": ["assert reorderedPowerOf2(64) == True", "assert reorderedPowerOf2(10) == False", "assert reorderedPowerOf2(1) == True"]}
{"seq_id": 35113014372, "instruction": "Write a function to find the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_substring(s: str) -> int:\n    max_len = 0\n    i = 0\n    j = 0\n    smap = {}\n    while j < len(s):\n        if s[j] in smap:\n            i = smap[s[j]] if smap[s[j]] > i else i\n        max_len = j - i + 1 if j - i + 1 > max_len else max_len\n        smap[s[j]] = j + 1\n        j += 1\n    return max_len\n```", "code": "def longest_substring(s: str) -> int:\n    max_len = 0\n    i = 0\n    j = 0\n    smap = {}\n    while j < len(s):\n        if s[j] in smap:\n            i = smap[s[j]] if smap[s[j]] > i else i\n        max_len = j - i + 1 if j - i + 1 > max_len else max_len\n        smap[s[j]] = j + 1\n        j += 1\n    return max_len", "entry_point": "longest_substring", "testcase": ["assert longest_substring(\"dvdf\") == 3", "assert longest_substring(\"au\") == 2", "assert longest_substring(\" \") == 1", "assert longest_substring(\"\") == 0", "assert longest_substring(\"pwwkew\") == 3", "assert longest_substring(\"bbbbb\") == 1", "assert longest_substring(\"abcabcbb\") == 3"]}
{"seq_id": 379298022, "instruction": "Write a function to find the factorial of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef find_factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * find_factorial(n-1)\n```", "code": "def find_factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * find_factorial(n-1)", "entry_point": "find_factorial", "testcase": ["assert find_factorial(6)==720", "assert find_factorial(4)==24", "assert find_factorial(5)==120"]}
{"seq_id": 34815479513, "instruction": "Write a python function to find the total number of ways we can form a given number 'n' using the given 'coins' array. Assume that you have an infinite supply of all coin denominations.", "output": "Here is the code to solve this problem: \n```python\ndef countWays(coins, n):\n    m = len(coins)\n    dp = [[0 for x in range(m)] for x in range(n+1)]\n    \n    for i in range(m):\n        dp[0][i] = 1\n\n    for i in range(1, n+1):\n        for j in range(m):\n            x = dp[i - coins[j]][j] if i-coins[j] >= 0 else 0 \n            y = dp[i][j-1] if j >= 1 else 0 \n            dp[i][j] = x + y\n    return dp[n][m-1]\n```", "code": "def countWays(coins, n):\n    m = len(coins)\n    dp = [[0 for x in range(m)] for x in range(n+1)]\n    \n    for i in range(m):\n        dp[0][i] = 1\n\n    for i in range(1, n+1):\n        for j in range(m):\n            x = dp[i - coins[j]][j] if i-coins[j] >= 0 else 0 \n            y = dp[i][j-1] if j >= 1 else 0 \n            dp[i][j] = x + y\n    return dp[n][m-1]", "entry_point": "countWays", "testcase": ["assert countWays([1, 2, 3], 4) == 4", "assert countWays([1, 5, 10, 25], 100) == 242", "assert countWays([2, 5, 3], 10) == 4"]}
{"seq_id": 23097305496, "instruction": "Write a function that returns the most common elements in a list. If there are multiple elements with the same highest frequency, return them all in the order they appear in the list.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef most_common(lst):\n    count = Counter(lst)\n    max_count = max(count.values())\n    return [item for item, freq in count.items() if freq == max_count]\n```", "code": "from collections import Counter\n\ndef most_common(lst):\n    count = Counter(lst)\n    max_count = max(count.values())\n    return [item for item, freq in count.items() if freq == max_count]", "entry_point": "most_common", "testcase": ["assert most_common([1, 1, 2, 2, 3, 3]) == [1, 2, 3]", "assert most_common(['a', 'b', 'b', 'a', 'c', 'a']) == ['a']", "assert most_common([1, 2, 1, 2, 3, 2]) == [2]", "assert most_common(['a', 'b', 'b', 'a', 'c', 'c', 'a', 'c']) == ['a', 'c']", "assert most_common(['a', 'b', 'b', 'a', 'c', 'c', 'b']) == ['b']"]}
{"seq_id": 40693116102, "instruction": "Write a python function that takes a list of strings and groups them by anagrams. Anagrams are words formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\nFor example, the strings \"listen\" and \"silent\" are anagrams of each other.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef group_anagrams(strs):\n    anagrams = defaultdict(list)\n    \n    for word in strs:\n        # Sorted word is a key for anagrams\n        key = ''.join(sorted(word))\n        anagrams[key].append(word)\n    \n    return list(anagrams.values())\n```", "code": "from collections import defaultdict\n\ndef group_anagrams(strs):\n    anagrams = defaultdict(list)\n    \n    for word in strs:\n        # Sorted word is a key for anagrams\n        key = ''.join(sorted(word))\n        anagrams[key].append(word)\n    \n    return list(anagrams.values())", "entry_point": "group_anagrams", "testcase": ["assert group_anagrams([\"cat\", \"tac\", \"act\", \"god\", \"dog\", \"ct\"]) == [[\"cat\", \"tac\", \"act\"], [\"god\", \"dog\"], [\"ct\"]]", "assert group_anagrams([\"abc\", \"cba\", \"bac\", \"xyz\", \"zyx\", \"xzy\"]) == [[\"abc\", \"cba\", \"bac\"], [\"xyz\", \"zyx\", \"xzy\"]]", "assert group_anagrams([\"listen\", \"silent\", \"enlist\", \"google\", \"gogole\", \"god\"]) == [[\"listen\", \"silent\", \"enlist\"], [\"google\", \"gogole\"], [\"god\"]]"]}
{"seq_id": 33759708018, "instruction": "You are given a list of tuples representing points in a 2D plane. Each tuple consists of two integers (x, y) representing the coordinates of a point. Your task is to find the largest minimum distance between any two points and return this value.\n\nWrite a function `largest_min_distance(points)` that takes in a list of tuples `points` and returns the largest minimum distance between any two points in the list.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef largest_min_distance(points):\n    def distance(p1, p2):\n        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\n    distances = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distances.append(distance(points[i], points[j]))\n\n    return min(distances)\n\n# Test cases\nprint(largest_min_distance([(1, 2), (3, 4), (5, 6)]))  # 2.8284271247461903\nprint(largest_min_distance([(1, 1), (2, 2), (3, 3), (4, 4)]))  # 1.4142135623730951\nprint(largest_min_distance([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]))  # 1.4142135623730951\n```", "code": "import math\n\ndef largest_min_distance(points):\n    def distance(p1, p2):\n        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\n    distances = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distances.append(distance(points[i], points[j]))\n\n    return min(distances)\n\n# Test cases\nprint(largest_min_distance([(1, 2), (3, 4), (5, 6)]))  # 2.8284271247461903\nprint(largest_min_distance([(1, 1), (2, 2), (3, 3), (4, 4)]))  # 1.4142135623730951\nprint(largest_min_distance([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]))  # 1.4142135623730951", "entry_point": "largest_min_distance", "testcase": ["assert largest_min_distance([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]) == 1.4142135623730951", "assert largest_min_distance([(1, 1), (2, 2), (3, 3), (4, 4)]) == 1.4142135623730951", "assert largest_min_distance([(1, 2), (3, 4), (5, 6)]) == 2.8284271247461903"]}
{"seq_id": 18552609579, "instruction": "Write a python function that takes a list of integers as input and returns the length of the shortest subarray that needs to be sorted in the entire list to make it a sorted list.\n\nExample:\nFor nums = [2, 6, 4, 8, 10, 9, 15], the function should return 5, as the numbers between indexes 1 and 5 [6, 4, 8, 10, 9] are not in sorted order.", "output": "Here is the code to solve this problem: \n```python\ndef find_unsorted_subarray(nums):\n    sorted_nums = sorted(nums)\n    start, end = -1, -1\n\n    i = 0\n    while i < len(nums):\n        if nums[i] != sorted_nums[i]:\n            start = i\n            break\n        i += 1\n\n    if start == -1:\n        return 0\n\n    i = len(nums) - 1\n    while i >= 0:\n        if nums[i] != sorted_nums[i]:\n            end = i\n            break\n        i -= 1\n\n    return end - start + 1\n```", "code": "def find_unsorted_subarray(nums):\n    sorted_nums = sorted(nums)\n    start, end = -1, -1\n\n    i = 0\n    while i < len(nums):\n        if nums[i] != sorted_nums[i]:\n            start = i\n            break\n        i += 1\n\n    if start == -1:\n        return 0\n\n    i = len(nums) - 1\n    while i >= 0:\n        if nums[i] != sorted_nums[i]:\n            end = i\n            break\n        i -= 1\n\n    return end - start + 1", "entry_point": "find_unsorted_subarray", "testcase": ["assert find_unsorted_subarray([1]) == 0", "assert find_unsorted_subarray([1, 2, 3, 4]) == 0", "assert find_unsorted_subarray([2, 6, 4, 8, 10, 9, 15]) == 5"]}
{"seq_id": 11244572963, "instruction": "Write a python function to find the intersection of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef intersection_sorted_arrays(arr1, arr2):\n    i = 0\n    j = 0\n    result = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if len(result) == 0 or result[-1] != arr1[i]:\n                result.append(arr1[i])\n            i += 1\n            j += 1\n    return result\n```", "code": "def intersection_sorted_arrays(arr1, arr2):\n    i = 0\n    j = 0\n    result = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if len(result) == 0 or result[-1] != arr1[i]:\n                result.append(arr1[i])\n            i += 1\n            j += 1\n    return result", "entry_point": "intersection_sorted_arrays", "testcase": ["assert intersection_sorted_arrays([1, 2, 2, 3, 4], [2, 2, 4, 6, 8]) == [2, 4]", "assert intersection_sorted_arrays([1, 3, 5, 7, 9], [2, 4, 6, 8]) == []", "assert intersection_sorted_arrays([10, 20, 30, 40, 50], [15, 20, 25, 30, 35]) == [20, 30]"]}
{"seq_id": 14728405169, "instruction": "Write a Python function to find the number of distinct prime factors of a given integer.\n\nA prime factor is a factor that is a prime number. A distinct prime factor is a prime factor that appears only once in the factorization of a number.\n\nFor example, the prime factorization of 18 is 2 * 3 * 3. The number 18 has two distinct prime factors: 2 and 3.", "output": "Here is the code to solve this problem: \n```python\ndef distinct_prime_factors(n):\n    factors = set()\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return len(factors)\n```", "code": "def distinct_prime_factors(n):\n    factors = set()\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return len(factors)", "entry_point": "distinct_prime_factors", "testcase": ["assert distinct_prime_factors(23) == 1", "assert distinct_prime_factors(18) == 2", "assert distinct_prime_factors(100) == 2"]}
{"seq_id": 29691164039, "instruction": "Write a function to find the maximum product of two adjacent elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef max_product_adjacent(arr):\n    max_product = float('-inf')\n    for i in range(len(arr) - 1):\n        max_product = max(max_product, arr[i] * arr[i + 1])\n    return max_product\n```", "code": "def max_product_adjacent(arr):\n    max_product = float('-inf')\n    for i in range(len(arr) - 1):\n        max_product = max(max_product, arr[i] * arr[i + 1])\n    return max_product", "entry_point": "max_product_adjacent", "testcase": ["assert max_product_adjacent([5, 6, -4, 2, 3, 2, -23]) == 30", "assert max_product_adjacent([3, 6, -2, -5, 7, 3]) == 21", "assert max_product_adjacent([0, -1, 1, 24, 1, -4, 8, 10]) == 80"]}
{"seq_id": 34200621257, "instruction": "Write a function to calculate the total cost of an item after applying a discount.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_cost_with_discount(price, discount):\n    discounted_price = price - (price * discount / 100)\n    return discounted_price\n```", "code": "def calculate_cost_with_discount(price, discount):\n    discounted_price = price - (price * discount / 100)\n    return discounted_price", "entry_point": "calculate_cost_with_discount", "testcase": ["assert calculate_cost_with_discount(50, 20)==40", "assert calculate_cost_with_discount(100, 10)==90", "assert calculate_cost_with_discount(80, 15)==68"]}
{"seq_id": 12236033720, "instruction": "Write a python function to find the number of days between two dates.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\n\ndef days_between_dates(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = abs((b - a).days)\n    return delta\n```", "code": "from datetime import datetime\n\ndef days_between_dates(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = abs((b - a).days)\n    return delta", "entry_point": "days_between_dates", "testcase": ["assert days_between_dates(date1 = \"2020-01-15\", date2 = \"2019-12-31\") == 15", "assert days_between_dates(date1 = \"2019-06-29\", date2 = \"2019-06-30\") == 1", "assert days_between_dates(date1 = \"2014-01-01\", date2 = \"2014-12-31\") == 364"]}
{"seq_id": 32320964079, "instruction": "Write a python function that takes an integer as input and returns the next number that has the same number of 1 bits in its binary representation.", "output": "Here is the code to solve this problem: \n```python\ndef next_number_with_same_bit_count(n):\n    c = n\n    c0 = 0\n    c1 = 0\n    while ((c & 1) == 0) and (c != 0):\n        c0 += 1\n        c >>= 1\n    while (c & 1) == 1:\n        c1 += 1\n        c >>= 1\n    if c0 + c1 == 31 or c0 + c1 == 0:\n        return -1\n    p = c0 + c1\n    n |= (1 << p)\n    n &= ~((1 << p) - 1)\n    n |= (1 << (c1 - 1)) - 1\n    return n\n```", "code": "def next_number_with_same_bit_count(n):\n    c = n\n    c0 = 0\n    c1 = 0\n    while ((c & 1) == 0) and (c != 0):\n        c0 += 1\n        c >>= 1\n    while (c & 1) == 1:\n        c1 += 1\n        c >>= 1\n    if c0 + c1 == 31 or c0 + c1 == 0:\n        return -1\n    p = c0 + c1\n    n |= (1 << p)\n    n &= ~((1 << p) - 1)\n    n |= (1 << (c1 - 1)) - 1\n    return n", "entry_point": "next_number_with_same_bit_count", "testcase": ["assert next_number_with_same_bit_count(6) == 9", "assert next_number_with_same_bit_count(14) == 19", "assert next_number_with_same_bit_count(9) == 10"]}
{"seq_id": 38795563262, "instruction": "Write a function to find the minimum number of coins needed to make up a given total amount. If it's not possible to make up that amount with the given coin denominations, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef minCoins(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if i >= coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1\n```", "code": "def minCoins(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if i >= coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1", "entry_point": "minCoins", "testcase": ["assert minCoins([1,2,5], 11) == 3", "assert minCoins([1], 0) == 0", "assert minCoins([2], 3) == -1"]}
{"seq_id": 486777071, "instruction": "Write a function to find the smallest substring containing all characters of a given string.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef min_substring(s: str, t: str) -> str:\n    need = defaultdict(int)\n    window = defaultdict(int)\n    for c in t:\n        need[c] += 1\n    left, right, valid, start = 0, 0, 0, 0\n    length = float('inf')\n    while right < len(s):\n        c = s[right]\n        right += 1\n        if c in need:\n            window[c] += 1\n            if window[c] == need[c]:\n                valid += 1\n        while valid == len(need):\n            if right-left < length:\n                start = left\n                length = right-left\n            d = s[left]\n            left += 1\n            if d in need:\n                if window[d] == need[d]:\n                    valid -= 1\n                window[d] -= 1\n    if length == float('inf'):\n        return ''\n    else:\n        return s[start:start+length]\n```", "code": "from collections import defaultdict\n\ndef min_substring(s: str, t: str) -> str:\n    need = defaultdict(int)\n    window = defaultdict(int)\n    for c in t:\n        need[c] += 1\n    left, right, valid, start = 0, 0, 0, 0\n    length = float('inf')\n    while right < len(s):\n        c = s[right]\n        right += 1\n        if c in need:\n            window[c] += 1\n            if window[c] == need[c]:\n                valid += 1\n        while valid == len(need):\n            if right-left < length:\n                start = left\n                length = right-left\n            d = s[left]\n            left += 1\n            if d in need:\n                if window[d] == need[d]:\n                    valid -= 1\n                window[d] -= 1\n    if length == float('inf'):\n        return ''\n    else:\n        return s[start:start+length]", "entry_point": "min_substring", "testcase": ["assert min_substring(\"a\", \"a\") == \"a\"", "assert min_substring(\"a\", \"aa\") == \"\"", "assert min_substring(\"ADOBECODEBANC\", \"ABC\") == \"BANC\""]}
{"seq_id": 28948912768, "instruction": "Write a function to find the number of times each element in a list appears as the maximum in a sliding window of size k.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import deque\n\ndef max_in_sliding_window(nums, k):\n    d = deque()\n    out = []\n    for i, n in enumerate(nums):\n        while d and nums[d[-1]] < n:\n            d.pop()\n        d += i,\n        if d[0] == i - k:\n            d.popleft()\n        if i >= k - 1:\n            out.append(nums[d[0]])\n    return out\n```", "code": "from collections import deque\n\ndef max_in_sliding_window(nums, k):\n    d = deque()\n    out = []\n    for i, n in enumerate(nums):\n        while d and nums[d[-1]] < n:\n            d.pop()\n        d += i,\n        if d[0] == i - k:\n            d.popleft()\n        if i >= k - 1:\n            out.append(nums[d[0]])\n    return out", "entry_point": "max_in_sliding_window", "testcase": ["assert max_in_sliding_window([1], 1) == [1]", "assert max_in_sliding_window([1, -1], 1) == [1, -1]", "assert max_in_sliding_window([4, -2], 2) == [4]", "assert max_in_sliding_window([9, 11], 2) == [11]", "assert max_in_sliding_window([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7]"]}
{"seq_id": 12917386926, "instruction": "Write a function to find the count of palindromic substrings in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef palindrome_count(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n    \n    total_count = 0\n    for i in range(len(s)):\n        total_count += expand_around_center(i, i) # odd length palindromes\n        total_count += expand_around_center(i, i + 1) # even length palindromes\n    return total_count\n```", "code": "def palindrome_count(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n    \n    total_count = 0\n    for i in range(len(s)):\n        total_count += expand_around_center(i, i) # odd length palindromes\n        total_count += expand_around_center(i, i + 1) # even length palindromes\n    return total_count", "entry_point": "palindrome_count", "testcase": ["assert palindrome_count(\"racecar\") == 10", "assert palindrome_count(\"abc\") == 3", "assert palindrome_count(\"aaa\") == 6"]}
{"seq_id": 3576170592, "instruction": "Write a function to calculate the Least Common Multiple (LCM) of two numbers.", "output": "Here is the code to solve this problem: \n```python\ndef greatest_common_divisor(a, b):\n    # Base Case: If either number is 0, return the other number\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    # Recursively calculate GCD\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a-b, b)\n    return greatest_common_divisor(a, b-a)\n\ndef least_common_multiple(a, b):\n    # Calculate LCM using the formula: LCM(a, b) = (a * b) / GCD(a, b)\n    return (a * b) // greatest_common_divisor(a, b)\n```", "code": "def greatest_common_divisor(a, b):\n    # Base Case: If either number is 0, return the other number\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    # Recursively calculate GCD\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a-b, b)\n    return greatest_common_divisor(a, b-a)\n\ndef least_common_multiple(a, b):\n    # Calculate LCM using the formula: LCM(a, b) = (a * b) / GCD(a, b)\n    return (a * b) // greatest_common_divisor(a, b)", "entry_point": "least_common_multiple", "testcase": ["assert least_common_multiple(21, 6) == 42", "assert least_common_multiple(4, 6) == 12", "assert least_common_multiple(8, 9) == 72"]}
{"seq_id": 9215834001, "instruction": "Write a function that generates all the possible permutations of a given list of elements.", "output": "Here is the code to solve this problem: \n```python\ndef permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    result = []\n    for i in range(len(nums)):\n        for perm in permutations(nums[:i] + nums[i+1:]):\n            result.append([nums[i]] + perm)\n    return result\n```", "code": "def permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    result = []\n    for i in range(len(nums)):\n        for perm in permutations(nums[:i] + nums[i+1:]):\n            result.append([nums[i]] + perm)\n    return result", "entry_point": "permutations", "testcase": ["assert permutations([1]) == [[1]]", "assert permutations([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "assert permutations(['a', 'b']) == [['a', 'b'], ['b', 'a']]"]}
{"seq_id": 22334451435, "instruction": "Write a python function to convert a decimal number to binary number.", "output": "Here is the code to solve this problem: \n```python\ndef decimal_To_Binary(n):\n    return bin(n).replace(\"0b\", \"\")\n```", "code": "def decimal_To_Binary(n):\n    return bin(n).replace(\"0b\", \"\")", "entry_point": "decimal_To_Binary", "testcase": ["assert decimal_To_Binary(16) == '10000'", "assert decimal_To_Binary(10) == '1010'", "assert decimal_To_Binary(25) == '11001'"]}
{"seq_id": 6299507144, "instruction": "Write a function to find the number of trailing zeros in the factorial of a given number.", "output": "Here is the code to solve this problem: \n```python\ndef find_trailing_zeros(n):\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count\n```", "code": "def find_trailing_zeros(n):\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count", "entry_point": "find_trailing_zeros", "testcase": ["assert find_trailing_zeros(3) == 0", "assert find_trailing_zeros(5) == 1", "assert find_trailing_zeros(10) == 2", "assert find_trailing_zeros(25) == 6"]}
{"seq_id": 39514048707, "instruction": "Write a function that takes a list of integers as input and returns the maximum sum of non-adjacent elements in the list. This is a classic problem in dynamic programming known as the \"Maximum Subsequence Sum\" problem.", "output": "Here is the code to solve this problem: \n```python\ndef max_subsequence_sum(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = excl if excl>incl else incl\n        incl = excl + i\n        excl = new_excl\n    return (excl if excl>incl else incl)\n```", "code": "def max_subsequence_sum(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = excl if excl>incl else incl\n        incl = excl + i\n        excl = new_excl\n    return (excl if excl>incl else incl)", "entry_point": "max_subsequence_sum", "testcase": ["assert max_subsequence_sum([3, 2, 7, 10]) == 13", "assert max_subsequence_sum([3, 2, 5, 10, 7]) == 15", "assert max_subsequence_sum([-2,1,3,-4,5]) == 8"]}
{"seq_id": 27771379995, "instruction": "Write a function that returns the largest number in a list of numbers. If there are multiple of the same largest number, return all of them in a list.", "output": "Here is the code to solve this problem: \n```python\ndef largest_numbers(num_list):\n    max_num = max(num_list)\n    return [num for num in num_list if num == max_num]\n```", "code": "def largest_numbers(num_list):\n    max_num = max(num_list)\n    return [num for num in num_list if num == max_num]", "entry_point": "largest_numbers", "testcase": ["assert largest_numbers([1, 2, 3, 4, 5, 5])==[5, 5]", "assert largest_numbers([2, 2, 2])==[2, 2, 2]", "assert largest_numbers([1, 4, 2, 8, 3, 7, 8])==[8, 8]"]}
{"seq_id": 4916721034, "instruction": "Write a function to find the smallest number in a list that is greater than a given number. If there is no such number, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef find_next_larger(lst, num):\n    greater_nums = [x for x in lst if x > num]\n    if greater_nums:\n        return min(greater_nums)\n    else:\n        return -1\n```", "code": "def find_next_larger(lst, num):\n    greater_nums = [x for x in lst if x > num]\n    if greater_nums:\n        return min(greater_nums)\n    else:\n        return -1", "entry_point": "find_next_larger", "testcase": ["assert find_next_larger([1, 3, 5, 7, 9], 10) == -1", "assert find_next_larger([1, 3, 5, 7, 9], 4) == 5", "assert find_next_larger([15, 25, 35, 45, 55], 30) == 35"]}
{"seq_id": 11349901219, "instruction": "Write a function that takes a list of tuples, each containing a string and an integer, and returns a new list of tuples where the string in each tuple is repeated according to the corresponding integer.", "output": "Here is the code to solve this problem: \n```python\ndef repeat_strings(lst):\n    return [(s, s * i) for s, i in lst]\n```", "code": "def repeat_strings(lst):\n    return [(s, s * i) for s, i in lst]", "entry_point": "repeat_strings", "testcase": ["assert repeat_strings([(\"cat\", 3), (\"dog\", 2), (\"rat\", 4)]) == [(\"cat\", \"catcatcat\"), (\"dog\", \"dogdog\"), (\"rat\", \"ratratratrat\")]", "assert repeat_strings([(\"hello\", 1), (\"world\", 0), (\"python\", 2)]) == [(\"hello\", \"hello\"), (\"world\", \"\"), (\"python\", \"pythonpython\")]", "assert repeat_strings([(\"a\", 5), (\"b\", 1), (\"c\", 0)]) == [(\"a\", \"aaaaa\"), (\"b\", \"b\"), (\"c\", \"\")]"]}
{"seq_id": 73127368377, "instruction": "Write a function to find all unique quadruplets in the array which gives the sum of the target.", "output": "Here is the code to solve this problem: \n```python\ndef findQuadruplets(nums, target):\n    nums.sort()\n    res = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            l, r = j + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[j] + nums[l] + nums[r]\n                if s == target:\n                    res.append([nums[i], nums[j], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l - 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r + 1]:\n                        r -= 1\n                elif s < target:\n                    l += 1\n                else:\n                    r -= 1\n    return res\n```", "code": "def findQuadruplets(nums, target):\n    nums.sort()\n    res = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            l, r = j + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[j] + nums[l] + nums[r]\n                if s == target:\n                    res.append([nums[i], nums[j], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l - 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r + 1]:\n                        r -= 1\n                elif s < target:\n                    l += 1\n                else:\n                    r -= 1\n    return res", "entry_point": "findQuadruplets", "testcase": ["assert findQuadruplets([-3,-2,-1,0,0,1,2,3], 0) == [[-3, -2, 2, 3], [-3, -1, 1, 3], [-3, 0, 0, 3], [-3, 0, 1, 2], [-2, -1, 0, 3], [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]", "assert findQuadruplets([1,0,-1,0,-2,2], 0) == [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]", "assert findQuadruplets([2,2,2,2,2], 8) == [[2, 2, 2, 2]]"]}
{"seq_id": 26283864388, "instruction": "Write a python function to determine if a given string can be a permutation of a palindrome.\nA palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. This function will check if it's possible to rearrange the characters in the string to form a palindrome.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef canPermutePalindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    char_dict = defaultdict(int)\n\n    for char in s:\n        char_dict[char] += 1\n\n    odd_count = 0\n    for value in char_dict.values():\n        if value % 2 == 1:\n            odd_count += 1\n        if odd_count > 1:\n            return False\n    return True\n```", "code": "from collections import defaultdict\n\ndef canPermutePalindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    char_dict = defaultdict(int)\n\n    for char in s:\n        char_dict[char] += 1\n\n    odd_count = 0\n    for value in char_dict.values():\n        if value % 2 == 1:\n            odd_count += 1\n        if odd_count > 1:\n            return False\n    return True", "entry_point": "canPermutePalindrome", "testcase": ["assert canPermutePalindrome(\"A man a plan a canal Panama\") == True", "assert canPermutePalindrome(\"Not a Palindrome\") == False", "assert canPermutePalindrome(\"Tact Coa\") == True"]}
{"seq_id": 71057660526, "instruction": "Write a function that takes a list of numbers and returns a new list with the numbers sorted in descending order.", "output": "Here is the code to solve this problem: \n```python\ndef descending_sort(lst):\n    return sorted(lst, reverse=True)\n```", "code": "def descending_sort(lst):\n    return sorted(lst, reverse=True)", "entry_point": "descending_sort", "testcase": ["assert descending_sort([5, 2, 9, 1, 5, 6]) == [9, 6, 5, 5, 2, 1]", "assert descending_sort([8, 3, 3, 3, 3, 8]) == [8, 8, 3, 3, 3, 3]", "assert descending_sort([10, -2, 0, 5, 10]) == [10, 10, 5, 0, -2]"]}
{"seq_id": 6567393579, "instruction": "Write a python function to count the number of unique substrings of a given string that are palindromes.\n\nA palindrome is a string that reads the same backward as forward, e.g., 'radar' or 'level'.", "output": "Here is the code to solve this problem: \n```python\ndef palindrome_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total = 0\n    for i in range(len(s)):\n        total += expand_around_center(i, i)  # Odd length palindromes\n        total += expand_around_center(i, i + 1)  # Even length palindromes\n\n    return total\n```", "code": "def palindrome_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total = 0\n    for i in range(len(s)):\n        total += expand_around_center(i, i)  # Odd length palindromes\n        total += expand_around_center(i, i + 1)  # Even length palindromes\n\n    return total", "entry_point": "palindrome_substrings", "testcase": ["assert palindrome_substrings(\"racecar\") == 10", "assert palindrome_substrings(\"aaa\") == 6", "assert palindrome_substrings(\"abc\") == 3"]}
{"seq_id": 21297852112, "instruction": "Write a python function to find the number of unique binary search trees (BSTs) that store values 1...n.\n\nFor example, there are a total of 5 unique BST's storing values 1, 2, 3:\n\n1         3     3      2      1\n \\       /     /      / \\      \\\n  3     2     1      1   3      2\n /     /       \\                 \\\n2     1         2                 3", "output": "Here is the code to solve this problem: \n```python\ndef num_unqiue_bst(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n\n    return dp[n]\n```", "code": "def num_unqiue_bst(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n\n    return dp[n]", "entry_point": "num_unqiue_bst", "testcase": ["assert num_unqiue_bst(3) == 5", "assert num_unqiue_bst(4) == 14", "assert num_unqiue_bst(1) == 1"]}
{"seq_id": 26707398382, "instruction": "Write a python function that calculates the maximum profit that can be made by buying and selling a stock on different days. You cannot sell a stock before you buy one.", "output": "Here is the code to solve this problem: \n```python\ndef stock_profit(prices):\n    if not prices:\n        return 0\n    min_price = float('inf')\n    max_profit = 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit\n```", "code": "def stock_profit(prices):\n    if not prices:\n        return 0\n    min_price = float('inf')\n    max_profit = 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit", "entry_point": "stock_profit", "testcase": ["assert stock_profit([7,1,5,3,6,4])==5", "assert stock_profit([1,2,3,4,5])==4", "assert stock_profit([7,6,4,3,1])==0"]}
{"seq_id": 71108204692, "instruction": "Write a python function to find the total number of continuous subarrays whose sum equals to a given value k.", "output": "Here is the code to solve this problem: \n```python\ndef subarraySum(nums, k):\n    count = 0\n    sum_ = 0\n    sum_dict = {0:1}\n    for i in range(len(nums)):\n        sum_ += nums[i]\n        if sum_ - k in sum_dict:\n            count += sum_dict[sum_ - k]\n        if sum_ in sum_dict:\n            sum_dict[sum_] += 1\n        else:\n            sum_dict[sum_] = 1\n    return count\n```", "code": "def subarraySum(nums, k):\n    count = 0\n    sum_ = 0\n    sum_dict = {0:1}\n    for i in range(len(nums)):\n        sum_ += nums[i]\n        if sum_ - k in sum_dict:\n            count += sum_dict[sum_ - k]\n        if sum_ in sum_dict:\n            sum_dict[sum_] += 1\n        else:\n            sum_dict[sum_] = 1\n    return count", "entry_point": "subarraySum", "testcase": ["assert subarraySum([1,1,1], 2) == 2", "assert subarraySum([10,2,-2,-20,10], -10) == 3", "assert subarraySum([1,2,3], 3) == 2"]}
{"seq_id": 24768574539, "instruction": "Write a function to find the maximum number of moves required to make all machines have the same number of clothes in a laundry shop. Each machine can have a certain number of clothes, and you can move clothes from one machine to another. The function should return the maximum number of moves required to make all machines have the same number of clothes.", "output": "Here is the code to solve this problem: \n```python\ndef findMinMoves(machines):\n    n = len(machines)\n    t = sum(machines)\n    if t % n:\n        return -1\n    avg = t // n\n    diff = [0] * n\n    ans = 0\n    for i in range(n):\n        diff[i] = machines[i] - avg\n        ans = max(ans, diff[i])\n\n    for i in range(n):\n        ans = max(ans, abs(diff[i]))\n        if i < n - 1:\n            diff[i + 1] += diff[i]\n    return ans\n```", "code": "def findMinMoves(machines):\n    n = len(machines)\n    t = sum(machines)\n    if t % n:\n        return -1\n    avg = t // n\n    diff = [0] * n\n    ans = 0\n    for i in range(n):\n        diff[i] = machines[i] - avg\n        ans = max(ans, diff[i])\n\n    for i in range(n):\n        ans = max(ans, abs(diff[i]))\n        if i < n - 1:\n            diff[i + 1] += diff[i]\n    return ans", "entry_point": "findMinMoves", "testcase": ["assert findMinMoves([0,3,0]) == 2", "assert findMinMoves([0,2,0]) == -1", "assert findMinMoves([1,0,5]) == 3"]}
{"seq_id": 29080370481, "instruction": "Write a function that takes a list of integers as input and returns a list of all possible subarrays. A subarray is a contiguous part of an array. The order of subarrays in the output list does not matter.", "output": "Here is the code to solve this problem: \n```python\ndef all_subarrays(arr):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            result.append(arr[i:j])\n    return result\n```", "code": "def all_subarrays(arr):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            result.append(arr[i:j])\n    return result", "entry_point": "all_subarrays", "testcase": ["assert all_subarrays([4, 5]) == [[4], [4, 5], [5]]", "assert all_subarrays([1, 2, 3]) == [[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]", "assert all_subarrays([0]) == [[0]]"]}
{"seq_id": 37881769448, "instruction": "Write a function to find the minimum number of coins needed to make up a given total amount. If it is not possible to make up that amount with the given coin denominations, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef coin_change(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        dp[i] = min([dp[i - c] if i - c >= 0 else float('inf') for c in coins]) + 1\n    return dp[amount] if dp[amount] != float('inf') else -1\n```", "code": "def coin_change(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        dp[i] = min([dp[i - c] if i - c >= 0 else float('inf') for c in coins]) + 1\n    return dp[amount] if dp[amount] != float('inf') else -1", "entry_point": "coin_change", "testcase": ["assert coin_change([1, 2, 5], 11) == 3", "assert coin_change([2], 3) == -1", "assert coin_change([1], 0) == 0", "assert coin_change([1], 2) == 2", "assert coin_change([1, 2, 5], 100) == 20"]}
{"seq_id": 19826889910, "instruction": "Write a python function to find the largest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef largest_substring_without_repeating_characters(s: str) -> int:\n    n = len(s)\n    if n <= 1:\n        return n\n\n    max_len = 0\n    start = 0\n    char_index = {}\n\n    for end in range(n):\n        if s[end] in char_index and char_index[s[end]] >= start:\n            start = char_index[s[end]] + 1\n        char_index[s[end]] = end\n        max_len = max(max_len, end - start + 1)\n\n    return max_len\n```", "code": "def largest_substring_without_repeating_characters(s: str) -> int:\n    n = len(s)\n    if n <= 1:\n        return n\n\n    max_len = 0\n    start = 0\n    char_index = {}\n\n    for end in range(n):\n        if s[end] in char_index and char_index[s[end]] >= start:\n            start = char_index[s[end]] + 1\n        char_index[s[end]] = end\n        max_len = max(max_len, end - start + 1)\n\n    return max_len", "entry_point": "largest_substring_without_repeating_characters", "testcase": ["assert largest_substring_without_repeating_characters(\"bbbbb\") == 1", "assert largest_substring_without_repeating_characters(\"abcabcbb\") == 3", "assert largest_substring_without_repeating_characters(\"pwwkew\") == 3"]}
{"seq_id": 205150410, "instruction": "Write a function to find the number of distinct island shapes in a given grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.", "output": "Here is the code to solve this problem: \n```python\ndef count_distinct_islands(grid):\n    def dfs(x, y, position, shape):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] != 1:\n            return\n        grid[x][y] = 0\n        shape.add(position)\n        dfs(x + 1, y, (position[0] + 1, position[1]), shape)\n        dfs(x - 1, y, (position[0] - 1, position[1]), shape)\n        dfs(x, y + 1, (position[0], position[1] + 1), shape)\n        dfs(x, y - 1, (position[0], position[1] - 1), shape)\n    \n    shapes = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                shape = set()\n                dfs(i, j, (0, 0), shape)\n                shapes.add(frozenset(shape))\n    return len(shapes)\n```", "code": "def count_distinct_islands(grid):\n    def dfs(x, y, position, shape):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] != 1:\n            return\n        grid[x][y] = 0\n        shape.add(position)\n        dfs(x + 1, y, (position[0] + 1, position[1]), shape)\n        dfs(x - 1, y, (position[0] - 1, position[1]), shape)\n        dfs(x, y + 1, (position[0], position[1] + 1), shape)\n        dfs(x, y - 1, (position[0], position[1] - 1), shape)\n    \n    shapes = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                shape = set()\n                dfs(i, j, (0, 0), shape)\n                shapes.add(frozenset(shape))\n    return len(shapes)", "entry_point": "count_distinct_islands", "testcase": ["assert count_distinct_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]])==1", "assert count_distinct_islands([[1,1,0,1,1],[1,0,0,0,0],[0,0,0,0,1],[1,1,0,1,1]])==3", "assert count_distinct_islands([[1,1,0,1,1],[1,1,0,1,1],[0,0,0,0,0],[0,0,0,1,1]])==2"]}
{"seq_id": 43512045723, "instruction": "Write a function to find the number of times the digit 1 appears in all numbers from 1 to n (inclusive).", "output": "Here is the code to solve this problem: \n```python\ndef count_digit_one(n: int) -> int:\n    ones = 0\n    if n <= 0:\n        return 0\n    block_size = 10\n    for _ in range(len(str(n))):\n        blocks, rem = divmod(n + 1, block_size)\n        ones += blocks * block_size // 10\n        ones += min(block_size // 10, max(0, rem - block_size // 10))\n        block_size *= 10\n    return ones\n```", "code": "def count_digit_one(n: int) -> int:\n    ones = 0\n    if n <= 0:\n        return 0\n    block_size = 10\n    for _ in range(len(str(n))):\n        blocks, rem = divmod(n + 1, block_size)\n        ones += blocks * block_size // 10\n        ones += min(block_size // 10, max(0, rem - block_size // 10))\n        block_size *= 10\n    return ones", "entry_point": "count_digit_one", "testcase": ["assert count_digit_one(13) == 6", "assert count_digit_one(50) == 15", "assert count_digit_one(0) == 0"]}
{"seq_id": 26239687849, "instruction": "Write a function to calculate the height of a binary tree.", "output": "Here is the code to solve this problem: \n```python\nclass TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        return max(left_height, right_height) + 1\n```", "code": "class TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        return max(left_height, right_height) + 1", "entry_point": "height", "testcase": ["assert height(TreeNode(1)) == 1", "assert height(None) == 0", "assert height(TreeNode(1, TreeNode(2), TreeNode(3))) == 2"]}
{"seq_id": 4496304611, "instruction": "Write a python function to find all starting indices of substrings in a string that is a concatenation of each word in a list of words exactly once without any intervening characters.", "output": "Here is the code to solve this problem: \n```python\nimport collections\n\ndef find_substring_indices(s, words):\n    if not s or not words or not words[0]:\n        return []\n\n    word_len = len(words[0])\n    str_len = len(s)\n    num_words = len(words)\n    word_set = set(words)\n    starting_points = []\n    window = None\n    counter = None\n\n    def _check_word_fill_window(start):\n        word = s[start:start + word_len]\n        if word in word_set:\n            counter[word] -= 1\n            window.append(word)\n        else:\n            window.append(None)\n\n    def _check_solution(start):\n        (_, count) = counter.most_common(1)[0]\n        if count == 0:\n            starting_points.append(start)\n\n    def _remove_word():\n        word = window.popleft()\n        if word:\n            counter[word] += 1\n\n    for i in range(word_len):\n        window = collections.deque()\n        counter = collections.Counter(words)\n\n        for j in range(i, i + num_words * word_len, word_len):\n            _check_word_fill_window(j)\n\n        _check_solution(i)\n\n        for k in range(i + word_len, (str_len + 1) - (word_len * num_words), word_len):\n            _remove_word()\n            _check_word_fill_window(k + word_len * (num_words - 1))\n            _check_solution(k)\n\n    return starting_points\n```", "code": "import collections\n\ndef find_substring_indices(s, words):\n    if not s or not words or not words[0]:\n        return []\n\n    word_len = len(words[0])\n    str_len = len(s)\n    num_words = len(words)\n    word_set = set(words)\n    starting_points = []\n    window = None\n    counter = None\n\n    def _check_word_fill_window(start):\n        word = s[start:start + word_len]\n        if word in word_set:\n            counter[word] -= 1\n            window.append(word)\n        else:\n            window.append(None)\n\n    def _check_solution(start):\n        (_, count) = counter.most_common(1)[0]\n        if count == 0:\n            starting_points.append(start)\n\n    def _remove_word():\n        word = window.popleft()\n        if word:\n            counter[word] += 1\n\n    for i in range(word_len):\n        window = collections.deque()\n        counter = collections.Counter(words)\n\n        for j in range(i, i + num_words * word_len, word_len):\n            _check_word_fill_window(j)\n\n        _check_solution(i)\n\n        for k in range(i + word_len, (str_len + 1) - (word_len * num_words), word_len):\n            _remove_word()\n            _check_word_fill_window(k + word_len * (num_words - 1))\n            _check_solution(k)\n\n    return starting_points", "entry_point": "find_substring_indices", "testcase": ["assert find_substring_indices(\"barfoofoobarthefoobarman\", [\"bar\",\"foo\",\"the\"]) == [6, 9, 12]", "assert find_substring_indices(\"barfoothefoobarman\", [\"foo\",\"bar\"]) == [0, 9]", "assert find_substring_indices(\"wordgoodgoodgoodbestword\", [\"word\",\"good\",\"best\",\"word\"]) == []"]}
{"seq_id": 35710386126, "instruction": "Write a function that reverses the bits of a given 32 bits unsigned integer.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_bits(n):\n    result = 0\n    for i in range(32):\n        result <<= 1\n        result |= n & 1\n        n >>= 1\n    return result\n```", "code": "def reverse_bits(n):\n    result = 0\n    for i in range(32):\n        result <<= 1\n        result |= n & 1\n        n >>= 1\n    return result", "entry_point": "reverse_bits", "testcase": ["assert reverse_bits(0) == 0", "assert reverse_bits(4294967293) == 3221225471", "assert reverse_bits(43261596) == 964176192"]}
{"seq_id": 4485681013, "instruction": "Write a python function to find the second smallest number in a list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]\n```", "code": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "entry_point": "second_smallest", "testcase": ["assert second_smallest([1, 2, 3, 4, 5]) == 2", "assert second_smallest([]) == None", "assert second_smallest([5, 1, 4, 3, 2]) == 2", "assert second_smallest([1, 1]) == None"]}