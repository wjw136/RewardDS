{"seq_id": 5780838504, "instruction": "Write a python function to convert a given Roman numeral to an integer.", "output": "Here is the code to solve this problem: \n```python\ndef roman_to_integer(s):\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for char in s:\n        value = roman_values[char]\n        if value > prev_value:\n            result += value - 2 * prev_value\n        else:\n            result += value\n        prev_value = value\n    return result\n```", "code": "def roman_to_integer(s):\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for char in s:\n        value = roman_values[char]\n        if value > prev_value:\n            result += value - 2 * prev_value\n        else:\n            result += value\n        prev_value = value\n    return result", "entry_point": "roman_to_integer", "testcase": ["assert roman_to_integer('IV') == 4", "assert roman_to_integer('III') == 3", "assert roman_to_integer('IX') == 9", "assert roman_to_integer('MCMXCIV') == 1994", "assert roman_to_integer('LVIII') == 58"]}
{"seq_id": 28558574996, "instruction": "Write a function to compress a string by counting the consecutive occurrences of each character and replacing it with the character followed by the count. If the compressed string is not smaller than the original string, return the original string.", "output": "Here is the code to solve this problem: \n```python\ndef string_compression(s):\n    compressed = \"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            compressed += s[i-1] + str(count)\n            count = 1\n    compressed += s[-1] + str(count)\n    return compressed if len(compressed) < len(s) else s\n```", "code": "def string_compression(s):\n    compressed = \"\"\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n        else:\n            compressed += s[i-1] + str(count)\n            count = 1\n    compressed += s[-1] + str(count)\n    return compressed if len(compressed) < len(s) else s", "entry_point": "string_compression", "testcase": ["assert string_compression(\"aabcccccaaa\") == \"a2b1c5a3\"", "assert string_compression(\"aabbcc\") == \"aabbcc\"", "assert string_compression(\"abcdef\") == \"abcdef\""]}
{"seq_id": 34075616195, "instruction": "Write a function to generate a list of all possible binary numbers with n digits.", "output": "Here is the code to solve this problem: \n```python\ndef generate_binary(n):\n    return [bin(i)[2:].zfill(n) for i in range(2**n)]\n```", "code": "def generate_binary(n):\n    return [bin(i)[2:].zfill(n) for i in range(2**n)]", "entry_point": "generate_binary", "testcase": ["assert generate_binary(4) == ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111']", "assert generate_binary(3) == ['000', '001', '010', '011', '100', '101', '110', '111']", "assert generate_binary(2) == ['00', '01', '10', '11']"]}
{"seq_id": 30372923239, "instruction": "Write a Python function to convert a given string to lowercase and remove any punctuation marks.", "output": "Here is the code to solve this problem: \n```python\nimport string\n\ndef clean_string(input_string):\n    translator = str.maketrans('', '', string.punctuation)\n    cleaned_string = input_string.translate(translator).lower()\n    return cleaned_string\n```", "code": "import string\n\ndef clean_string(input_string):\n    translator = str.maketrans('', '', string.punctuation)\n    cleaned_string = input_string.translate(translator).lower()\n    return cleaned_string", "entry_point": "clean_string", "testcase": ["assert clean_string(\"Python is fun!\") == \"python is fun\"", "assert clean_string(\"Hello, World!\") == \"hello world\"", "assert clean_string(\"Let's code!\") == \"lets code\""]}
{"seq_id": 71036930749, "instruction": "Write a python function to find the number of substrings that are palindromes in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef palindrome_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        total_count += expand_around_center(i, i)  # Odd length palindromes\n        total_count += expand_around_center(i, i + 1)  # Even length palindromes\n    return total_count\n```", "code": "def palindrome_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n\n    total_count = 0\n    for i in range(len(s)):\n        total_count += expand_around_center(i, i)  # Odd length palindromes\n        total_count += expand_around_center(i, i + 1)  # Even length palindromes\n    return total_count", "entry_point": "palindrome_substrings", "testcase": ["assert palindrome_substrings(\"racecar\") == 10", "assert palindrome_substrings(\"aaa\") == 6", "assert palindrome_substrings(\"abc\") == 3"]}
{"seq_id": 72817555477, "instruction": "Write a python function to find the length of the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_Substring(s):\n    seen = {}\n    start = 0\n    max_length = 0\n    for i, char in enumerate(s):\n        if char in seen and start <= seen[char]:\n            start = seen[char] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n        seen[char] = i\n    return max_length\n```", "code": "def longest_Substring(s):\n    seen = {}\n    start = 0\n    max_length = 0\n    for i, char in enumerate(s):\n        if char in seen and start <= seen[char]:\n            start = seen[char] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n        seen[char] = i\n    return max_length", "entry_point": "longest_Substring", "testcase": ["assert longest_Substring(\"abcabcbb\") == 3", "assert longest_Substring(\"bbbbb\") == 1", "assert longest_Substring(\"pwwkew\") == 3"]}
{"seq_id": 41956963941, "instruction": "Write a function to find the length of the longest substring that consists of the same character in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef longest_repeated_char_substring(str1):\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(str1)):\n        if str1[i] == str1[i-1]:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n    return max_len\n```", "code": "def longest_repeated_char_substring(str1):\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(str1)):\n        if str1[i] == str1[i-1]:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n    return max_len", "entry_point": "longest_repeated_char_substring", "testcase": ["assert longest_repeated_char_substring(\"aaabbcaaaa\")==4", "assert longest_repeated_char_substring(\"abcd\")==1", "assert longest_repeated_char_substring(\"abcccccdd\")==5"]}
{"seq_id": 35488624892, "instruction": "Write a function that receives a list of numbers and returns a list of their square roots, rounded to the nearest integer.", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef sqrt_round(numbers):\n    result = []\n    for num in numbers:\n        result.append(round(math.sqrt(num)))\n    return result\n```", "code": "import math\n\ndef sqrt_round(numbers):\n    result = []\n    for num in numbers:\n        result.append(round(math.sqrt(num)))\n    return result", "entry_point": "sqrt_round", "testcase": ["assert sqrt_round([36, 49, 64])==[6, 7, 8]", "assert sqrt_round([4, 16, 25])==[2, 4, 5]", "assert sqrt_round([1, 9, 2, 36])==[1, 3, 1, 6]"]}
{"seq_id": 15102746385, "instruction": "Design a Python function that calculates the difference between the highest and lowest values within a list of integers, and also, returns the highest value. The list can contain both positive and negative integers, and you can assume that it will always contain at least one element.", "output": "Here is the code to solve this problem: \n```python\ndef highest_difference(numbers):\n    max_val = max(numbers)\n    min_val = min(numbers)\n    return (max_val-min_val, max_val)\n```", "code": "def highest_difference(numbers):\n    max_val = max(numbers)\n    min_val = min(numbers)\n    return (max_val-min_val, max_val)", "entry_point": "highest_difference", "testcase": ["assert highest_difference([-1, -2, -3, -4, 0]) == (4,0)", "assert highest_difference([100, 200, 300, 400, 500]) == (400,500)", "assert highest_difference([-5, 4, 7, 15, -10]) == (25,15)"]}
{"seq_id": 6805304906, "instruction": "Write a python function to find the number of permutations of a given string consisting of distinct characters.", "output": "Here is the code to solve this problem: \n```python\nimport math \n\ndef string_permutation(str):\n    return math.factorial(len(str))\n```", "code": "import math \n\ndef string_permutation(str):\n    return math.factorial(len(str))", "entry_point": "string_permutation", "testcase": ["assert string_permutation(\"abcd\")==24", "assert string_permutation(\"abc\")==6", "assert string_permutation(\"012\")==6"]}
{"seq_id": 4902544745, "instruction": "Write a function to find the transpose of a matrix.", "output": "Here is the code to solve this problem: \n```python\ndef transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n```", "code": "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]", "entry_point": "transpose", "testcase": ["assert transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "assert transpose([[1]]) == [[1]]", "assert transpose([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]"]}
{"seq_id": 2881764627, "instruction": "Write a python function that takes in a list of integers and returns a list of tuples. Each tuple contains two elements: the first element is the product of all the even numbers in the list, and the second element is the product of all the odd numbers in the list. If there are no even or odd numbers in the list, the product for that category should be 1.", "output": "Here is the code to solve this problem: \n```python\ndef product_even_odd(numbers):\n    even_product = 1\n    odd_product = 1\n    for number in numbers:\n        if number % 2 == 0:\n            even_product *= number\n        else:\n            odd_product *= number\n    return (even_product, odd_product)\n```", "code": "def product_even_odd(numbers):\n    even_product = 1\n    odd_product = 1\n    for number in numbers:\n        if number % 2 == 0:\n            even_product *= number\n        else:\n            odd_product *= number\n    return (even_product, odd_product)", "entry_point": "product_even_odd", "testcase": ["assert product_even_odd([2, 3, 4, 5]) == (8, 15)", "assert product_even_odd([1, 3, 5, 7]) == (1, 105)", "assert product_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == (384, 105)", "assert product_even_odd([2, 4, 6, 8]) == (384, 1)"]}
{"seq_id": 35354271769, "instruction": "Write a python function to find the longest common subsequence (LCS) from two given strings.\n\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The longest common subsequence (LCS) problem is finding the longest subsequence present in both strings.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_subsequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[\"\" for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + str1[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], key=len)\n    \n    return dp[m][n]\n```", "code": "def longest_common_subsequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[\"\" for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + str1[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], key=len)\n    \n    return dp[m][n]", "entry_point": "longest_common_subsequence", "testcase": ["assert longest_common_subsequence(\"ABCDGH\", \"AEDFHR\") == \"ADH\"", "assert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\") == \"GTAB\"", "assert longest_common_subsequence(\"ABCBDAB\", \"BDCAB\") == \"BCAB\""]}
{"seq_id": 29696120534, "instruction": "Write a python function to find the minimum number of operations required to convert a given integer to 1. The allowed operations are:\n1. If the number is odd, you can subtract 1 from it.\n2. If the number is even, you can divide it by 2.", "output": "Here is the code to solve this problem: \n```python\ndef min_operations_to_one(num):\n    operations = 0\n    while num != 1:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = num - 1\n        operations += 1\n    return operations\n```", "code": "def min_operations_to_one(num):\n    operations = 0\n    while num != 1:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = num - 1\n        operations += 1\n    return operations", "entry_point": "min_operations_to_one", "testcase": ["assert min_operations_to_one(8) == 3", "assert min_operations_to_one(1024) == 10", "assert min_operations_to_one(123) == 11"]}
{"seq_id": 23981559224, "instruction": "Write a function to find the number of days between two dates.", "output": "Here is the code to solve this problem: \n```python\nfrom datetime import datetime\ndef diff_dates(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return abs(delta.days)\n```", "code": "from datetime import datetime\ndef diff_dates(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(date1, date_format)\n    b = datetime.strptime(date2, date_format)\n    delta = b - a\n    return abs(delta.days)", "entry_point": "diff_dates", "testcase": ["assert diff_dates(\"2020-01-01\", \"2020-01-05\") == 4", "assert diff_dates(\"2020-02-01\", \"2020-03-01\") == 29", "assert diff_dates(\"2020-01-01\", \"2021-01-01\") == 366"]}
{"seq_id": 30472626501, "instruction": "Write a python function to find the first duplicate number in a given list of numbers. The function should return the first repeated number in the list. If there is no duplicate, return -1.", "output": "Here is the code to solve this problem: \n```python\ndef find_first_duplicate(nums):\n    hash_set = set()\n    for num in nums:\n        if num in hash_set:\n            return num\n        hash_set.add(num)\n    return -1\n```", "code": "def find_first_duplicate(nums):\n    hash_set = set()\n    for num in nums:\n        if num in hash_set:\n            return num\n        hash_set.add(num)\n    return -1", "entry_point": "find_first_duplicate", "testcase": ["assert find_first_duplicate([1, 2, 3, 2, 1]) == 2", "assert find_first_duplicate([10, 11, 12, 13, 14]) == -1", "assert find_first_duplicate([4, 5, 6, 7, 8, 9, 5]) == 5"]}
{"seq_id": 29417625617, "instruction": "Write a function to find the median of two sorted arrays.", "output": "Here is the code to solve this problem: \n```python\ndef median_sorted_arrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length//2-1] + nums[length//2]) / 2\n    else:\n        return nums[length//2]\n```", "code": "def median_sorted_arrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length//2-1] + nums[length//2]) / 2\n    else:\n        return nums[length//2]", "entry_point": "median_sorted_arrays", "testcase": ["assert median_sorted_arrays([1,3], [2]) == 2.0", "assert median_sorted_arrays([0,0], [0,0]) == 0.0", "assert median_sorted_arrays([1,2], [3,4]) == 2.5"]}
{"seq_id": 13049619026, "instruction": "Write a python function to find the largest square containing only 1's and return its area in a binary matrix.", "output": "Here is the code to solve this problem: \n```python\ndef maximalSquare(matrix):\n    if not matrix: return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [0] * (n + 1)\n    max_side = 0\n    prev = 0\n    for i in range(m):\n        for j in range(n):\n            temp = dp[j + 1]\n            if matrix[i][j] == '1':\n                dp[j + 1] = min(dp[j], dp[j + 1], prev) + 1\n                max_side = max(max_side, dp[j + 1])\n            else:\n                dp[j + 1] = 0\n            prev = temp\n    return max_side * max_side\n```", "code": "def maximalSquare(matrix):\n    if not matrix: return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [0] * (n + 1)\n    max_side = 0\n    prev = 0\n    for i in range(m):\n        for j in range(n):\n            temp = dp[j + 1]\n            if matrix[i][j] == '1':\n                dp[j + 1] = min(dp[j], dp[j + 1], prev) + 1\n                max_side = max(max_side, dp[j + 1])\n            else:\n                dp[j + 1] = 0\n            prev = temp\n    return max_side * max_side", "entry_point": "maximalSquare", "testcase": ["assert maximalSquare([[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]) == 4", "assert maximalSquare([[\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\"]]) == 9", "assert maximalSquare([[\"0\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\"]]) == 0"]}
{"seq_id": 7754860580, "instruction": "Write a function that calculates the power of a given base raised to a given exponent using recursion.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_power(base, exponent):\n    if exponent == 0:\n        return 1\n    elif exponent > 0:\n        return base * calculate_power(base, exponent - 1)\n    else:\n        return 1 / (base * calculate_power(base, -exponent - 1))\n```", "code": "def calculate_power(base, exponent):\n    if exponent == 0:\n        return 1\n    elif exponent > 0:\n        return base * calculate_power(base, exponent - 1)\n    else:\n        return 1 / (base * calculate_power(base, -exponent - 1))", "entry_point": "calculate_power", "testcase": ["assert calculate_power(2, 3) == 8", "assert calculate_power(5, 2) == 25", "assert calculate_power(3, 0) == 1"]}
{"seq_id": 19161837001, "instruction": "Write a python function to find the largest square containing only 1's in a binary matrix and return its area.", "output": "Here is the code to solve this problem: \n```python\ndef largest_square(matrix):\n    if not matrix:\n        return 0\n    rows, cols = len(matrix), len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    max_side = 0\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_side = max(max_side, dp[i][j])\n    return max_side ** 2\n```", "code": "def largest_square(matrix):\n    if not matrix:\n        return 0\n    rows, cols = len(matrix), len(matrix[0])\n    dp = [[0] * cols for _ in range(rows)]\n    max_side = 0\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                max_side = max(max_side, dp[i][j])\n    return max_side ** 2", "entry_point": "largest_square", "testcase": ["assert largest_square([[1,0,1],[1,1,1],[0,1,1]]) == 4", "assert largest_square([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]) == 16", "assert largest_square([[0,0,0],[0,0,0],[0,0,0]]) == 0"]}
{"seq_id": 33180496241, "instruction": "Write a python function to find the number of unique permutations of a given string. The string may contain duplicate characters. The function should return the count of unique permutations.", "output": "Here is the code to solve this problem: \n```python\nfrom itertools import permutations\n\ndef unique_permutations_count(s: str) -> int:\n    unique_perms = set(''.join(p) for p in permutations(s))\n    return len(unique_perms)\n```", "code": "from itertools import permutations\n\ndef unique_permutations_count(s: str) -> int:\n    unique_perms = set(''.join(p) for p in permutations(s))\n    return len(unique_perms)", "entry_point": "unique_permutations_count", "testcase": ["assert unique_permutations_count(\"aaa\") == 1", "assert unique_permutations_count(\"abc\") == 6", "assert unique_permutations_count(\"aab\") == 3"]}
{"seq_id": 3472773214, "instruction": "Write a python function that checks if the given list of integers is a valid mountain array or not. A valid mountain array is defined as an array where it increases and then decreases, and has at least three elements.", "output": "Here is the code to solve this problem: \n```python\ndef is_mountain_array(arr):\n    if len(arr) < 3:\n        return False\n    peak = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            peak = i\n        else:\n            break\n    if peak == 0 or peak == len(arr) - 1:\n        return False\n    for i in range(peak, len(arr) - 1):\n        if arr[i] <= arr[i+1]:\n            return False\n    return True\n```", "code": "def is_mountain_array(arr):\n    if len(arr) < 3:\n        return False\n    peak = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            peak = i\n        else:\n            break\n    if peak == 0 or peak == len(arr) - 1:\n        return False\n    for i in range(peak, len(arr) - 1):\n        if arr[i] <= arr[i+1]:\n            return False\n    return True", "entry_point": "is_mountain_array", "testcase": ["assert is_mountain_array([3, 5, 5]) == False", "assert is_mountain_array([2, 1]) == False", "assert is_mountain_array([0, 3, 2, 1]) == True"]}
{"seq_id": 10742770477, "instruction": "Write a function to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\nThe degree of an array is defined as the maximum frequency of any one of its elements.\nYour function should return the shortest possible length of a (contiguous) subarray of nums, that has the same degree as nums.", "output": "Here is the code to solve this problem: \n```python\ndef find_shortest_sub_array(nums):\n    num_count = {}\n    first_seen = {}\n    last_seen = {}\n    for i, num in enumerate(nums):\n        if num not in num_count:\n            num_count[num] = 1\n            first_seen[num] = i\n        else:\n            num_count[num] += 1\n        last_seen[num] = i\n\n    max_freq = max(num_count.values())\n    shortest_subarray_length = float('inf')\n    for num, count in num_count.items():\n        if count == max_freq:\n            shortest_subarray_length = min(shortest_subarray_length, last_seen[num] - first_seen[num] + 1)\n\n    return shortest_subarray_length\n```", "code": "def find_shortest_sub_array(nums):\n    num_count = {}\n    first_seen = {}\n    last_seen = {}\n    for i, num in enumerate(nums):\n        if num not in num_count:\n            num_count[num] = 1\n            first_seen[num] = i\n        else:\n            num_count[num] += 1\n        last_seen[num] = i\n\n    max_freq = max(num_count.values())\n    shortest_subarray_length = float('inf')\n    for num, count in num_count.items():\n        if count == max_freq:\n            shortest_subarray_length = min(shortest_subarray_length, last_seen[num] - first_seen[num] + 1)\n\n    return shortest_subarray_length", "entry_point": "find_shortest_sub_array", "testcase": ["assert find_shortest_sub_array([1, 2, 2, 3, 1, 4, 2]) == 6", "assert find_shortest_sub_array([1, 2, 2, 3, 1]) == 2", "assert find_shortest_sub_array([1, 2, 3, 4]) == 1"]}
{"seq_id": 32907098546, "instruction": "Write a python function to find the length of the longest substring without repeating characters in a given string.", "output": "Here is the code to solve this problem: \n```python\ndef length_of_longest_substring(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length\n```", "code": "def length_of_longest_substring(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    char_map = {}\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        if s[right] in char_map:\n            left = max(left, char_map[s[right]] + 1)\n        char_map[s[right]] = right\n        max_length = max(max_length, right - left + 1)\n    return max_length", "entry_point": "length_of_longest_substring", "testcase": ["assert length_of_longest_substring(\"pwwkew\") == 3", "assert length_of_longest_substring(\"bbbbb\") == 1", "assert length_of_longest_substring(\"abcabcbb\") == 3"]}
{"seq_id": 42132170131, "instruction": "Write a function that returns the maximum value in a list after applying a given function to each element of the list.", "output": "Here is the code to solve this problem: \n```python\ndef max_with_function(func, lst):\n    return max(map(func, lst))\n```", "code": "def max_with_function(func, lst):\n    return max(map(func, lst))", "entry_point": "max_with_function", "testcase": ["assert max_with_function(lambda x: x + 10, [5, 15, 25, 35]) == 45", "assert max_with_function(lambda x: x * x, [1, 2, 3, 4]) == 16", "assert max_with_function(lambda x: x - 10, [20, 30, 40, 50]) == 40"]}
{"seq_id": 10675894393, "instruction": "Write a function to check if a given sequence of bytes is a valid UTF-8 encoding.\n\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\n\n- For a 1-byte character, the first bit is a 0, followed by its Unicode code.\n- For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\n\nThis is how the UTF-8 encoding would work:\n\n   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\nNote:\n- The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\n- You may assume the input array contains at least 1 byte and is at most 4 bytes.", "output": "Here is the code to solve this problem: \n```python\ndef is_valid_utf8(data):\n    def check_bytes(start, length):\n        for i in range(start + 1, start + length + 1):\n            if i >= len(data) or (data[i] & 0xC0) != 0x80:  # Check if it's a continuation byte\n                return False\n        return True\n\n    i = 0\n    while i < len(data):\n        if (data[i] & 0x80) == 0:  # 1-byte character\n            i += 1\n        elif (data[i] & 0xE0) == 0xC0:  # 2-byte character\n            if not check_bytes(i, 1):\n                return False\n            i += 2\n        elif (data[i] & 0xF0) == 0xE0:  # 3-byte character\n            if not check_bytes(i, 2):\n                return False\n            i += 3\n        elif (data[i] & 0xF8) == 0xF0:  # 4-byte character\n            if not check_bytes(i, 3):\n                return False\n            i += 4\n        else:\n            return False\n    return True\n```", "code": "def is_valid_utf8(data):\n    def check_bytes(start, length):\n        for i in range(start + 1, start + length + 1):\n            if i >= len(data) or (data[i] & 0xC0) != 0x80:  # Check if it's a continuation byte\n                return False\n        return True\n\n    i = 0\n    while i < len(data):\n        if (data[i] & 0x80) == 0:  # 1-byte character\n            i += 1\n        elif (data[i] & 0xE0) == 0xC0:  # 2-byte character\n            if not check_bytes(i, 1):\n                return False\n            i += 2\n        elif (data[i] & 0xF0) == 0xE0:  # 3-byte character\n            if not check_bytes(i, 2):\n                return False\n            i += 3\n        elif (data[i] & 0xF8) == 0xF0:  # 4-byte character\n            if not check_bytes(i, 3):\n                return False\n            i += 4\n        else:\n            return False\n    return True", "entry_point": "is_valid_utf8", "testcase": ["assert is_valid_utf8([197, 130, 1]) == True", "assert is_valid_utf8([235, 140, 4]) == False", "assert is_valid_utf8([250, 145, 145, 145, 145]) == False"]}
{"seq_id": 5176331804, "instruction": "Write a function to find the \"n\" largest elements in a given array. The function should return these elements in an ascending order.", "output": "Here is the code to solve this problem: \n```python\ndef find_n_largest_elements(arr, n):\n    # Use the heap queue algorithm (also known as the priority queue algorithm)\n    # to find the 'n' largest elements in the array 'arr'\n    import heapq\n    largest_elements = heapq.nlargest(n, arr)\n    # Sort these 'n' largest elements in ascending order before returning them\n    largest_elements.sort()\n    return largest_elements\n```", "code": "def find_n_largest_elements(arr, n):\n    # Use the heap queue algorithm (also known as the priority queue algorithm)\n    # to find the 'n' largest elements in the array 'arr'\n    import heapq\n    largest_elements = heapq.nlargest(n, arr)\n    # Sort these 'n' largest elements in ascending order before returning them\n    largest_elements.sort()\n    return largest_elements", "entry_point": "find_n_largest_elements", "testcase": ["assert find_n_largest_elements([10, 22, 7, 15, 3], 2) == [15, 22]", "assert find_n_largest_elements([5, 5, 5, 5, 5], 4) == [5, 5, 5, 5]", "assert find_n_largest_elements([1, 2, 3, 4, 5], 3) == [3, 4, 5]"]}
{"seq_id": 8692694212, "instruction": "Write a function to find the longest decreasing subsequence length in a given list of integers.", "output": "Here is the code to solve this problem: \n```python\ndef longest_decreasing_subsequence(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n\n    n = len(nums)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```", "code": "def longest_decreasing_subsequence(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n\n    n = len(nums)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "entry_point": "longest_decreasing_subsequence", "testcase": ["assert longest_decreasing_subsequence([4,3,2,1])==4", "assert longest_decreasing_subsequence([5,4,3,2,1,2,3,4,5])==5", "assert longest_decreasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18])==4"]}
{"seq_id": 21452702947, "instruction": "Write a python function that takes a list of integers as input and returns the product of all even numbers in the list.", "output": "Here is the code to solve this problem: \n```python\ndef product_of_evens(input_list):\n    product = 1\n    for num in input_list:\n        if num % 2 == 0:\n            product *= num\n    return product\n```", "code": "def product_of_evens(input_list):\n    product = 1\n    for num in input_list:\n        if num % 2 == 0:\n            product *= num\n    return product", "entry_point": "product_of_evens", "testcase": ["assert product_of_evens([1, 3, 5, 7, 9]) == 1", "assert product_of_evens([10, 12, 14, 16]) == 26880", "assert product_of_evens([2, 3, 4, 5, 6]) == 48"]}
{"seq_id": 37936506770, "instruction": "Write a function that takes a list of numbers and returns a new list with the numbers rounded to the nearest integer.", "output": "Here is the code to solve this problem: \n```python\ndef round_numbers(numbers):\n    return [round(number) for number in numbers]\n```", "code": "def round_numbers(numbers):\n    return [round(number) for number in numbers]", "entry_point": "round_numbers", "testcase": ["assert round_numbers([1.2, 2.5, 3.7, 4.4]) == [1, 2, 4, 4]", "assert round_numbers([0.1, 0.9, 1.0, 2.0]) == [0, 1, 1, 2]", "assert round_numbers([5.5, 6.5, 7.5, 8.5]) == [6, 6, 8, 8]"]}
{"seq_id": 24980677611, "instruction": "Write a function to find the most frequent elements in a list of lists and return them as a dictionary with their counts.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\ndef most_frequent_elements(lists):\n    flat_list = [item for sublist in lists for item in sublist]\n    return dict(Counter(flat_list))\n```", "code": "from collections import Counter\ndef most_frequent_elements(lists):\n    flat_list = [item for sublist in lists for item in sublist]\n    return dict(Counter(flat_list))", "entry_point": "most_frequent_elements", "testcase": ["assert most_frequent_elements([[1,2,3], [2,3,4], [3,4,5]])=={1: 1, 2: 2, 3: 3, 4: 2, 5: 1}", "assert most_frequent_elements([[10,20,30], [20,30,40], [30,40,50]])=={10: 1, 20: 2, 30: 3, 40: 2, 50: 1}", "assert most_frequent_elements([[1], [1], [2]])=={1: 2, 2: 1}"]}
{"seq_id": 42165012643, "instruction": "Write a function to create a dictionary from two lists, where the first list contains keys and the second list contains values.", "output": "Here is the code to solve this problem: \n```python\ndef create_dict(keys, values):\n    return dict(zip(keys, values))\n```", "code": "def create_dict(keys, values):\n    return dict(zip(keys, values))", "entry_point": "create_dict", "testcase": ["assert create_dict(['one', 'two', 'three'], [1, 2, 3]) == {'one': 1, 'two': 2, 'three': 3}", "assert create_dict(['a', 'b', 'c'], [1, 2, 3]) == {'a': 1, 'b': 2, 'c': 3}", "assert create_dict(['x', 'y', 'z'], [10, 20, 30]) == {'x': 10, 'y': 20, 'z': 30}"]}
{"seq_id": 19849900506, "instruction": "Write a python function to find the number of possible non-empty sequences of characters you can make using the letters printed on a list of tiles. Each tile has one letter printed on it.", "output": "Here is the code to solve this problem: \n```python\ndef num_tile_possibilities(tiles):\n    def dfs(path, remaining):\n        if path not in used:\n            if path:\n                used.add(path)\n            for i in range(len(remaining)):\n                dfs(path + remaining[i], remaining[:i] + remaining[i+1:])\n                \n    used = set()\n    dfs('', tiles)\n    return len(used)\n```", "code": "def num_tile_possibilities(tiles):\n    def dfs(path, remaining):\n        if path not in used:\n            if path:\n                used.add(path)\n            for i in range(len(remaining)):\n                dfs(path + remaining[i], remaining[:i] + remaining[i+1:])\n                \n    used = set()\n    dfs('', tiles)\n    return len(used)", "entry_point": "num_tile_possibilities", "testcase": ["assert num_tile_possibilities([\"A\",\"A\",\"A\",\"B\",\"B\",\"C\"]) == 188", "assert num_tile_possibilities([\"A\",\"A\",\"B\"]) == 8", "assert num_tile_possibilities([\"V\"]) == 1"]}
{"seq_id": 25136157121, "instruction": "Write a python function to find the number of times a given value increases in a list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef count_increases(nums):\n  return len(list(filter(lambda x: x[0] < x[1], zip(nums, nums[1:]))))\n```", "code": "def count_increases(nums):\n  return len(list(filter(lambda x: x[0] < x[1], zip(nums, nums[1:]))))", "entry_point": "count_increases", "testcase": ["assert count_increases([5, 4, 3, 2, 1]) == 0", "assert count_increases([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8", "assert count_increases([1, 2, 3, 2, 5, 4, 7]) == 4"]}
{"seq_id": 22665716359, "instruction": "Write a function that takes a string as input and returns the number of words in the string that are palindromes.", "output": "Here is the code to solve this problem: \n```python\ndef palindrome_word_count(s):\n    words = s.split()\n    count = 0\n    for word in words:\n        if word == word[::-1]:\n            count += 1\n    return count\n```", "code": "def palindrome_word_count(s):\n    words = s.split()\n    count = 0\n    for word in words:\n        if word == word[::-1]:\n            count += 1\n    return count", "entry_point": "palindrome_word_count", "testcase": ["assert palindrome_word_count('python programming code') == 0", "assert palindrome_word_count('racecar level madam') == 3", "assert palindrome_word_count('deed noon civic radar') == 4"]}
{"seq_id": 3598359435, "instruction": "Write a python function to convert a given string of lowercase letters into their corresponding position in the alphabet. Assume 'a' corresponds to 1, 'b' to 2, and so forth.", "output": "Here is the code to solve this problem: \n```python\ndef letter_to_position(s: str) -> int:\n    position, result = 0, 0\n    for char in s:\n        position = ord(char) - ord('a') + 1\n        result = result * 10 + position\n    return result\n```", "code": "def letter_to_position(s: str) -> int:\n    position, result = 0, 0\n    for char in s:\n        position = ord(char) - ord('a') + 1\n        result = result * 10 + position\n    return result", "entry_point": "letter_to_position", "testcase": ["assert letter_to_position(\"def\") == 456", "assert letter_to_position(\"abc\") == 123", "assert letter_to_position(\"ghi\") == 789"]}
{"seq_id": 12664172440, "instruction": "Write a python function to reverse the words in a sentence but keep the order of the words.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_sentence_words(sentence):\n    return ' '.join(word[::-1] for word in sentence.split(' '))\n```", "code": "def reverse_sentence_words(sentence):\n    return ' '.join(word[::-1] for word in sentence.split(' '))", "entry_point": "reverse_sentence_words", "testcase": ["assert reverse_sentence_words(\"Hello World\") == \"olleH dlroW\"", "assert reverse_sentence_words(\"Python Programming\") == \"nohtyP gnimmargorP\"", "assert reverse_sentence_words(\"I love coding\") == \"I evol gnidoc\""]}
{"seq_id": 43339402797, "instruction": "Write a function to reverse the elements of a list in groups of k.", "output": "Here is the code to solve this problem: \n```python\ndef reverse_in_groups(lst, k):\n    for i in range(0, len(lst), k):\n        lst[i:i+k] = lst[i:i+k][::-1]\n    return lst\n```", "code": "def reverse_in_groups(lst, k):\n    for i in range(0, len(lst), k):\n        lst[i:i+k] = lst[i:i+k][::-1]\n    return lst", "entry_point": "reverse_in_groups", "testcase": ["assert reverse_in_groups([1, 2, 3, 4, 5], 2) == [2, 1, 4, 3, 5]", "assert reverse_in_groups([1, 2, 3, 4, 5, 6, 7], 3) == [3, 2, 1, 6, 5, 4, 7]", "assert reverse_in_groups([1, 2, 3, 4, 5, 6], 3) == [3, 2, 1, 6, 5, 4]"]}
{"seq_id": 30898268513, "instruction": "Write a function to find the longest palindromic substring in a given string. A palindromic string is a string that reads the same backward as forward.", "output": "Here is the code to solve this problem: \n```python\ndef find_longest_palindrome(s):\n    if len(s) <= 1:\n        return s\n\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    longest = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        palindrome1 = expand_around_center(i, i)\n        # Even length palindromes\n        palindrome2 = expand_around_center(i, i + 1)\n\n        # Update the longest palindrome found\n        longer_palindrome = palindrome1 if len(palindrome1) > len(palindrome2) else palindrome2\n        if len(longer_palindrome) > len(longest):\n            longest = longer_palindrome\n\n    return longest\n```", "code": "def find_longest_palindrome(s):\n    if len(s) <= 1:\n        return s\n\n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    longest = \"\"\n    for i in range(len(s)):\n        # Odd length palindromes\n        palindrome1 = expand_around_center(i, i)\n        # Even length palindromes\n        palindrome2 = expand_around_center(i, i + 1)\n\n        # Update the longest palindrome found\n        longer_palindrome = palindrome1 if len(palindrome1) > len(palindrome2) else palindrome2\n        if len(longer_palindrome) > len(longest):\n            longest = longer_palindrome\n\n    return longest", "entry_point": "find_longest_palindrome", "testcase": ["assert find_longest_palindrome(\"a\")==\"a\"", "assert find_longest_palindrome(\"cbbd\")==\"bb\"", "assert find_longest_palindrome(\"babad\")==\"bab\""]}
{"seq_id": 3223637778, "instruction": "Write a python function to find the shortest path from a source node to a destination node in a weighted directed graph, with at most K stops. If there is no such path, return -1.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import defaultdict\n\ndef find_cheapest_price(n, flights, src, dst, K):\n    distances = [float('inf')] * n\n    distances[src] = 0\n\n    for i in range(K + 1):\n        temp = distances[:]\n\n        for flight in flights:\n            temp[flight[1]] = min(temp[flight[1]], distances[flight[0]] + flight[2])\n\n        distances = temp\n\n    if distances[dst] == float('inf'):\n        return -1\n    else:\n        return distances[dst]\n```", "code": "from collections import defaultdict\n\ndef find_cheapest_price(n, flights, src, dst, K):\n    distances = [float('inf')] * n\n    distances[src] = 0\n\n    for i in range(K + 1):\n        temp = distances[:]\n\n        for flight in flights:\n            temp[flight[1]] = min(temp[flight[1]], distances[flight[0]] + flight[2])\n\n        distances = temp\n\n    if distances[dst] == float('inf'):\n        return -1\n    else:\n        return distances[dst]", "entry_point": "find_cheapest_price", "testcase": ["assert find_cheapest_price(3, [[0,1,100],[1,2,100],[0,2,500]], 0, 2, 0) == 500", "assert find_cheapest_price(4, [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], 0, 3, 1) == 700", "assert find_cheapest_price(3, [[0,1,100],[1,2,100],[0,2,500]], 0, 2, 1) == 200"]}
{"seq_id": 684511967, "instruction": "Write a function to check if a list of points is symmetrically distributed around the y-axis.", "output": "Here is the code to solve this problem: \n```python\ndef is_symmetric_around_y_axis(points):\n    max_val, min_val = float(\"-inf\"), float(\"inf\")\n    dic = {}\n    for p in points:\n        max_val = max(max_val, p[0])\n        min_val = min(min_val, p[0])\n        dic[str(p[0]) + \":\" + str(p[1])] = 1\n\n    mid_val = (min_val + max_val) / 2\n    for p in points:\n        temp_str = str(-p[0]) + \":\" + str(p[1])\n        if temp_str not in dic:\n            return False\n\n    return True\n```", "code": "def is_symmetric_around_y_axis(points):\n    max_val, min_val = float(\"-inf\"), float(\"inf\")\n    dic = {}\n    for p in points:\n        max_val = max(max_val, p[0])\n        min_val = min(min_val, p[0])\n        dic[str(p[0]) + \":\" + str(p[1])] = 1\n\n    mid_val = (min_val + max_val) / 2\n    for p in points:\n        temp_str = str(-p[0]) + \":\" + str(p[1])\n        if temp_str not in dic:\n            return False\n\n    return True", "entry_point": "is_symmetric_around_y_axis", "testcase": ["assert is_symmetric_around_y_axis([[0,0]])==True", "assert is_symmetric_around_y_axis([[1,1], [-1,1], [2,2], [-2,2]])==True", "assert is_symmetric_around_y_axis([[1,2], [-1,3]])==False"]}
{"seq_id": 6051322307, "instruction": "Write a python function to find the number of islands in a given grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.", "output": "Here is the code to solve this problem: \n```python\ndef countIslands(grid):\n    def dfs(grid, i, j):\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n            return\n        grid[i][j] = 0\n        dfs(grid, i+1, j)\n        dfs(grid, i-1, j)\n        dfs(grid, i, j+1)\n        dfs(grid, i, j-1)\n    \n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count\n```", "code": "def countIslands(grid):\n    def dfs(grid, i, j):\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n            return\n        grid[i][j] = 0\n        dfs(grid, i+1, j)\n        dfs(grid, i-1, j)\n        dfs(grid, i, j+1)\n        dfs(grid, i, j-1)\n    \n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count", "entry_point": "countIslands", "testcase": ["assert countIslands([[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]]) == 1", "assert countIslands([[1,1,0,1,1],[1,0,0,0,0],[0,0,0,0,1],[1,1,0,1,1]]) == 4", "assert countIslands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 3"]}
{"seq_id": 2593989530, "instruction": "Write a function that finds the longest common subsequence (LCS) between two strings. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.", "output": "Here is the code to solve this problem: \n```python\ndef longest_common_subsequence(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[None]*(n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n```", "code": "def longest_common_subsequence(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[None]*(n+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]", "entry_point": "longest_common_subsequence", "testcase": ["assert longest_common_subsequence(\"ABC\", \"AC\") == 2", "assert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\") == 4", "assert longest_common_subsequence(\"ABCBDAB\", \"BDCAB\") == 4"]}
{"seq_id": 17771320886, "instruction": "Write a python function to find the minimum number of swaps required to sort an array.", "output": "Here is the code to solve this problem: \n```python\ndef min_swap_sort(arr):\n    n = len(arr)\n    arr_pos = [*enumerate(arr)]\n    arr_pos.sort(key=lambda it: it[1])\n    vis = {k: False for k in range(n)}\n    ans = 0\n\n    for i in range(n):\n        if vis[i] or arr_pos[i][0] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arr_pos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans\n```", "code": "def min_swap_sort(arr):\n    n = len(arr)\n    arr_pos = [*enumerate(arr)]\n    arr_pos.sort(key=lambda it: it[1])\n    vis = {k: False for k in range(n)}\n    ans = 0\n\n    for i in range(n):\n        if vis[i] or arr_pos[i][0] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arr_pos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans", "entry_point": "min_swap_sort", "testcase": ["assert min_swap_sort([10, 19, 6, 3, 5]) == 2", "assert min_swap_sort([1, 5, 4, 3, 2]) == 2", "assert min_swap_sort([4, 3, 2, 1]) == 2"]}
{"seq_id": 35023147245, "instruction": "Write a function that checks if a given string represents an additive number. An additive number is a string whose digits can form an additive sequence. The first two numbers in the sequence should be positive integers. Each subsequent number in the sequence should be the sum of the previous two. The entire string should be completely used in the sequence, with no leading zeros allowed in any of the numbers except the number zero itself.", "output": "Here is the code to solve this problem: \n```python\ndef is_additive_number(num):\n    ans = []\n    numLen = len(num)\n    def backtrack(ind):\n        if ind >= numLen:\n            return len(ans) > 2\n                \n        for i in range(ind+1, numLen+1):\n            val = int(num[ind: i])\n            if (num[ind] != \"0\" or val == 0) and (len(ans) < 2 or ans[-1] + ans[-2] == val):\n                ans.append(val)\n                if backtrack(i):\n                    return True\n                ans.pop()\n        return False\n    return backtrack(0)\n```", "code": "def is_additive_number(num):\n    ans = []\n    numLen = len(num)\n    def backtrack(ind):\n        if ind >= numLen:\n            return len(ans) > 2\n                \n        for i in range(ind+1, numLen+1):\n            val = int(num[ind: i])\n            if (num[ind] != \"0\" or val == 0) and (len(ans) < 2 or ans[-1] + ans[-2] == val):\n                ans.append(val)\n                if backtrack(i):\n                    return True\n                ans.pop()\n        return False\n    return backtrack(0)", "entry_point": "is_additive_number", "testcase": ["assert is_additive_number(\"112358\") == True", "assert is_additive_number(\"199100199\") == True", "assert is_additive_number(\"1023\") == False", "assert is_additive_number(\"306090120\") == False"]}
{"seq_id": 11232215437, "instruction": "Write a python function to find the maximum number of overlapping intervals from a given list of intervals.", "output": "Here is the code to solve this problem: \n```python\ndef max_overlap(intervals):\n    points = []\n    for start, end in intervals:\n        points.append((start, 1))\n        points.append((end, -1))\n    points.sort()\n    max_overlap, current_overlap = 0, 0\n    for _, delta in points:\n        current_overlap += delta\n        max_overlap = max(max_overlap, current_overlap)\n    return max_overlap\n```", "code": "def max_overlap(intervals):\n    points = []\n    for start, end in intervals:\n        points.append((start, 1))\n        points.append((end, -1))\n    points.sort()\n    max_overlap, current_overlap = 0, 0\n    for _, delta in points:\n        current_overlap += delta\n        max_overlap = max(max_overlap, current_overlap)\n    return max_overlap", "entry_point": "max_overlap", "testcase": ["assert max_overlap([(1, 5), (2, 6), (3, 7), (4, 8)]) == 4", "assert max_overlap([(1, 2), (3, 4), (5, 6)]) == 1", "assert max_overlap([(1, 3), (2, 4), (5, 6), (7, 9)]) == 2"]}
{"seq_id": 74578562437, "instruction": "Write a python function to find the minimum window substring of `s` that contains all the characters of `t`.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef min_window_substring(s, t):\n    if not t or not s:\n        return ''\n\n    dict_t = Counter(t)\n    required = len(dict_t)\n    l, r = 0, 0\n    formed = 0\n    window_counts = {}\n\n    ans = float(\"inf\"), None, None\n    while r < len(s):\n        character = s[r]\n        window_counts[character] = window_counts.get(character, 0) + 1\n\n        if character in dict_t and window_counts[character] == dict_t[character]:\n            formed += 1\n\n        while l <= r and formed == required:\n            character = s[l]\n\n            if r - l + 1 < ans[0]:\n                ans = (r - l + 1, l, r)\n\n            window_counts[character] -= 1\n            if character in dict_t and window_counts[character] < dict_t[character]:\n                formed -= 1\n\n            l += 1    \n\n        r += 1    \n\n    return '' if ans[0] == float(\"inf\") else s[ans[1] : ans[2] + 1]\n```", "code": "from collections import Counter\n\ndef min_window_substring(s, t):\n    if not t or not s:\n        return ''\n\n    dict_t = Counter(t)\n    required = len(dict_t)\n    l, r = 0, 0\n    formed = 0\n    window_counts = {}\n\n    ans = float(\"inf\"), None, None\n    while r < len(s):\n        character = s[r]\n        window_counts[character] = window_counts.get(character, 0) + 1\n\n        if character in dict_t and window_counts[character] == dict_t[character]:\n            formed += 1\n\n        while l <= r and formed == required:\n            character = s[l]\n\n            if r - l + 1 < ans[0]:\n                ans = (r - l + 1, l, r)\n\n            window_counts[character] -= 1\n            if character in dict_t and window_counts[character] < dict_t[character]:\n                formed -= 1\n\n            l += 1    \n\n        r += 1    \n\n    return '' if ans[0] == float(\"inf\") else s[ans[1] : ans[2] + 1]", "entry_point": "min_window_substring", "testcase": ["assert min_window_substring(\"ADOBECODEBANC\", \"ABC\") == \"BANC\"", "assert min_window_substring(\"a\", \"aa\") == \"\"", "assert min_window_substring(\"cabwefgewcwaefgcf\", \"cae\") == \"cwae\""]}
{"seq_id": 15210894809, "instruction": "Write a function to find the minimum number of moves required to reach the destination on an infinite number line. You start at position 0 and during the ith move, you take i steps in the chosen direction (left or right). The function should return the minimum number of moves required to reach the target position.", "output": "Here is the code to solve this problem: \n```python\ndef min_moves_to_target(target: int) -> int:\n    target = abs(target)\n    s = n = 0\n    while s < target or (s - target) % 2:  # \u6ca1\u6709\u5230\u8fbe\uff08\u8d8a\u8fc7\uff09\u7ec8\u70b9\uff0c\u6216\u8005\u76f8\u8ddd\u5947\u6570\n        n += 1\n        s += n\n    return n\n```", "code": "def min_moves_to_target(target: int) -> int:\n    target = abs(target)\n    s = n = 0\n    while s < target or (s - target) % 2:  # \u6ca1\u6709\u5230\u8fbe\uff08\u8d8a\u8fc7\uff09\u7ec8\u70b9\uff0c\u6216\u8005\u76f8\u8ddd\u5947\u6570\n        n += 1\n        s += n\n    return n", "entry_point": "min_moves_to_target", "testcase": ["assert min_moves_to_target(3) == 2", "assert min_moves_to_target(2) == 3", "assert min_moves_to_target(-3) == 2"]}
{"seq_id": 29878946200, "instruction": "Write a python function that takes a string and returns the string after removing all adjacent duplicates. If a character is repeated more than twice consecutively, only the first occurrence is kept.", "output": "Here is the code to solve this problem: \n```python\ndef remove_adjacent_duplicates(s):\n    result = []\n    for char in s:\n        if result and result[-1] == char:\n            result.pop()\n        else:\n            result.append(char)\n    return ''.join(result)\n```", "code": "def remove_adjacent_duplicates(s):\n    result = []\n    for char in s:\n        if result and result[-1] == char:\n            result.pop()\n        else:\n            result.append(char)\n    return ''.join(result)", "entry_point": "remove_adjacent_duplicates", "testcase": ["assert remove_adjacent_duplicates(\"abbaca\") == \"ca\"", "assert remove_adjacent_duplicates(\"azxxzy\") == \"ay\"", "assert remove_adjacent_duplicates(\"aabbcc\") == \"\""]}
{"seq_id": 73482474995, "instruction": "Write a python function to find the maximum amount of money you can rob without alerting the police. You cannot rob two adjacent houses.", "output": "Here is the code to solve this problem: \n```python\ndef max_robbery(houses):\n    def rob(houses):\n        dp = [0] * len(houses)\n        dp[0] = houses[0]\n        dp[1] = max(houses[0], houses[1])\n        for i in range(2, len(houses)):\n            dp[i] = max(dp[i-1], dp[i-2] + houses[i])\n        return dp[-1]\n\n    if len(houses) == 1:\n        return houses[0]\n    return max(rob(houses[:-1]), rob(houses[1:]))\n```", "code": "def max_robbery(houses):\n    def rob(houses):\n        dp = [0] * len(houses)\n        dp[0] = houses[0]\n        dp[1] = max(houses[0], houses[1])\n        for i in range(2, len(houses)):\n            dp[i] = max(dp[i-1], dp[i-2] + houses[i])\n        return dp[-1]\n\n    if len(houses) == 1:\n        return houses[0]\n    return max(rob(houses[:-1]), rob(houses[1:]))", "entry_point": "max_robbery", "testcase": ["assert max_robbery([1, 2, 3, 1]) == 4", "assert max_robbery([2, 3, 2]) == 3", "assert max_robbery([1, 2, 3]) == 3"]}
{"seq_id": 14668901899, "instruction": "Write a python function to sort a list of tuples based on the second element of the tuple.", "output": "Here is the code to solve this problem: \n```python\ndef sort_tuple_list(lst, n):\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j][1] > lst[j+1][1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n```", "code": "def sort_tuple_list(lst, n):\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j][1] > lst[j+1][1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst", "entry_point": "sort_tuple_list", "testcase": ["assert sort_tuple_list([(4, 5), (2, 2), (3, 3)], 3) == [(2, 2), (3, 3), (4, 5)]", "assert sort_tuple_list([(1, 1), (2, 4), (3, 3), (4, 2)], 4) == [(1, 1), (4, 2), (3, 3), (2, 4)]", "assert sort_tuple_list([(1, 3), (3, 2), (2, 1)], 3) == [(2, 1), (3, 2), (1, 3)]"]}
{"seq_id": 4303439338, "instruction": "Write a python function that simulates a simple vending machine. It takes an item list and a coin as input and returns the selected item and the change if the amount is sufficient, or an error message otherwise.\n\nThe vending machine has the following items: \n1. Coke: $1\n2. Candy: $0.5\n3. Chips: $0.75", "output": "Here is the code to solve this problem: \n```python\ndef vending_machine(items, coin):\n    item_prices = {\"Coke\": 1, \"Candy\": 0.5, \"Chips\": 0.75}\n    for item in items:\n        if coin >= item_prices[item]:\n            change = round(coin - item_prices[item], 2)\n            return (item, change)\n    return (\"Insufficient funds.\")\n```", "code": "def vending_machine(items, coin):\n    item_prices = {\"Coke\": 1, \"Candy\": 0.5, \"Chips\": 0.75}\n    for item in items:\n        if coin >= item_prices[item]:\n            change = round(coin - item_prices[item], 2)\n            return (item, change)\n    return (\"Insufficient funds.\")", "entry_point": "vending_machine", "testcase": ["assert vending_machine([\"Coke\", \"Candy\", \"Chips\"], 0.6) == (\"Candy\", 0.1)", "assert vending_machine([\"Coke\", \"Candy\", \"Chips\"], 1) == (\"Coke\", 0)", "assert vending_machine([\"Coke\", \"Candy\", \"Chips\"], 0.5) == (\"Candy\", 0)", "assert vending_machine([\"Coke\", \"Candy\", \"Chips\"], 0.25) == (\"Insufficient funds.\")"]}
{"seq_id": 24461795396, "instruction": "Write a python function that returns the largest word in a given sentence. If there are multiple words with the same maximum length, return the one that appears last in the sentence. If the sentence is empty, return an empty string.", "output": "Here is the code to solve this problem: \n```python\ndef largest_word(sentence):\n    words = sentence.split()\n    if not words:\n        return \"\"\n    longest_word = max(words, key=len)\n    for word in reversed(words):\n        if len(word) == len(longest_word):\n            return word\n\n# Test cases\nassert largest_word(\"The quick brown fox jumps over the lazy dog\") == \"jumps\"\nassert largest_word(\"Lorem ipsum dolor sit amet consectetur adipiscing elit\") == \"consectetur\"\nassert largest_word(\"Hello World\") == \"World\"\nassert largest_word(\"\") == \"\"\n```", "code": "def largest_word(sentence):\n    words = sentence.split()\n    if not words:\n        return \"\"\n    longest_word = max(words, key=len)\n    for word in reversed(words):\n        if len(word) == len(longest_word):\n            return word\n\n# Test cases\nassert largest_word(\"The quick brown fox jumps over the lazy dog\") == \"jumps\"\nassert largest_word(\"Lorem ipsum dolor sit amet consectetur adipiscing elit\") == \"consectetur\"\nassert largest_word(\"Hello World\") == \"World\"\nassert largest_word(\"\") == \"\"", "entry_point": "largest_word", "testcase": ["assert largest_word(\"The quick brown fox jumps over the lazy dog\") == \"jumps\"", "assert largest_word(\"Lorem ipsum dolor sit amet consectetur adipiscing elit\") == \"consectetur\"", "assert largest_word(\"\") == \"\"", "assert largest_word(\"Hello World\") == \"World\""]}
{"seq_id": 72445647759, "instruction": "Write a function to find the median of two sorted arrays of equal length.", "output": "Here is the code to solve this problem: \n```python\ndef median_sorted_arrays(arr1, arr2):\n    merged_arr = []\n    i, j = 0, 0\n\n    # Merge the two arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Add remaining elements from arr1\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n\n    # Add remaining elements from arr2\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n\n    n = len(merged_arr)\n    if n % 2 == 0:\n        return (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        return merged_arr[n//2]\n```", "code": "def median_sorted_arrays(arr1, arr2):\n    merged_arr = []\n    i, j = 0, 0\n\n    # Merge the two arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Add remaining elements from arr1\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n\n    # Add remaining elements from arr2\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n\n    n = len(merged_arr)\n    if n % 2 == 0:\n        return (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        return merged_arr[n//2]", "entry_point": "median_sorted_arrays", "testcase": ["assert median_sorted_arrays([1,2,3,4],[5,6,7,8])==4.5", "assert median_sorted_arrays([1,3,5,7],[2,4,6,8])==4.5", "assert median_sorted_arrays([1,1,1,1],[1,1,1,1])==1"]}
{"seq_id": 73979886265, "instruction": "Write a python function to check if a given string is a valid identifier in Python. A valid identifier starts with a letter (a-z, A-Z) or an underscore (_), followed by any number of letters, digits (0-9), or underscores.", "output": "Here is the code to solve this problem: \n```python\nimport keyword\n\ndef valid_identifier(s: str) -> bool:\n    if s[0].isdigit() or keyword.iskeyword(s):\n        return False\n    for char in s:\n        if not (char.isalpha() or char.isdigit() or char == '_'):\n            return False\n    return True\n```", "code": "import keyword\n\ndef valid_identifier(s: str) -> bool:\n    if s[0].isdigit() or keyword.iskeyword(s):\n        return False\n    for char in s:\n        if not (char.isalpha() or char.isdigit() or char == '_'):\n            return False\n    return True", "entry_point": "valid_identifier", "testcase": ["assert valid_identifier(\"my_variable1\") == True", "assert valid_identifier(\"_private_var\") == True", "assert valid_identifier(\"for\") == False # 'for' is a reserved keyword in Python", "assert valid_identifier(\"1st_variable\") == False"]}
{"seq_id": 18888667517, "instruction": "Write a function to find the k most frequent elements in a given list of numbers using dictionary and lambda function.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef k_frequent_elements(nums, k):\n    freq = Counter(nums)\n    result = list(dict(sorted(freq.items(), key=lambda item: item[1], reverse=True)).keys())\n    return result[:k]\n```", "code": "from collections import Counter\n\ndef k_frequent_elements(nums, k):\n    freq = Counter(nums)\n    result = list(dict(sorted(freq.items(), key=lambda item: item[1], reverse=True)).keys())\n    return result[:k]", "entry_point": "k_frequent_elements", "testcase": ["assert k_frequent_elements([1], 1)==[1]", "assert k_frequent_elements([1,1,1,2,2,3], 2)==[1, 2]", "assert k_frequent_elements([10,20,20,30,30,30], 2)==[30, 20]", "assert k_frequent_elements([4,1,-2,4,1,4], 3)==[4, 1, -2]", "assert k_frequent_elements([3,0,1,2,1,3,4,1], 2)==[1, 3]"]}
{"seq_id": 6570611767, "instruction": "Write a function to calculate the sum of the two largest numbers in a list of numbers.", "output": "Here is the code to solve this problem: \n```python\ndef sum_of_two_largest(numbers):\n    numbers.sort()\n    return numbers[-1] + numbers[-2]\n```", "code": "def sum_of_two_largest(numbers):\n    numbers.sort()\n    return numbers[-1] + numbers[-2]", "entry_point": "sum_of_two_largest", "testcase": ["assert sum_of_two_largest([1.5, 2.5, 3.5, 4.5, 5.5]) == 10.0", "assert sum_of_two_largest([1, 2, 3, 4, 5]) == 9", "assert sum_of_two_largest([100, 200, 300, 400, 500]) == 900"]}
{"seq_id": 1958986481, "instruction": "Write a python function to find the minimum number of swaps needed to sort a given list in ascending order.", "output": "Here is the code to solve this problem: \n```python\ndef minSwaps(nums):\n    n = len(nums)\n    ans = 0\n    temp = nums.copy()\n    temp.sort()\n    visited = {i:False for i in range(n)}\n\n    for i in range(n):\n        if visited[i] or temp[i] == nums[i]:\n            continue\n\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = temp.index(nums[j])\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans\n```", "code": "def minSwaps(nums):\n    n = len(nums)\n    ans = 0\n    temp = nums.copy()\n    temp.sort()\n    visited = {i:False for i in range(n)}\n\n    for i in range(n):\n        if visited[i] or temp[i] == nums[i]:\n            continue\n\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = temp.index(nums[j])\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans", "entry_point": "minSwaps", "testcase": ["assert minSwaps([2, 3, 4, 5, 1]) == 4", "assert minSwaps([7, 1, 3, 2, 4, 5, 6]) == 5", "assert minSwaps([1, 3, 5, 2, 4, 6, 7]) == 3"]}
{"seq_id": 14556865732, "instruction": "Write a function to find the duplicate elements in a list.", "output": "Here is the code to solve this problem: \n```python\ndef find_duplicates(lst):\n  return list(set([x for x in lst if lst.count(x) > 1]))\n```", "code": "def find_duplicates(lst):\n  return list(set([x for x in lst if lst.count(x) > 1]))", "entry_point": "find_duplicates", "testcase": ["assert find_duplicates([4, 5, 6, 7, 8, 4, 5, 6]) == [4, 5, 6]", "assert find_duplicates([10, 20, 30, 20, 10]) == [10, 20]", "assert find_duplicates([1, 2, 3, 2, 1, 5, 6, 5, 5, 5]) == [1, 2, 5]"]}
{"seq_id": 18647084924, "instruction": "Write a function to find the length of the longest subsequence in a given array where the difference between the maximum and minimum values is exactly 1.", "output": "Here is the code to solve this problem: \n```python\nfrom collections import Counter\n\ndef findLongestHarmoniousSubsequence(nums):\n    count = Counter(nums)\n    LHS = 0\n    lastKey = lastVal = None\n    for key, val in sorted(count.items()):\n        if lastKey is not None and lastKey + 1 == key:\n            LHS = max(LHS, val + lastVal)\n        lastKey, lastVal = key, val\n    return LHS\n```", "code": "from collections import Counter\n\ndef findLongestHarmoniousSubsequence(nums):\n    count = Counter(nums)\n    LHS = 0\n    lastKey = lastVal = None\n    for key, val in sorted(count.items()):\n        if lastKey is not None and lastKey + 1 == key:\n            LHS = max(LHS, val + lastVal)\n        lastKey, lastVal = key, val\n    return LHS", "entry_point": "findLongestHarmoniousSubsequence", "testcase": ["assert findLongestHarmoniousSubsequence([1,1,1,1])==0", "assert findLongestHarmoniousSubsequence([1,3,2,2,5,2,3,7])==5", "assert findLongestHarmoniousSubsequence([1,2,3,4,5])==2"]}
{"seq_id": 3455057304, "instruction": "Write a python function to find the kth smallest element in a given unsorted array using QuickSelect algorithm.", "output": "Here is the code to solve this problem: \n```python\ndef partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i + 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\ndef quickSelect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n\n    pivot_index = partition(arr, low, high)\n\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickSelect(arr, low, pivot_index - 1, k)\n    else:\n        return quickSelect(arr, pivot_index + 1, high, k)\n\ndef kthSmallestElement(arr, k):\n    return quickSelect(arr, 0, len(arr) - 1, k - 1)\n\narr = [12, 3, 5, 7, 19]\nk = 2\nprint(kthSmallestElement(arr, k))\n```", "code": "def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i + 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\ndef quickSelect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n\n    pivot_index = partition(arr, low, high)\n\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickSelect(arr, low, pivot_index - 1, k)\n    else:\n        return quickSelect(arr, pivot_index + 1, high, k)\n\ndef kthSmallestElement(arr, k):\n    return quickSelect(arr, 0, len(arr) - 1, k - 1)\n\narr = [12, 3, 5, 7, 19]\nk = 2\nprint(kthSmallestElement(arr, k))", "entry_point": "kthSmallestElement", "testcase": ["assert kthSmallestElement([7, 10, 4, 3, 3, 15], 2) == 3", "assert kthSmallestElement([7, 10, 4, 3, 20, 15], 3) == 7", "assert kthSmallestElement([1, 2, 3, 4, 5], 1) == 1"]}
{"seq_id": 73290000316, "instruction": "Write a function to find the number of divisors of a number.", "output": "Here is the code to solve this problem: \n```python\ndef numberOfDivisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```", "code": "def numberOfDivisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "entry_point": "numberOfDivisors", "testcase": ["assert numberOfDivisors(11) == 2", "assert numberOfDivisors(20) == 6", "assert numberOfDivisors(100) == 9"]}
{"seq_id": 31580228846, "instruction": "Write a function to find the most frequently occurring word in a given string.", "output": "Here is the code to solve this problem: \n```python\nimport re\nfrom collections import Counter\n\ndef most_frequent_word(text):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    most_common_word = Counter(words).most_common(1)[0][0]\n    return most_common_word\n```", "code": "import re\nfrom collections import Counter\n\ndef most_frequent_word(text):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    most_common_word = Counter(words).most_common(1)[0][0]\n    return most_common_word", "entry_point": "most_frequent_word", "testcase": ["assert most_frequent_word(\"This is a test string. Test this test string. Test.\") == \"test\"", "assert most_frequent_word(\"Hello, hello, how low?\") == \"hello\"", "assert most_frequent_word(\"It was the best of times, it was the worst of times.\") == \"it\""]}
{"seq_id": 13148152299, "instruction": "Write a function to find the nth ugly number. Ugly numbers are positive numbers whose prime factors only include 2, 3, and 5.", "output": "Here is the code to solve this problem: \n```python\ndef nthUglyNumber(n):\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n    \n    for i in range(1, n):\n        next_ugly = min(next_multiple_of_2, next_multiple_of_3, next_multiple_of_5)\n        ugly.append(next_ugly)\n        \n        if next_ugly == next_multiple_of_2:\n            i2 += 1\n            next_multiple_of_2 = ugly[i2] * 2\n        if next_ugly == next_multiple_of_3:\n            i3 += 1\n            next_multiple_of_3 = ugly[i3] * 3\n        if next_ugly == next_multiple_of_5:\n            i5 += 1\n            next_multiple_of_5 = ugly[i5] * 5\n            \n    return ugly[-1]\n```", "code": "def nthUglyNumber(n):\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n    \n    for i in range(1, n):\n        next_ugly = min(next_multiple_of_2, next_multiple_of_3, next_multiple_of_5)\n        ugly.append(next_ugly)\n        \n        if next_ugly == next_multiple_of_2:\n            i2 += 1\n            next_multiple_of_2 = ugly[i2] * 2\n        if next_ugly == next_multiple_of_3:\n            i3 += 1\n            next_multiple_of_3 = ugly[i3] * 3\n        if next_ugly == next_multiple_of_5:\n            i5 += 1\n            next_multiple_of_5 = ugly[i5] * 5\n            \n    return ugly[-1]", "entry_point": "nthUglyNumber", "testcase": ["assert nthUglyNumber(15) == 24", "assert nthUglyNumber(1) == 1", "assert nthUglyNumber(10) == 12"]}
{"seq_id": 25991621332, "instruction": "Write a python function to return the list of prime numbers within the given range.", "output": "Here is the code to solve this problem: \n```python\ndef find_prime_numbers(start, end):\n  prime_numbers = []\n  for num in range(start, end + 1):\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        prime_numbers.append(num)\n  return prime_numbers\n```", "code": "def find_prime_numbers(start, end):\n  prime_numbers = []\n  for num in range(start, end + 1):\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        prime_numbers.append(num)\n  return prime_numbers", "entry_point": "find_prime_numbers", "testcase": ["assert find_prime_numbers(10,30) == [11, 13, 17, 19, 23, 29]", "assert find_prime_numbers(2,10) == [2, 3, 5, 7]", "assert find_prime_numbers(5,20) == [5, 7, 11, 13, 17, 19]"]}
{"seq_id": 30241640807, "instruction": "Write a function to convert a given list of lists into a dictionary where the first element in each inner list is the key and the second element is the value. If the same key appears multiple times, append the values in a list.", "output": "Here is the code to solve this problem: \n```python\ndef convert_to_dict(lst):\n    result = {}\n    for item in lst:\n        key, value = item\n        if key in result:\n            if not isinstance(result[key], list):\n                result[key] = [result[key]]\n            result[key].append(value)\n        else:\n            result[key] = value\n    return result\n```", "code": "def convert_to_dict(lst):\n    result = {}\n    for item in lst:\n        key, value = item\n        if key in result:\n            if not isinstance(result[key], list):\n                result[key] = [result[key]]\n            result[key].append(value)\n        else:\n            result[key] = value\n    return result", "entry_point": "convert_to_dict", "testcase": ["assert convert_to_dict([['a', 1], ['a', 4], ['b', 2], ['c', 3]]) == {'a': [1, 4], 'b': 2, 'c': 3}", "assert convert_to_dict([['x', 10], ['y', 20], ['x', 30], ['z', 40]]) == {'x': [10, 30], 'y': 20, 'z': 40}", "assert convert_to_dict([['a', 1], ['b', 2], ['c', 3]]) == {'a': 1, 'b': 2, 'c': 3}"]}
{"seq_id": 42235583779, "instruction": "Write a python function to determine if a given word can be formed by concatenating the words in a list.", "output": "Here is the code to solve this problem: \n```python\ndef can_form_word(word_list, word):\n    dp = [False] * (len(word) + 1)\n    dp[0] = True\n\n    for i in range(1, len(word) + 1):\n        for j in range(i):\n            if dp[j] and word[j:i] in word_list:\n                dp[i] = True\n                break\n\n    return dp[len(word)]\n```", "code": "def can_form_word(word_list, word):\n    dp = [False] * (len(word) + 1)\n    dp[0] = True\n\n    for i in range(1, len(word) + 1):\n        for j in range(i):\n            if dp[j] and word[j:i] in word_list:\n                dp[i] = True\n                break\n\n    return dp[len(word)]", "entry_point": "can_form_word", "testcase": ["assert can_form_word(['cat', 'dog', 'tiger'], 'tigerdog') == True", "assert can_form_word(['cat', 'dog', 'tiger'], 'dogcat') == True", "assert can_form_word(['cat', 'dog', 'tiger'], 'catdogtiger') == True", "assert can_form_word(['cat', 'dog', 'tiger'], 'catdog') == True"]}
{"seq_id": 5415450201, "instruction": "Write a function that takes a string as input and returns a new string where each character is repeated twice in sequence.", "output": "Here is the code to solve this problem: \n```python\ndef double_characters(s):\n    result = \"\"\n    for char in s:\n        result += char * 2\n    return result\n```", "code": "def double_characters(s):\n    result = \"\"\n    for char in s:\n        result += char * 2\n    return result", "entry_point": "double_characters", "testcase": ["assert double_characters(\"hello\") == \"hheelllloo\"", "assert double_characters(\"1234!_ \") == \"11223344!!__  \"", "assert double_characters(\"world\") == \"wwoorrlldd\""]}
{"seq_id": 41048835266, "instruction": "Write a python function to find the number of subarrays with a given sum in an array.", "output": "Here is the code to solve this problem: \n```python\ndef subarray_Sum(nums, k):\n    count, current_sum = 0, 0\n    sum_dict = {0: 1}\n    for num in nums:\n        current_sum += num\n        if current_sum - k in sum_dict:\n            count += sum_dict[current_sum - k]\n        if current_sum in sum_dict:\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n    return count\n```", "code": "def subarray_Sum(nums, k):\n    count, current_sum = 0, 0\n    sum_dict = {0: 1}\n    for num in nums:\n        current_sum += num\n        if current_sum - k in sum_dict:\n            count += sum_dict[current_sum - k]\n        if current_sum in sum_dict:\n            sum_dict[current_sum] += 1\n        else:\n            sum_dict[current_sum] = 1\n    return count", "entry_point": "subarray_Sum", "testcase": ["assert subarray_Sum([1, 2, 3], 3) == 2", "assert subarray_Sum([1, 2, 3], 7) == 0", "assert subarray_Sum([1, 1, 1], 2) == 2"]}
{"seq_id": 10945497654, "instruction": "Write a function to convert a string from snake_case to camelCase.", "output": "Here is the code to solve this problem: \n```python\ndef convert_snake_to_camel(s: str) -> str:\n    components = s.split('_')\n    # Capitalize the first letter of each component except the first one\n    # Then join them together\n    return components[0] + ''.join(x.title() for x in components[1:])\n\n# Test cases\nassert convert_snake_to_camel(\"this_is_a_test_string\") == \"thisIsATestString\"\nassert convert_snake_to_camel(\"snake_case_to_camel_case\") == \"snakeCaseToCamelCase\"\nassert convert_snake_to_camel(\"example_snake_case\") == \"exampleSnakeCase\"\n```", "code": "def convert_snake_to_camel(s: str) -> str:\n    components = s.split('_')\n    # Capitalize the first letter of each component except the first one\n    # Then join them together\n    return components[0] + ''.join(x.title() for x in components[1:])\n\n# Test cases\nassert convert_snake_to_camel(\"this_is_a_test_string\") == \"thisIsATestString\"\nassert convert_snake_to_camel(\"snake_case_to_camel_case\") == \"snakeCaseToCamelCase\"\nassert convert_snake_to_camel(\"example_snake_case\") == \"exampleSnakeCase\"", "entry_point": "convert_snake_to_camel", "testcase": ["assert convert_snake_to_camel(\"this_is_a_test_string\") == \"thisIsATestString\"", "assert convert_snake_to_camel(\"snake_case_to_camel_case\") == \"snakeCaseToCamelCase\"", "assert convert_snake_to_camel(\"example_snake_case\") == \"exampleSnakeCase\""]}
{"seq_id": 29210801411, "instruction": "Write a python function to find the kth largest element in a given unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.", "output": "Here is the code to solve this problem: \n```python\nimport heapq\n\ndef find_Kth_Largest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.heappop(heap)\n```", "code": "import heapq\n\ndef find_Kth_Largest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.heappop(heap)", "entry_point": "find_Kth_Largest", "testcase": ["assert find_Kth_Largest([3,2,1], 1) == 3", "assert find_Kth_Largest([3,2,1,5,6,4], 2) == 5", "assert find_Kth_Largest([3,2,3,1,2,4,5,5,6], 4) == 4"]}
{"seq_id": 11954784935, "instruction": "Create a function to find the number of ways to reach the last cell of a grid from the first cell using only allowed movements (right and down).", "output": "Here is the code to solve this problem: \n```python\ndef grid_paths(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return grid_paths(m-1, n) + grid_paths(m, n-1)\n```", "code": "def grid_paths(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return grid_paths(m-1, n) + grid_paths(m, n-1)", "entry_point": "grid_paths", "testcase": ["assert grid_paths(2, 2) == 2", "assert grid_paths(3, 3) == 6", "assert grid_paths(4, 4) == 20"]}
{"seq_id": 18405876437, "instruction": "Write a Python function that calculates the number of unique combinations of climbing a staircase when you can either take 1 step, 2 steps, ..., up to k steps at a time.", "output": "Here is the code to solve this problem: \n```python\ndef num_ways_to_climb(n, k):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for step in range(1, k + 1):\n        ways += num_ways_to_climb(n - step, k)\n    return ways\n```", "code": "def num_ways_to_climb(n, k):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for step in range(1, k + 1):\n        ways += num_ways_to_climb(n - step, k)\n    return ways", "entry_point": "num_ways_to_climb", "testcase": ["assert num_ways_to_climb(5, 2) == 8", "assert num_ways_to_climb(3, 2) == 3", "assert num_ways_to_climb(4, 3) == 7"]}
{"seq_id": 338650958, "instruction": "Write a function to calculate the total time spent in traffic based on the time series of cars entering and exiting a traffic jam, and the duration of the traffic jam. The function should take a list of non-decreasing integers representing the time at which cars enter the traffic jam, and an integer representing the duration of the traffic jam. The function should return the total time spent in traffic by all cars.\n\nThe function should be designed to handle cases where cars enter and exit the traffic jam during the same time frame.", "output": "Here is the code to solve this problem: \n```python\ndef calculate_traffic_time(timeSeries, duration):\n    \"\"\"\n    Calculate total time spent in traffic based on time series of cars entering and exiting a traffic jam,\n    and the duration of the traffic jam.\n    \"\"\"\n    total_time = 0\n    if len(timeSeries) >= 1:\n        for i in range(1, len(timeSeries)):\n            delta = timeSeries[i] - timeSeries[i - 1]\n            if delta >= duration:\n                total_time += duration\n            else:\n                total_time += delta\n        total_time += duration\n    else:\n        total_time = duration\n    return total_time\n```", "code": "def calculate_traffic_time(timeSeries, duration):\n    \"\"\"\n    Calculate total time spent in traffic based on time series of cars entering and exiting a traffic jam,\n    and the duration of the traffic jam.\n    \"\"\"\n    total_time = 0\n    if len(timeSeries) >= 1:\n        for i in range(1, len(timeSeries)):\n            delta = timeSeries[i] - timeSeries[i - 1]\n            if delta >= duration:\n                total_time += duration\n            else:\n                total_time += delta\n        total_time += duration\n    else:\n        total_time = duration\n    return total_time", "entry_point": "calculate_traffic_time", "testcase": ["assert calculate_traffic_time([1, 3, 4, 6, 7], 2) == 8", "assert calculate_traffic_time([1, 2, 3, 4, 5, 6], 1) == 6", "assert calculate_traffic_time([2], 5) == 5"]}
{"seq_id": 41715052149, "instruction": "Write a function to find the number of occurrences of an element in a sorted array using binary search.", "output": "Here is the code to solve this problem: \n```python\ndef count_occurrences(A, x):\n    def find_leftmost():\n        left, right = 0, len(A) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid\n        return left if A[left] == x else -1\n\n    def find_rightmost():\n        left, right = 0, len(A) - 1\n        while left < right:\n            mid = left + (right - left + 1) // 2\n            if A[mid] > x:\n                right = mid - 1\n            else:\n                left = mid\n        return left if A[left] == x else -1\n\n    leftmost = find_leftmost()\n    if leftmost == -1:\n        return 0\n    rightmost = find_rightmost()\n    return rightmost - leftmost + 1\n```", "code": "def count_occurrences(A, x):\n    def find_leftmost():\n        left, right = 0, len(A) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid\n        return left if A[left] == x else -1\n\n    def find_rightmost():\n        left, right = 0, len(A) - 1\n        while left < right:\n            mid = left + (right - left + 1) // 2\n            if A[mid] > x:\n                right = mid - 1\n            else:\n                left = mid\n        return left if A[left] == x else -1\n\n    leftmost = find_leftmost()\n    if leftmost == -1:\n        return 0\n    rightmost = find_rightmost()\n    return rightmost - leftmost + 1", "entry_point": "count_occurrences", "testcase": ["assert count_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3) == 3", "assert count_occurrences([1, 1, 2, 2, 2, 3, 4, 4, 4, 4], 2) == 3", "assert count_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 1"]}
{"seq_id": 14127987306, "instruction": "Write a python function to find the smallest positive integer that is missing from a given unsorted array.", "output": "Here is the code to solve this problem: \n```python\ndef missing_integer(arr):\n    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1\n```", "code": "def missing_integer(arr):\n    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1", "entry_point": "missing_integer", "testcase": ["assert missing_integer([1, 2, 0]) == 3", "assert missing_integer([-1, -2, -3]) == 1", "assert missing_integer([3, 4, -1, 1]) == 2"]}
{"seq_id": 22559912591, "instruction": "Write a function to find the number of ways to make change for a given amount using a set of coin denominations.", "output": "Here is the code to solve this problem: \n```python\ndef count_change(amount, coins):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for c in coins:\n        for x in range(c, amount + 1):\n            dp[x] += dp[x - c]\n    return dp[-1]\n```", "code": "def count_change(amount, coins):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for c in coins:\n        for x in range(c, amount + 1):\n            dp[x] += dp[x - c]\n    return dp[-1]", "entry_point": "count_change", "testcase": ["assert count_change(5, [1, 2, 5]) == 4", "assert count_change(3, [2]) == 0", "assert count_change(10, [10]) == 1"]}
{"seq_id": 31261975138, "instruction": "Write a python function to check if a given number is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself).", "output": "Here is the code to solve this problem: \n```python\nimport math\n\ndef checkPerfectNumber(num: int) -> bool:\n    check=0\n    for i in range(1,int(math.sqrt(num))+1):\n        if num%i==0:\n            check+=i\n            if i*i!=num:\n                check+=num/i\n    return num==check//2\n```", "code": "import math\n\ndef checkPerfectNumber(num: int) -> bool:\n    check=0\n    for i in range(1,int(math.sqrt(num))+1):\n        if num%i==0:\n            check+=i\n            if i*i!=num:\n                check+=num/i\n    return num==check//2", "entry_point": "checkPerfectNumber", "testcase": ["assert checkPerfectNumber(97) == False", "assert checkPerfectNumber(6) == True", "assert checkPerfectNumber(28) == True", "assert checkPerfectNumber(12) == False", "assert checkPerfectNumber(496) == True"]}
{"seq_id": 25628558930, "instruction": "Write a function that takes a list of integers and returns a new list where all elements are the product of all other elements except for the element at the current index. The function should not use division and should have a time complexity of O(n).\n\nFor example:\n```\nInput: [1, 2, 3, 4]\nOutput: [24, 12, 8, 6]\nExplanation: The product of all elements except for the current index is:\n- For [1, 2, 3, 4]: [2*3*4, 1*3*4, 1*2*4, 1*2*3] = [24, 12, 8, 6]\n```", "output": "Here is the code to solve this problem: \n```python\ndef product_except_self(nums):\n    length = len(nums)\n    answer = [1] * length\n\n    answer[0] = 1\n    for i in range(1, length):\n        answer[i] = nums[i - 1] * answer[i - 1]\n\n    R = 1\n    for i in reversed(range(length)):\n        answer[i] = answer[i] * R\n        R *= nums[i]\n\n    return answer\n```", "code": "def product_except_self(nums):\n    length = len(nums)\n    answer = [1] * length\n\n    answer[0] = 1\n    for i in range(1, length):\n        answer[i] = nums[i - 1] * answer[i - 1]\n\n    R = 1\n    for i in reversed(range(length)):\n        answer[i] = answer[i] * R\n        R *= nums[i]\n\n    return answer", "entry_point": "product_except_self", "testcase": ["assert product_except_self([2, 3, 4]) == [12, 8, 6]", "assert product_except_self([-1, 1, 0, -3, 3]) == [0, 0, 9, 0, 0]", "assert product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6]"]}